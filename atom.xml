<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SmalleBlog | AEZOCN</title>
  <subtitle>Better Code,Better Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.aezo.cn/"/>
  <updated>2017-10-22T11:00:01.128Z</updated>
  <id>http://blog.aezo.cn/</id>
  
  <author>
    <name>Smalle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring-security</title>
    <link href="http://blog.aezo.cn/2017/10/22/java/spring-security/"/>
    <id>http://blog.aezo.cn/2017/10/22/java/spring-security/</id>
    <published>2017-10-22T03:15:00.000Z</published>
    <updated>2017-10-22T11:00:01.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>官网：<a href="http://projects.spring.io/spring-security/" target="_blank" rel="external">http://projects.spring.io/spring-security/</a></li>
<li>文档：<a href="https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/" target="_blank" rel="external">V4.2.3</a></li>
<li>引入spring security后便有了session机制</li>
</ul>
<h3 id="spring-security实现方法-1"><a href="#spring-security实现方法-1" class="headerlink" title="spring security实现方法 [^1]"></a>spring security实现方法 [^1]</h3><ul>
<li>总共有四种用法，从简到深为<ul>
<li>不用数据库，全部数据写在配置文件，这个也是官方文档里面的demo</li>
<li>使用数据库，根据spring security默认实现代码设计数据库，也就是说数据库已经固定了，这种方法不灵活，而且那个数据库设计得很简陋，实用性差</li>
<li>spring security和Acegi不同，它不能修改默认filter了，但支持插入filter，所以根据这个，我们可以插入自己的filter来灵活使用<strong>（可基于此数据库结构进行自定义参数认证）</strong></li>
<li>暴力手段，修改源码，前面说的修改默认filter只是修改配置文件以替换filter而已，这种是直接改了里面的源码，但是这种不符合OO设计原则，而且不实际，不可用</li>
</ul>
</li>
</ul>
<h2 id="springboot整合"><a href="#springboot整合" class="headerlink" title="springboot整合"></a>springboot整合</h2><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring-Security --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p>SpringSecurityConfig 访问权限规则设置</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        auth.inMemoryAuthentication()</div><div class="line">            .withUser(<span class="string">"admin"</span>).password(<span class="string">"admin"</span>).roles(<span class="string">"ADMIN"</span>) <span class="comment">// 在内存中定义用户名密码为admin/admin, 角色为ADMIN的用户(用于登录和权限判断)</span></div><div class="line">            .and()</div><div class="line">            .withUser(<span class="string">"user"</span>).password(<span class="string">"user"</span>).roles(<span class="string">"USER"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义权限规则</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        http.headers().frameOptions().disable(); <span class="comment">// 解决spring boot项目中出现不能加载iframe</span></div><div class="line">        http.csrf().disable()</div><div class="line">            .authorizeRequests()</div><div class="line">                .antMatchers(<span class="string">"/manage/"</span>, <span class="string">"/manage/home"</span>, <span class="string">"/manage/about"</span>, <span class="string">"/manage/404"</span>, <span class="string">"/manage/403"</span>, <span class="string">"/thymeleaf/**"</span>).permitAll() <span class="comment">// 这些端点不进行权限验证</span></div><div class="line">                .antMatchers(<span class="string">"/resources/**"</span>).permitAll() <span class="comment">// idea的resources/static目录下的文件夹对应一个端点，相当于可以访问resources/static/resources/下所有文件（还有一些默认的端点：/css/**、/js/**、/images/**、/webjars/**、/**/favicon.ico）</span></div><div class="line">                .antMatchers(<span class="string">"/manage/**"</span>).hasAnyRole(<span class="string">"ADMIN"</span>) <span class="comment">// 需要有ADMIN角色才可访问/admin</span></div><div class="line">                .antMatchers(<span class="string">"/user/**"</span>).hasAnyRole(<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>) <span class="comment">// 有USER/ADMIN角色均可</span></div><div class="line">                .anyRequest().authenticated() <span class="comment">// (除上述忽略请求)所有的请求都需要权限认证</span></div><div class="line">                .and()</div><div class="line">            .formLogin()</div><div class="line">                .loginPage(<span class="string">"/manage/login"</span>).permitAll() <span class="comment">// 登录界面(Get)和登录处理方法(Post). 登录成功后，如果从登录界面登录则跳到项目主页(http://localhost:9526)，如果从其他页面跳转到登录页面进行登录则成功后跳转到原始页面</span></div><div class="line">                .and()</div><div class="line">            .logout().permitAll() <span class="comment">// 默认访问/logout(Get)即可登出</span></div><div class="line">                .and()</div><div class="line">            .exceptionHandling().accessDeniedHandler(accessDeniedHandler);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>AccessDeniedHandler访问受限拦截</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(MyAccessDeniedHandler.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></div><div class="line">                    HttpServletResponse httpServletResponse,</div><div class="line">                    AccessDeniedException e) <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line"></div><div class="line">        Authentication auth = SecurityContextHolder.getContext().getAuthentication();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (auth != <span class="keyword">null</span>) &#123;</div><div class="line">            logger.info(<span class="string">"用户 '"</span> + auth.getName() + <span class="string">"' 试图访问受保护的 URL: "</span> + httpServletRequest.getRequestURI());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"auth = "</span> + auth);</div><div class="line">        httpServletResponse.sendRedirect(<span class="string">"/manage/403"</span>); <span class="comment">// 跳转到403页面</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="示例扩展"><a href="#示例扩展" class="headerlink" title="示例扩展"></a>示例扩展</h3><ul>
<li>此示例使用数据库用户名/密码(或扩展验证)进行用户登录验证，并且对登录成功做处理，资源权限控制</li>
<li><p>SpringSecurityConfig 访问权限规则设置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableGlobalMethodSecurity(prePostEnabled=true) // 开启方法级别权限控制</div><div class="line">public class SpringSecurityConfig extends WebSecurityConfigurerAdapter &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private CustomAuthenticationProvider authProvider; // 提供认证算法(判断是否登录成功)(1)</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private AuthenticationDetailsSource&lt;HttpServletRequest, WebAuthenticationDetails&gt; authenticationDetailsSource; // 认证信息</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private AuthenticationSuccessHandler authenticationSuccessHandler; // 用于处理登录成功(2)</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private AuthenticationFailureHandler authenticationFailureHandler; // 用于处理登录失败(2)</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private AccessDeniedHandler accessDeniedHandler; // 用于处理无权访问 (3)</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception &#123;</div><div class="line">        auth.authenticationProvider(authProvider);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 定义权限规则</div><div class="line">    @Override</div><div class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</div><div class="line">        http.headers().frameOptions().disable(); // 解决spring boot项目中出现不能加载iframe</div><div class="line">        http.csrf().disable()</div><div class="line">            .authorizeRequests()</div><div class="line">                .antMatchers(&quot;/manage/&quot;, &quot;/manage/home&quot;, &quot;/manage/about&quot;, &quot;/manage/404&quot;, &quot;/manage/403&quot;, &quot;/thymeleaf/**&quot;).permitAll() // 这些端点不进行权限验证</div><div class="line">                .antMatchers(&quot;/resources/**&quot;).permitAll() // idea的resources/static目录下的文件夹对应一个端点，相当于可以访问resources/static/resources/下所有文件（还有一些默认的端点：/css/**、/js/**、/images/**、/webjars/**、/**/favicon.ico）</div><div class="line">                .antMatchers(&quot;/manage/**&quot;).hasAnyRole(&quot;ADMIN&quot;) // 需要有ADMIN角色才可访问/admin（有先后顺序，前面先定义的优先级高，因此比antMatchers(&quot;/**&quot;).hasAnyRole(&quot;USER&quot;, &quot;ADMIN&quot;)优先级高）</div><div class="line">                .antMatchers(&quot;/**&quot;).hasAnyRole(&quot;USER&quot;, &quot;ADMIN&quot;) // 有USER/ADMIN角色均可</div><div class="line">                .anyRequest().authenticated() // (除上述忽略请求)所有的请求都需要权限认证</div><div class="line">                .and()</div><div class="line">            .formLogin()</div><div class="line">                .loginPage(&quot;/manage/login&quot;).permitAll() // 登录界面(Get)和登录处理方法(Post). 登录成功后，如果从登录界面登录则跳到项目主页(http://localhost:9526)，如果从其他页面跳转到登录页面进行登录则成功后跳转到原始页面</div><div class="line">                .loginProcessingUrl(&quot;/manage/login&quot;) // 或者通配符/**/login拦截对&quot;/manage/login&quot;和&quot;/login&quot;等</div><div class="line">                .successHandler(authenticationSuccessHandler)</div><div class="line">                .failureHandler(authenticationFailureHandler)</div><div class="line">                .authenticationDetailsSource(authenticationDetailsSource)</div><div class="line">                .and()</div><div class="line">            .logout().permitAll() // 默认访问/logout(Get)即可登出</div><div class="line">                .and()</div><div class="line">            .exceptionHandling().accessDeniedHandler(accessDeniedHandler);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义登录认证字段(spring security默认基于username/password完成)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomWebAuthenticationDetails</span> <span class="keyword">extends</span> <span class="title">WebAuthenticationDetails</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String wxCode; <span class="comment">// 此处为微信公众号使用微信code进行认证，也可扩展邮箱/手机号等</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomWebAuthenticationDetails</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(request);</div><div class="line">        wxCode = request.getParameter(<span class="string">"wxCode"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWxCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> wxCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        sb.append(<span class="keyword">super</span>.toString()).append(<span class="string">"; wxCode: "</span>).append(<span class="keyword">this</span>.getWxCode());</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将自定义登录认证字段加入到认证数据源</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationDetailsSource</span> <span class="keyword">implements</span> <span class="title">AuthenticationDetailsSource</span>&lt;<span class="title">HttpServletRequest</span>, <span class="title">WebAuthenticationDetails</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> WebAuthenticationDetails <span class="title">buildDetails</span><span class="params">(HttpServletRequest context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomWebAuthenticationDetails(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>根据用户唯一字段(如username、wxCode)获取用户信息</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomUserDetailsService</span><span class="params">(UserDao userDao)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 根据自定义登录认证字段获取用户信息。此处简化微信公众号认证(原本需要先拿到openid)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByWxCode</span><span class="params">(String wxCode)</span></span></div><div class="line">            <span class="keyword">throws</span> UsernameNotFoundException &#123;</div><div class="line">        <span class="keyword">if</span>(wxCode == <span class="keyword">null</span> || <span class="string">""</span>.equals(wxCode)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"invalid wxCode "</span> + wxCode);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        User user = userDao.findByWxCode(wxCode);</div><div class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"Could not find user, user wxCode "</span> + wxCode);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomUserDetails(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 默认根据username(唯一)获取用户信息</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span></span></div><div class="line">            <span class="keyword">throws</span> UsernameNotFoundException &#123;</div><div class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span> || <span class="string">""</span>.equals(username)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"invalid username "</span> + username);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        User user = userDao.findByUsername(username);</div><div class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"Could not find user "</span> + username);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomUserDetails(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 自定义用户认证Model</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetails</span> <span class="keyword">extends</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">CustomUserDetails</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(user);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</div><div class="line">            <span class="keyword">return</span> AuthorityUtils.createAuthorityList(<span class="string">"ROLE_"</span> + <span class="keyword">this</span>.getRoleCode()); <span class="comment">// 组成如：ROLE_ADMIN/ROLE_USER，在资源权限定义时写法如：hasRole('ADMIN')</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5639683223516504866L</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>(1) 基于自定义登录认证字段，提供登录算法(返回认证对象Authentication)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CustomUserDetailsService customUserDetailsService;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomAuthenticationProvider</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(<span class="keyword">final</span> Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">        CustomWebAuthenticationDetails details = (CustomWebAuthenticationDetails) authentication.getDetails();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> String wxCode = details.getWxCode();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> String username = authentication.getName();</div><div class="line">        <span class="keyword">final</span> String password = authentication.getCredentials().toString();</div><div class="line"></div><div class="line">        UserDetails userDetails = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(username) &amp;&amp; !StringUtils.isEmpty(password)) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                userDetails = customUserDetailsService.loadUserByUsername(username);</div><div class="line">            &#125; <span class="keyword">catch</span> (UsernameNotFoundException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!StringUtils.isEmpty(wxCode)) &#123;</div><div class="line">            userDetails = customUserDetailsService.loadUserByWxCode(wxCode);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid params: username,password and wxCode are invalid"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(userDetails != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> List&lt;GrantedAuthority&gt; grantedAuths = (List&lt;GrantedAuthority&gt;) userDetails.getAuthorities();</div><div class="line">            <span class="keyword">final</span> Authentication auth = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(userDetails, password, grantedAuths);</div><div class="line">            <span class="keyword">return</span> auth;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; authentication)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> authentication.equals(UsernamePasswordAuthenticationToken.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>(2)登录校验完成拦截：登录成功/失败处理</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFinishHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(LoginFinishHandler.class);</div><div class="line"></div><div class="line">    <span class="meta">@Component</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">            CustomWebAuthenticationDetails details = (CustomWebAuthenticationDetails) authentication.getDetails();</div><div class="line">            String wxCode = details.getWxCode();</div><div class="line"></div><div class="line">            HttpSession session = httpServletRequest.getSession();</div><div class="line">            User user = (User) authentication.getPrincipal();</div><div class="line">            session.setAttribute(<span class="string">"SESSION_USER_INFO"</span>, user);</div><div class="line"></div><div class="line">            logger.info(<span class="string">"&#123;&#125; 登录成功"</span>, user.getUsername());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Component</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationFailureHandler</span> <span class="keyword">extends</span> <span class="title">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">            logger.info(<span class="string">"登录失败"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>(3)AccessDeniedHandler访问受限拦截同上例</p>
</li>
</ul>
<h3 id="在方法-资源-上加权限控制"><a href="#在方法-资源-上加权限控制" class="headerlink" title="在方法(资源)上加权限控制"></a>在方法(资源)上加权限控制</h3><ul>
<li>需要权限配置类上加注解<code>@EnableGlobalMethodSecurity(prePostEnabled=true)</code>，标识开启方法级别prePostEnabled权限控制，还可以开启其他控制</li>
<li><p>使用</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Controller.java</span></div><div class="line"><span class="comment">// @PreAuthorize("hasRole('ADMIN')") // 可使用自定义注解@HasAdminRole进行封装(可组合更复杂的权限注解)</span></div><div class="line"><span class="meta">@HasAdminRole</span></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/adminRole"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">adminRole</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"/adminRole"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// HasAdminRole.java</span></div><div class="line"><span class="comment">// 自定义权限注解，被@HasAdminRole注解的方法需要有ADMIN角色</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('ADMIN')"</span>)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HasAdminRole &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>[^1]: <a href="http://www.importnew.com/20612.html" target="_blank" rel="external">spring security的原理及教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;http://projects.spring.io/spring-security/&quot; target=&quot;
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="spring" scheme="http://blog.aezo.cn/tags/spring/"/>
    
      <category term="springboot" scheme="http://blog.aezo.cn/tags/springboot/"/>
    
      <category term="springsecurity" scheme="http://blog.aezo.cn/tags/springsecurity/"/>
    
  </entry>
  
  <entry>
    <title>h2数据库</title>
    <link href="http://blog.aezo.cn/2017/10/21/db/h2/"/>
    <id>http://blog.aezo.cn/2017/10/21/db/h2/</id>
    <published>2017-10-21T02:42:00.000Z</published>
    <updated>2017-10-22T03:11:42.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>h2简介 <a href="[h2介绍](http://412887952-qq-com.iteye.com/blog/2322756)">^1</a>：内存数据库（Embedded database或in-momery database）具有配置简单、启动速度快、尤其是其可测试性等优点，使其成为开发过程中非常有用的轻量级数据库。在spring中支持HSQL、H2和Derby三种数据库</li>
<li><a href="http://h2database.com/html/main.html" target="_blank" rel="external">官网：http://h2database.com/html/main.html</a>\</li>
</ul>
<h2 id="springboot整合"><a href="#springboot整合" class="headerlink" title="springboot整合"></a>springboot整合</h2><ul>
<li><p>添加依赖(jpa等省略)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.h2database&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;h2&lt;/artifactId&gt;</div><div class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>连接配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">    datasource:</div><div class="line">    # 用户名密码会根据填写的生成(默认生成的用户名为sa, 密码为空)</div><div class="line">    url: jdbc:h2:~/.h2/minions;AUTO_SERVER=true;</div><div class="line">    # 用户名密码会根据填写的生成(默认生成的用户名为sa, 密码为空).</div><div class="line">    # 如果已经生成了数据库文件(同时也生成了密码), 那么再修改此处用户名密码将无法连接数据库</div><div class="line">    username: sa</div><div class="line">    password: sa</div><div class="line">    driver-class-name: org.h2.Driver</div><div class="line"># h2 web console</div><div class="line"># 登录配置Generic H2 (Server)  jdbc:h2:~/.h2/minions;AUTO_SERVER=true;  sa/sa</div><div class="line"># 推荐使用IDEA的数据库工具</div><div class="line">#  h2:</div><div class="line">#    console:</div><div class="line">#      # 程序开启时就会启动h2 web consloe</div><div class="line">#      enabled: true</div><div class="line">#      # 访问路径: http://localhost:$&#123;server.port&#125;/h2-console</div><div class="line">#      path: /h2-console</div><div class="line">#      settings:</div><div class="line">#        # 运行远程访问h2 web consloe</div><div class="line">#        web-allow-others: true</div></pre></td></tr></table></figure>
</li>
<li><p>配置说明</p>
<ul>
<li><code>jdbc:h2:file:~/.h2/minions;</code>文件型存储(默认可省略file:). <code>jdbc:h2:minions;</code>则代表在当前目录(运行h2 jar的位置)生成数据库文件</li>
<li><code>jdbc:h2:mem:my_db_name;</code>内存型存储(在连接的瞬间即可创建数据库)，程序关掉则内存数据丢失</li>
<li><code>~</code> 这个符号代表的就是当前登录到操作系统的用户对应的用户目录. <code>minions</code>代表数据库名(会在~/.h2目录生成minions.mv.db文件)</li>
<li><code>AUTO_SERVER=true;</code>表示以TCP服务形式启动数据库. 否则项目启动(数据库启动)后, idea无法连接数据库(<code>AUTO_SERVER_PORT=9092;</code>可指明端口, 不指明会的话自动识别)</li>
</ul>
</li>
<li>IDEA数据库工具使用 <a href="[idea连接h2](https://stackoverflow.com/questions/31498682/spring-boot-intellij-embedded-database-headache)">^2</a><ul>
<li>Url: <code>jdbc:h2:~/.h2/minions;AUTO_SERVER=true;</code></li>
<li>Url类型：<code>Remote</code></li>
<li>用户名/密码：<code>sa/sa</code></li>
<li>其他都不需要填写(url处可能报红可忽略)</li>
</ul>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;h2简介 &lt;a href=&quot;[h2介绍](http://412887952-qq-com.iteye.com/blog/2322
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="db" scheme="http://blog.aezo.cn/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>行业概念</title>
    <link href="http://blog.aezo.cn/2017/10/12/others/business-conception/"/>
    <id>http://blog.aezo.cn/2017/10/12/others/business-conception/</id>
    <published>2017-10-12T03:22:00.000Z</published>
    <updated>2017-10-12T03:22:17.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><ul>
<li><code>ERP</code> 企业资源计划(Enterprise Resource Planning)</li>
</ul>
<h2 id="物流"><a href="#物流" class="headerlink" title="物流"></a>物流</h2><ul>
<li><code>WMS</code> 仓库管理系统(Warehouse Management System)</li>
<li><code>MES</code> 制造执行系统(Manufacturing Execution System) <a href="[MES七大功能-MES解决方案](https://wenku.baidu.com/view/1627cd0a844769eae009edfe.html)">^1</a><ul>
<li>功能：库房管理、生产调度、制造过程管理、质量管理、设备工装管理、文档管理、物料批次跟踪</li>
</ul>
</li>
</ul>
<h2 id="营销-运营"><a href="#营销-运营" class="headerlink" title="营销/运营"></a>营销/运营</h2><ul>
<li><code>MVP</code> 最小价值产品或最小可视化产品(Minimal Viable Product) <a href="[MVP是什么](https://www.zhihu.com/question/47489768?from=profile_question_card)">^2</a></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;通用&quot;&gt;&lt;a href=&quot;#通用&quot; class=&quot;headerlink&quot; title=&quot;通用&quot;&gt;&lt;/a&gt;通用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ERP&lt;/code&gt; 企业资源计划(Enterprise Resource Planning)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="others" scheme="http://blog.aezo.cn/categories/others/"/>
    
    
      <category term="business" scheme="http://blog.aezo.cn/tags/business/"/>
    
      <category term="conception" scheme="http://blog.aezo.cn/tags/conception/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透</title>
    <link href="http://blog.aezo.cn/2017/10/09/extend/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>http://blog.aezo.cn/2017/10/09/extend/内网穿透/</id>
    <published>2017-10-09T12:18:00.000Z</published>
    <updated>2017-10-09T13:50:29.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>内网穿透，即NAT穿透，让外网用户可通过公网ip访问到内网服务。有时想要让其他人通过域名访问或者测试我们在本地搭建的 web 服务，但是由于本地机器没有公网 IP，无法将域名解析到本地的机器，通过内网穿透就可以实现这一功能</li>
<li>常见的内网穿透工具如ngrok(二级域名每次启动会变化)、花生壳(需要支付8元)、NATAPP(和ngrok类似，2-3天会更新二级域名)。当然本文不不会介绍这些xx.</li>
<li>本文介绍的内网穿透工具：frp。(内网穿透仍然需要一台公网IP的服务器，如阿里云服务器)</li>
</ul>
<h2 id="frp实现内网穿透"><a href="#frp实现内网穿透" class="headerlink" title="frp实现内网穿透"></a>frp实现内网穿透</h2><h3 id="frp介绍"><a href="#frp介绍" class="headerlink" title="frp介绍"></a>frp介绍</h3><ul>
<li>开源项目，支持<code>TCP</code>、<code>UDP</code>、<code>HTTP</code>、<code>HTTPS</code>，支持自定义域名绑定</li>
<li><a href="https://github.com/fatedier/frp" target="_blank" rel="external">github链接</a>、<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="external">中文文档</a></li>
</ul>
<h3 id="frp使用"><a href="#frp使用" class="headerlink" title="frp使用"></a>frp使用</h3><blockquote>
<ul>
<li>本文配合nginx使用(本文公网服务器不是主要用于内网穿透，且解析了多个域名，所以有些端口，如80被占用)</li>
<li>本文以微信公众号H5开发为例(微信H5开发需要绑定回调地址，此回调地址必须是备案的域名，因此本地开发比较麻烦故使用内网穿透解决)</li>
</ul>
</blockquote>
<ul>
<li>下载最新frp版本，本文使用<code>v0.13.0</code><ul>
<li>需要下载公网IP服务器(以下简称”服务器”)适用版(如<code>frp_0.13.0_linux_amd64.tar.gz</code>)和本地适用版(如<code>frp_0.13.0_windows_amd64.zip</code>)</li>
</ul>
</li>
<li><p>服务端</p>
<ul>
<li>解压后含有<code>frps.ini</code>(配置文件)、<code>frps</code>(可执行文件)</li>
<li><p>对<code>frps.ini</code>进行配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[common]</div><div class="line">bind_port = 7000</div><div class="line"># 使用泛域名*.frp.aezo.cn(需要将*.frp解析到此服务器)，此配置可忽略</div><div class="line">subdomain_host = frp.aezo.cn</div><div class="line"># 访问本地服务需要映射公网ip的端口</div><div class="line">vhost_http_port = 7070</div><div class="line"></div><div class="line"># dashboard(后台可视化管理)访问地址和用户名密码</div><div class="line">dashboard_port = 7500</div><div class="line">dashboard_user = smalle</div><div class="line">dashboard_pwd = smalle</div></pre></td></tr></table></figure>
</li>
<li><p>后台运行frp服务端：<code>nohup sudo -b ./frps &gt; my.log 2&gt;&amp;1 &amp;</code></p>
</li>
<li>服务器将开放相应端口：<strong>7000、7070、7050(入)；7000(出)</strong></li>
<li><p>服务器nginx配置如下</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen  <span class="number">80</span>;</div><div class="line">	server_name test.aezo.cn;</div><div class="line"></div><div class="line">	location / &#123;</div><div class="line">    		proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</div><div class="line">    		proxy_set_header Host $http_host;</div><div class="line">    		proxy_redirect off;</div><div class="line">    		<span class="keyword">if</span> (!-f $request_filename) &#123;</div><div class="line">    			proxy_pass http:<span class="comment">//test.aezo.cn:7070;</span></div><div class="line">    			<span class="keyword">break</span>;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>需要将域名<code>test.aezo.cn</code>解析到此服务器(101.1.1.1)</p>
</li>
</ul>
</li>
<li><p>客户端</p>
<ul>
<li>解压后含有<code>frpc.ini</code>(配置文件)、<code>frpc</code>(可执行文件)</li>
<li><p>对<code>frpc.ini</code>进行配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[common]</div><div class="line"># 服务器公网ip</div><div class="line">server_addr = 101.1.1.1</div><div class="line">server_port = 7000</div><div class="line"></div><div class="line">[web]</div><div class="line">type = http</div><div class="line"># 访问本地服务的端口</div><div class="line">local_port = 80</div><div class="line">custom_domains = test.aezo.cn</div><div class="line"></div><div class="line"># 此配置可忽略</div><div class="line">[web01]</div><div class="line">type = http</div><div class="line">local_port = 80</div><div class="line"># 使用泛域名进行解析(映射到http://test.frp.aezo.cn)</div><div class="line">subdomain = test</div></pre></td></tr></table></figure>
</li>
<li><p>cmd运行<code>frpc -c ./frpc.ini</code>(可写成start.bat文件方便快速运行)</p>
</li>
<li>客户端也可配合使用nginx</li>
</ul>
</li>
<li>请求流程<ul>
<li>访问：<a href="http://test.aezo.cn，被nginx监听" target="_blank" rel="external">http://test.aezo.cn，被nginx监听</a></li>
<li>服务端nginx转向：<a href="http://test.aezo.cn:7070，被frp监听" target="_blank" rel="external">http://test.aezo.cn:7070，被frp监听</a></li>
<li>frp通过7000端口和frp客户端进行通信：<a href="http://127.0.0.1:80" target="_blank" rel="external">http://127.0.0.1:80</a></li>
</ul>
</li>
<li>微信h5开发：将<code>test.aezo.cn</code>绑定到对应的回调地址上即可</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;内网穿透，即NAT穿透，让外网用户可通过公网ip访问到内网服务。有时想要让其他人通过域名访问或者测试我们在本地搭建的 web 服
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="frp" scheme="http://blog.aezo.cn/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>oracle-function</title>
    <link href="http://blog.aezo.cn/2017/09/30/db/oracle_function/"/>
    <id>http://blog.aezo.cn/2017/09/30/db/oracle_function/</id>
    <published>2017-09-30T04:51:00.000Z</published>
    <updated>2017-10-09T04:21:31.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><code>wm_concat</code>行转列(默认用”,”分割，select的其他字段需要是group by字段)<ul>
<li><code>select replace(wm_concat(name), &#39;,&#39;, &#39;|&#39;) from test;</code>替换分割符</li>
</ul>
</li>
</ul>
<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h3 id="字符串分割函数"><a href="#字符串分割函数" class="headerlink" title="字符串分割函数"></a>字符串分割函数</h3><ul>
<li>创建字符串数组类型：<code>create or replace type sm_type_arr_str is table of varchar2 (60);</code> (一个数组，每个元素是varchar2 (60))</li>
<li><p>创建自定义函数<code>sm_split</code></p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">create or replace function sm_split(p_str       in varchar2,</div><div class="line">                                p_delimiter in varchar2)</div><div class="line">  return sm_type_arr_str</div><div class="line">  pipelined is</div><div class="line">  j    int := 0;</div><div class="line">  i    int := 1;</div><div class="line">  len  int := 0;</div><div class="line">  len1 int := 0;</div><div class="line">  str  varchar2(4000);</div><div class="line">begin</div><div class="line">  len  := length(p_str);</div><div class="line">  len1 := length(p_delimiter);</div><div class="line"></div><div class="line">  while j &lt; len loop</div><div class="line">    j := instr(p_str, p_delimiter, i);</div><div class="line"></div><div class="line">    if j = 0 then</div><div class="line">      j   := len;</div><div class="line">      str := substr(p_str, i);</div><div class="line">      pipe row(str);</div><div class="line">      if i &gt;= len then</div><div class="line">        exit;</div><div class="line">      end if;</div><div class="line">    else</div><div class="line">      str := substr(p_str, i, j - i);</div><div class="line">      i   := j + len1;</div><div class="line">      pipe row(str);</div><div class="line">    end if;</div><div class="line">  end loop;</div><div class="line"></div><div class="line">  return;</div><div class="line">end sm_split;</div></pre></td></tr></table></figure>
</li>
<li><p>查询示例：<code>select * from table (cast (sm_split (&#39;aa,,bb,cc,,&#39;, &#39;,&#39;) as sm_type_arr_str));</code> 结果如下：</p>
<pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    COLUMN_VALUE</div><div class="line">1	aa</div><div class="line">2</div><div class="line">3	bb</div><div class="line">4	cc</div><div class="line">5</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>示例二</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> t.*</div><div class="line">  <span class="keyword">from</span> test_table t</div><div class="line"> <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span></div><div class="line">          <span class="keyword">from</span> <span class="keyword">table</span>(<span class="keyword">cast</span>(sm_split(t.name, <span class="string">','</span>) <span class="keyword">as</span> sm_type_arr_str)) arr</div><div class="line">         <span class="keyword">where</span> <span class="keyword">trim</span>(arr.column_value) = <span class="string">'aa'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用函数&quot;&gt;&lt;a href=&quot;#常用函数&quot; class=&quot;headerlink&quot; title=&quot;常用函数&quot;&gt;&lt;/a&gt;常用函数&lt;/h2&gt;&lt;h2 id=&quot;聚合函数&quot;&gt;&lt;a href=&quot;#聚合函数&quot; class=&quot;headerlink&quot; title=&quot;聚合函数&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="oracle" scheme="http://blog.aezo.cn/tags/oracle/"/>
    
      <category term="function" scheme="http://blog.aezo.cn/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>chrome</title>
    <link href="http://blog.aezo.cn/2017/09/13/extend/chrome/"/>
    <id>http://blog.aezo.cn/2017/09/13/extend/chrome/</id>
    <published>2017-09-13T04:56:00.000Z</published>
    <updated>2017-10-22T11:00:55.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="chrome插件收集"><a href="#chrome插件收集" class="headerlink" title="chrome插件收集"></a>chrome插件收集</h2><ul>
<li><code>Postman</code> Http请求客户端</li>
<li><code>JSONView</code> 将Http请求获取的json字符串格式化(可收缩)</li>
<li><code>Secure Shell</code> ssh客户端</li>
<li><code>Axure RP Extension for Chrome</code> Axure设计</li>
<li><code>Set Character Encoding</code> 解决chrome查看源码乱码问题</li>
<li><code>Vue.js devtools</code> Vue.js调试工具</li>
<li><code>AdBlock</code> 广告拦截</li>
<li><code>有道词典Chrome划词插件</code></li>
<li><code>印象笔记·剪藏</code></li>
<li><code>Infinity新标签页</code> 标签管理</li>
</ul>
<h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><ul>
<li><code>ctrl + shift + i</code>/<code>F12</code> 打开开发者工具</li>
<li>主面板介绍<ul>
<li><code>Elements</code> html文件显示，Css样式调试</li>
<li><code>Console</code> js代码打印面板</li>
<li><code>Sources</code> 静态文件(html、css、js、images等)<ul>
<li><code>{}</code>/<code>Pretty Print</code>可对压缩文件进行格式化</li>
</ul>
</li>
<li><code>NetWork</code> 网络显示面板：记录所有请求加载(XHR/JS/CSS/Img等)<ul>
<li><code>Initiator</code> 可查看此执行此请求的运行栈(如：某按钮被点击 - 发起XHR请求)</li>
<li>点击某个请求可查看请求头(Headers)、响应结果等</li>
</ul>
</li>
<li><code>Application</code> 查看网址的Cookies、Storage等</li>
<li><code>更多按钮</code><ul>
<li><code>Search all files</code> 基于此url地址请求的所有静态文件进行查询。多用于js函数搜索</li>
</ul>
</li>
</ul>
</li>
<li>VM文件查看<ul>
<li>VM文件是V8引擎计算出的临时代码，VM文件出现情况，如：（1）直接在console控制台运行js代码 （2）使用eval函数计算js代码(如果一些函数通过eval定义)（3）js添加的<code>&lt;script&gt;</code>标签产生的</li>
<li>查看VM函数<ul>
<li><code>debugger</code> 相应代码。如某些函数通过eval定义，在调用此函数的地方debugger，运行到该行后，点击此行数就会出VM文件</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;chrome插件收集&quot;&gt;&lt;a href=&quot;#chrome插件收集&quot; class=&quot;headerlink&quot; title=&quot;chrome插件收集&quot;&gt;&lt;/a&gt;chrome插件收集&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Postman&lt;/code&gt; Http请求客户端&lt;/
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="plugins" scheme="http://blog.aezo.cn/tags/plugins/"/>
    
      <category term="debug" scheme="http://blog.aezo.cn/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>mysql-procedure</title>
    <link href="http://blog.aezo.cn/2017/08/24/db/mysql-procedure/"/>
    <id>http://blog.aezo.cn/2017/08/24/db/mysql-procedure/</id>
    <published>2017-08-24T12:33:00.000Z</published>
    <updated>2017-09-29T08:15:33.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>存储过程调试工具：<code>dbForge Studio for MySQL</code></li>
</ul>
<h2 id="存储过程示例"><a href="#存储过程示例" class="headerlink" title="存储过程示例"></a>存储过程示例</h2><pre><code><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">CREATE DEFINER = 'root'@'localhost'</div><div class="line">PROCEDURE test.county(IN `in_provid` int, IN `in_urlid` int)</div><div class="line">BEGIN</div><div class="line">  DECLARE v_sql varchar(1000);</div><div class="line">  DECLARE c_cityid integer;</div><div class="line">  DECLARE c_cityname varchar(20);</div><div class="line">  DECLARE c_countyname varchar(20);</div><div class="line">  DECLARE c_cityid_tmp integer;</div><div class="line"></div><div class="line">  # 是否未找到数据标记(要在游标之前定义)</div><div class="line">  DECLARE done INT DEFAULT FALSE;</div><div class="line"></div><div class="line">  -- 定义第一个游标</div><div class="line">  DECLARE cur1 CURSOR FOR</div><div class="line">  SELECT</div><div class="line">    t.N_CITYID,</div><div class="line">    t.S_CITYNAME</div><div class="line">  FROM dict_city t</div><div class="line">  WHERE t.N_PROVID = in_provid;</div><div class="line"></div><div class="line">  # 临时表游标</div><div class="line">  DECLARE cur2 CURSOR FOR</div><div class="line">  SELECT</div><div class="line">    S_COUNTYNAME,</div><div class="line">    N_CITYID AS cityid</div><div class="line">  FROM tmp_table;</div><div class="line"></div><div class="line">  # 循环终止的标志，游标中如果没有数据就设置done为TRUE(停止遍历)</div><div class="line">  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;</div><div class="line"></div><div class="line">  # 创建临时表</div><div class="line">  DROP TABLE IF EXISTS tmp_table;</div><div class="line">  CREATE TEMPORARY TABLE IF NOT EXISTS tmp_table (</div><div class="line">    ID int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,</div><div class="line">    S_COUNTYNAME varchar(20),</div><div class="line">    N_CITYID int(10)</div><div class="line">  );</div><div class="line"></div><div class="line">  # mysql不能直接变量结果集, 此出场将结果集放到临时表中, 用于后面变量</div><div class="line">  OPEN cur1;</div><div class="line">  flag_loop: LOOP</div><div class="line">    # 取出每条记录并赋值给相关变量，注意顺序</div><div class="line">    # 变量的定义不要和你的select的列的键同名, 否则fetch into 会失败！</div><div class="line">    FETCH cur1 INTO c_cityid, c_cityname;</div><div class="line"></div><div class="line">    # FETCH之后, 如果没有数据则会运行SET done = TRUE</div><div class="line">    IF done THEN</div><div class="line">      # 跳出循环</div><div class="line">      LEAVE flag_loop;</div><div class="line">    END IF;</div><div class="line"></div><div class="line">    # 字符串截取，从第一位开始，截取2位</div><div class="line">    SET c_cityname = SUBSTRING(c_cityname, 1, 2);</div><div class="line"></div><div class="line">    # 动态sql执行后的结果记录集在MySQL中无法获取，因此需要转变思路将其放置到一个临时表中</div><div class="line">    # 动态sql需要使用CONCAT(a, b, c, ....)拼接</div><div class="line">    SET v_sql = CONCAT("insert into tmp_table(S_COUNTYNAME, N_CITYID) select t.`name`, ", c_cityid, " from sm_renthouse_url t where</div><div class="line">		t.pid in (select p.id from sm_renthouse_url p where p.pid = ", in_urlid, " and p.`name` like '%", c_cityname, "%')");</div><div class="line"></div><div class="line">    # 如果以@开头的变量可以不用通过declare语句事先声明</div><div class="line">    SET @v_sql = v_sql;</div><div class="line">    # 预处理需要执行的动态SQL，其中stmt是一个变量</div><div class="line">    PREPARE stmt FROM @v_sql;</div><div class="line">    # 执行SQL语句</div><div class="line">    EXECUTE stmt;</div><div class="line">    # 释放掉预处理段</div><div class="line">    DEALLOCATE PREPARE stmt;</div><div class="line">  END LOOP;</div><div class="line">  CLOSE cur1;</div><div class="line"></div><div class="line">  # 调试输出, 打印使用SELECT</div><div class="line">  SELECT</div><div class="line">    *</div><div class="line">  FROM tmp_table;</div><div class="line"></div><div class="line">  # 还原终止的标志, 用于第二个游标</div><div class="line">  SET done = FALSE;</div><div class="line"></div><div class="line">  OPEN cur2;</div><div class="line">  flag_loop: LOOP</div><div class="line">    FETCH cur2 INTO c_countyname, c_cityid_tmp;</div><div class="line">    IF done THEN</div><div class="line">      LEAVE flag_loop;</div><div class="line">    END IF;</div><div class="line"></div><div class="line">    INSERT INTO dict_county (S_COUNTYNAME, N_CITYID, S_STATE)</div><div class="line">      VALUES (c_countyname, c_cityid_tmp, '1');</div><div class="line"></div><div class="line">  END LOOP;</div><div class="line">  CLOSE cur2;</div><div class="line"></div><div class="line">  # 删除临时表</div><div class="line">  DROP TEMPORARY TABLE tmp_table;</div><div class="line">END</div></pre></td></tr></table></figure>
</code></pre><hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;存储过程调试工具：&lt;code&gt;dbForge Studio for MySQL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="mysql" scheme="http://blog.aezo.cn/tags/mysql/"/>
    
      <category term="procedure" scheme="http://blog.aezo.cn/tags/procedure/"/>
    
  </entry>
  
  <entry>
    <title>Excel VBA</title>
    <link href="http://blog.aezo.cn/2017/08/20/lang/excel-vba/"/>
    <id>http://blog.aezo.cn/2017/08/20/lang/excel-vba/</id>
    <published>2017-08-20T12:03:00.000Z</published>
    <updated>2017-10-18T11:17:10.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><code>VBA</code>：Visual Basic for Applications是Visual Basic的一种宏语言</li>
<li><a href="https://msdn.microsoft.com/zh-cn/library/ee861528.aspx" target="_blank" rel="external">官方VBA文档</a>、<a href="https://support.office.com/zh-cn/excel" target="_blank" rel="external">官方Excel帮助</a>、<a href="https://docs.microsoft.com/zh-cn/dotnet/visual-basic/index" target="_blank" rel="external">官方VB文档</a></li>
<li><a href="http://www.yiibai.com/vba/vba_for_loop.html" target="_blank" rel="external">基础语法</a>、<a href="http://www.51zxw.net/list.aspx?cid=539" target="_blank" rel="external">51自学视频(后面几章收费)</a></li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li><p>不会写法的可以使用录制宏，然后进行代码查看</p>
</li>
<li><p><code>FormulaR1C1</code>是公式输入方法</p>
<ul>
<li>有中括号是相对于选定单元格的相对偏移量，”-“为向左或向上偏移，正数为右或下偏移。 无中括号为相对于选定单元格的绝对偏移量，没有负数。”R”和”C”对应行和列”</li>
<li>如：C1单元格为”=A1+B1”。Range(“C1”).FormulaR1C1 = “=RC[-2]+RC[-1]”</li>
<li>如：C1单元格为”=A2+E3” Range(“C1”).FormulaR1C1 = “=R[1]C[-2]+R[2]C[2]”</li>
</ul>
</li>
<li><code>Selection.AutoFill Destination:=fillRange, Type:=xlFillDefault</code> 自动填充<ul>
<li>此处<code>Selection</code>选中的Range即sourceRange(源)，根据sourceRange进行fillRange的填充。此时fillRange必须包含sourceRange。sourceRange中可以有公式等</li>
</ul>
</li>
<li><code>ActiveWindow.SmallScroll Down:=6</code>等是对窗口进行移动，不影响计算</li>
</ul>
<h2 id="宏界面配置"><a href="#宏界面配置" class="headerlink" title="宏界面配置"></a>宏界面配置</h2><ul>
<li>设置字体：工具-选项-编辑器格式-标准字体-Consolas (西方)</li>
<li>设置语法检测：工具-选项-编辑器-自动语法检测去勾选。防止编辑时弹框提示语法错误，运行时语法错误会提示</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="Delat-Ct法计算候选基因稳定性"><a href="#Delat-Ct法计算候选基因稳定性" class="headerlink" title="Delat Ct法计算候选基因稳定性"></a>Delat Ct法计算候选基因稳定性</h3><blockquote>
<p>此算法是临时帮朋友写的，可能与实际算法不符，仅供参考</p>
</blockquote>
<ul>
<li>简介：这是一种常见的算法，叫做Delat Ct法计算候选基因稳定性。最后得到的是每个基因的mean SD值，首先计算两个基因的ΔCt值，再计算其ΔCt值的方差，最后得到该基因与其余每个基因ΔCt值的方差的平均值。</li>
<li>excel表格数据如下：</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>beta-Actin</th>
<th>Tubulin-alpha</th>
<th>EF1A</th>
<th>GAPDH</th>
<th>Tubulin-beta</th>
<th>18S rRNA  </th>
</tr>
</thead>
<tbody>
<tr>
<td>卵子</td>
<td>23.82</td>
<td>23.82</td>
<td>23.93</td>
<td>25.48</td>
<td>25.76</td>
<td>17.67</td>
</tr>
<tr>
<td>受精后</td>
<td>22.47</td>
<td>23.94</td>
<td>22.51</td>
<td>23.31</td>
<td>23.91</td>
<td>13.74  </td>
</tr>
<tr>
<td>2cell</td>
<td>23.29</td>
<td>24.78</td>
<td>22.83</td>
<td>24.23</td>
<td>25.05</td>
<td>15.35</td>
</tr>
<tr>
<td>4cell</td>
<td>22.95</td>
<td>24.84</td>
<td>22.51</td>
<td>23.39</td>
<td>24.54</td>
<td>14.6</td>
</tr>
<tr>
<td>8cell</td>
<td>21.75</td>
<td>23.77</td>
<td>21.8</td>
<td>22.58</td>
<td>23.66</td>
<td>13.22</td>
</tr>
<tr>
<td>16cell</td>
<td>21.82</td>
<td>24.21</td>
<td>22.49</td>
<td>23.45</td>
<td>23.8</td>
<td>12.73</td>
</tr>
<tr>
<td>32cell</td>
<td>21.92</td>
<td>24.62</td>
<td>22.33</td>
<td>23.74</td>
<td>21.12</td>
<td>13.95</td>
</tr>
<tr>
<td>64cell</td>
<td>22.92</td>
<td>24.83</td>
<td>22.19</td>
<td>24.39</td>
<td>24.9</td>
<td>15.76</td>
</tr>
<tr>
<td>多cell</td>
<td>21.62</td>
<td>24.04</td>
<td>21.26</td>
<td>22.66</td>
<td>24.04</td>
<td>12.63</td>
</tr>
<tr>
<td>高囊胚1</td>
<td>23.06</td>
<td>25.08</td>
<td>23.08</td>
<td>24.45</td>
<td>25.09</td>
<td>15.17</td>
</tr>
<tr>
<td>高囊胚2</td>
<td>22.98</td>
<td>26.27</td>
<td>22.22</td>
<td>25.04</td>
<td>25.72</td>
<td>15.55</td>
</tr>
<tr>
<td>低囊胚</td>
<td>23</td>
<td>26.24</td>
<td>22.03</td>
<td>26.31</td>
<td>26.49</td>
<td>17.04</td>
</tr>
<tr>
<td>原肠胚前期</td>
<td>21.23</td>
<td>25.46</td>
<td>20</td>
<td>26.46</td>
<td>25.87</td>
<td>14.12</td>
</tr>
<tr>
<td>原肠胚中期</td>
<td>20.23</td>
<td>24.6</td>
<td>19.52</td>
<td>26.57</td>
<td>25.81</td>
<td>14.03</td>
</tr>
<tr>
<td>原肠胚后期</td>
<td>19.56</td>
<td>22.77</td>
<td>18.5</td>
<td>26.3</td>
<td>24.91</td>
<td>12.83</td>
</tr>
<tr>
<td>神经</td>
<td>19.46</td>
<td>23.87</td>
<td>17.66</td>
<td>26.82</td>
<td>24.58</td>
<td>15.86</td>
</tr>
<tr>
<td>肌节</td>
<td>18.03</td>
<td>22.7</td>
<td>16.48</td>
<td>23.35</td>
<td>23.79</td>
<td>12.86</td>
</tr>
<tr>
<td>器官形成期1</td>
<td>18.47</td>
<td>23.71</td>
<td>17.26</td>
<td>24.89</td>
<td>24.21</td>
<td>15.3</td>
</tr>
<tr>
<td>器官形成期2</td>
<td>18.65</td>
<td>23.6</td>
<td>17.83</td>
<td>23.94</td>
<td>23.74</td>
<td>15.92</td>
</tr>
<tr>
<td>器官形成期3</td>
<td>18.14</td>
<td>23.24</td>
<td>16.12</td>
<td>23.66</td>
<td>23.82</td>
<td>16</td>
</tr>
<tr>
<td>破膜</td>
<td>17.82</td>
<td>22.89</td>
<td>17.45</td>
<td>5.44</td>
<td>23.92</td>
<td>13.92</td>
</tr>
<tr>
<td>仔鱼</td>
<td>16.97</td>
<td>22.65</td>
<td>16.15</td>
<td>20.69</td>
<td>22.86</td>
<td>11.55</td>
</tr>
</tbody>
</table>
<ul>
<li><p>效果如下</p>
<p>  <img src="/data/images/2017/08/delacCt.png" alt="效果图"></p>
</li>
<li><p>VBA处理源码(效率可能较低)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Sub delacCt()</div><div class="line">&apos;</div><div class="line">&apos; Delac Ct算法计算基因mean SD 宏</div><div class="line">&apos;</div><div class="line">    Dim rows As Integer</div><div class="line">    Dim columns As Integer</div><div class="line">    Dim rangeItem1 As range</div><div class="line">    Dim rangeItem2 As range</div><div class="line">    Dim targetCellRange1 As range</div><div class="line">    Dim targetCellRange2 As range</div><div class="line">    Dim isStart As Boolean</div><div class="line"></div><div class="line">    &apos;dataCell为一个Range对象</div><div class="line">    Set myRange = Application.InputBox(prompt:=&quot;按住Shift选择数据所在区域（包含行标题不包含列标题）&quot;, Type:=8)</div><div class="line">    &apos;Set myRange = range(&quot;B1:D23&quot;)</div><div class="line"></div><div class="line">    &apos;获取此区域的总行数和总列数</div><div class="line">    rows = myRange.rows.count</div><div class="line">    columns = myRange.columns.count</div><div class="line"></div><div class="line">    &apos;循环其中两个基因</div><div class="line">    With myRange</div><div class="line">        For i = 1 To columns Step 1</div><div class="line">            &apos;每一行的方差</div><div class="line">            Dim total As Double</div><div class="line">            total = 0</div><div class="line"></div><div class="line">            For j = i + 1 To columns Step 1</div><div class="line">                &apos;此处.代表myRange(With中)</div><div class="line">                Set rangeItem1 = .columns(i)</div><div class="line">                Set rangeItem2 = .columns(j)</div><div class="line"></div><div class="line">                Dim cellRow As Integer</div><div class="line">                Dim cellColumn As Integer</div><div class="line">                cellRow = i * (rows + 3) + 1</div><div class="line">                cellColumn = (j - 2) * 4 + 2</div><div class="line"></div><div class="line">                &apos;目标单元格</div><div class="line">                Set targetCellRange1 = Worksheets(1).Cells(cellRow, cellColumn)</div><div class="line">                Set targetCellRange2 = Worksheets(1).Cells(cellRow, cellColumn + 1)</div><div class="line"></div><div class="line">                &apos;复制并粘贴其中某两个基因</div><div class="line">                Call geneCopy(rangeItem1, targetCellRange1)</div><div class="line">                Call geneCopy(rangeItem2, targetCellRange2)</div><div class="line"></div><div class="line">                &apos;计算方差</div><div class="line">                total = total + geneCalculate(range(targetCellRange1, targetCellRange1.Offset(rows - 1, 0)))</div><div class="line">            Next</div><div class="line"></div><div class="line">            &apos; 计算方差平均值</div><div class="line">            If i &lt; columns Then</div><div class="line">                &apos;MsgBox total / (columns - i)</div><div class="line">                Dim row As Integer</div><div class="line">                &apos;方差所在行</div><div class="line">                row = targetCellRange1.Offset(rows - 1, 0).row + 1</div><div class="line"></div><div class="line">                Worksheets(1).range(&quot;A&quot; &amp; row).Value = &quot;SD&quot;</div><div class="line">                Worksheets(1).range(&quot;A&quot; &amp; row + 1).Value = &quot;mean SD&quot;</div><div class="line">                Worksheets(1).range(&quot;B&quot; &amp; row + 1).Value = total / (columns - i)</div><div class="line">            End If</div><div class="line">        Next</div><div class="line">    End With</div><div class="line"></div><div class="line">    &apos;ActiveWorkbook.Save</div><div class="line">End Sub</div><div class="line"></div><div class="line">Private Sub geneCopy(rangeItem As range, targetCellRange As range)</div><div class="line">&apos;</div><div class="line">&apos; 复制并粘贴其中某两个基因</div><div class="line">&apos;</div><div class="line">    rangeItem.Select</div><div class="line">    Selection.Copy</div><div class="line"></div><div class="line">    targetCellRange.Select</div><div class="line">    ActiveSheet.Paste</div><div class="line">End Sub</div><div class="line"></div><div class="line">Private Function geneCalculate(targetRange1 As range) As Double</div><div class="line">&apos;</div><div class="line">&apos; 对两个基因进行计算</div><div class="line">&apos;</div><div class="line">    &apos;求差值</div><div class="line">    Call subValue(targetRange1)</div><div class="line"></div><div class="line">    &apos;求方差(targetRange1.Row是获取该单元格得在Sheet中是第几行)</div><div class="line">    geneCalculate = varianceValue(range(Worksheets(1).Cells(targetRange1.row + 1, targetRange1.Column + 2), _</div><div class="line">            Worksheets(1).Cells(targetRange1.row + targetRange1.rows.count - 1, targetRange1.Column + 2)))</div><div class="line"></div><div class="line">    &apos;MsgBox geneCalculate</div><div class="line">End Function</div><div class="line"></div><div class="line">Private Sub subValue(rangeItem1 As range)</div><div class="line">&apos;</div><div class="line">&apos; 求差值</div><div class="line">&apos;</div><div class="line">    Dim sourceRange As range</div><div class="line">    Dim fillRange As range</div><div class="line"></div><div class="line">    Set sourceRange = Worksheets(1).Cells(rangeItem1.row + 1, rangeItem1.Column + 2)</div><div class="line">    sourceRange.Select</div><div class="line">    ActiveCell.FormulaR1C1 = &quot;=RC[-2]-RC[-1]&quot;</div><div class="line"></div><div class="line">    Set fillRange = range(Worksheets(1).Cells(rangeItem1.row + 1, rangeItem1.Column + 2), _</div><div class="line">                            Worksheets(1).Cells(rangeItem1.row + rangeItem1.rows.count - 1, rangeItem1.Column + 2))</div><div class="line"></div><div class="line">    &apos;此处根据选中的sourceRange进行fillRange的填充，fillRange必须包含sourceRange</div><div class="line">    Selection.AutoFill Destination:=fillRange, Type:=xlFillDefault</div><div class="line">End Sub</div><div class="line"></div><div class="line">Private Function varianceValue(range As range) As Double</div><div class="line">&apos;</div><div class="line">&apos; 求方差</div><div class="line">&apos;</div><div class="line">    Dim targetCellRange As range</div><div class="line"></div><div class="line">    Set targetCellRange = Worksheets(1).Cells(range.row + range.rows.count, range.Column)</div><div class="line">    targetCellRange.Select</div><div class="line"></div><div class="line">    targetCellRange.FormulaR1C1 = &quot;=SQRT(VAR(R[-22]C[0]:R[-1]C[0]))&quot;</div><div class="line"></div><div class="line">    &apos;返回值</div><div class="line">    varianceValue = targetCellRange.Value</div><div class="line">End Function</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VBA&lt;/code&gt;：Visual Basic for Applications是Visual Basic的一种宏语
    
    </summary>
    
      <category term="lang" scheme="http://blog.aezo.cn/categories/lang/"/>
    
    
      <category term="excel" scheme="http://blog.aezo.cn/tags/excel/"/>
    
      <category term="vb" scheme="http://blog.aezo.cn/tags/vb/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="http://blog.aezo.cn/2017/08/05/java/springcloud/"/>
    <id>http://blog.aezo.cn/2017/08/05/java/springcloud/</id>
    <published>2017-08-05T11:36:00.000Z</published>
    <updated>2017-08-05T11:36:36.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>架构演进<ol>
<li>单体架构：复杂度逐渐变高、部署速度慢、阻碍技术创新、无法按需伸缩</li>
<li>SOA <a href="[SOA和微服务架构的区别](https://www.zhihu.com/question/37808426)">^1</a></li>
<li>微服务</li>
</ol>
</li>
<li>微服务特点<ul>
<li>微服务可独立运行在自己的进程里</li>
<li>一系列独立运行的微服务构成整个系统</li>
<li>每个服务独立开发维护</li>
<li>微服务之间通过REST API或RPC等方式通信</li>
<li>优点：易于开发和维护，启动快，技术栈不受限制，按需伸缩，DevOps</li>
<li>挑战：运维要求较高，分布式的复杂性，接口调整成本高</li>
</ul>
</li>
<li>微服务设计原则：单一职责原则、服务自治原则、轻量级通信原则、接口明确原则</li>
<li>微服务开发框架：<code>Spring Cloud</code>、<code>Dubbo</code>、<code>Dropwizard</code>、<code>Consul</code>等</li>
<li>Spring Cloud是基于Spring Boot的用于快速构建分布式系统工具集</li>
<li>Spring Cloud特点：约定优于配置、开箱即用，快速启动、轻量级组件、组件丰富、选型中立</li>
<li>本文相关软件：JDK: 1.8，SpringCloud: Dalston.SR1</li>
</ul>
<h2 id="微服务构建"><a href="#微服务构建" class="headerlink" title="微服务构建"></a>微服务构建</h2><ul>
<li>服务提供者、服务消费者</li>
<li>服务消费者中通过restTemp调用服务提供者提供的服务<ul>
<li>如：<code>User user = this.restTemplate.getForObject(&quot;http://localhost:7900/simple/&quot; + id, User.class);</code></li>
</ul>
</li>
</ul>
<h2 id="Eureka服务发现"><a href="#Eureka服务发现" class="headerlink" title="Eureka服务发现"></a>Eureka服务发现</h2><ul>
<li><p>服务注册与发现</p>
<p>  <img src="/data/images/2017/07/服务注册与发现.png" alt="服务注册与发现"></p>
<ul>
<li>服务发现方式 <a href="[服务发现的可行方案以及实践案例](http://blog.daocloud.io/microservices-4/)">^2</a><ul>
<li>客户端发现：Eureka、Zk</li>
<li>服务端发现：Consul + nginx</li>
</ul>
</li>
<li>服务注册表是一个记录当前可用服务实例的网络信息的数据库，是服务发现机制的核心。服务注册表提供查询API和管理API，使用查询API获得可用的服务实例，使用管理API实现注册和注销</li>
</ul>
</li>
<li><p>简介：Eureka是<code>Netflix</code>开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。Spring Cloud将它集成在其子项目<code>spring-cloud-netflix</code>中，以实现Spring Cloud的服务发现功能</p>
</li>
<li><p>架构图</p>
<p>  <img src="/data/images/2017/07/eureka.png" alt="eureka"></p>
<ul>
<li>AWS概念：us-east-1c、us-east-1d等是zone，它们都属于us-east-1这个region</li>
<li>在应用启动后，将会向Eureka Server发送心跳（默认周期为30秒）。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个服务节点移除（默认90秒）</li>
<li>Eureka还提供了客户端缓存的机制，即使所有的Eureka Server都挂掉，客户端依然可以利用缓存中的信息消费其他服务的API</li>
</ul>
</li>
<li><p>eureka server</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- 用于注册中心访问账号认证，非必须 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在Application.java中加注解<code>@EnableEurekaServer</code></p>
</li>
<li><p>application.yml配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8761</span></div><div class="line"></div><div class="line"><span class="comment"># 引入了spring-boot-starter-security则会默认开启认证</span></div><div class="line"><span class="attr">security:</span></div><div class="line"><span class="attr">  basic:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">true</span> <span class="comment">#开启eureka后台登录认证</span></div><div class="line">  <span class="comment"># 不配置user，则默认的用户名为user，密码为自动生成(在控制台可查看)</span></div><div class="line"><span class="attr">  user:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">    password:</span> <span class="string">smalle</span></div><div class="line"></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  client:</span></div><div class="line">    <span class="comment"># eureka server默认也是一个eureka client.以下两行仅将此App当成eureka server，不当成eureka client(由于是单点测试)</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></div><div class="line">    <span class="comment"># 将eureka注册到哪个url</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://user:password@$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></div></pre></td></tr></table></figure>
</li>
<li><p>后台地址：<code>http://localhost:8761</code></p>
</li>
</ul>
</li>
<li><p>eureka client</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在Application.java中加注解<code>@EnableEurekaClient</code></p>
</li>
<li><p>application.yml配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eureka客户端配置</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://smalle:smalle@localhost:8761/eureka/</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line">    <span class="comment"># 启用ip访问eureka server(默认是使用主机名进行访问)</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></div><div class="line">    <span class="comment"># 实例id</span></div><div class="line"><span class="attr">    instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>示例请看源码</p>
<ul>
<li>示例中使用H2数据库，IDEA连接方式：path:<code>mem:testdb</code>, user:<code>sa</code>, password:空, url:<code>jdbc:h2:mem:testdb</code>, 使用<code>Embedded</code>或<code>In-memory</code>方式连接</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><ul>
<li><p>简介</p>
<ul>
<li>Ribbon是Netflix发布的云中间层服务开源项目，其主要功能是提供客户端侧负载均衡算法。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，Ribbon是一个客户端负载均衡器，我们可以在配置文件中列出Load Balancer后面所有的机器，Ribbon会自动基于某种规则（如简单轮询，随机连接等）去连接这些机器，我们也很容易使用Ribbon实现自定义的负载均衡算法。</li>
<li><p>Eureka与Ribbon连用</p>
<p>  <img src="/data/images/2017/07/eureka-ribbon.png" alt="eureka-ribbon"></p>
<ul>
<li>Ribbon工作时分为两步：第一步先选择 Eureka Server, 它优先选择在同一个Zone且负载较少的Server；第二步再根据用户指定的策略，在从Server取到的服务注册列表中选择一个地址。其中Ribbon提供了多种策略，例如轮询round robin、随机Random、根据响应时间加权等</li>
</ul>
</li>
</ul>
</li>
<li><p>基本使用</p>
<ul>
<li>引入依赖：group：<code>org.springframework.cloud</code>，artifact id：<code>spring-cloud-starter-ribbon</code><ul>
<li>如果引入了<code>spring-cloud-starter-eureka</code>中默认引入了，此时可无需再引入</li>
</ul>
</li>
<li><p>在restTemplate对应的Bean上注解<code>@LoadBalanced</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@LoadBalanced</span> <span class="comment">// 使用ribbon实现客户端负载均衡</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>备注：此时需要启动多个服务提供者进行测试，IDEA中：</p>
<ul>
<li>可以先启动一个后再将端口改掉再启动另外一个</li>
<li>(推荐) <code>Eidt Configurations</code>再配置一个Spring boot的启动项，配置时将<code>Spring Boot Settings</code> - <code>Override parameters</code>添加一个参数<code>server.port=8080</code></li>
</ul>
</li>
</ul>
</li>
<li><p>自定义负载均衡策略</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># robbin负载均衡策略优先级：配置文件策略 &gt; 代码级别策略 &gt; ribbon默认策略(com.netflix.loadbalancer.ZoneAvoidanceRule)</span></div><div class="line"><span class="attr">provider-user:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line">      <span class="comment"># 当访问服务provider-user时采用随机策略RandomRule，此时访问其他服务时仍然为默认策略ZoneAvoidanceRule；WeightedResponseTimeRule响应时间加权策略</span></div><div class="line"><span class="attr">      NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></div></pre></td></tr></table></figure>
</li>
<li><p>脱离Eureka的配置，此时仍然可以运行Eureka，但是不从eureka中获取服务地址，而是从配置文件中读取</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">stores:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line"><span class="attr">    listOfServers:</span> <span class="string">example.com,aezo.cn</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Feign声明式服务调用"><a href="#Feign声明式服务调用" class="headerlink" title="Feign声明式服务调用"></a>Feign声明式服务调用</h2><ul>
<li>简介</li>
<li><p>基本使用(服务消费者)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--Feign声明式服务调用--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类加注解<code>@EnableFeignClients</code></p>
</li>
<li><p>定义FeignClient接口Bean</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 此服务消费者需要调用的服务声明</span></div><div class="line"><span class="meta">@FeignClient</span>(<span class="string">"provider-user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</div><div class="line">    <span class="comment">// Feign不支持@GetMapping, @PathVariable必须指明参数值</span></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/simple/&#123;id&#125;"</span>)</div><div class="line">    <span class="function">User <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, value = <span class="string">"/feign-post"</span>)</div><div class="line">    <span class="function">User <span class="title">postFeignUser</span><span class="params">(@RequestBody User user)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在controller中直接调用接口中方法(此时不直接调用restTemplate)</p>
</li>
</ul>
</li>
</ul>
<h2 id="Hystrix服务容错保护-断路器"><a href="#Hystrix服务容错保护-断路器" class="headerlink" title="Hystrix服务容错保护(断路器)"></a>Hystrix服务容错保护(断路器)</h2><ul>
<li>简介</li>
<li><p>基本使用(服务消费者)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--服务容错保护(断路器) Hystrix--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类加注解<code>@EnableCircuitBreaker</code></p>
</li>
<li><p>声明断路后回调函数</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"findByIdFallBack"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    <span class="comment">// virtual ip: 服务的spring.application.name</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://provider-user/simple/"</span> + id, User.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当服务调用失败或者超时则回调此函数. 此函数参数和返回值必须和调用函数一致</span></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByIdFallBack</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    System.out.println(id + <span class="string">", error[hystrix]"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Zuul-API-GateWay：网关"><a href="#Zuul-API-GateWay：网关" class="headerlink" title="Zuul (API GateWay：网关)"></a>Zuul (API GateWay：网关)</h2><ul>
<li>简介</li>
<li><p>基本使用</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- API网关。包含actuator、hystrix、ribbon --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类声明<code>@EnableZuulProxy</code></p>
</li>
<li><p>基础配置application.yml</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line">  <span class="comment"># 忽略表达式。当遇到路径中有admin的不进行路由</span></div><div class="line">  <span class="comment"># ignored-patterns: /**/admin/**</span></div><div class="line">  <span class="comment"># 路由前缀</span></div><div class="line">  <span class="comment"># prefix: /api</span></div><div class="line">  <span class="comment"># zuul默认会过滤路由前缀(strip-prefix=true)，此处是关闭此过滤</span></div><div class="line">  <span class="comment"># strip-prefix: false</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line">    <span class="comment"># 通配符(ant规范)：? 代表一个任意字符，* 代表多个任意字符，** 代表多个任意字符且支持多级目录</span></div><div class="line">    <span class="comment"># 此处路径在配置文件中越靠前的约优先（系统将所有路径放到LinkedHashMap中，当匹配到一个后就终止匹配）</span></div><div class="line">    <span class="comment"># 现在可以同时访问http://localhost:5555/consumer-movie-ribbon/movie/1 和 http://localhost:5555/api-movie/movie/1</span></div><div class="line">    <span class="comment"># api-movie为规则名, 可通过spring cloud config进行动态加载(覆盖)</span></div><div class="line"><span class="attr">    api-movie:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-movie/**</span></div><div class="line">      <span class="comment"># 从eureka中获取此服务(spring.application.name)的地址(面向服务的路由)</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">consumer-movie-ribbon</span></div><div class="line"><span class="attr">    api-user:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-user/**</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">provider-user</span></div><div class="line">    <span class="comment"># 本地跳转(当访问/api-local/**的时候，则会转到当前应用的/local/**的地址)</span></div><div class="line">    <span class="comment"># api-local:</span></div><div class="line">    <span class="comment">#   path: /api-local/**</span></div><div class="line">    <span class="comment">#   url: forward:/local</span></div><div class="line">    <span class="comment"># 禁用过滤器：zuul.&lt;FilterClassName&gt;.&lt;filterType&gt;.disable=true</span></div><div class="line">    <span class="comment"># AccessFilter:</span></div><div class="line">    <span class="comment">#   pre:</span></div><div class="line">    <span class="comment">#     disable: true</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自定义路由规则</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> PatternServiceRouteMapper <span class="title">serviceRouteMapper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 将serviceName-v1映射成/v1/serviceName. 未匹配到则按照原始的</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PatternServiceRouteMapper(</div><div class="line">            <span class="string">"(?&lt;name&gt;^.+)-(?&lt;version&gt;v.+$)"</span>,</div><div class="line">            <span class="string">"$&#123;version&#125;/$&#123;name&#125;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>过滤器</p>
<ul>
<li>Zuul过滤器核心处理器(<code>com.netflix.zuul.FilterProcessor</code>)</li>
<li>核心过滤器处理(对应包<code>org.springframework.cloud.netflix.zuul.filters</code>)</li>
<li><p>自定义过滤器</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(AccessFilter.class);</div><div class="line"></div><div class="line">    <span class="comment">// 过滤器类型，决定过滤器在请求的哪个生命周期中执行</span></div><div class="line">    <span class="comment">// pre：表示请求在路由之前执行</span></div><div class="line">    <span class="comment">// routing：在路由请求时被执行(调用真实服务应用时)</span></div><div class="line">    <span class="comment">// post：路由完成(服务调用完成)被执行</span></div><div class="line">    <span class="comment">// error：出错时执行</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 多个过滤器时，控制过滤器的执行顺序（数值越小越优先）</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断该过滤器是否需要被执行(true需要执行)，可根据实际情况进行范围限定</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 过滤器的具体逻辑</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        RequestContext ctx = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = ctx.getRequest();</div><div class="line"></div><div class="line">        logger.info(<span class="string">"send &#123;&#125; request to &#123;&#125;"</span>, request.getMethod(), request.getRequestURL().toString()); <span class="comment">// send GET request to http://localhost:5555/api-movie/movie/1</span></div><div class="line"></div><div class="line">        Object accessToken = request.getParameter(<span class="string">"accessToken"</span>);</div><div class="line">        <span class="keyword">if</span>(accessToken == <span class="keyword">null</span>) &#123;</div><div class="line">            logger.warn(<span class="string">"access token is empty, add parameter like: accessToken=smalle"</span>);</div><div class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>); <span class="comment">// 令zuul过滤此请求，不进行路由</span></div><div class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</div><div class="line">            ctx.setResponseBody(<span class="string">"zuul filter"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        logger.info(<span class="string">"access token ok"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 测试异常过滤器（org.springframework.cloud.netflix.zuul.filters.post.SendErrorFilter）</span></div><div class="line">        <span class="comment">// doSomteing();</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomteing</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"run error"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自定义异常信息：出现异常会forward到<code>/error</code>的端点，<code>/error</code>端点的实现来源于Spring Boot的<code>org.springframework.boot.autoconfigure.web.BasicErrorController</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最好使用postman等工具测试</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</div><div class="line">        map.remove(<span class="string">"exception"</span>); <span class="comment">// 移除exception信息，客户端将看不到此信息</span></div><div class="line">        map.put(<span class="string">"myAttr"</span>, <span class="string">"hello"</span>);</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>动态路由：请见分布式配置中心(Config)部分</p>
</li>
</ul>
<h2 id="Config-分布式配置中心-Spring-Cloud-Config"><a href="#Config-分布式配置中心-Spring-Cloud-Config" class="headerlink" title="Config 分布式配置中心(Spring Cloud Config)"></a>Config 分布式配置中心(Spring Cloud Config)</h2><ul>
<li><p>配置中心(Config服务器端)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- 配置中心 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- 用于配置中心访问账号认证 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!--向eureka注册，服务化配置中心--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类添加<code>@EnableConfigServer</code>，开启服务发现则还要加<code>@EnableDiscoveryClient</code></p>
</li>
<li><p>配置文件</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      server:</span></div><div class="line"><span class="attr">        git:</span></div><div class="line">          <span class="comment"># 可以使用占位符&#123;application&#125;、&#123;profile&#125;、&#123;label&#125;</span></div><div class="line"><span class="attr">          uri:</span> <span class="attr">https://git.oschina.net/smalle/spring-cloud-config-test.git</span></div><div class="line">          <span class="comment"># 搜索此git仓库的配置文件目录</span></div><div class="line"><span class="attr">          search-paths:</span> <span class="string">config-repo</span></div><div class="line"><span class="attr">          username:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">          password:</span> <span class="string">aezocn</span></div><div class="line"></div><div class="line"><span class="attr">  server:</span></div><div class="line"><span class="attr">    port:</span> <span class="number">7000</span></div><div class="line"></div><div class="line"><span class="attr">  security:</span></div><div class="line"><span class="attr">    basic:</span></div><div class="line"><span class="attr">      enabled:</span> <span class="literal">true</span> <span class="comment"># 开启权限验证(默认是false)</span></div><div class="line"><span class="attr">    user:</span></div><div class="line"><span class="attr">      name:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">      password:</span> <span class="string">smalle</span></div><div class="line"></div><div class="line">  <span class="comment"># eureka客户端配置</span></div><div class="line"><span class="attr">  eureka:</span></div><div class="line"><span class="attr">    client:</span></div><div class="line"><span class="attr">      serviceUrl:</span></div><div class="line"><span class="attr">        defaultZone:</span> <span class="attr">http://smalle:smalle@localhost:8761/eureka/</span></div><div class="line"><span class="attr">    instance:</span></div><div class="line">      <span class="comment"># 启用ip访问</span></div><div class="line"><span class="attr">      prefer-ip-address:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在git仓库的config-repo目录下添加配置文件: <code>consumer-movie-ribbon.yml</code>(写如配置如：from: git-default-1.0. 下同)、<code>consumer-movie-ribbon-dev.yml</code>、<code>consumer-movie-ribbon-test.yml</code>、<code>consumer-movie-ribbon-prod.yml</code>，并写入参数</p>
</li>
<li>访问：<code>http://localhost:7000/consumer-movie-ribbon/prod/master</code>即可获取应用为<code>consumer-movie-ribbon</code>，profile为<code>prod</code>，git分支为<code>master</code>的配置数据(<code>/{application}/{profile}/{label}</code>)<ul>
<li>某application对应的配置命名必须为<code>{application}-{profile}.yml</code>，其中<code>{profile}</code>和<code>{label}</code>可在对应的application的<code>bootstrap.yml</code>中指定</li>
<li>访问配置路径后，程序默认会将配置数据下载到本地，当git仓库不可用时则获取本地的缓存数据</li>
<li>支持git/svn/本地文件等</li>
</ul>
</li>
</ul>
</li>
<li><p>客户端配置映射</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- 配置中心客户端 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加<code>bootstrap.yml</code>配置文件(不能放在application.yml中)</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bootstrap.yml其优先级高于application.yml</span></div><div class="line"><span class="attr">spring:</span></div><div class="line">  <span class="comment"># application:</span></div><div class="line">  <span class="comment">#  name: consumer-movie-ribbon</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line">      <span class="comment"># (1) config server地址</span></div><div class="line">      <span class="comment"># uri: http://localhost:7000/</span></div><div class="line">      <span class="comment"># (2) 配置中心实行服务化(向eureka注册了自己)，此处要开启服务发现，并指明配置中心服务id</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">        service-id:</span> <span class="string">config-server</span></div><div class="line"><span class="attr">      profile:</span> <span class="string">prod</span></div><div class="line"><span class="attr">      label:</span> <span class="string">master</span></div><div class="line">      <span class="comment"># 如果配置中心开启了权限验证，此处填写相应的用户名和密码</span></div><div class="line"><span class="attr">      username:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">      password:</span> <span class="string">smalle</span></div><div class="line"></div><div class="line"><span class="comment"># eureka客户端配置(使用了spring cloud config, 则eureka的配置必须写在bootstrap.yml中，否则报找不到config server )</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://smalle:smalle@localhost:8761/eureka/</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line">    <span class="comment"># 启用ip访问</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>测试程序</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @RefreshScope // 之后刷新config后可重新注入值</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigController</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;from:none&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String from;</div><div class="line"></div><div class="line">    <span class="comment">// 测试从配置中心获取配置数据，访问http://localhost:9000/from</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/from"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">from</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.from; <span class="comment">// 会从git仓库中读取配置数据</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>动态刷新配置(可获取最新配置信息的git提交)</p>
<ul>
<li>config客户端重启会刷新配置(重新注入配置信息)</li>
<li>动态刷新<ul>
<li>在需要动态加载配置的Bean上加注解<code>@RefreshScope</code></li>
<li>给 <strong>config client</strong> 加入权限验证依赖(<code>org.springframework.boot/spring-boot-starter-security</code>)，并在对应的application.yml中开启验证<ul>
<li>否则访问<code>/refresh</code>端点会失败，报错：<code>Consider adding Spring Security or set &#39;management.security.enabled&#39; to false.</code>(需要加入Spring Security或者关闭端点验证)</li>
</ul>
</li>
<li>对应的需要注入配置的类加<code>@RefreshScope</code></li>
<li><code>POST</code>请求<code>http://localhost:9000/refresh</code>(将Postman的Authorization选择Basic Auth和输入用户名/密码)</li>
<li>再次访问config client的 <a href="http://localhost:9000/from" target="_blank" rel="external">http://localhost:9000/from</a> 即可获取最新git提交的数据(由于开启了验证，所有端点都需要输入用户名密码)<ul>
<li>得到如<code>[&quot;from&quot;]</code>的结果(from配置文件中改变的key)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>动态加载网关配置</p>
<ul>
<li>在<code>api-gateway-zuul</code>服务中同上述一样加<code>bootstrap.yml</code>，并对eureka和config server进行配置</li>
<li><p>在<code>application.yml</code>对</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line"><span class="attr">    api-movie:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-movie/**</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">consumer-movie-ribbon</span></div><div class="line">      <span class="comment"># 如果consumer-movie-ribbon服务开启了权限验证，则需要防止zuul将头信息(Cookie/Set-Cookie/Authorization)过滤掉了.(多用于API网关下的权限验证等服务)</span></div><div class="line">      <span class="comment"># 此方法是对指定规则开启自定义敏感头. 还有一中解决方法是设置路由敏感头为空(则不会过滤任何头信息)：zuul.routes.&lt;route&gt;.sensitiveHeaders=</span></div><div class="line"><span class="attr">      customSensitiveHeaders:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># 为了动态刷新配置(spring cloud config)，执行/refresh端点(此端点需要加入Spring Security或者关闭端点验证)</span></div><div class="line"><span class="attr">security:</span></div><div class="line"><span class="attr">  basic:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  user:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">    password:</span> <span class="string">smalle</span></div></pre></td></tr></table></figure>
</li>
<li><p>在git仓库中加入<code>api-gateway-zuul-prod.yml</code>等配置文件，并加入配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line"><span class="attr">    api-movie:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-movie-config/**</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">consumer-movie-ribbon</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>POST</code>请求<code>http://localhost:5555/refresh</code>即可刷新<code>api-gateway-zuul</code>的配置，因此动态加载了路由规则zuul.routes.api-movie</p>
</li>
</ul>
</li>
</ul>
<h2 id="Bus-消息总线-Spring-Cloud-Bus"><a href="#Bus-消息总线-Spring-Cloud-Bus" class="headerlink" title="Bus 消息总线(Spring Cloud Bus)"></a>Bus 消息总线(Spring Cloud Bus)</h2><ul>
<li>简介：使用轻量级的消息代理来构建一个公用的消息主题让系统中所有微服务都连接上来，由于该主题会被所有实例监听和消费所以称消息总线。各个实例都可以广播消息让其他实例消费。</li>
<li>是基于消息队列(如：ActiveMQ/Kafka/RabbitMQ/RocketMQ), Spring Cloud Bus暂时支持RabbitMQ和Kafka</li>
</ul>
<h3 id="以RabbitMQ为例"><a href="#以RabbitMQ为例" class="headerlink" title="以RabbitMQ为例"></a>以RabbitMQ为例</h3><blockquote>
<p>RabbitMQ是实现了高级消息队列协议(AMQP)的开源消息代理软件，也称为面向消息的中间件。后续操作需要先安装RabbitMQ服务。关于RabbitMQ在SpringBoot中的使用参考SpringBoot章节</p>
</blockquote>
<ul>
<li><p>在<code>config-server</code>和<code>consumer-movie-ribbon</code>两个服务中加入bus依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- 消息总线 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动RabbitMQ服务(如果未修改默认配置，则SpringBoot会自动连接。自定义配置如下)</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这是springboot的默认配置，可根据实际情况修改</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  rabbitmq:</span></div><div class="line"><span class="attr">    host:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">    port:</span> <span class="number">5672</span></div><div class="line"><span class="attr">    username:</span> <span class="string">guest</span></div><div class="line"><span class="attr">    password:</span> <span class="string">guest</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动一个<code>config-server</code>和两个<code>consumer-movie-ribbon</code>(9000、9002)</p>
</li>
<li>修改上述【分布式配置中心】的git管理的配置字段<code>from</code></li>
<li>刷新<code>config-server</code>：<code>POST</code>访问<a href="http://localhost:7000/bus/refresh" target="_blank" rel="external">http://localhost:7000/bus/refresh</a><ul>
<li><code>POST</code>访问<a href="http://localhost:7000/refresh" target="_blank" rel="external">http://localhost:7000/refresh</a> 只能刷新<code>config-server</code>本身</li>
<li><code>POST</code>访问<a href="http://localhost:7000/bus/refresh" target="_blank" rel="external">http://localhost:7000/bus/refresh</a> 可以刷新消息总线上所有的服务</li>
<li><code>POST</code>访问<a href="http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:9000" target="_blank" rel="external">http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:9000</a> 可以刷新的指定服务实例</li>
<li><code>POST</code>访问<a href="http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:**" target="_blank" rel="external">http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:**</a> 可以刷新服务consumer-movie-ribbon下的所有实例</li>
<li>刷新消息总线上的任何一个服务都可以到达此效果(消息总线上的其他服务会收到触发刷新服务的消息，进行同步刷新)</li>
</ul>
</li>
<li><p>原理如下 [^3]</p>
<p>  <img src="/data/images/2017/07/spring-cloud-bus.png" alt="spring-cloud-bus"></p>
</li>
</ul>
<h3 id="以Kafka为例"><a href="#以Kafka为例" class="headerlink" title="以Kafka为例"></a>以Kafka为例</h3><blockquote>
<p>Kafka是有LinkedIn开发的分布式消息系统，现由Apache维护，使用Scala实现。</p>
</blockquote>
<ul>
<li><p>更换依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>只需更换依赖，其他地方同rabbitmq即可(使用kafka默认配置时会产生一个Topic为)</p>
</li>
<li>启动kafka(包括zookeeper). 关于<code>Kafka</code>使用可查看文章【Kafka】</li>
<li>启动应用后会产生一个名为springCloudBus的Topic</li>
</ul>
<h2 id="Stream-消息驱动-Spring-Cloud-Stream"><a href="#Stream-消息驱动-Spring-Cloud-Stream" class="headerlink" title="Stream 消息驱动(Spring Cloud Stream)"></a>Stream 消息驱动(Spring Cloud Stream)</h2><ul>
<li>简介<ul>
<li>Spring Cloud Stream本质上是整合了Spring Boot和Spring integration，主要包含发布-订阅、消息组、分区三个概念</li>
<li>其功能是为应用程序(Spring Boot)和消息中间件之间添加一个绑定器(Binder)，只对应用程序提供统一的Channel通道，从而应用程序不需要考虑不同消息中间件的实现(调用规则)</li>
<li>暂时只支持RabbitMQ和Kafka的自动化配置</li>
</ul>
</li>
<li><p>入门案例</p>
<ul>
<li><p>引入依赖(以服务<code>consumer-movie-ribbon</code>为例)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- 消息驱动 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 基于rabbitmq(也可以引入spring-cloud-stream-binder-rabbit/kafka/redis) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>application.yml 部分配置(consumer-movie-ribbon)</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">consumer-movie-ribbon</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line">    <span class="comment"># Spring Cloud Stream配置</span></div><div class="line"><span class="attr">    stream:</span></div><div class="line"><span class="attr">      bindings:</span></div><div class="line">        <span class="comment"># input为定义的通道名称</span></div><div class="line"><span class="attr">        input:</span></div><div class="line">          <span class="comment"># 通道数据传输类型</span></div><div class="line">          <span class="comment"># content-type: text/plain # application/json</span></div><div class="line">          <span class="comment"># 将此实例的某个Stream(input)定义为某个消费组(同一个消费组里面的实例只有其中一个对消息进行消费, 否则所有的实例都会消费, 建议定义)</span></div><div class="line"><span class="attr">          group:</span> <span class="string">group-movie</span></div><div class="line">          <span class="comment"># 应用中的监听的input通道对应中间件的主题(rabbitmq的Exchange, kafka的Topic)为xxx(默认是通道名称, 此时即input)</span></div><div class="line">          <span class="comment"># destination: xxx</span></div><div class="line">        <span class="comment"># ...此处省略其他通道配置...</span></div></pre></td></tr></table></figure>
</li>
<li><p>消息接受者(consumer-movie-ribbon)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开启绑定，启动消息驱动。</span></div><div class="line"><span class="comment">// @EnableBinding属性value可指定多个关于消息通道的配置(类)，表示需要加载的类，即根据这些类中的注解(@Input、@Output生成bean)</span></div><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;Processor.class, MyChannel.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 消息消费者监听的通道名称.</span></div><div class="line">    <span class="meta">@StreamListener</span>(Processor.INPUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"msg = "</span> + msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// @StreamListener可将收到的消息(json/xml数据格式)转换成具体的对象</span></div><div class="line">    <span class="meta">@StreamListener</span>(MyChannel.CHANNEL2_INPUT) <span class="comment">// 接受rabbitmq的channel1_output</span></div><div class="line">    <span class="meta">@SendTo</span>(MyChannel.CHANNEL2_OUTPUT) <span class="comment">// 收到消息后进行反馈(给rabbitmq的channel1_input发送)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">receive2</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"user.getUsername() ==&gt; "</span> + user.getUsername());</div><div class="line">        <span class="keyword">return</span> <span class="string">"SinkReceiver.receive2 = "</span> + user; <span class="comment">// 将此数据返回给消息发送这或者其他服务</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义通道</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyChannel</span> </span>&#123;</div><div class="line">    <span class="comment">// 输入输出通道名称最好不要相同</span></div><div class="line">    String CHANNEL2_INPUT = <span class="string">"channel2_input"</span>;</div><div class="line">    String CHANNEL2_OUTPUT = <span class="string">"channel2_output"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Input</span>(MyChannel.CHANNEL2_INPUT)</div><div class="line">    <span class="function">SubscribableChannel <span class="title">channel2_input</span><span class="params">()</span></span>; <span class="comment">// 设置消息通道名称(默认使用方法名作为消息通道名)，表示从该通道发送数据</span></div><div class="line"></div><div class="line">    <span class="meta">@Output</span>(MyChannel.CHANNEL2_OUTPUT)</div><div class="line">    <span class="function">MessageChannel <span class="title">channel2_output</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>易错点：<ul>
<li>在两个类中分别@EnableBinding绑定Processor，并同时监听@Input则报错 unknown.channel.name.(一个应用中不能绑定多个相同名称的@Input、@Output; 同理, Processor只能被一个类@EnableBinding绑定或者被两个类分别绑定@Input、@Output)</li>
<li>如果一个应用需要监听相同的主题(如：input)，可以重新命名一个@Input(“xxx”), 然后通过spring.cloud.stream.bindings.xxx.destination=input来监听input主题。或者将监听程序写在一个类中</li>
</ul>
</li>
</ul>
</li>
<li><p>消息发送者(provider-user)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableBinding</span>(MyChannel.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkSender</span> </span>&#123;</div><div class="line">    <span class="comment">// 法一：注入绑定接口</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MyChannel myChannel;</div><div class="line"></div><div class="line">    <span class="comment">// 法二：注入消息通道</span></div><div class="line">    <span class="meta">@Autowired</span> <span class="meta">@Qualifier</span>(<span class="string">"input"</span>) <span class="comment">// 此时有多个MessageChannel(根据SinkSender中@Output注入的), 需要指明</span></div><div class="line">    <span class="keyword">private</span> MessageChannel channel;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MessageChannel channel1_output;</div><div class="line"></div><div class="line">    <span class="comment">// 也可以这样注入</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SinkSender</span><span class="params">(@Qualifier(<span class="string">"channel1_output"</span>)</span> MessageChannel channel) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.channel1_output = channel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试基本的消息发送和接受</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 此条消息会在测试程序中打印</span></div><div class="line">        myChannel.channel().send(MessageBuilder.withPayload(<span class="string">"hello stream [from provider-user]"</span>).build());</div><div class="line"></div><div class="line">        <span class="comment">// 此条消息会在消息消费者中显示</span></div><div class="line">        channel.send(MessageBuilder.withPayload(<span class="string">"hello channel [from provider-user]"</span>).build());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试@StreamListener对消息自动转换和消息反馈</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgTransform</span><span class="params">()</span> </span>&#123;</div><div class="line">        channel1_output.send(MessageBuilder.withPayload(<span class="string">"&#123;\"id\": 1, \"username\": \"smalle\"&#125;"</span>).build());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 用于接受反馈消息</span></div><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;MyChannel.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelReceiver</span> </span>&#123;</div><div class="line">    <span class="comment">// 接受反馈的消息</span></div><div class="line">    <span class="meta">@StreamListener</span>(MyChannel.CHANNEL1_INPUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveSendTo</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"ChannelReceiver.receiveSendTo ==&gt; "</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义通道</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyChannel</span> </span>&#123;</div><div class="line">    String CHANNEL = <span class="string">"input"</span>;</div><div class="line">    String CHANNEL1_INPUT = <span class="string">"channel1_input"</span>;</div><div class="line">    String CHANNEL1_OUTPUT = <span class="string">"channel1_output"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Input</span>(MyChannel.CHANNEL1_INPUT)</div><div class="line">    <span class="function">SubscribableChannel <span class="title">channel1_input</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Output</span>(MyChannel.CHANNEL)</div><div class="line">    <span class="function">MessageChannel <span class="title">channel</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Output</span>(MyChannel.CHANNEL1_OUTPUT)</div><div class="line">    <span class="function">MessageChannel <span class="title">channel1_output</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Spring integration原生支持(了解，Spring Cloud Stream是基于它实现的)</p>
<ul>
<li><p>消息消费者(consumer-movie-ribbon)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;MyChannel.class&#125;) <span class="comment">// 收发消息的通道不能使用同一个MessageChannel</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@ServiceActivator</span>(inputChannel = MyChannel.POLLER_INPUT) <span class="comment">// 收发消息的通道不能使用同一个MessageChannel</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"MyReceiver: msg = "</span> + msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 消息转换(也可放在MySender中)，@ServiceActivator本身不具备消息转换功能(如：json/xml转成具体的对象)</span></div><div class="line">    <span class="meta">@Transformer</span>(inputChannel = MyChannel.POLLER_INPUT, outputChannel = MyChannel.POLLER_OUTPUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Date msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>).format(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>消息生产者(provider-user)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;MyChannel.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySender</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span> <span class="comment">// 项目启动后便会执行</span></div><div class="line">    <span class="meta">@InboundChannelAdapter</span>(value = MyChannel.POLLER_OUTPUT, poller = <span class="meta">@Poller</span>(fixedDelay = <span class="string">"5000"</span>)) <span class="comment">// 对MyChannel.POLLER_OUTPUT通道进行输出. poller表示轮询，此时为每5秒执行一次方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MessageSource&lt;Date&gt; <span class="title">timeMsgSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> () -&gt; <span class="keyword">new</span> GenericMessage&lt;&gt;(<span class="keyword">new</span> Date());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>消息分区(未测试)</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 消费者配置</div><div class="line"># 当前消费者的总实例数量(消息分区需要设置)</div><div class="line">spring.cloud.stream.instanceCount=2</div><div class="line"># 当前实例的索引号(消息分区需要设置，最大为instance-count - 1)</div><div class="line">spring.cloud.stream.instanceIndex=0</div><div class="line"># 开启消费者分区功能</div><div class="line">spring.cloud.stream.bindings.input.consumer.partitioned=true</div><div class="line"></div><div class="line"># 生成者配置</div><div class="line">spring.cloud.stream.bindings.output.destination=input</div><div class="line"># 可根据实际消息规则配置SpEL表达式生成分区键用于分配出站数据, 用于消息分区</div><div class="line">spring.cloud.stream.bindings.output.producer.partitionKeyExpression=payload</div><div class="line"># 分区数量</div><div class="line">spring.cloud.stream.bindings.output.producer.partitionCount=2</div></pre></td></tr></table></figure>
</li>
<li><p>绑定器SPI</p>
<ul>
<li>绑定器是将程序(SpringBoot)中的输入/输出通道和消息中间件的输入输出做绑定</li>
<li>Spring Cloud Stream暂时只实现了RabbitMQ和Kafka的绑定其，因此只支持此二者的自动化配置</li>
<li><p>可自己实现其他消息中间件的绑定器</p>
<ul>
<li>一个实现Binder接口的类</li>
<li>一个Spring配置加载类，用来连接中间件</li>
<li><p>一个或多个能够在classpath下找到META-INF/spring.binders定义绑定器定的文件。如：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rabbit:\</div><div class="line">org.springframework.cloud.stream.binder.rabbit.config.RabbitServiceAutoConfiguration</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>绑定器配置</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 默认的绑定器为rabbit(名字是META-INF/spring.binders中定义的)</div><div class="line">spring.cloud.stream.defaultBinder=rabbit</div><div class="line"># 定义某个通道(input)的绑定器</div><div class="line">spring.cloud.stream.bindings.input.binder=kafka</div><div class="line"></div><div class="line"># 为不同通道定义同一类型不同环境的绑定器</div><div class="line">spring.cloud.stream.bindings.input.binder=rabbit1</div><div class="line">spring.cloud.stream.bindings.output.binder=rabbit2</div><div class="line"># 定义rabbit1的类型和环境(此处省略rabbit2的配置)</div><div class="line">spring.cloud.stream.binders.rabbit1.type=rabbit1</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.host=127.0.0.1</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.port=5672</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.username=guest</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.password=guest</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Sleuth-分布式服务跟踪-Spring-Cloud-Sleuth"><a href="#Sleuth-分布式服务跟踪-Spring-Cloud-Sleuth" class="headerlink" title="Sleuth 分布式服务跟踪(Spring Cloud Sleuth)"></a>Sleuth 分布式服务跟踪(Spring Cloud Sleuth)</h2><ul>
<li>简介<ul>
<li>用来跟踪每个请求在全链路调用的过程，可快速发现每条链路上的性能瓶颈</li>
<li>构建后会自动监控RabbitMQ/Kafka传递的请求、Zuul代理传递的请求、RestTemplate发起的请求</li>
</ul>
</li>
<li><p>入门案例</p>
<ul>
<li><p>引入依赖(在生产者和消费者中都引入)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- 服务跟踪 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>访问生产者<code>http://localhost:8000/simple/1</code>，控制台输出类似<code>TRACE [provider-user,0ec3c3b4ee83efd5,0ec3c3b4ee83efd5,false]</code>的信息，信息中括号的值分别代表：应用名称、Trace ID(一个请求链路的唯一标识)、Span ID(一个基本工作单元，如一个Http请求)、是否将信息收集到Zipkin等服务中来收集和展示</p>
</li>
<li>添加配置<code>logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG</code>可打印更多信息</li>
</ul>
</li>
<li>请求头信息：<code>org.springframework.cloud.sleuth.Span</code></li>
<li><p>抽样收集</p>
<ul>
<li>Spring Cloud Sleuth收集策略通过Sampler接口实现(通过isSampled返回boolean判断是否收集)，默认会使用PercentageBasedSampler实现的抽样策略</li>
<li><code>spring.sleuth.sampler.percentage=0.1</code> 代表收集10%的请求跟踪信息</li>
<li><p>可收集请求头信息中包含某个tag的样品</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagSampler</span> <span class="keyword">implements</span> <span class="title">Sampler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String tag;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TagSampler</span><span class="params">(String tag)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tag = tag;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSampled</span><span class="params">(Span span)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> span.tags().get(tag) != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>与Zipkin整合(推荐)</p>
<ul>
<li><p>建立zipkin server</p>
<ul>
<li>新建服务<code>zipkin-server</code></li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- eureka客户端 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Zipkin创建sleuth主题的stream --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--包含Zipkin服务的核心依赖(zipkin-server)、消息中间件的核心依赖、扩展数据存依赖等. 不包含Zipkin前端界面依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Zipkin前端界面依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 存储Zipkin跟踪信息到mysql(可选. 使用mysql后, Zipkin前端界面显示的数据是通过Restful API从数据库中获取的. 不使用数据存储在Zipkin内部) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类加注解<code>@EnableEurekaClient</code>、<code>@EnableZipkinStreamServer</code>(用stream方式启动，包含常规启动@EnableZipkinServer和创建sleuth的stream主题)</p>
</li>
<li><p>application.yml配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">9411</span></div><div class="line"></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">zipkin-server</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line">    <span class="comment"># 建表语句, 用来新建zipkin跟踪信息相关表(zipkin_spans、zipkin_annotations、zipkin_dependencies), 文件在Maven:io.zipkin.java:zipkin.storage.mysql目录下</span></div><div class="line"><span class="attr">    schema:</span> <span class="attr">classpath:/mysql.sql</span></div><div class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/test</span></div><div class="line"><span class="attr">    username:</span> <span class="string">root</span></div><div class="line"><span class="attr">    password:</span> <span class="string">root</span></div><div class="line"><span class="attr">    initialize:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    continue-on-error:</span> <span class="literal">true</span></div><div class="line">  <span class="comment"># 不对此服务开启跟踪</span></div><div class="line"><span class="attr">  sleuth:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># 改变zipkin日志跟踪信息存储方式为mysql(测试也可不使用mysql存储)</span></div><div class="line"><span class="attr">zipkin:</span></div><div class="line"><span class="attr">  storage:</span></div><div class="line"><span class="attr">    type:</span> <span class="string">mysql</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>被跟踪的应用(在生产者和消费者中都引入)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--服务跟踪与Zipkin整合(可选)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果zipkin没有使用eureka， 则需要在application.yml中添加<code>spring.zipkin.base-url: http://localhost:9411/</code>(zipkin server地址)</p>
</li>
</ul>
</li>
<li>进入到zipkin server后台界面查看跟踪信息：<a href="http://localhost:9411/(跟踪信息可能会有延迟" target="_blank" rel="external">http://localhost:9411/(跟踪信息可能会有延迟</a>)</li>
</ul>
</li>
<li><p>ELK日志分析系统(Logstash)</p>
<ul>
<li>ELK平台包含：ElasticSerch(分布式搜索引擎)、Logstash(日志收集-过滤-存储)、Kibana(界面展现)三个开源工具。(与Zipkin类似，二者不建议同时使用)</li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--服务跟踪与ELK日志分析平台整合(可选，此包用于Logstash收集日志)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>将spring.application.name配置到bootstrap.yml中</p>
</li>
<li>在resources目录加logback-spring.xml文件(请看源码)</li>
</ul>
</li>
</ul>
<hr>
<p>[^3]: <a href="http://blog.csdn.net/sosfnima/article/details/53178326" target="_blank" rel="external">Spring Cloud Bus原理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;架构演进&lt;ol&gt;
&lt;li&gt;单体架构：复杂度逐渐变高、部署速度慢、阻碍技术创新、无法按需伸缩&lt;/li&gt;
&lt;li&gt;SOA &lt;a hr
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="http://blog.aezo.cn/tags/SpringCloud/"/>
    
      <category term="微服务" scheme="http://blog.aezo.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Eureka" scheme="http://blog.aezo.cn/tags/Eureka/"/>
    
      <category term="Ribbon" scheme="http://blog.aezo.cn/tags/Ribbon/"/>
    
      <category term="Feign" scheme="http://blog.aezo.cn/tags/Feign/"/>
    
      <category term="Hystrix" scheme="http://blog.aezo.cn/tags/Hystrix/"/>
    
      <category term="Zuul" scheme="http://blog.aezo.cn/tags/Zuul/"/>
    
      <category term="Config" scheme="http://blog.aezo.cn/tags/Config/"/>
    
      <category term="Bus" scheme="http://blog.aezo.cn/tags/Bus/"/>
    
  </entry>
  
  <entry>
    <title>springboot</title>
    <link href="http://blog.aezo.cn/2017/07/23/java/springboot/"/>
    <id>http://blog.aezo.cn/2017/07/23/java/springboot/</id>
    <published>2017-07-23T07:05:00.000Z</published>
    <updated>2017-10-22T10:59:56.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><code>helloworld</code>(1.5.6)</li>
<li>数据访问<ul>
<li><code>hibernate</code>(1.5.6, mysql)</li>
<li><code>mybatis</code>(1.5.6)</li>
</ul>
</li>
<li><code>thymeleaf</code>(1.5.6)</li>
<li><code>rabbitmq</code>(1.5.6)</li>
</ul>
<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--包含spring-boot-starter、hibernate-validator、jackson-databind、spring-web、spring-webmvc--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类 <code>SpringbootApplication.java</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span> <span class="comment">// @Controller</span></div><div class="line"><span class="meta">@EnableAutoConfiguration</span> <span class="comment">// 开启自动配置</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</div><div class="line">	<span class="comment">// 访问 http://localhost:8080/</span></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">	<span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Hello World!"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(SpringbootApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>至此，无需其他任何配置。浏览器访问：<a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a></p>
</li>
</ul>
<h2 id="配置文件-properties-yml"><a href="#配置文件-properties-yml" class="headerlink" title="配置文件(properties/yml)"></a>配置文件(properties/yml)</h2><ul>
<li>profile配置：可新建<code>application.properties</code>(默认)、<code>application-dev.properties</code>(会继承默认中的配置)、<code>application-prod.properties</code>、<code>application-test.properties</code>来针对不同的运行环境(<code>application-{profile}.properties</code>)</li>
<li>使用配置文件(优先级从高到低)<ul>
<li>外部配置：<code>java -jar aezocn.jar --spring.profiles.active=prod</code></li>
<li>配置文件：<code>spring.profiles.active=dev</code> 代表使用application-dev.properties的配置文件(在application.properties中添加此配置)</li>
</ul>
</li>
<li>可以idea中修改默认profiles或者某些配置达到运行多个实例的目的</li>
</ul>
<h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><ul>
<li><p>随应用启动而运行(实现<code>CommandLineRunner</code>接口)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">@Order(value = 1) // @Order值越小越优先</div><div class="line">public class HelpStartupRunner implements CommandLineRunner &#123;</div><div class="line">	@Value(&quot;$&#123;help.imageUploadRoot&#125;&quot;)</div><div class="line">	String imageUploadRoot;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run(String... args) throws Exception &#123;</div><div class="line">		initImageUploadRoot();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private void initImageUploadRoot() &#123;</div><div class="line">		System.out.println(&quot;help.imageUploadRoot = &quot; + imageUploadRoot);</div><div class="line"></div><div class="line">		File dicFile = new File(imageUploadRoot);</div><div class="line">		if(!dicFile.exists() &amp;&amp; !dicFile.isDirectory()) &#123;</div><div class="line">			dicFile.mkdir();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>拦截器</p>
<ul>
<li><p>定义拦截器</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;在请求处理之前进行调用（Controller方法调用之前）"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 只有返回true才会继续向下执行，返回false取消当前请求</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 这个方法只会在当前这个Interceptor的preHandle方法返回值为true的时候才会执行。</div><div class="line">	* postHandle是进行处理器拦截用的，它的执行时间是在处理器进行处理之后，也就是在Controller的方法调用之后执行，但是它会在DispatcherServlet进行视图的渲染之前执行，也就是说在这个方法中你可以对ModelAndView进行操作。</div><div class="line">	* 这个方法的链式结构跟正常访问的方向是相反的，也就是说先声明的Interceptor拦截器，该方法反而会后调用</div><div class="line">	*/</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></div><div class="line">						ModelAndView modelAndView) <span class="keyword">throws</span> Exception &#123;</div><div class="line">		System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;请求处理之后进行调用（Controller方法调用之后），但是在视图被渲染之前"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(response.getStatus() == <span class="number">500</span>) &#123;</div><div class="line">			modelAndView.setViewName(<span class="string">"/error/500"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(response.getStatus() == <span class="number">404</span>) &#123;</div><div class="line">			modelAndView.setViewName(<span class="string">"/error/404"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(response.getStatus() == <span class="number">403</span>) &#123;</div><div class="line">			modelAndView.setViewName(<span class="string">"/error/403"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。</div><div class="line">	* 该方法将在整个请求完成之后，也就是DispatcherServlet渲染了视图执行</div><div class="line">	* 这个方法的主要作用是用于清理资源的，当然这个方法也只能在当前这个Interceptor的preHandle方法的返回值为true时才会执行。</div><div class="line">	*/</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行（主要是用于进行资源清理工作）"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注册拦截器</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">		<span class="comment">// 多个拦截器组成一个拦截器链</span></div><div class="line">		<span class="comment">// addPathPatterns 用于添加拦截规则</span></div><div class="line">		<span class="comment">// excludePathPatterns 用于排除拦截</span></div><div class="line">		registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">super</span>.addInterceptors(registry);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="请求及响应"><a href="#请求及响应" class="headerlink" title="请求及响应"></a>请求及响应</h2><ul>
<li><p>相关配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 端口</div><div class="line">server.port=9090</div><div class="line"># context-path路径</div><div class="line">server.context-path=/myapp</div></pre></td></tr></table></figure>
</li>
<li><p>请求协议</p>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>request-method</th>
<th>content-type</th>
<th>postman</th>
<th>springboot</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>post</td>
<td>application/json</td>
<td>row-json</td>
<td>(@RequestBody User user)</td>
<td>如果后台使用了@RequestBody，此时row-text等都无法请求到</td>
</tr>
<tr>
<td>post</td>
<td>multipart/form-data</td>
<td>form-data</td>
<td>(HttpServletRequest request, User user, @RequestParam(“hello”) String hello)</td>
<td>参考实例1。可进行文件上传(包含参数)</td>
</tr>
</tbody>
</table>
<ol>
<li><p><code>&#39;content-type&#39;: &#39;multipart/form-data;</code>(postman对应form-data)：可进行文件上传(包含参数), 响应代码如：</p>
<ul>
<li><code>javascript XHR</code>需要使用<code>new FormData()</code>进行数据传输(可查看postman代码)</li>
<li><p>还可使用<code>MultipartFile</code>来接受单个文件, 使用<code>List&lt;MultipartFile&gt; files = ((MultipartHttpServletRequest) request).getFiles(&quot;file&quot;);</code>获取多个文件 <a href="[spring-boot文件上传](http://blog.csdn.net/coding13/article/details/54577076)">^3</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 此时User会根据前台参数和User类的set方法自动填充(调用的是User类的set方法)</span></div><div class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/edit-user"</span>, method = RequestMethod.POST)</div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">editEvent</span><span class="params">(HttpServletRequest request, User user, @RequestParam(<span class="string">"hello"</span>)</span> String hello) </span>&#123;</div><div class="line">	Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">	System.out.println(<span class="string">"hello = "</span> + hello); <span class="comment">// hello world</span></div><div class="line">	System.out.println(<span class="string">"user.getName() = "</span> + user.getName()); <span class="comment">// smalle</span></div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 为了获取文件项</span></div><div class="line">		Collection&lt;Part&gt; parts = request.getParts();</div><div class="line"></div><div class="line">		<span class="comment">// part中包含了所有数据(参数和文件)</span></div><div class="line">		<span class="keyword">for</span> (Part part: parts) &#123;</div><div class="line">			String originName = part.getSubmittedFileName(); <span class="comment">// 上传文件对应的文件名</span></div><div class="line">			System.out.println(<span class="string">"originName = "</span> + originName);</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(<span class="keyword">null</span> != originName) &#123;</div><div class="line">				<span class="comment">// 此part为文件</span></div><div class="line">				InputStream inputStream = part.getInputStream();</div><div class="line">				<span class="comment">// ...</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;  <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h2><ul>
<li><p>数据库驱动</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--数据库驱动--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">## spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mysql://localhost/springboot?useUnicode=true&amp;characterEncoding=utf-8</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line"></div><div class="line"># 每次启动都会执行, 且在hibernate建表语句之前执行</div><div class="line"># 若无此定义, springboot也会默认执行resources下的schema.sql(先)和data.sql(后)文件(如果存在)</div><div class="line"># 执行建表语句(也会执行插入等语句)</div><div class="line">spring.datasource.schema=classpath:schema.sql</div><div class="line"># 执行数据添加语句</div><div class="line">spring.datasource.data=classpath:data.sql</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="对hibernate的默认支持-JPA"><a href="#对hibernate的默认支持-JPA" class="headerlink" title="对hibernate的默认支持(JPA)"></a>对hibernate的默认支持(JPA)</h3><blockquote>
<p><a href="http://www.cnblogs.com/rulian/tag/jpa/" target="_blank" rel="external">Spring Data JPA博文</a></p>
<ul>
<li>继承接口查询(JpaRepository/JpaSpecificationExecutor等)：<a href="http://www.cnblogs.com/rulian/p/6557471.html" target="_blank" rel="external">http://www.cnblogs.com/rulian/p/6557471.html</a></li>
<li>方法定义规则查询：<a href="http://www.cnblogs.com/rulian/p/6434631.html" target="_blank" rel="external">http://www.cnblogs.com/rulian/p/6434631.html</a></li>
<li>Example实例查询：<a href="http://www.cnblogs.com/rulian/p/6533109.html" target="_blank" rel="external">http://www.cnblogs.com/rulian/p/6533109.html</a></li>
</ul>
</blockquote>
<ul>
<li><p>引入数据库和jpa</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--jpa是ORM框架的API(基于hibernate完成), jdbc是java操作数据库的API(执行sql语句)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据库添加配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">## spring.jpa.database=MYSQL</div><div class="line"># 自动执行ddl语句(create/create-drop/update).</div><div class="line">spring.jpa.hibernate.ddl-auto=update</div><div class="line"># 打印sql执行语句, 查询和建表</div><div class="line">spring.jpa.show-sql=true</div><div class="line"># 格式化打印语句</div><div class="line">spring.jpa.properties.hibernate.format_sql=true</div><div class="line"># 懒加载配置</div><div class="line">spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true</div></pre></td></tr></table></figure>
</li>
<li><p><code>UserDao.java</code>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 继承了JpaRepository(JpaRepository又继承了CrudRepository已经定义好了基本增删查改相关方法)</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClassDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserClass</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">	<span class="comment">// spring data 根据属性名和查询关键字自动生成查询方法(spring data会自动实现)</span></div><div class="line">	<span class="function">UserClass <span class="title">findByClassName</span><span class="params">(String className)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>UserController.java</code>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">   UserDao userDao;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/users"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">       <span class="comment">// 前台传一个类似的user对象，会把此对象做作为条件进行查询</span></div><div class="line">       Example&lt;User&gt; example = Example.of(user);</div><div class="line"></div><div class="line">       <span class="keyword">return</span> userDao.findAll(example);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>@Query</code>查询示例</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UserDao定义的查询语句. org.springframework.data.jpa.repository.Query</span></div><div class="line"><span class="meta">@Query</span>(<span class="string">"select u.classId, u.sex, count(u.classId) as count from User u "</span> +</div><div class="line">		<span class="string">"   where u.password = :password "</span> +</div><div class="line">		<span class="string">"   group by u.classId, u.sex"</span>)</div><div class="line">List&lt;Object[]&gt; countUser(<span class="meta">@Param</span>(<span class="string">"password"</span>) String password);</div><div class="line"></div><div class="line"><span class="comment">// 原生sql</span></div><div class="line"><span class="meta">@Query</span>(value = <span class="string">"select u.* from user u, user_class uc where uc.class_id = u.class_id and uc.class_name = 'one'"</span>,</div><div class="line">		nativeQuery = <span class="keyword">true</span>)</div><div class="line">List&lt;Object[]&gt; findUsers();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// @Query自定义sql语句. http://127.0.0.1:9526/api/user-query</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user-query"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line">	Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">	result.put(<span class="string">"count"</span>, userDao.countUser(<span class="string">"123456"</span>));</div><div class="line">	result.put(<span class="string">"users"</span>, userDao.findUsers());</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

- 执行结果

    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">count</span>: [</div><div class="line">		[</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="number">2</span></div><div class="line">		]</div><div class="line">	],</div><div class="line">	<span class="attr">users</span>: [</div><div class="line">		[</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="string">"smalle"</span>,</div><div class="line">			<span class="string">"123456"</span>,</div><div class="line">			<span class="number">1</span></div><div class="line">		],</div><div class="line">		[</div><div class="line">			<span class="number">2</span>,</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="string">"aezo"</span>,</div><div class="line">			<span class="string">"123456"</span>,</div><div class="line">			<span class="number">1</span></div><div class="line">		]</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p><code>Pageable</code>分页查询：Pageable里面常用参数<code>page</code>(页码, 0代表第一页)、<code>size</code>(页长)、<code>order</code>(排序规则) <a href="[hibernate查询分页](http://www.cnblogs.com/softidea/p/6287788.html)">^4</a></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查询UserClass信息, 并获取子表User的前5条数据. http://127.0.0.1:9526/api/classes?className=one</span></div><div class="line">   <span class="meta">@RequestMapping</span>(value = <span class="string">"/classes"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">findClasses</span><span class="params">(UserClass userClass)</span> </span>&#123;</div><div class="line">       Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">       <span class="comment">// 前台传一个类似的UserClass对象，会把此对象做作为条件进行查询</span></div><div class="line">       Example&lt;UserClass&gt; example = Example.of(userClass);</div><div class="line">       result.put(<span class="string">"userClass"</span>, userClassDao.findAll(example));</div><div class="line"></div><div class="line">       <span class="comment">// 分页获取User数据：如果使用classes.getUsers()获取则需要写实体对应关系(@OneToMany), 且会产生外键. 此时单表查询不需关联关系</span></div><div class="line">       Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">5</span>, <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"id"</span>)); <span class="comment">// 获取第1页, 每页显示5条, 按照id排序</span></div><div class="line">       result.put(<span class="string">"users"</span>, userDao.findAll(pageable));</div><div class="line"></div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// 分页(page为页码, 0代表第1页; size代表页长). http://127.0.0.1:9526/api/users-page?page=0</span></div><div class="line">   <span class="comment">// org.springframework.data.domain.Pageable、org.springframework.data.domain.Example</span></div><div class="line">   <span class="meta">@RequestMapping</span>(value = <span class="string">"/users-page"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> Page&lt;User&gt; <span class="title">findUsersPage</span><span class="params">(</span></span></div><div class="line">           @RequestParam(value = <span class="string">"username"</span>, defaultValue = <span class="string">"smalle"</span>) String username,</div><div class="line">           Pageable pageable) &#123;</div><div class="line">       <span class="comment">// 前台传一个类似的user对象，会把此对象做作为条件进行查询</span></div><div class="line">       Example&lt;User&gt; example = Example.of(<span class="keyword">new</span> User(username));</div><div class="line"></div><div class="line">       <span class="keyword">return</span> userDao.findAll(example, pageable);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>查询UserClass信息返回数据如下(已经美化去除引号)：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">userClass</span>: [</div><div class="line">		&#123;</div><div class="line">			<span class="attr">classId</span>: <span class="number">1</span>,</div><div class="line">			<span class="attr">className</span>: <span class="string">"one"</span></div><div class="line">		&#125;</div><div class="line">	],</div><div class="line">	<span class="attr">users</span>: &#123;</div><div class="line">		<span class="attr">content</span>: [</div><div class="line">			&#123;</div><div class="line">				<span class="attr">id</span>: <span class="number">2</span>,</div><div class="line">				<span class="attr">classId</span>: <span class="number">1</span>,</div><div class="line">				<span class="attr">username</span>: <span class="string">"aezo"</span>,</div><div class="line">				<span class="attr">password</span>: <span class="string">"123456"</span>,</div><div class="line">				<span class="attr">sex</span>: <span class="number">1</span></div><div class="line">			&#125;,</div><div class="line">			&#123;</div><div class="line">				<span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">				<span class="attr">classId</span>: <span class="number">1</span>,</div><div class="line">				<span class="attr">username</span>: <span class="string">"smalle"</span>,</div><div class="line">				<span class="attr">password</span>: <span class="string">"123456"</span>,</div><div class="line">				<span class="attr">sex</span>: <span class="number">1</span></div><div class="line">			&#125;</div><div class="line">		],</div><div class="line">		<span class="attr">totalElements</span>: <span class="number">2</span>,</div><div class="line">		<span class="attr">totalPages</span>: <span class="number">1</span>,</div><div class="line">		<span class="attr">last</span>: <span class="literal">true</span>,</div><div class="line">		<span class="attr">number</span>: <span class="number">0</span>,</div><div class="line">		<span class="attr">size</span>: <span class="number">5</span>,</div><div class="line">		<span class="attr">first</span>: <span class="literal">true</span>,</div><div class="line">		<span class="attr">numberOfElements</span>: <span class="number">2</span>,</div><div class="line">		<span class="attr">sort</span>: [</div><div class="line">			&#123;</div><div class="line">				<span class="attr">direction</span>: <span class="string">"DESC"</span>,</div><div class="line">				<span class="attr">property</span>: <span class="string">"id"</span>,</div><div class="line">				<span class="attr">ignoreCase</span>: <span class="literal">false</span>,</div><div class="line">				<span class="attr">nullHandling</span>: <span class="string">"NATIVE"</span>,</div><div class="line">				<span class="attr">ascending</span>: <span class="literal">false</span>,</div><div class="line">				<span class="attr">descending</span>: <span class="literal">true</span></div><div class="line">			&#125;</div><div class="line">		]</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="整合mybatis-5"><a href="#整合mybatis-5" class="headerlink" title="整合mybatis ^5"></a>整合mybatis <a href="[整合mybatis](http://blog.csdn.net/gebitan505/article/details/54929287)">^5</a></h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><ul>
<li><p>引入依赖(mybatis-spring-boot-starter为mybatis提供的自动配置插件)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- https://github.com/mybatis/spring-boot-starter --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类中加：<code>@MapperScan({&quot;cn.aezo.springboot.mybatis.mapper&quot;, &quot;cn.aezo.springboot.mybatis.mapperxml&quot;})</code> // 声明需要扫描mapper接口的路径</p>
</li>
<li><p>配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 基于xml配置时需指明映射文件扫描位置</div><div class="line">mybatis.mapper-locations=classpath:mapper/*.xml</div><div class="line"># mybatis配置文件位置(mybatis.config-location和mybatis.configuration...不能同时使用), 由于自动配置对插件支持不够暂时使用xml配置</div><div class="line">mybatis.config-location=classpath:mybatis-config.xml</div><div class="line"></div><div class="line"># 字段格式对应关系：数据库字段为下划线, model字段为驼峰标识(不设定则需要通过resultMap进行转换)</div><div class="line">#mybatis.configuration.map-underscore-to-camel-case=true</div><div class="line"># 类型别名定义扫描的包(可结合@Alias使用, 默认是类名首字母小写)</div><div class="line">#mybatis.type-aliases-package=cn.aezo.springboot.mybatis.model</div></pre></td></tr></table></figure>
</li>
<li><p>mybatis配置文件: <code>mybatis-config.xml</code></p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></div><div class="line"><span class="comment">&lt;!--在application.properties中使用了mybatis.configuration进行配置，无需此文件(传统配置)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--字段格式对应关系：数据库字段为下划线, model字段为驼峰标识(不设定则需要通过resultMap进行转换)--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--类型别名定义--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--定义需要扫描的包--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.aezo.springboot.mybatis.model"</span>/&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--定义后可在映射文件中间的parameterType等字段中使用userInfo代替cn.aezo.springboot.mybatis.model.UserInfo--&gt;</span></div><div class="line">		<span class="comment">&lt;!--&lt;typeAlias alias="userInfo" type="cn.aezo.springboot.mybatis.model.UserInfo" /&gt;--&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 分页插件 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 5.0.0以后使用com.github.pagehelper.PageInterceptor作为拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!--更多参数配置：https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md--&gt;</span></div><div class="line">			<span class="comment">&lt;!--&lt;property name="pageSizeZero" value="true"/&gt;--&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Model：UserInfo/ClassInfo等无需任何注解.(其中HobbyEnum是一个枚举类)</p>
</li>
</ul>
<h4 id="annotation版本-适合简单业务"><a href="#annotation版本-适合简单业务" class="headerlink" title="annotation版本(适合简单业务)"></a>annotation版本(适合简单业务)</h4><ul>
<li><p><code>annotation版本(适合简单业务)</code></p>
<ul>
<li><p>Dao层：UserMapper.java</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @Mapper // 在启动类中定义需要扫码mapper的包：@MapperScan("cn.aezo.springboot.mybatis.mapper"), 则此处无需声明@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line">	<span class="comment">// 此处注入变量可以使用#或者$, 区别：# 创建的是一个prepared statement语句, $ 符创建的是一个inlined statement语句</span></div><div class="line">	<span class="meta">@Select</span>(<span class="string">"select * from user_info where nick_name = #&#123;nickName&#125;"</span>)</div><div class="line">	<span class="comment">// (使用配置&lt;setting name="mapUnderscoreToCamelCase" value="true"/&gt;因此无需转换) 数据库字段名和model字段名或javaType不一致的均需要@Result转换</span></div><div class="line">	<span class="comment">// @Results(&#123;</span></div><div class="line">	<span class="comment">//         @Result(property = "hobby",  column = "hobby", javaType = HobbyEnum.class),</span></div><div class="line">	<span class="comment">//         @Result(property = "nickName", column = "nick_name"),</span></div><div class="line">	<span class="comment">//         @Result(property = "groupId", column = "group_Id")</span></div><div class="line">	<span class="comment">// &#125;)</span></div><div class="line">	<span class="function">UserInfo <span class="title">findByNickName</span><span class="params">(String nickName)</span></span>;</div><div class="line"></div><div class="line">	<span class="meta">@Select</span>(<span class="string">"select * from user_info"</span>)</div><div class="line">	<span class="function">List&lt;UserInfo&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="meta">@Insert</span>(<span class="string">"insert into user_info(nick_name, group_id, hobby) values(#&#123;nickName&#125;, #&#123;groupId&#125;, #&#123;hobby&#125;)"</span>)</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(UserInfo userInfo)</span></span>;</div><div class="line"></div><div class="line">	<span class="meta">@Update</span>(<span class="string">"update user_info set nick_name = #&#123;nickName&#125;, hobby = #&#123;hobby&#125; where id = #&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(UserInfo userInfo)</span></span>;</div><div class="line"></div><div class="line">	<span class="meta">@Delete</span>(<span class="string">"delete from user_info where id = #&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>分页</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 分页查询：http://localhost:9526/api/users</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/users"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> PageInfo <span class="title">showAllUser</span><span class="params">(</span></span></div><div class="line">		@RequestParam(defaultValue = <span class="string">"1"</span>) Integer pageNum,</div><div class="line">		@<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"5"</span>)</span> Integer pageSize) &#123;</div><div class="line">	PageHelper.startPage(pageNum, pageSize); <span class="comment">// 默认查询第一页，显示5条数据</span></div><div class="line">	List&lt;UserInfo&gt; users = userMapper.findAll(); <span class="comment">// 第一条执行的SQL语句会被分页，实际上输出users是page对象</span></div><div class="line">	PageInfo&lt;UserInfo&gt; pageUser = <span class="keyword">new</span> PageInfo&lt;UserInfo&gt;(users); <span class="comment">// 将users对象绑定到pageInfo</span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> pageUser;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>分页查询结果</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">pageNum</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">pageSize</span>: <span class="number">5</span>,</div><div class="line">	<span class="attr">size</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">startRow</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">endRow</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">total</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">pages</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">list</span>: [</div><div class="line">		&#123;</div><div class="line">			<span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">			<span class="attr">groupId</span>: <span class="number">1</span>,</div><div class="line">			<span class="attr">nickName</span>: <span class="string">"smalle"</span>,</div><div class="line">			<span class="attr">hobby</span>: <span class="string">"GAME"</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">id</span>: <span class="number">2</span>,</div><div class="line">			<span class="attr">groupId</span>: <span class="number">1</span>,</div><div class="line">			<span class="attr">nickName</span>: <span class="string">"aezo"</span>,</div><div class="line">			<span class="attr">hobby</span>: <span class="string">"CODE"</span></div><div class="line">		&#125;</div><div class="line">	],</div><div class="line">	<span class="attr">prePage</span>: <span class="number">0</span>,</div><div class="line">	<span class="attr">nextPage</span>: <span class="number">0</span>,</div><div class="line">	<span class="attr">isFirstPage</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">isLastPage</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">hasPreviousPage</span>: <span class="literal">false</span>,</div><div class="line">	<span class="attr">hasNextPage</span>: <span class="literal">false</span>,</div><div class="line">	<span class="attr">navigatePages</span>: <span class="number">8</span>,</div><div class="line">	<span class="attr">navigatepageNums</span>: [</div><div class="line">		<span class="number">1</span></div><div class="line">	],</div><div class="line">	<span class="attr">navigateFirstPage</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">navigateLastPage</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">firstPage</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">lastPage</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>测试</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByNickName</span><span class="params">()</span> </span>&#123;</div><div class="line">	UserInfo userInfo = userMapper.findByNickName(<span class="string">"smalle"</span>);</div><div class="line">	System.out.println(<span class="string">"userInfo = "</span> + userInfo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	userMapper.insert(<span class="keyword">new</span> UserInfo(<span class="string">"test"</span>, <span class="number">1L</span>, HobbyEnum.READ));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="xml版本-适合复杂操作"><a href="#xml版本-适合复杂操作" class="headerlink" title="xml版本(适合复杂操作)"></a>xml版本(适合复杂操作)</h4><ul>
<li><p><code>xml版本(适合复杂操作)</code></p>
<ul>
<li><p>Dao层：UserMapperXml.java</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapperXml</span> </span>&#123;</div><div class="line">	<span class="function">List&lt;UserInfo&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="function">UserInfo <span class="title">getOne</span><span class="params">(Long id)</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(UserInfo user)</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(UserInfo user)</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Dao实现(映射文件): UserMapper.xml(放在resources/mapper目录下)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"><span class="comment">&lt;!--http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html#--&gt;</span></div><div class="line"><span class="comment">&lt;!--sql映射文件: namespace必须为实现接口名；每个sql是一个statement--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.aezo.springboot.mybatis.mapperxml.UserMapperXml"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--resultMap结果集映射定义(用来描述如何从数据库结果集中来加载对象). resultType 与resultMap 不能并用--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserInfoResultMap"</span> <span class="attr">type</span>=<span class="string">"cn.aezo.springboot.mybatis.model.UserInfo"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--设置mybatis.configuration.map-underscore-to-camel-case=true则会自动对格式进行转换, 无效下面转换--&gt;</span></div><div class="line">		<span class="comment">&lt;!--&lt;result column="group_id" property="groupId" jdbcType="BIGINT"/&gt;--&gt;</span></div><div class="line">		<span class="comment">&lt;!--&lt;result column="nick_name" property="nickName" jdbcType="VARCHAR"/&gt;--&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--sql:可被其他语句引用的可重用语句块. id:唯一的标识符，可被其它语句引用--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"UserInfoColumns"</span>&gt;</span> id, group_id, nick_name, hobby <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--id对应接口的方法名; resultType 与resultMap 不能并用; --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- statementType: STATEMENT(statement)、PREPARED(preparedstatement, 默认)、CALLABLE(callablestatement)--&gt;</span></div><div class="line">	<span class="comment">&lt;!-- resultSetType: FORWARD_ONLY(游标向前滑动)，SCROLL_SENSITIVE(滚动敏感)，SCROLL_INSENSITIVE(不区分大小写的滚动)--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"UserInfoResultMap"</span>&gt;</span></div><div class="line">		select</div><div class="line">		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"UserInfoColumns"</span>/&gt;</span></div><div class="line">		from user_info</div><div class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--parameterType传入参数类型. 使用typeAliases进行类型别名映射后可写成resultType="userInfo"(自动扫描包mybatis.type-aliases-package, 默认该包下的类名首字母小写为别名) --&gt;</span></div><div class="line">	<span class="comment">&lt;!--如果返回结果使用resultType="cn.aezo.springboot.mybatis.model.UserInfo", 则nickName，groupId则为null. 此处使用resultMap指明字段对应关系--&gt;</span></div><div class="line">	<span class="comment">&lt;!-- #&#123;&#125;是实现的是PrepareStatement，$&#123;&#125;实现的是普通Statement --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOne"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span> <span class="attr">resultType</span>=<span class="string">"userInfo"</span>&gt;</span></div><div class="line">		select</div><div class="line">		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"UserInfoColumns"</span>/&gt;</span></div><div class="line">		from user_info</div><div class="line">		where id = #&#123;id&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"cn.aezo.springboot.mybatis.model.UserInfo"</span>&gt;</span></div><div class="line">		insert into</div><div class="line">		user_info</div><div class="line">		(nick_name, group_id, hobby)</div><div class="line">		values</div><div class="line">		(#&#123;nickName&#125;, #&#123;groupId&#125;, #&#123;hobby&#125;)</div><div class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.aezo.springboot.mybatis.model.UserInfo"</span>&gt;</span></div><div class="line">		update</div><div class="line">		user_info</div><div class="line">		set</div><div class="line">		<span class="comment">&lt;!--动态sql, 标签：if、choose (when, otherwise)、trim (where, set)、foreach--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"nickName != null"</span>&gt;</span>nick_name = #&#123;nickName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">		hobby = #&#123;hobby&#125;</div><div class="line">		where</div><div class="line">		id = #&#123;id&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span>&gt;</span></div><div class="line">		delete from</div><div class="line">		user_info</div><div class="line">		where</div><div class="line">		id = #&#123;id&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="MyBatis-Generator"><a href="#MyBatis-Generator" class="headerlink" title="MyBatis Generator"></a>MyBatis Generator</h4><ul>
<li>使用<code>MyBatis Generator</code>自动生成model/dao/mapper</li>
<li>官方文档：<a href="http://www.mybatis.org/generator/index.html" target="_blank" rel="external">http://www.mybatis.org/generator/index.html</a></li>
<li><p>生成方式有多种(此处介绍maven插件的方式)</p>
<ul>
<li><p>maven配置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- mybatis(mapper等)自动生成 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!--maven可执行命令--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>resources目录添加文件：<code>generatorConfig.xml</code></p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></div><div class="line">		PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</div><div class="line">		"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--数据库驱动 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"C:\Users\smalle\.m2\repository\mysql\mysql-connector-java\5.1.43\mysql-connector-java-5.1.43.jar"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MySQL2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--数据库链接地址账号密码 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">jdbcConnection</span></span></div><div class="line">				<span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></div><div class="line">				<span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/springboot"</span></div><div class="line">				<span class="attr">userId</span>=<span class="string">"root"</span></div><div class="line">				<span class="attr">password</span>=<span class="string">"root"</span>&gt;</div><div class="line">		<span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--生成Model类存放位置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">javaModelGenerator</span></span></div><div class="line">				<span class="attr">targetPackage</span>=<span class="string">"cn.aezo.springboot.mybatis.generator.model"</span></div><div class="line">				<span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--生成映射文件存放位置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">sqlMapGenerator</span></span></div><div class="line">				<span class="attr">targetPackage</span>=<span class="string">"cn.aezo.springboot.mybatis.generator.mapper"</span></div><div class="line">				<span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--生成Dao类存放位置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">javaClientGenerator</span></span></div><div class="line">				<span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></div><div class="line">				<span class="attr">targetPackage</span>=<span class="string">"cn.aezo.springboot.mybatis.generator.dao"</span></div><div class="line">				<span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--生成对应表及类名 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span></span></div><div class="line">				<span class="attr">tableName</span>=<span class="string">"%"</span></div><div class="line">				<span class="attr">enableCountByExample</span>=<span class="string">"true"</span></div><div class="line">				<span class="attr">enableUpdateByExample</span>=<span class="string">"true"</span></div><div class="line">				<span class="attr">enableDeleteByExample</span>=<span class="string">"true"</span></div><div class="line">				<span class="attr">enableSelectByExample</span>=<span class="string">"true"</span></div><div class="line">				<span class="attr">selectByExampleQueryId</span>=<span class="string">"true"</span>&gt;</div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>执行命令生成文件：<code>mvn mybatis-generator:generate</code></p>
</li>
<li>生成Mapper中Example的使用：<a href="http://www.mybatis.org/generator/generatedobjects/exampleClassUsage.html" target="_blank" rel="external">http://www.mybatis.org/generator/generatedobjects/exampleClassUsage.html</a></li>
</ul>
</li>
</ul>
<h3 id="数据库相关配置"><a href="#数据库相关配置" class="headerlink" title="数据库相关配置"></a>数据库相关配置</h3><ul>
<li><p>数据库/表新建时命名策略(JPA) <a href="https://docs.spring.io/spring-boot/docs/1.5.6.RELEASE/reference/htmlsingle/#howto-configure-hibernate-naming-strategy" target="_blank" rel="external">doc</a></p>
<ul>
<li><code>org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy</code>为springboot默认提供命令策略(实体驼峰转成数据库下划线)</li>
<li><p>示例：给表名加前缀</p>
<ul>
<li><p>配置：<code>spring.jpa.hibernate.naming.physical-strategy=cn.aezo.springboot.CustomPhysicalNamingStrategy</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPhysicalNamingStrategy</span> <span class="keyword">extends</span> <span class="title">SpringPhysicalNamingStrategy</span> </span>&#123;</div><div class="line">	<span class="comment">// 重写父类方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Identifier <span class="title">toPhysicalTableName</span><span class="params">(Identifier name, JdbcEnvironment jdbcEnvironment)</span> </span>&#123;</div><div class="line">		<span class="comment">// System.out.println("name = " + name);</span></div><div class="line">		<span class="comment">// System.out.println("jdbcEnvironment = " + jdbcEnvironment);</span></div><div class="line">		<span class="comment">// System.out.println("name.getCanonicalName() = " + name.getCanonicalName());</span></div><div class="line">		<span class="comment">// System.out.println("name.getText() = " + name.getText());</span></div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.apply(Identifier.toIdentifier(<span class="string">"th_"</span> + name.getText()), jdbcEnvironment);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// copy父类方法</span></div><div class="line">	<span class="function"><span class="keyword">private</span> Identifier <span class="title">apply</span><span class="params">(Identifier name, JdbcEnvironment jdbcEnvironment)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			StringBuilder builder = <span class="keyword">new</span> StringBuilder(name.getText().replace(<span class="string">'.'</span>, <span class="string">'_'</span>));</div><div class="line"></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; builder.length() - <span class="number">1</span>; ++i) &#123;</div><div class="line">				<span class="keyword">if</span>(<span class="keyword">this</span>.isUnderscoreRequired(builder.charAt(i - <span class="number">1</span>), builder.charAt(i), builder.charAt(i + <span class="number">1</span>))) &#123;</div><div class="line">					builder.insert(i++, <span class="string">'_'</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.getIdentifier(builder.toString(), name.isQuoted(), jdbcEnvironment);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// copy父类方法</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isUnderscoreRequired</span><span class="params">(<span class="keyword">char</span> before, <span class="keyword">char</span> current, <span class="keyword">char</span> after)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> Character.isLowerCase(before) &amp;&amp; Character.isUpperCase(current) &amp;&amp; Character.isLowerCase(after);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="使用H2数据库-1"><a href="#使用H2数据库-1" class="headerlink" title="使用H2数据库 ^1"></a>使用H2数据库 <a href="[idea连接h2](https://stackoverflow.com/questions/31498682/spring-boot-intellij-embedded-database-headache)">^1</a></h3><ul>
<li>h2简介：内存数据库（Embedded database或in-momery database）具有配置简单、启动速度快、尤其是其可测试性等优点，使其成为开发过程中非常有用的轻量级数据库。在spring中支持HSQL、H2和Derby三种数据库</li>
<li><a href="http://h2database.com/html/main.html" target="_blank" rel="external">官网：http://h2database.com/html/main.html</a></li>
<li>springboot整合：<a href="../db/h2.md">文章：《h2》</a></li>
</ul>
<h2 id="thymeleaf模板引擎"><a href="#thymeleaf模板引擎" class="headerlink" title="thymeleaf模板引擎"></a>thymeleaf模板引擎</h2><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--thymeleaf模板引擎, 包含spring-boot-starter-web--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 可选：thymeleaf和springsecurity结合在页面级别进行权限控制 --&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;dependency&gt;</span></div><div class="line">	&lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;thymeleaf-extras-springsecurity4&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>properties配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#spring:</span></div><div class="line"><span class="comment">#  thymeleaf:</span></div><div class="line"><span class="comment">#	# 将thymeleaf文件放在resources/templates/目录</span></div><div class="line">   <span class="comment">#	prefix: classpath:/templates/</span></div><div class="line">   <span class="comment">#	suffix: .html</span></div></pre></td></tr></table></figure>
</li>
<li><p>thymeleaf缓存(热部署)</p>
<ul>
<li>推荐使用<code>JRebel</code>(idea需要Ctrl+Shift+F9刷新)</li>
<li><p>使用<code>devtools</code>(也适用于java文件热部署)</p>
<ul>
<li><p>增加maven配置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>idea需要Ctrl+Shift+F9刷新，相当于重启项目，较普通项目重启快</p>
</li>
</ul>
</li>
<li>配置中加<code>spring.thymeleaf.cache=false</code><ul>
<li>需要使用maven启动</li>
</ul>
</li>
</ul>
</li>
<li><p>示例</p>
<ul>
<li><p>Controller：类的注解必须是<code>@Controller</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span> <span class="comment">// 此时不能是@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 页面显示resources/templates/hello.html的内容</span></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Map&lt;String, Object&gt; model)</span> </span>&#123;</div><div class="line">		<span class="comment">// 无需注入参数值时，则方法可不接收model参数</span></div><div class="line">		model.put(<span class="string">"hello"</span>, <span class="string">"UserController.thymeleaf"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="string">"/hello"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>hello.html文件</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="comment">&lt;!-- xmlns:th="http://www.thymeleaf.org"声明后方可使用 th:* --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>smalle<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;hello&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>显示结果(第二个${hello}并不能解析)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UserController.thymeleaf</div><div class="line">$&#123;hello&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>thymeleaf语法：<a href="../lang/thymeleaf.md">文章：《thymeleaf》</a></p>
</li>
</ul>
<h2 id="企业级开发"><a href="#企业级开发" class="headerlink" title="企业级开发"></a>企业级开发</h2><h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><ul>
<li><p>RabbitMQ是实现了高级消息队列协议(AMQP)的开源消息代理软件，也称为面向消息的中间件。后续操作需要先安装RabbitMQ服务</p>
</li>
<li><p>引入对amqp协议支持依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置rabbitmq服务器链接</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  rabbitmq:</span></div><div class="line"><span class="attr">    host:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">    port:</span> <span class="number">5672</span></div><div class="line"><span class="attr">    username:</span> <span class="string">guest</span></div><div class="line"><span class="attr">    password:</span> <span class="string">guest</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置队列、生产者、消费者</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 配置队列 hello</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">helloQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"hello"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 生产者</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</div><div class="line"></div><div class="line">    <span class="comment">// 发送消息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</div><div class="line">        String context = <span class="string">"hello "</span> + <span class="keyword">new</span> Date();</div><div class="line">        System.out.println(<span class="string">"Provider: "</span> + context);</div><div class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">"hello"</span>, context);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 消费者</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"hello"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RabbitHandler</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Consumer: "</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="session共享"><a href="#session共享" class="headerlink" title="session共享"></a>session共享</h3><ul>
<li>基于redis实现session共享. 多个项目需要都引入此依赖，并连接相同的redis</li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- redis依赖 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;dependency&gt;</span></div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt; --&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>启动类加<code>@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 7200)</code> (maxInactiveIntervalInSeconds即session检测的最大时间间隔)</p>
</li>
<li>可将一个项目启动两个端口进行测试</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="替换项目运行时springboot的logo"><a href="#替换项目运行时springboot的logo" class="headerlink" title="替换项目运行时springboot的logo"></a>替换项目运行时springboot的logo</h3><ul>
<li><p>在<code>resources</code>添加<code>banner.txt</code>文件. 内容自定义(文字转字符：<a href="http://patorjk.com/software/taag/)，如：" target="_blank" rel="external">http://patorjk.com/software/taag/)，如：</a></p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"> .oooo.    .ooooo.    oooooooo  .ooooo.   .ooooo.  ooo. .oo.   </div><div class="line">`P  )88b  d88' `88b  d'""7d8P  d88' `88b d88' `"Y8 `888P"Y88b  </div><div class="line"> .oP"888  888ooo888    .d8P'   888   888 888        888   888  </div><div class="line">d8(  888  888    .o  .d8P'  .P 888   888 888   .o8  888   888  </div><div class="line">`Y888""8o `Y8bod8P' d8888888P  `Y8bod8P' `Y8bod8P' o888o o888o</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;helloworld&lt;/code&gt;(1.5.6)&lt;/li&gt;
&lt;li&gt;数据访问&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hiber
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="springboot" scheme="http://blog.aezo.cn/tags/springboot/"/>
    
      <category term="hibernate" scheme="http://blog.aezo.cn/tags/hibernate/"/>
    
      <category term="rabbitmq" scheme="http://blog.aezo.cn/tags/rabbitmq/"/>
    
      <category term="mybatis" scheme="http://blog.aezo.cn/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="http://blog.aezo.cn/2017/07/01/java/spring/"/>
    <id>http://blog.aezo.cn/2017/07/01/java/spring/</id>
    <published>2017-07-01T10:47:00.000Z</published>
    <updated>2017-07-24T10:44:08.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol>
<li>spring项目官网：<a href="https://spring.io/projects" target="_blank" rel="external">https://spring.io/projects</a> ，其中的<code>spring-framework</code>即是spring框架内容</li>
<li>历史：(1) spring 1.x，xml配置时代 (2) spring 2.x，注解时代 (3) <strong>spring 3.x，java配置</strong></li>
<li>spring模块(每个模块有个jar包)：<ul>
<li>核心容器：<code>spring-core</code>, <code>spring-beans</code>, <code>spring-context</code>(运行时spring容器), <code>spring-context-support</code>(spring对第三方包的集成支持), <code>spring-expression</code>(使用表达式语言在运行时查询和操作对象)</li>
<li>AOP：spring-aop, spring-aspects</li>
<li>消息：spring-messaging</li>
<li>数据访问：<code>spring-jdbc</code>, <code>spring-tx</code>(提供编程式和声明明式事物支持), <code>spring-orm</code>, <code>spring-oxm</code>(提供对对象/xml映射技术支持), <code>spring-jms</code>(提供jms支持)</li>
<li>Web： <code>spring-web</code>(在web项目中提供spring容器), <code>spring-webmvc</code>(基于Servlet的SpringMVC), <code>spring-websocket</code>, <code>spring-webmvc-portlet</code></li>
</ul>
</li>
<li>spring生态：<code>Spring Boot</code>(使用默认开发配置来快速开发)、<code>Spring Cloud</code>(为分布式系统开发提供工具集)等</li>
<li>本文档基于spring4.3.8</li>
</ol>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ul>
<li><p>maven依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--包含spring-core、spring-beans、spring-aop、spring-expression、spring-instrument--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>依赖注入</p>
<ul>
<li>声明Bean的注解(下面几个注解效果一样)：<ul>
<li><code>@Component</code> 没有明确的角色</li>
<li><code>@Service</code> 在业务逻辑层(cn.aezo.spring.aop_spel.service)使用</li>
<li><code>@Repository</code> 在数据访问层(cn.aezo.spring.aop_spel.dao)使用</li>
<li><code>@Controller</code> 在展现层使用</li>
</ul>
</li>
<li>注入Bean的注解(效果一样)<ul>
<li><code>@Autowired</code> Spring提供(默认按类型by type(根据类); 如果想用by name，则使用<code>@Qualifier(&quot;my-bean-name&quot;)</code>)</li>
<li><code>@Resource</code> JSR-250提供(常用)</li>
<li><code>@Inject</code> JSR-330提供</li>
</ul>
</li>
</ul>
</li>
<li>java配置<ul>
<li><code>@Configuration</code> 注解类表示此类是一个配置类，里面有0个或者多个<code>@Bean</code><ul>
<li><code>@ComponetScan(&quot;cn.aezo&quot;)</code> 定义需要扫描的包名，并将里面的<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>注解的类注册为Bean</li>
</ul>
</li>
<li><code>@Bean</code> 注解方法，表示当前方法的返回值是一个Bean，Bean的名称是方法名</li>
<li>一般公共类使用java配置进行Bean声明，业务相关类使用注解进行Bean声明</li>
</ul>
</li>
<li><p>调用</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");</span></div><div class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class); <span class="comment">// AppConfig为定义的java配置类</span></div><div class="line"></div><div class="line">Hello hello = context.getBean(<span class="string">"hello"</span>, Hello.class);</div><div class="line">hello.hello();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul>
<li>相关注解<ul>
<li><code>@Aspect</code> 声明一个切面</li>
<li><code>@Before</code>、<code>@After</code>、<code>@Around</code> 定义建言(advice)</li>
</ul>
</li>
<li><p>maven依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!--不要也可测试成功--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>编写切面</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span> <span class="comment">// 声明一个切面</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</div><div class="line">    <span class="comment">// 法一：简单</span></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* cn.aezo.spring.base.annotation.aop.DemoMethodService.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</div><div class="line">        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();</div><div class="line">        Method method = methodSignature.getMethod();</div><div class="line">        System.out.println(<span class="string">"方法规则式拦截[@Before-execution]："</span> + method.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>调用service</p>
</li>
</ul>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><ul>
<li><code>@Scope(&quot;prototype&quot;)</code> 注解类(配置Bean的作用域)<ul>
<li><code>singleton</code> 整个容器共享一个实例（默认配置）</li>
<li><code>prototype</code> 每次调用新建一个实例</li>
<li><code>request</code> Web项目中，每一个Http Request新建一个实例</li>
<li><code>session</code></li>
<li><code>globalSession</code> 用于portal应用</li>
</ul>
</li>
</ul>
<h3 id="EL-Spring-EL"><a href="#EL-Spring-EL" class="headerlink" title="EL(Spring-EL)"></a>EL(Spring-EL)</h3><ul>
<li><code>@Value</code> 在其中输入EL表达式。可对资源进行注入</li>
<li><p>实例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.aezo.spring.base.annotation.el"</span>)</div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:cn/aezo/spring/base/annotation/el/el.properties"</span>) <span class="comment">// 注入配置文件</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ELConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"I Love You"</span>)</div><div class="line">    <span class="keyword">private</span> String normal;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;systemProperties['os.name']&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String osName;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;T(java.lang.Math).random() * 100.0&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String randomNumber;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;site.url:www.aezo.cn&#125;"</span>) <span class="comment">// 读取配置文件(需要注入配置文件)，使用$而不是#。冒号后面是缺省值</span></div><div class="line">    <span class="keyword">private</span> Resource siteUrl;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;demoService.another&#125;"</span>) <span class="comment">// 读取其他类属性的@Value注解值</span></div><div class="line">    <span class="keyword">private</span> String fromAnother;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"classpath:cn/aezo/spring/base/annotation/el/test.txt"</span>)</div><div class="line">    <span class="keyword">private</span> Resource testFile;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"http://www.baidu.com"</span>)</div><div class="line">    <span class="keyword">private</span> Resource testUrl;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Environment environment;</div><div class="line"></div><div class="line">    <span class="comment">// @Bean</span></div><div class="line">    <span class="comment">// public static PropertySourcesPlaceholderConfigurer propertyConfigurer() &#123;</span></div><div class="line">    <span class="comment">//     return new PropertySourcesPlaceholderConfigurer();</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputResource</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"normal = "</span> + normal);</div><div class="line">        System.out.println(<span class="string">"osName = "</span> + osName);</div><div class="line">        System.out.println(<span class="string">"randomNumber = "</span> + randomNumber);</div><div class="line">        System.out.println(<span class="string">"normal = "</span> + siteUrl);</div><div class="line">        System.out.println(<span class="string">"fromAnother = "</span> + fromAnother);</div><div class="line">        System.out.println(<span class="string">"environment = "</span> + environment.getProperty(<span class="string">"site.url"</span>));</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"testFile = "</span> + IOUtils.toString(testFile.getInputStream(), <span class="string">"UTF-8"</span>));</div><div class="line">            System.out.println(<span class="string">"testUrl = "</span> + IOUtils.toString(testUrl.getInputStream(), <span class="string">"UTF-8"</span>));</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h3><ul>
<li>不同的环境读取不同的配置文件：<code>dev</code>/<code>prod</code></li>
</ul>
<h3 id="Application-Event"><a href="#Application-Event" class="headerlink" title="Application Event"></a>Application Event</h3><ul>
<li>事件：一个Bean(A)完成某个任务后，可以给另外一个Bean(B)发送事件，前提是B对A进行了监听</li>
<li><p>方法：</p>
<ul>
<li><p>继承<code>ApplicationEvent</code> 进行事件定义</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoEvent</span><span class="params">(Object source, String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(source);</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现<code>ApplicationListener</code> 进行事件监听</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">DemoEvent</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(DemoEvent demoEvent)</span> </span>&#123;</div><div class="line">        String message = demoEvent.getMessage();</div><div class="line">        System.out.println(<span class="string">"DemoListener.onApplicationEvent=="</span> + message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>applicationContext.publishEvent(new DemoEvent(this, message));</code> 发布事件</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoPublisher</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ApplicationContext applicationContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        applicationContext.publishEvent(<span class="keyword">new</span> DemoEvent(<span class="keyword">this</span>, message));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="Spring-Aware"><a href="#Spring-Aware" class="headerlink" title="Spring Aware"></a>Spring Aware</h3><ul>
<li>Spring依赖注入最大的亮点就是你所有的Bean对Spring容器的存在是无意识的。即你可以将容器换成其他容器，如Google Guice，这是Bean之间的耦合度很低。</li>
<li>Spring Aware可以让你的Bean调用Spring提供的资源，缺点是Bean会和Spring框架耦合。</li>
<li>相关接口<ul>
<li><code>BeanNameAware</code> 获得容器中Bean的名称</li>
<li><code>BeanFactoryAware</code> 获得当前Bean Factory，这样就有可以调用容器服务</li>
<li><code>ApplicationContextAware</code> 获得当前Application Context，这样就有可以调用容器服务</li>
<li><code>MessageSourceAware</code> 获得当前Message Source，可以获得文本信息</li>
<li><code>ApplicationEventPublisherAware</code> 应用事件发布器，可以发布事件</li>
<li><code>ResourceLoaderAware</code> 获得资源加载器，可以获取外部资源</li>
</ul>
</li>
<li><p>实例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwareService</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">ResourceLoaderAware</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String beanName;</div><div class="line">    <span class="keyword">private</span> ResourceLoader loader;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.beanName = s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loader = resourceLoader;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputResult</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"beanName = "</span> + beanName);</div><div class="line">        Resource resource = loader.getResource(<span class="string">"classpath:cn/aezo/spring/base/annotation/springaware/test.txt"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String test = IOUtils.toString(resource.getInputStream(), <span class="string">"UTF-8"</span>);</div><div class="line">            System.out.println(<span class="string">"test = "</span> + test);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul>
<li>Spring通过任务执行器(TaskExecutor)来实现多线程和并发编程。使用<code>ThreadPoolTaskExecutor</code>可实现一个基于线程池的TaskExecutor。</li>
<li><code>@EnableAsync</code> 可开启对异步任务的支持。需要对应的配置类实现</li>
<li><code>@Async</code> 注解执行异步任务的方法</li>
<li><p>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取线程池</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.aezo.spring.base.annotation.thread"</span>)</div><div class="line"><span class="meta">@EnableAsync</span> <span class="comment">// 开启异步任务支持</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskExecutorConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">        ThreadPoolTaskExecutor taskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</div><div class="line">        taskExecutor.setCorePoolSize(<span class="number">5</span>);</div><div class="line">        taskExecutor.setMaxPoolSize(<span class="number">10</span>);</div><div class="line">        taskExecutor.setQueueCapacity(<span class="number">25</span>);</div><div class="line">        taskExecutor.initialize();</div><div class="line">        <span class="keyword">return</span> taskExecutor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义异步方法</span></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskService</span> </span>&#123;</div><div class="line">    <span class="meta">@Async</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeAsyncTask</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"i = "</span> + i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Async</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeAsyncTaskPlus</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"i+1 = "</span> + (i+<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ul>
<li><code>@EnableScheduling</code> 开启定时任务</li>
<li><p><code>@Scheduled</code> 执行任务的方法</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.aezo.spring.base.annotation.scheduled"</span>)</div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskScheduledConfig</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTaskService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>) <span class="comment">// 5000毫秒. fixedRate每隔固定时间执行</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"每隔5秒执行一次："</span> + dateFormat.format(<span class="keyword">new</span> Date()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 50 14 ? * *"</span>) <span class="comment">// 每天14.50执行</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fixTimeException</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"在指定时间执行："</span> + dateFormat.format(<span class="keyword">new</span> Date()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="条件注解-Condition"><a href="#条件注解-Condition" class="headerlink" title="条件注解(Condition)"></a>条件注解(Condition)</h3><ul>
<li><code>@Condition</code> 根据满足某一特定条件来创建某个特定的Bean. 如某个Bean创建后才会创建另一个Bean(Spring 4.x)</li>
<li>方法<ul>
<li>条件类实现<code>Condition</code>接口</li>
<li>自定义服务接口，并有多种实现</li>
<li>在<code>@Configuration</code>中<code>@Bean</code>的方法上注解<code>@Conditional(条件类.class)</code>表示符合此条件才会创建对应的Bean</li>
</ul>
</li>
</ul>
<h3 id="组合注解、元注解"><a href="#组合注解、元注解" class="headerlink" title="组合注解、元注解"></a>组合注解、元注解</h3><ul>
<li>元注解是指可以注解到其他注解上的注解，被元注解注解之后的注解称之为组合注解</li>
<li>如<code>@Configuration</code>是包含<code>@Component</code>的组合注解，<code>@Component</code>为元注解</li>
<li><p>示例，将<code>@Configuration</code>和<code>@ComponentScan</code>组合成一个注解</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WiselyConfiguration &#123;</div><div class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;spring项目官网：&lt;a href=&quot;https://spring.io/projects&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="spring" scheme="http://blog.aezo.cn/tags/spring/"/>
    
      <category term="spring-mvc" scheme="http://blog.aezo.cn/tags/spring-mvc/"/>
    
  </entry>
  
  <entry>
    <title>hibernate</title>
    <link href="http://blog.aezo.cn/2017/05/21/java/hibernate/"/>
    <id>http://blog.aezo.cn/2017/05/21/java/hibernate/</id>
    <published>2017-05-21T07:39:00.000Z</published>
    <updated>2017-09-25T13:27:45.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>ORM框架(对象关系映射)<ul>
<li>JDBC操作数据库很繁琐</li>
<li>Sql语句编写并不是面向对象的</li>
<li>可以在对象和关系表之间建立关联来简化编程</li>
<li>0/R Mapping 简化编程</li>
<li>0/R Mapping跨越数据库平台</li>
</ul>
</li>
<li>ssh流程/hibernate流程(<strong>视频01、02</strong>)、hibernate原理(<strong>视频06(反射)、hiberbate内部大多直接以生成二进制码的形式实现</strong>)</li>
<li>O/RMapping编程模型（<strong>映射接口使用jpa的，编程接口使用hibernate的</strong>）<ul>
<li>映射模型<ul>
<li>jpa annotation(java提供的annotation配置–常用)</li>
<li>hibernate annotation extension(Hibernate扩展的annotation配置–较少用)</li>
<li>hibernate xml(Hibernate的xml配置方式–常用)</li>
<li>jpa xml(java提供的xml配置–较少用)</li>
</ul>
</li>
<li>编程接口（做CRUD）<ul>
<li>Jpa(不常用)</li>
<li>hibernate(现在用)</li>
</ul>
</li>
<li>数据査询语言<ul>
<li>HQL(常用)</li>
<li>EJBQL(JPQL)：是HQL的一个子集. EJB必须用在容器(application server)中，而hibernate可以在j2se中使用</li>
</ul>
</li>
</ul>
</li>
<li>JPA：Java Persistence API. JPA是接口/规范，hibernate是其实现. JPA是hibernate的作者基于hibernate抽象出来的. JPA是EJB3.0的的一部分</li>
<li>本文档基于hibernate3.3.2</li>
<li>资源下载：<a href="https://sourceforge.net/projects/hibernate/files/hibernate3/3.3.2.GA/hibernate-distribution-3.3.2.GA-dist.tar.gz/download" target="_blank" rel="external">hibernate-distribution-3.3.2.GA</a>、<a href="https://sourceforge.net/projects/hibernate/files/hibernate-annotations/3.4.0.GA/hibernate-annotations-3.4.0.GA.zip/download" target="_blank" rel="external">hibernate-annotations-3.4.0.GA</a>、<a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12/1.5.8" target="_blank" rel="external">slf4jl.5.8</a>、<a href="https://mvnrepository.com/artifact/log4j/log4j/1.2.15" target="_blank" rel="external">log4j-1.2.15</a></li>
<li><p>jar包如下：(日志使用的log4j)</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">antlr-2.7.6.jar</div><div class="line">commons-collections-3.1.jar</div><div class="line">dom4j-1.6.1.jar</div><div class="line">ejb3-persistence.jar</div><div class="line">hibernate3.jar</div><div class="line">hibernate-annotations.jar</div><div class="line">hibernate-commons-annotations.jar</div><div class="line">javassist-3.9.0.GA.jar</div><div class="line">jta-1.1.jar</div><div class="line">junit-4.7.jar</div><div class="line">log4j-1.2.15.jar</div><div class="line">mysql-connector-java-5.1.26-bin.jar</div><div class="line">slf4j-api-1.5.8.jar</div><div class="line">slf4j-log4j12-1.5.8.jar</div></pre></td></tr></table></figure>
<ul>
<li><code>slf4j-api</code>是一个日志接口，其实现可以为<code>log4j</code>(需要对应的适配器进行接口转换，如<code>slf4j-log4j12-1.5.8.jar</code>)、<code>slf nodep</code>、<code>jdk logging api</code>、<code>apache commons-logging</code></li>
</ul>
</li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><blockquote>
<p><code>test/cn.aezo.hibernate.hello.StudentTest</code></p>
</blockquote>
<ol>
<li><p>配置<code>hibernate.cfg.xml</code>(配置数据源、加入)</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- hibernate使用xml配置数据库映射的helloworld案例。 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.aezo.hibernate.hello"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Student"</span> <span class="attr">table</span>=<span class="string">"student"</span>&gt;</span></div><div class="line"> 		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span><span class="comment">&lt;!-- 定义id自动生成器 --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 当使用联合主键时的配置 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 因为使用UTF-8编码是主键长度不能超过256个字节，而默认id长度是int(11),name长度是varchar(255)，则超出长度，故此处应该定义长度 --&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">        &lt;composite-id name="pk" class="cn.aezo.hibernate.model.StudentPK"&gt;</div><div class="line">        	&lt;key-property name="id"&gt;&lt;/key-property&gt;</div><div class="line">        	&lt;key-property name="name" length="50"&gt;&lt;/key-property&gt;</div><div class="line">        &lt;/composite-id&gt;</div><div class="line">        --&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置Student的映射关系(Student.hbm.xml，需要放在对应类的同级目录)，并将其加入hibernate.cfg.xml中(<code>&lt;mapping resource=&quot;cn/aezo/hibernate/hello/Student.hbm.xml&quot;/&gt;</code>)</p>
</li>
</ol>
<h3 id="Annotation注解-常用"><a href="#Annotation注解-常用" class="headerlink" title="Annotation注解 (常用)"></a>Annotation注解 (常用)</h3><blockquote>
<p><code>test/cn.aezo.hibernate.hello.TeacherTest</code></p>
</blockquote>
<ol>
<li>配置<code>hibernate.cfg.xml</code>(配置数据源、加入)</li>
<li>给Teacher加注解</li>
<li>将Teacher映射加入到hibernate.cfg.xml中(<code>&lt;mapping class=&quot;cn.aezo.hibernate.hello.Teacher&quot;/&gt;</code>)</li>
</ol>
<h2 id="hibernate-cfg-xml配置"><a href="#hibernate-cfg-xml配置" class="headerlink" title="hibernate.cfg.xml配置"></a>hibernate.cfg.xml配置</h2><ul>
<li>此配置文件需要放入在src目录</li>
<li><p>配置如下</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置链接数据信息，配置后不需要自己写连接代码Database connection settings --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/hiber<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- JDBC connection pool (use the built-in) --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;property name="connection.pool_size"&gt;1&lt;/property&gt; --&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 方言,告诉hibernate使用的sql语言是mysql规定的 SQL dialect--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 通过getCurrentSession()获取此上下文的session，没有则自动创建。thread表示线程级别,jta用于分布式事物管理(不同的数据库服务器),使用时需要中间件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Disable the second-level cache  --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.provider_class"</span>&gt;</span>org.hibernate.cache.NoCacheProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 展示sql语句 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 展示sql语句是格式化一下，更加美观 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 自动生成建表语句：hibernate建表后的字段顺序并不是和model字段顺序一致(内部使用TreeMap保存) --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 测试那个就映射那个，将其他映射先去掉防止干扰 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/aezo/hibernate/hello/Student.hbm.xml"</span>/&gt;</span><span class="comment">&lt;!-- 使用xml方式需要的映射格式 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"cn.aezo.hibernate.hello.Teacher"</span>/&gt;</span><span class="comment">&lt;!-- 使用annotation方式需要的映射格式 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="相关注解类"><a href="#相关注解类" class="headerlink" title="相关注解类"></a>相关注解类</h2><p><strong>注解要么写在字段上，要么写在get方法上，千万不能混合使用，否则会报：</strong> <code>Could not determine type for: java.util.List, at table</code></p>
<ul>
<li>注解应该导入jpa的注解，如<strong><code>javax.persistence.*</code></strong></li>
<li><p>类级别</p>
<ul>
<li><strong><code>@Entity</code></strong>: 注解实体类, 最终会和数据库的表对应. <strong>注解了之后需要将该类加到hibernate.cfg.xml的mapping中</strong></li>
<li><strong><code>@Table(name=&quot;_teacher&quot;)</code></strong> 当实体类的类名和对应的表名不一致时批注,此时对应表的实际名为_teacher</li>
<li><p><code>@IdClass(TeacherPK.class)</code> 定义联合主键的类</p>
<blockquote>
<p>如 <code>cn.aezo.hibernate.hello.Teacher</code></p>
</blockquote>
<ul>
<li><code>@EmbeddedlD</code>/<code>@ Embeddable</code>也可以定义联合主键</li>
</ul>
</li>
<li><code>@SequenceGenerator(name = &quot;teacherSeq&quot;, sequenceName = &quot;teacherSeq_db&quot;)</code> Id生成策略使用能够sequence<ul>
<li>在主键上加注解 <code>@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;teacherSeq&quot;)</code></li>
<li>常用ID生成策略有native identity sequence uuid(xml配置)</li>
</ul>
</li>
<li><code>@TableGenerator</code> 用一张表存储所有表主键的当前值(id生成策略)</li>
<li><code>@BatchSize(size=5)</code> 发出sql语句时一次性取出5条数据</li>
</ul>
</li>
<li><p>字段/方法级别</p>
<ul>
<li><strong><code>@Id</code></strong> 主键; <code>@Basic</code> 其他属性,可省略</li>
<li><strong><code>@GeneratedValue</code></strong> 批注后主键会自动生成值，默认使用id生成策略是AUTO。@GeneratedValue(strategy=GenerationType.AUTO)，其中(strategy=GenerationType.AUTO)可以省略，会自动根据mysql/oracle转换，相当于xml方式中的native</li>
<li><strong><code>@Column(name=&quot;_title&quot;)</code></strong> 当实际的字段名和类的属性名不一致时才需批注,此时表示对应的表中的字段实际名为_title。最好一致</li>
<li><code>@JoinColumn</code>、<code>@OneToMany</code>等见下文关系映射</li>
<li><code>@OrderBy(&quot;name ASC&quot;)</code> 排序</li>
<li><code>@Transient</code> 透明的.表示此字段在更新时不保存到数据库中,即不参加持久化.这是annotation的写法,在xml中则不写此属性即可</li>
<li><code>@Temporal(value=TemporalType.DATE)</code> 表示相应日期类型只记录日期,最终表的字段类型是DATE。不写的话默认是记录日期和时间,字段类型是TIMESTAMP。此处可以省略”value=”。不常用</li>
<li><p><code>@Enumerated(EnumType.STRING)</code> 声明枚举类型。EnumType.STRING表示在表中生成的字段类型是varchar;EnumType.ORDINAL表示表中生成的字段类型是int，并且拿枚举的下表存储</p>
<blockquote>
<p>如 <code>test/cn.aezo.hibernate.hello.TeacherTest</code></p>
</blockquote>
</li>
</ul>
</li>
<li><p>annotation字段映射位置：可以在field上或者get方法上(建议)，如果写在field则破坏了面向对象的机制，写在get方法是public的，所有一般写在get方法上</p>
</li>
</ul>
<h2 id="核心开发接口"><a href="#核心开发接口" class="headerlink" title="核心开发接口"></a>核心开发接口</h2><ol>
<li><p>示例</p>
<blockquote>
<p>如 <code>test/cn.aezo.hibernate.coreapi.TeacherTest</code></p>
</blockquote>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Configuration cfg = Configuration().configure(); // xml可以使用</span></div><div class="line">AnnotationConfiguration acfg = <span class="keyword">new</span> AnnotationConfiguration().configure(); <span class="comment">// xml和Annotation都能使用</span></div><div class="line"></div><div class="line">SessionFactory　session = acfg.buildSessionFactory();</div><div class="line"></div><div class="line">Session session = sf.getCurrentSession(); <span class="comment">//从上下文找(要在hibernate配置文件中配置session运行的上下文)，如果有直接用，如果没有重新创建。事务提交自动close，下次获取的就是新的session</span></div><div class="line"><span class="comment">// Session session =  sf.openSession(); //每次都是新的，需要close</span></div><div class="line"></div><div class="line">session.beginTransaction(); <span class="comment">//开始一个事物</span></div><div class="line"></div><div class="line">session.save(teacher1);</div><div class="line">Teacher1 teacher1 = (Teacher1)session.load(Teacher1.class, <span class="number">1</span>); <span class="comment">// 存在懒加载</span></div><div class="line"><span class="comment">// Teacher1 teacher1 = (Teacher1)session.get(Teacher1.class, 1); // 不存在懒加载</span></div><div class="line"></div><div class="line">session.getTransaction().commit(); <span class="comment">//提交事物</span></div><div class="line"><span class="comment">// session.close();</span></div><div class="line"></div><div class="line">System.out.println(teacher1.getName()); <span class="comment">// 懒加载时，此处会报错</span></div></pre></td></tr></table></figure>
</li>
<li><p>接口</p>
<ul>
<li><code>Configuration</code> / <code>AnnotationConfiguration</code>: 管理配置信息(hibernate.cfg.xml), 用来产生SessionFactory(使用buildSessionFactory方法产生Session)<ul>
<li>方法：<code>buildSessionFactory</code></li>
</ul>
</li>
<li><code>SessoinFactor</code>: 用来产生和管理Session, 通常情况下每个应用只需要一个SessionFactory(除非要访间多个数据库)<ul>
<li>方法：<code>getCurrentsession</code>(从上下文中获取，如果上下文中没有则创建一个新的。常在事物中使用，事物提交后此session则关闭)、<code>openSession</code>(每次都是新的session，需要close)</li>
<li>getCurrentsession的上下文配置：<code>&lt;property name=&quot;current_session_context_classs&quot;&gt;thread&lt;/property&gt;</code>(jta、thread常用 managed、custom.Class少用)<ul>
<li>上下文主要有thread和jta两种。thread依赖于数据库本身的，简称Connection事务，只针对一个数据库。jta从分布式界定事物</li>
<li><strong><code>jta</code>(全称java transaction api) java分布式事务管理（多数据库访问）, jta需要application server支持，由中间件提供（jboss、WebLogic等，tomcat不支持）</strong></li>
</ul>
</li>
</ul>
</li>
<li><code>Session</code>: 管理一个数据库的任务单元（简单说就是增 删 改 查）<ul>
<li>方法：<code>sava</code>、<code>delete</code>、<code>get</code>、<code>load</code>、<code>update</code>、<code>saveOrUpdate</code>、<code>clear</code>、<code>flush</code></li>
<li><strong>get与load的区别</strong><ul>
<li>不存在对应记录时表现不一样</li>
<li>load返回的是代理对象，等到真正用到对象的内容时才发出sql语句(懒加载的)</li>
<li>get直接从数据库加载，不会延迟</li>
<li><code>User3 user3 = (User3)session.get(User3.class, 1);</code>、<code>User3 user3 = (User3)session.load(User3.class, 1);</code></li>
</ul>
</li>
<li>update(视频32)<ul>
<li>用来更新detached对象，更新完成后转为persistent状态</li>
<li>update时默认会更新全部字段，更新部分字段的解决办法<ul>
<li>使用 HQL(EjBQL)(建议）</li>
<li>xml设定property标签的update属性，annotation设定@Column的updatable=false，不过这种方式很少用，因为不灵活</li>
<li>xml中使用dynamic-update。同一个session可以，跨session不行，不过可以用merge方法</li>
</ul>
</li>
</ul>
</li>
<li>clear：无论是load还是get,都会首先査找缓存（一级缓存)，如果没有才会去数据库査找。调用clear()方法可以强制清除session缓存</li>
<li>flush<ul>
<li>强制将内存(session缓存)与数据库同步. 默认情况下是session的事务提交(commit)时才同步!</li>
<li>session的FlushMode设置, 可以设定在什么时候同步缓存与数据库(很少用)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>三种对象状态(transient、persistent、detached)</p>
<ul>
<li>三种状态：<ul>
<li>transient：内存中一个对象，内存和缓存(session缓存)中都没有ID。刚new 对象之后</li>
<li>persistent：ID在内存、缓存、数据库中都有。save了之后</li>
<li>detached：ID在内存和数据库中有，在缓存中没有。事物提交后(session关闭)</li>
</ul>
</li>
<li>三种状态的区分关键在于有没有ID，ID在数据库中有没有，在内存中有没有，在session缓存中有没有</li>
</ul>
</li>
</ol>
<h2 id="关系映射-视频35-52"><a href="#关系映射-视频35-52" class="headerlink" title="关系映射 (视频35-52)"></a>关系映射 (视频35-52)</h2><p>一对一：<code>@0neTo0ne</code>、<code>@JoinColumn</code>；一对多/多对一：<code>@OneToMany</code>、<code>@ManyToOne</code>、<code>@JoinColumn</code>；多对多：<code>@ManyToMany</code>、<code>@JoinTable</code>（<strong>字段定义和set方法省略</strong>）</p>
<ol>
<li><p>一对一</p>
<ul>
<li><code>@0neTo0ne</code> 指定关系, <code>@JoinColumn</code> 用于指定外键名称, 省略该注解则使用默认的外键名称,  <code>@JoinColumns</code> 联合主键使用, <code>@Embedded</code> 组件映射使用</li>
<li><p><strong>一对一单向外键关联</strong>(src/cn.aezo.hibernate.one2one_uni_fk)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Husband类的被约束表字段的get方法上加@0neTo0ne @JoinColumn. 最终会在Husband的表中生成外键</span></div><div class="line"><span class="meta">@OneToOne</span></div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"wifeId"</span>)<span class="comment">// 指定生成的数据库字段名，不写@JoinColumn则默认生成外键名为wife_id</span></div><div class="line"><span class="function"><span class="keyword">public</span> Wife <span class="title">getWife</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> wife;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>Husband表会多出一个字段wifeId, 即为外键</strong></li>
<li><p>xml设置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.aezo.hibernate.one2one_uni_fk.Husband"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"wife"</span> <span class="attr">column</span>=<span class="string">"wifeId"</span> <span class="attr">unique</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>一对一双向外键关联</strong>(src/cn.aezo.hibernate.one2one_bi_fk, 视频37)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Husband1类</span></div><div class="line"><span class="meta">@OneToOne</span></div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"wife1Id"</span>)<span class="comment">//指定生成的数据库字段名，否则默认生成外键名为wife_id. 最终只会在Husband的表中生成外键</span></div><div class="line"><span class="function"><span class="keyword">public</span> Wife1 <span class="title">getWife1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> wife1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Wife1类</span></div><div class="line"><span class="comment">// 此处表示Husband中对"getWife"中的wife字段设置的外键是主导，此处只是指明关系但是并不会在Wife1表中生成外键。双向关系必须指明</span></div><div class="line"><span class="comment">// 双向时这个地方也需要一个关联关系，但是Husband1中wife1已经指明了关联关系且有一个外键了，故不应该再在Wife1生成一个外键。mappedBy就表明此处参考(映射到)Husband1中的wife1字段</span></div><div class="line"><span class="meta">@OneToOne</span>(mappedBy=<span class="string">"wife1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Husband1 <span class="title">getHusband1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> husband1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>凡是双向关联，必设<code>mappedBy</code></strong></li>
<li><strong><code>一对一单向外键关联与一对一双向外键关联在数据库的表的格式是一样的,区别在于java程序中. 双向外键关联可通过Hibernate在两个类间互相调用彼此,而单向外键关联只能单方向调用.</code></strong></li>
</ul>
</li>
<li>一对一单向主键关联(<code>@OneToOne、@primaryKeyJoinColumn</code>)</li>
<li>一对一双向主键关联(<code>@OneToOne、@primaryKeyJoinColumn</code>)</li>
<li><p><strong>一对一的单向联合主键的外键关联</strong>(src/cn.aezo.hibernate.one2one_uni_fk_composite)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Husband2类(Wife2是一个联合主键类, name是只最终会在Husband2中生成的字段名即外键名, referencedColumnName指这个外键参考的字段)</span></div><div class="line"><span class="meta">@OneToOne</span></div><div class="line"><span class="meta">@JoinColumns</span>(&#123;</div><div class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"wife2Id"</span>, referencedColumnName=<span class="string">"id"</span>),</div><div class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"wife2Name"</span>, referencedColumnName=<span class="string">"name"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> Wife2 <span class="title">getWife2</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> wife2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>组件映射(src/cn.aezo.hibernate.component)</p>
<ul>
<li>一个对象是另外一个对象的一部分，java中有两个对象，但是保存在一张表中</li>
<li><code>@Embedded</code> 注解的字段表明该对象是从别的位置嵌入过来的,是不需要单独映射的表</li>
<li><code>@AttributeOverride</code> 注解需要写在getWife方法上, 可以重新指定生成的Wife类组件生成的字段名, 例如:Husband与Wife两个类中都有name字段,这样在生成表的时候会有冲突, 此时采用@AttributeOverride注解可以指定Wife类中的name属性对应新的字段名”wifename”</li>
<li>xml中使用 <code>&lt;component&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>多对一、一对多</strong></p>
<ul>
<li>指当前类(写注解的类)相对于注解属性(对应的类)的关系</li>
<li><p>多对一单向关联：<code>@ManyToOne</code>(src/cn.aezo.hibernate.many2one_uni)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// User类. 外键保存在User类中</span></div><div class="line"><span class="meta">@ManyToOne</span></div><div class="line"><span class="function"><span class="keyword">public</span> Group <span class="title">getGroup</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> group;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>xml中</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">    cascade取值all,none,save-update,delete,对象间的级联操作,只对增删改起作用.</div><div class="line">    在存储时User时,设置了cascade="all"会自动存储相应的t_group.而不用管user关联的对象(通常情况下会优先存储关联的对象,然后再存储user)</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"group"</span> <span class="attr">column</span>=<span class="string">"groupid"</span> <span class="attr">cascade</span>=<span class="string">"all"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>一对多单向关联：<code>@OneToMany</code>(src/cn.aezo.hibernate.one2many_uni)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Group1类. 外键保存在User1类中</span></div><div class="line"><span class="meta">@OneToMany</span></div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"groupId"</span>)<span class="comment">// Hibernate默认将OneToMany理解为ManyToMany的特殊形式，如果不指定生成的外键列@JoinColumn(name="groupId")，则会默认生成多对多的关系,产生一张中间表</span></div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;User1&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>xml中</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"groupId"</span>/&gt;</span>指定生成外键字段的名字</div><div class="line">    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"cn.aezo.hibernate.one2many_uni.User1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>一对多/多对一双向关联(src/cn.aezo.hibernate.one2many_many2one_bi)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// User2类</span></div><div class="line"><span class="meta">@ManyToOne</span> <span class="comment">// 配置规则:一般以多的一端为主,先配置多的一端</span></div><div class="line"><span class="function"><span class="keyword">public</span> Group2 <span class="title">getGroup</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> group;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Group2类</span></div><div class="line"><span class="meta">@OneToMany</span>(mappedBy=<span class="string">"group"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;User2&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>多对多(会生成中间表)</p>
<ul>
<li><code>@ManyToMany</code>、<code>@JoinTable</code></li>
<li><p>多对多单向外键关联(src/cn.aezo.hibernate.many2many_uni)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Teacher2类</span></div><div class="line"><span class="meta">@ManyToMany</span><span class="comment">// 多对多关联 Teacher是主的一方 Student是附属的一方</span></div><div class="line"><span class="meta">@JoinTable</span>(</div><div class="line">    joinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"teacherId"</span>)&#125;,<span class="comment">//本类主键在中间表生成的对应字段名</span></div><div class="line">    inverseJoinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"student2Id"</span>)&#125;<span class="comment">//对方类主键在中间表生成的对应字段名</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;Student2&gt; <span class="title">getStudent2s</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> student2s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>多对多双向外键关联</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 在Teacher这一端的students上配置</div><div class="line">@ManyToMany</div><div class="line">@JoinTable(</div><div class="line">    name=&quot;t_s&quot;,</div><div class="line">    joinColumns=&#123;@JoinColumn(name=&quot;teacher_id&quot;)&#125;,</div><div class="line">    inverseJoinColumns=&#123;@JoinColumn(name=&quot;student_id&quot;)&#125;</div><div class="line">)</div><div class="line"></div><div class="line">// 在Student一端的teachers只需要配置</div><div class="line">@ManyToMany(mappedBy=&quot;students&quot;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>关联关系中的CRUD、Cascade(级联)、Fetch(test/cn.aezo.hibernate.one2many_many2one_bi_curd)</p>
<ul>
<li><p><strong>设定<code>cascade</code>以设定在持久化时对于关联对象的操作（CUD，R归Fetch管）</strong></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Group3类</span></div><div class="line"><span class="meta">@OneToMany</span>(</div><div class="line">    mappedBy=<span class="string">"group"</span>,</div><div class="line">    cascade=&#123;CascadeType.ALL&#125;<span class="comment">//cascade=CascadeType.ALL表示存储user表时把与他相关联的表也存储，否则需要自己先手动存储关联的那个表</span></div><div class="line">    <span class="comment">//,fetch=FetchType.EAGER//取一对多时，默认只会取出一不会取出多,即fetch默认是lazy，此时设置了eager则会在取组的同时取出用户信息。一般不这么用</span></div><div class="line">)<span class="comment">//cascade设定CUD，fetch设定R</span></div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;User3&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// User3类</span></div><div class="line"><span class="meta">@ManyToOne</span>(cascade=&#123;CascadeType.ALL&#125;)<span class="comment">//cascade=CascadeType.ALL表示存储user表时把与他相关联的表也存储，否则需要自己先手动存储关联的那个表</span></div><div class="line"><span class="function"><span class="keyword">public</span> Group3 <span class="title">getGroup</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> group;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>只要有关联关系(包括所有关联类型)，默认保存A，hibernate不会自动保存B. 设置在A中设置cascade可以让hibernate在保存A的时候也保持B. 如果需要保存B也保存A，则需要在B中也设置cascade</li>
<li>CascadeType取值：<ul>
<li><code>ALL</code>      Cascade all operations所有情况(CUD)</li>
<li><code>MERGE</code>    Cascade merge operation合并(merge=save+update)</li>
<li><code>PERSIST</code>  Cascade persist operation存储 persist()</li>
<li><code>REFRESH</code>  Cascade refresh operation刷新</li>
<li><code>REMOVE</code>   Cascade remove operation删除</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>fetch</code>获取数据的方式</strong></p>
<ul>
<li>查询时@ManyToOne默认会把一的那一方取出来(默认为EAGER)，@OneToMany则不会默认把多的那一方取出来(默认为LAZY). 修改fetch则可以改变默认取值方式</li>
<li>取值有：<code>FetchType.LAZY</code>(懒惰) 和 <code>FetchType.EAGER</code>(渴望)</li>
<li><p>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示例一</span></div><div class="line">Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line"><span class="comment">// User3 user3 = (User3)session.load(User3.class, 1);</span></div><div class="line">User3 user3 = (User3)session.get(User3.class, <span class="number">1</span>); <span class="comment">//当多对一时，取多时，默认会把一也取出来。此时取用户的信息时也会把组的信息取出来放到内存中</span></div><div class="line">session.getTransaction().commit();</div><div class="line">System.out.println(user3.getGroup().getName()); <span class="comment">// 可以正常获取, @ManyToOne默认是EAGER。如果上面是load则此处会报错</span></div><div class="line"></div><div class="line"><span class="comment">// 示例二</span></div><div class="line">Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line">Group3 group3 = (Group3)session.get(Group3.class, <span class="number">1</span>);<span class="comment">//取一对多时，默认只会取出一不会取出多。但如果在关联的批注处设定了fetch=FetchType.EAGER，则会同时取出用户信息</span></div><div class="line"><span class="comment">// Set&lt;User3&gt; user3s = group3.getUsers(); // ### 如果fetch没有设定了eager，则可以在此处手动把User都拿出来放到内存中. 一般是一对多时手动获取多的那一方 ###</span></div><div class="line">session.getTransaction().commit();</div><div class="line"></div><div class="line"><span class="comment">// ### 如果fetch设定了eager则已经将用户信息取到内存中了. 否则此处会报错 ###</span></div><div class="line"><span class="keyword">for</span>(User3 u : group3.getUsers()) &#123;</div><div class="line">    System.out.println(u.getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>删除操作：如果Group和User都设置了CascadeType.ALL，则在删除user时也会把group删除. 解决办法</p>
<ul>
<li>直接写Hql语句执行删除（推荐）</li>
<li>去掉@ManyToOne(cascade={CascadeType.All})设置, 手动执行CRU</li>
<li><p>将user对象的group属性设为null，相当于打断User与Group间的关联</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">session.beginTransaction();</div><div class="line">User user = (User)session.load(User.class,<span class="number">1</span>);</div><div class="line">user.setGroup(<span class="keyword">null</span>);</div><div class="line">session.delete(user);</div><div class="line">session.getTransaction().commit();</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>集合映射(src/cn.aezo.hibernate.collections_mapping)</p>
<ul>
<li><p>多的一方是什么的存储方式：Set(常用)、List、Map</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用Map存储</span></div><div class="line"><span class="meta">@OneToMany</span>(mappedBy=<span class="string">"group"</span>,cascade=&#123;CascadeType.ALL&#125;)</div><div class="line"><span class="meta">@MapKey</span>(name=<span class="string">"id"</span>)<span class="comment">//以users中user的id作为map的key</span></div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;Integer, User4&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>继承映射(视频55)</p>
<ul>
<li><code>SINGLE_TABLE</code> 一张总表保存</li>
<li><code>TABLE_PER_CLASS</code> 每个类分别一张表(最终也会生成3张表，使用@TableGenerator的id生成策略映射)<ul>
<li>使用多态查询时会查3张表并进行合并</li>
</ul>
</li>
<li><code>JOINED</code> 每个子类一张表(最终也会生成3张表，使用@Inheritance(strategy=InheritanceType.JOINED))<ul>
<li>查询必须使用进行联合</li>
</ul>
</li>
</ul>
</li>
<li><p>树状结构设计(src/cn.aezo.hibernate.tree)</p>
<ul>
<li><p>在一个类中同时使用一对多和多对一</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Org组织类，对应表Org(id, pid, name)</span></div><div class="line"><span class="meta">@OneToMany</span>(</div><div class="line">    mappedBy=<span class="string">"parent"</span>,</div><div class="line">    cascade=&#123;CascadeType.ALL&#125;</div><div class="line">    <span class="comment">//,fetch=FetchType.EAGER//只适合小级别的树，同时取出所有的，打印就可以打印在一起了；否则就在需要的时候发起sql语句</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;Org&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> children;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@ManyToOne</span></div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"parent_id"</span>)<span class="comment">//只需写在关联处即可，所有也可写在@OneToMany的下面</span></div><div class="line"><span class="function"><span class="keyword">public</span> Org <span class="title">getParent</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> parent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>易错点</p>
<ul>
<li>在一个实体文件中，所有的注解要么全部放在字段上，要么全部放在get方法上，不能混合使用. 否则报错<code>Caused by: org.hibernate.MappingException: Could not determine type for...</code></li>
</ul>
</li>
</ol>
<h2 id="HQL-test-cn-aezo-hibernate-hql1-2"><a href="#HQL-test-cn-aezo-hibernate-hql1-2" class="headerlink" title="HQL (test/cn.aezo.hibernate.hql1/2)"></a>HQL (test/cn.aezo.hibernate.hql1/2)</h2><ol>
<li>查询语言：NativeSQL(oracle/mysql原生) &gt; HQL(hibernate查询语言) &gt; EJBQL(JPQL 1.0, 可以跨ORM框架) &gt; QBC(Query By Criteria) &gt; QBE(Query By Example)</li>
<li><p>举例(查询、修改、删除)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">import</span> org.hibernate.Query;</div><div class="line">  <span class="keyword">import</span> org.hibernate.Session;</div><div class="line"></div><div class="line">  <span class="comment">// HQL 面向对象的查询语言，此处要写类名而不是表名，可以省略 select *</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Category c where c.name &gt; 'c5' order by c.name desc"</span>);</div><div class="line">  List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list(); <span class="comment">// q.iterate()</span></div><div class="line"></div><div class="line">  <span class="comment">// 链式编程</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Category c where c.id &gt; :min and c.id &lt; :max"</span>)</div><div class="line">                   .setInteger(<span class="string">"min"</span>, <span class="number">2</span>)</div><div class="line">                   .setInteger(<span class="string">"max"</span>, <span class="number">8</span>);</div><div class="line">  List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line"></div><div class="line">  <span class="comment">// setParameter会自动转换参数类型</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Category c where c.id &gt; ? and c.id &lt; ?"</span>);</div><div class="line">  q.setParameter(<span class="number">0</span>, <span class="number">2</span>).setParameter(<span class="number">1</span>, <span class="number">8</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 分页(取第二条到第4条数据)</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Category c order by c.name desc"</span>);</div><div class="line">  q.setMaxResults(<span class="number">4</span>);</div><div class="line">  q.setFirstResult(<span class="number">2</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 获取Topic的Category类的属性id (Topic下的Category是@ManyToOne，默认在查询Topic的会取Category)</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic t where t.category.id = 1"</span>);</div><div class="line">  <span class="comment">// 如果设置成Lazy，则当调用t.getCategory()的时候才会查询Category</span></div><div class="line"></div><div class="line">  <span class="comment">// 从实体中取出一个VO/DTO（下面的MsgInfo不是一个实体，是一个VO/DTO，他需要一个对应的构造方法）</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select new cn.aezo.hibernate.hql1.MsgInfo(m.id, m.cont, m.topic.title, m.topic.category.name) from Msg m"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// join连接(left join)</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select t.title, c.name from Topic t join t.category c"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 对象查询（调用的是equals方法）</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Msg m where m = :MsgToSearch"</span>);</div><div class="line">  Msg m = <span class="keyword">new</span> Msg();</div><div class="line">  m.setId(<span class="number">1</span>);</div><div class="line">  q.setParameter(<span class="string">"MsgToSearch"</span>, m);</div><div class="line">  Msg mResult = (Msg) q.uniqueResult(); <span class="comment">// 返回唯一结果(确定里面只有一条)</span></div><div class="line"></div><div class="line">  <span class="comment">// is empty 和 is not empty（最终sql语句使用了exists、not exists）</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where t.msgs is empty"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where not exists (select m.id from Msg1 m where m.topic.id=t.id)"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 获取时间</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select current_date, current_time, current_timestamp, t.id from Topic1 t"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 时间比较</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where t.createDate &lt; :date"</span>);</div><div class="line">  q.setParameter(<span class="string">"date"</span>, <span class="keyword">new</span> Date());</div><div class="line"></div><div class="line">  <span class="comment">// 分组</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select t.title, count(*) from Topic1 t group by t.title"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"select t.title, count(*) from Topic1 t group by t.title having count(*) &gt;= 1"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 原生sql查询</span></div><div class="line">  SQLQuery q = session.createSQLQuery(<span class="string">"select * from category limit 2,4"</span>).addEntity(Category1.class);</div><div class="line">  List&lt;Category1&gt; categories = (List&lt;Category1&gt;)q.list();</div><div class="line"></div><div class="line">  <span class="comment">// 常用查询</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select count(*) from Msg m"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"select max(m.id), min(m.id), avg(m.id), sum(m.id) from Msg m"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Msg m where m.id between 3 and 5"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Msg m where m.id in (3,4, 5)"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Msg m where m.cont is not null"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where t.title like '%5'"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where t.title like '_5'"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 别名查询</span></div><div class="line">  <span class="comment">// (1) 在实体上进行注解查询语句，去别名topic.selectCertainTopic（原生sql语句查询别名注解@NamedNativeQueries）</span></div><div class="line">  <span class="meta">@NamedQueries</span>(&#123;</div><div class="line">     <span class="meta">@NamedQuery</span>(name=<span class="string">"topic.selectCertainTopic"</span>, query=<span class="string">"from Topic t where t.id = :id"</span>)</div><div class="line">&#125;)</div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Topic1</span> </span>&#123;...&#125;</div><div class="line">  <span class="comment">// (2) 使用上叙别名</span></div><div class="line">  Query q = session.getNamedQuery(<span class="string">"topic.selectCertainTopic"</span>);</div><div class="line">  q.setParameter(<span class="string">"id"</span>, <span class="number">5</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 执行修改/删除</span></div><div class="line">  Query q = session.createQuery(<span class="string">"update Topic1 t set t.title = upper(t.title)"</span>) ;</div><div class="line">  q.executeUpdate();</div></pre></td></tr></table></figure>
</li>
<li><p>QBC/QBE (test/cn.aezo.hibernate.qbc/qbe)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// QBC (Query By Criteria). 此时不需要sql语句, 纯面向对象了</span></div><div class="line"><span class="comment">// criterion 约束/标准/准则</span></div><div class="line">Criteria c = session.createCriteria(Topic2.class) <span class="comment">// from Topic</span></div><div class="line">             .add(Restrictions.gt(<span class="string">"id"</span>, <span class="number">2</span>)) <span class="comment">// greater than = id &gt; 2</span></div><div class="line">             .add(Restrictions.lt(<span class="string">"id"</span>, <span class="number">8</span>)) <span class="comment">// little than = id &lt; 8</span></div><div class="line">             .add(Restrictions.like(<span class="string">"title"</span>, <span class="string">"t_"</span>))</div><div class="line">             .createCriteria(<span class="string">"category"</span>)</div><div class="line">             .add(Restrictions.between(<span class="string">"id"</span>, <span class="number">3</span>, <span class="number">5</span>)) <span class="comment">// category.id &gt;= 3 and category.id &lt;=5</span></div><div class="line">             ;</div><div class="line"><span class="comment">// DetachedCriterea</span></div><div class="line"><span class="keyword">for</span>(Object o : c.list()) &#123;</div><div class="line">    Topic2 t = (Topic2) o;</div><div class="line">    System.out.println(t.getId() + <span class="string">"-"</span> + t.getTitle());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// QBE (Query By Example)</span></div><div class="line">Topic3 tExample = <span class="keyword">new</span> Topic3();</div><div class="line">tExample.setTitle(<span class="string">"T_"</span>);</div><div class="line"></div><div class="line">Example e = Example.create(tExample)</div><div class="line">            .ignoreCase().enableLike();</div><div class="line">Criteria c = session.createCriteria(Topic3.class)</div><div class="line">             .add(Restrictions.gt(<span class="string">"id"</span>, <span class="number">2</span>))</div><div class="line">             .add(Restrictions.lt(<span class="string">"id"</span>, <span class="number">8</span>))</div><div class="line">             .add(e)</div><div class="line">             ;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Object o : c.list()) &#123;</div><div class="line">    Topic3 t = (Topic3)o;</div><div class="line">    System.out.println(t.getId() + <span class="string">"-"</span> + t.getTitle());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h2><ol>
<li><code>session.clear()</code>的运用，尤其在不断分页循环的时候<ul>
<li>在一个大集合中进行遍历，遍历msg，取出其中的含有敏感字样的对象</li>
<li>另外一种形式的内存泄露(面试题：Java在语法级别没有内存泄漏，但是可由java引起。例如：连接池不关闭或io读取后不关闭)</li>
</ul>
</li>
<li>1+N问题<ul>
<li>使用LAZY。<code>@ManyToOne</code> 默认是EAGER（默认在查询主表是，也会查询子表的数据，发出sql语句）。可将其改为<code>@ManyToOne(fetch=FetchType.LAZY)</code>，此时当使用的时候(如:t.getCategory().getName()时)才会发出sql语句</li>
<li>hql语句中使用<code>join fetch</code>。如将hql语句改成<code>from Topic t left join fetch t.category c</code></li>
<li>QBC。如使用createCriteria查询，会自动生成含join fetch的sql语句</li>
</ul>
</li>
<li>list和iterate不同之处<ul>
<li>list取所有；iterate先取ID，等用到的时候再根据ID来取对象</li>
<li>session中list第二次发出仍会到数据库査询；iterate第二次首先找session级缓存</li>
</ul>
</li>
<li><p>一级缓存和二级缓存和査询缓存(指两次查询的条件一样)</p>
<ul>
<li>一级缓存是session级别的缓存；二级缓存是SessionFactory级别的缓存，可以跨越session存在；</li>
<li><p>二级缓存</p>
<ul>
<li><p>打开二级缓存，hibernate.cfg.xml设定：</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--使用二级缓存--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.provider_class"</span>&gt;</span>org.hibernate.cache.EhCacheProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--使用EhCache提供商提供的二级缓存--&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Cache</code>注解(由hibernate扩展提供)</p>
<ul>
<li><code>@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)</code></li>
<li>使用EhCache二级缓存 需要导入ehcache-1.2.3.jar及commons-logging-1.0.4.jar包</li>
</ul>
</li>
<li>二级缓存的使用场景：<strong>经常被访问、改动不大或不会经常改动、数重有限（如权限信息、组织信息）</strong></li>
<li>load默认使用二级缓存；iterate默认使用二级缓存；list默认往二级缓存加数据，但是查询的时候不使用</li>
<li>查询缓存(指两次查询的条件一样)<ul>
<li><code>&lt;property name=&quot;cache.use_query_cache&quot;&gt;true&lt;/property&gt;</code> 查询缓存依赖与二级缓存，需要打开二级缓存</li>
<li>调用Query的<code>setCachable(true)</code>方法指明使用二级缓存，如：<code>session.createQuery(&quot;from Category&quot;).setCacheable(true).list();</code></li>
</ul>
</li>
<li>缓存算法：LRU、LFU、FIFO<ul>
<li>LRU: Least Recently Used 最近很少被使用，按使用时间</li>
<li>LFU: Least Frequently Used 按命中率高低</li>
<li>FIFO: First In First Out 按顺序替换</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>事务并发处理<ul>
<li>事务：ACID (Atomic原子性、Consistency一致性、Itegrity独立性、Durability持久性)</li>
<li>事务并发时可能出现的问题<ul>
<li><code>dirty read</code>脏读(读到了另一个事务在处理中还未提交的数据)</li>
<li><code>non-repeatable read</code>不可重复读(一个事物中两次读取的数据不一致，被其他事物影响了)</li>
<li><code>phantom read</code>幻读(主要针对插入和删除，在读的过程中，另外一个事物插入或删除了一条数据影响了读的结果)</li>
</ul>
</li>
<li>数据库的事务隔离机制<ul>
<li>查看 <code>java.sql.Connection</code> 文档</li>
<li>1：<code>read-uncommitted</code> 2：<code>read-committed</code> 4：<code>repeatable read</code> 8：<code>serializable</code>（数字代表对应值或级别，级别越高越安全但是效率约低）           <ul>
<li><code>read-uncommitted</code>(允许读取未提交的数据) 会出现dirty read, phantom-read, non-repeatable read 问题</li>
<li><strong><code>read-commited</code></strong>(读取已提交的数据 项目中一般都使用这个)不会出现dirty read，因为只有另一个事务提交才会读出来结果，但仍然会出现 non-repeatable read 和 phantom-read。使用read-commited机制可用悲观锁、乐观锁来解决non-repeatable read 和 phantom-read问题</li>
<li><code>repeatable read</code>(事务执行中其他事务无法执行修改或插入操作，较安全)</li>
<li><code>serializable</code> 解决一切问题(顺序执行事务 不并发，实际中很少用)</li>
<li>为什么取值要使用 1 2 4 8 而不是 1 2 3 4。1=0000  2=0010 4=0100 8=1000(位移计算效率高)</li>
</ul>
</li>
<li>hibernate设置<ul>
<li>设定hibernate的事务隔离级别(使用hibernate.connection.isolation配置，取值1、2、4、8)</li>
<li>hibernate.connection.isolation = 2（如果不设 默认依赖数据库本身的级别）</li>
<li>用悲观锁解决repeatable read的问题（依赖于数据库的锁）<ul>
<li>法一：<code>select ... for update</code></li>
<li>法二：使用另一种load方法：<code>load(xxx.class, i, LockMode.Upgrade)</code> i=1/2/4/8</li>
</ul>
</li>
<li>Hibernate(JPA)乐观锁定(ReadCommitted)<ul>
<li>实体类中增加version属性(数据库也会对应生成该字段,初始值为0)，并在其get方法前加<code>@Version</code>注解，则在操作过程中没更新一次该行数据则version值加1，即可在事务提交前判断该数据是否被其他事务修改过</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ORM框架(对象关系映射)&lt;ul&gt;
&lt;li&gt;JDBC操作数据库很繁琐&lt;/li&gt;
&lt;li&gt;Sql语句编写并不是面向对象的&lt;/li&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="ssh" scheme="http://blog.aezo.cn/tags/ssh/"/>
    
      <category term="orm" scheme="http://blog.aezo.cn/tags/orm/"/>
    
  </entry>
  
  <entry>
    <title>windows</title>
    <link href="http://blog.aezo.cn/2017/05/10/extend/windows/"/>
    <id>http://blog.aezo.cn/2017/05/10/extend/windows/</id>
    <published>2017-05-10T07:26:00.000Z</published>
    <updated>2017-08-28T06:17:37.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>注释：<code>::</code>、<code>rem</code>等 <a href="[注释](http://blog.csdn.net/wh_19910525/article/details/8125762)">^1</a></li>
<li><code>title</code>: 设置cmd窗口标题(乱码时，需要将文件记事本打开另保存为ANSI)</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><p>运行java</p>
  <figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">title</span>=<span class="built_in">cmd</span>窗口的标题</div><div class="line"><span class="built_in">echo</span> off</div><div class="line"><span class="comment">rem 我的注释：`%~d0`挂载项目到第一个驱动器，并设置当前目录为项目根目录</span></div><div class="line">%~d0</div><div class="line"><span class="built_in">set</span> MY_PROJECT_HOME=%~p0</div><div class="line"><span class="built_in">cd</span> <span class="variable">%MY_PROJECT_HOME%</span></div><div class="line"><span class="built_in">echo</span> on</div><div class="line">"<span class="variable">%JAVA_HOME%</span>\bin\java" -jar my.jar</div><div class="line"><span class="built_in">echo</span> off</div></pre></td></tr></table></figure>
<ul>
<li>此时配置文件应和jar包位于同一目录</li>
<li>如果<code>set MY_PROJECT_HOME=%~p0..\</code>则表示设置bat文件所在目录的的上级目录为项目根目录</li>
<li>如果不是系统默认jdk，可将<code>%JAVA_HOME%</code>换成对应的路径</li>
</ul>
</li>
<li><p>后台运行bat文件</p>
  <figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> "%<span class="number">1</span>" == "h" <span class="keyword">goto</span> begin</div><div class="line">mshta vbscript:createobject("wscript.shell").run("%~nx0 h",<span class="number">0</span>)(window.close)&amp;&amp;<span class="keyword">exit</span></div><div class="line">:begin</div><div class="line">:: 这是注释，后面运行脚本，如：</div><div class="line">java -jar my.jar</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注释：&lt;code&gt;::&lt;/code&gt;、&lt;code&gt;rem&lt;/code&gt;等 &lt;a href=&quot;[注释](http://blog.c
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="bat" scheme="http://blog.aezo.cn/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>struts2</title>
    <link href="http://blog.aezo.cn/2017/05/06/java/struts2/"/>
    <id>http://blog.aezo.cn/2017/05/06/java/struts2/</id>
    <published>2017-05-06T10:06:00.000Z</published>
    <updated>2017-07-23T05:13:59.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol>
<li>struts2是 struts1和WebWork的结合</li>
<li><strong>struts2的本质就是将请求与视图分开</strong> (struts2原理：<strong>视频09</strong>)</li>
<li>官网：<a href="http://struts.apache.org/" target="_blank" rel="external">http://struts.apache.org/</a>, 下文基于版本2.3.24(当前更新到2.5.10)</li>
<li><p>所需jar包：struts2/lib下的jar包</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">commons-fileupload-1.3.1.jar</div><div class="line">commons-io-2.2.jar</div><div class="line">commons-lang3-3.2.jar</div><div class="line">freemarker-2.3.22.jar</div><div class="line">javassist-3.11.0.GA.jar</div><div class="line">ognl-3.0.6.jar</div><div class="line">struts2-core-2.3.24.1.jar</div><div class="line">xwork-core-2.3.24.1.jar</div></pre></td></tr></table></figure>
</li>
<li><p>struts知识点</p>
<ul>
<li>Action<ul>
<li>a)namespace（掌握）</li>
<li>b)path（掌握）</li>
<li>c)DMI（掌握）</li>
<li>d)wildcard（掌握）</li>
<li>e)接收参数（掌握前两种）</li>
<li>f)访问request等（掌握Map IOC方式）</li>
<li>g)简单数据验证（掌握addFieldError和<code>&lt;s:fieldError&gt;</code>）</li>
</ul>
</li>
<li>Result<ul>
<li>a)结果类型（掌握四种，重点两种）</li>
<li>b)全局结果（掌握）</li>
<li>c)动态结果（了解）</li>
</ul>
</li>
<li><strong>OGNL表达式</strong>（精通）<ul>
<li>a)# % $</li>
</ul>
</li>
<li>Struts标签<ul>
<li>a)掌握常用的</li>
</ul>
</li>
<li>声明式异常处理（了解）</li>
<li>I18N（了解）</li>
<li>CRUD的过程（最重要是设计与规划）（精通）</li>
<li>Interceptor的原理（掌握）<strong><em>视频中分析了Struts2源码</em></strong></li>
<li>类型转换（掌握默认，了解自定义）</li>
</ul>
</li>
</ol>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ul>
<li><p>web.xml中加入</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- struts2的核心拦截器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在src目录新建struts.xml(注意路径为src, 名称为struts.xml)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span>&gt;</span><span class="comment">&lt;!-- 省略class, 则自动调用xwork的一个ActionSupport类 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>扩展</p>
<ul>
<li><p>给jar包导入源码和doc文档</p>
<blockquote>
<ul>
<li>（1）给jar包导入源码(给struts2-core-2.3.24.1.jar导入源码)：右键相应jar包-&gt;properties-&gt;Java Source Attachment-&gt;External location-&gt;External Folder-&gt;D:/Java/struts-2.3.24.1/src/core/src/main/java</li>
<li>（2）给此jar包导入doc文档：右键相应jar包-&gt;properties-&gt;Javadoc Location-&gt;javadoc URL-&gt;D:/Java/struts-2.3.24.1/docs/struts2-core/apidocs(定位到相应类，按F1，点击javadoc查看相应文档)</li>
</ul>
</blockquote>
</li>
<li><p>添加XML文件自动提示功能</p>
<blockquote>
<ul>
<li>（1）解压struts-2.3.24.1\lib\struts2-core-2.3.24.1.jar</li>
<li>（2）记录struts.xml内DOCTYPE的一个值<a href="http://struts.apache.org/dtds/struts-2.3.dtd" target="_blank" rel="external">http://struts.apache.org/dtds/struts-2.3.dtd</a></li>
<li>（3）Windows-&gt;搜索catalog-&gt;XML catalog-&gt;add-&gt;{Location:struts-2.3.24.1\lib\struts2-core-2.3.24.1\struts-2.3.dtd, Key type:URL, Key:<a href="http://struts.apache.org/dtds/struts-2.3.dtd}" target="_blank" rel="external">http://struts.apache.org/dtds/struts-2.3.dtd}</a></li>
</ul>
</blockquote>
</li>
<li><p>本地拷贝项目</p>
<blockquote>
<ul>
<li>需要修改Web Context-root(项目右键-&gt;properties-&gt;MyEclipse-&gt;Project Facets-&gt;Web)</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="struts-xml"><a href="#struts-xml" class="headerlink" title="struts.xml"></a>struts.xml</h3><ol>
<li>package</li>
</ol>
<ul>
<li><code>package</code>(是为了区分重名的action，类似于java中的包)<ul>
<li>name:包名</li>
<li>namespace:命名空间，此namespace和action中name的值的组合不能重复<ul>
<li>（1）namespace决定了action的访问路径，默认为””，可以接受所有路径的action</li>
<li>（2）namespace可以写为/，或者/xxx，或者/xxx/yyy，对应的action访问路径如/index.action，/xxx/index.action，或者/xxx/yyy/index.action(其中index为action的属性name值，后面的.action可省略)</li>
<li>（3）package和namespace最好用模块来进行命名</li>
</ul>
</li>
<li>extends:继承了那个包，所有的包都继承了<code>struts-default</code>，来自struts2-core-2.3.24.1.jar-&gt;struts-default.xml</li>
</ul>
</li>
<li><code>package</code>&gt;<code>action</code><ul>
<li>name:此action名称(在浏览器的url中要访问此action就要输入此名称)</li>
<li>class:当访问此action时，就会调用相应的java类(如果没有就默认访问ActionSupport，ActionSupport是xwork的一个类，他实现了Action接口；<strong>实际中一般使用类继承ActionSupport</strong>)<ul>
<li><strong>每一个访问请求都会重新new一个对象</strong></li>
</ul>
</li>
<li>method:当访问此action时，要调用相应class类的相应的方法。默认调用<code>execute()</code>方法<ul>
<li>动态方法调用：添加配置<code>&lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;true&quot; /&gt;</code>，使用myAction!myMethod方式调用</li>
<li>注：除了用method属性指定相应的action调用方法(缺点是产生太多action)；还可以在url地址中动态指定(动态方法调用DMI，使用!，视频13还没测试成功)；实际中多使用通配符</li>
</ul>
</li>
</ul>
</li>
<li><code>package</code>&gt;<code>action</code>&gt;<code>result</code><ul>
<li>name:此result名称</li>
<li>原理：访问时，先获取实现了Action接口的类或者其子类的execute()方法的返回值，然后匹配name属性为此返回值的result，再显示此result标签中的页面</li>
<li>注：属性为successs时可省略此name属性，因为Action接口execute()方法默认返回的是success字符串</li>
<li>注：默认有<code>SUCCESS</code>/<code>ERROR</code>/<code>INPUT</code>/<code>LOGIN</code>等常量，有时候使用SUCCESS可以解决，但仍用INPUT是为了作区分</li>
</ul>
</li>
</ul>
<ol>
<li><p><strong>struts2中的路径问题</strong>（jsp文件中的href路径）</p>
<ul>
<li>struts2是根据action的路径而不是jsp路径来确定，所有尽量不要使用相对路径，虽然可以用redirect方式解决，但redirect方式并非必要</li>
<li>解决办法<ul>
<li>统一使用绝对路径(JSP页面的绝对路径中第一个”/“指的是服务器的根路径，而不是项目的根路径)</li>
<li>在jsp中用request.getContextPath()方式来拿到webapp的路径,或者使用myeclipse常用的指定basePath</li>
<li>参考源码：<code>WebRoot/others/testPath.jsp</code></li>
</ul>
</li>
</ul>
</li>
<li><p>通配符，可以将配置量降到最低</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 如果namespace="/" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*_*"</span> <span class="attr">class</span>=<span class="string">"cn.aezo.wildcard.&#123;1&#125;"</span> <span class="attr">method</span>=<span class="string">"&#123;2&#125;"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span>&gt;</span>/wildcard/&#123;1&#125;_&#123;2&#125;.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>注释：{1}表示第一个<em>，{2}表示第二个</em>；如果访问<a href="http://localhost:8080/Student_add，则{1}为Student，{2}为add；匹配是以最佳匹配优先" target="_blank" rel="external">http://localhost:8080/Student_add，则{1}为Student，{2}为add；匹配是以最佳匹配优先</a></li>
<li>建议使用到<code>*_*</code>，如果*太多程序可读性降低</li>
</ul>
</li>
</ol>
<h3 id="接收用户传入参数"><a href="#接收用户传入参数" class="headerlink" title="接收用户传入参数"></a>接收用户传入参数</h3><ul>
<li>（1）用Action属性接收url中的参数</li>
<li>（2）使用域模型DomainModel接收参数,一般使用的方法(可以同时使用vo/do/dto来对数据进行处理)<ul>
<li>使用Domain Model时，在url地址中传<strong>user.username</strong>=smalle的话，Struts2会自动根据User类中无参构造方法帮忙new一个对象</li>
<li>所以此时如果我们有自己的构造方法，则系统不会帮我们自动生成无参构造方法，则一定要自己写上这个无参构造方法供Struts2调用</li>
</ul>
</li>
<li>（3）使用模型驱动ModelDriven接收参数，此方式不常用，但涉及了MVC的概念<br>Struts2中的MVC概念：M是各种类似User的类，V是各种jsp页面，C是各种Action；通过Action控制请求的处理和请求的展现；因此将请求的发生、处理、展现进行了分离</li>
</ul>
<h3 id="strtus常量（乱码问题）"><a href="#strtus常量（乱码问题）" class="headerlink" title="strtus常量（乱码问题）"></a>strtus常量（乱码问题）</h3><ul>
<li>（1）struts2默认的常量都在struts2-core-2.3.24.1.jar-&gt;org.apache.struts2-&gt;default.properties中</li>
<li>（2）struts2默认编码是UTF-8，设置方法<constant name="struts.i18n.encoding" value="UTF-8"></constant></li>
<li>（3）internationalization(i18n，指的是i和n之间有18个字母)</li>
<li>（4）还可以在web.xml中定义一个编码拦截器，在struts2拦截之前做一次编码处理</li>
</ul>
<h3 id="数据校验和strtus2标签初步"><a href="#数据校验和strtus2标签初步" class="headerlink" title="数据校验和strtus2标签初步"></a>数据校验和strtus2标签初步</h3><ul>
<li>（1）在Action中使用<code>this.addFieldError(&quot;errname&quot;, &quot;errmsg&quot;);</code>设定字段错误信息，在JSP页面使用struts2标签<code>&lt;s:fielderror fieldName=&quot;errname&quot;/&gt;</code>获取errmsg</li>
<li>（2）<code>&lt;%@ taglib uri=&quot;/struts-tags&quot; prefix=&quot;s&quot; %&gt;</code>在jsp页面导入struts2标签；<ul>
<li>其中uri是文件(struts2-core-2.3.24.1.jar-&gt;META-INF-&gt;struts-tags.tld)中”<uri>/struts-tags</uri>“的值，prefix指标签前缀为s</li>
</ul>
</li>
<li>（3）<code>&lt;s:debug&gt;&lt;/s:debug&gt;</code><!-- 使用debug模式可查看很多可以获取的值 --></li>
<li>（4）<code>&lt;s:property value=&quot;...&quot;/&gt;</code><!-- 获取debug模式中的Value Stack(直接在value填写Property Name)和Stack Context(又称ActionContext，在value中填写"#key")中的值 --></li>
</ul>
<h3 id="action中访问web元素-request、session、application"><a href="#action中访问web元素-request、session、application" class="headerlink" title="action中访问web元素(request、session、application)**"></a>action中访问web元素(request、session、application)**</h3><ul>
<li>（1）context就是上下文，也可以认为是运行环境，如servletContext就只servlet运行的环境</li>
<li>（2）使用DI/IoC解决，即实现接口<code>RequestAware</code>、<code>SessionAware</code>、<code>ApplicationAware</code>（<strong>视频21-22</strong>）<ul>
<li><code>DI</code>: dependency injection依赖注入</li>
<li><code>IoC</code>: inverse of control控制反转</li>
</ul>
</li>
</ul>
<h3 id="包含模块配置文件"><a href="#包含模块配置文件" class="headerlink" title="包含模块配置文件"></a>包含模块配置文件</h3><ul>
<li><code>&lt;include file=&quot;/cn/aezo/others/xxx.xml&quot; /&gt;</code> xxx.xml相当于一个普通的struts.xml文件</li>
</ul>
<h3 id="默认action"><a href="#默认action" class="headerlink" title="默认action"></a>默认action</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">default-action-ref</span> <span class="attr">name</span>=<span class="string">"def"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-action-ref</span>&gt;</span><span class="comment">&lt;!-- 要写在此package的所有action之前 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"def"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span>&gt;</span>/default.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="result相关"><a href="#result相关" class="headerlink" title="result相关"></a>result相关</h3><ul>
<li><code>package&gt;action&gt;result&gt;type</code>(Result类型)<ul>
<li><code>dispatcher</code>    服务器端跳转，只能跳转到页面(jsp/html)，不能是action</li>
<li><code>redirect</code>    客户端跳转，只能跳转到页面(jsp/html)，不能是action</li>
<li><code>chain</code>        服务器端跳转，指forward到action,result中的action不要加/</li>
<li><code>redirectAction</code>    客户端跳转，可跳转到action,result中的action不要加/</li>
<li>freemarker</li>
<li>httpheader</li>
<li>stream</li>
<li>xslt</li>
<li>plaintext</li>
<li>tiles</li>
</ul>
</li>
<li>一次request只有一个值栈valueStack；以forward的形式跳转(dispatcher/chain)时，request没变，因此valueStack不变。而客户端跳转则值栈改变</li>
<li><p>全局结果集global-results</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">global-results</span>&gt;</span><span class="comment">&lt;!-- 相当于该包和该包的子包所有的action中都包含这条result --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"mainPage"</span>&gt;</span>/global/mainPage.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>动态结果集</p>
<ul>
<li>在action中使用属性定义结果集并动态赋值，在struts.xml中使用ognl表达式，如${属性}来获取valueStack中的这个属性(也是在action中定义的属性)</li>
</ul>
</li>
<li>带参数的结果集(request值栈：<strong>视频32</strong>)<ul>
<li>一次request只有一个值栈valueStack；以forward的形式跳转(dispatcher/chain)时，request没变，因此valueStack不变。而客户端跳转则值栈改变</li>
<li>valueStack是request对象中的相关信息，如果是客户端跳转到jsp页面，则url上的带的参数在request域对象中是取不到到，只能在上下文中通过parameters获取</li>
</ul>
</li>
</ul>
<h3 id="OGNL-表达式"><a href="#OGNL-表达式" class="headerlink" title="OGNL 表达式"></a>OGNL 表达式</h3><blockquote>
<p>OGNL表达式是通常要结合Struts2的标志一起使用，如<s:property value="#xx">，el表达式可以单独使用${sessionScope.username}。详细区别如：<a href="http://www.cnblogs.com/ycxyyzw/p/3493513.html" target="_blank" rel="external">http://www.cnblogs.com/ycxyyzw/p/3493513.html</a></s:property></p>
</blockquote>
<ul>
<li>ognl表达式：如果标签对应的value的属性类型是Object时，且value中的值可以从值栈中获取就视为ognl表达式<ul>
<li>如<s:property value="name">中s:property是struts2标签，而value中的字符串才是ognl表达式</s:property></li>
</ul>
</li>
<li>ognl访问值栈中action的普通属性 <code>&lt;s:property value=&quot;user.age&quot; /&gt;</code></li>
<li>ognl访问值栈中对象的普通属性 <code>&lt;s:property value=&quot;user.age&quot; /&gt;</code></li>
<li>ognl访问静态成员<ul>
<li>（1）格式为：”@类名@属性/方法”，而”@@方法”只适用于调用Math类中的方法</li>
<li>（2）访问静态方法需要设置常量struts.ognl.allowStaticMethodAccess=true</li>
</ul>
</li>
<li>ognl访问集合<ul>
<li>（1）访问集合<s:property value="users"></s:property></li>
<li>（2）访问集合中某个元素：List<s:property value="users[1]">，Map<s:property value="userMaps.userm1">(Set访问不到)</s:property></s:property></li>
<li>（3）访问List、Set中元素的所有属性的集合<s:property value="users.{age}"></s:property></li>
<li>（4）访问Map的所有Key和Value<s:property value="userMaps.keys"><s:property value="userMaps.values"></s:property></s:property></li>
<li>（5）访问容器大小<s:property value="users.size()">或者value=”users.size”</s:property></li>
</ul>
</li>
<li>ognl投影(过滤)<ul>
<li>（1）获取user集合中age&gt;1的子集合中的第一个元素<s:property value="users.{?#this.age==1}[1]"></s:property></li>
<li>（2）^表示获取开头的元素，$表示获取结尾的元素，如：<s:property value="users.{^#this.age>1}.{age}">、<s:property value="users.{$#this.age>1}.{age}"></s:property></s:property></li>
</ul>
</li>
<li>ognl中的<code>[0]</code><ul>
<li>使用[0]访问所有action和DefaultTextProvider组成集合的对象(只有服务器端跳转是才会有多个action),如：<s:property value="[0]"></s:property></li>
</ul>
</li>
</ul>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>jsp中引入 <code>&lt;%@ taglib uri=&quot;/struts-tags&quot; prefix=&quot;s&quot; %&gt;</code>。其中uri是文件(struts2-core-2.3.24.1.jar-&gt;META-INF-&gt;struts-tags.tld)中”<uri>/struts-tags</uri>“的值，prefix指标签前缀为s</p>
<ul>
<li><code>&lt;s:debug&gt;&lt;/debug&gt;</code> 查看值栈，但是debug这行代码的位置可能会影响查看到的结果。如定义set、bean等的属性var，则会把这个var的值当做是键，和真正的值放到Stack Context中</li>
<li><code>&lt;s:property value=&quot;&quot;/&gt;</code> 获取Value Stack中的值，其中的value前不需加#，获取Stack Context中的值，前面可加#也可不加#；但是当和Value Stack有重名时，不加#表示访问Value Stack，加#表示访问Stack Context；且获取Stack Context中的request必须加#。</li>
<li><code>&lt;s:set var=&quot;adminName&quot; value=&quot;username&quot;/&gt;</code> 设置变量，默认是设在request和actionContext/StackContext中</li>
<li><p>定义bean</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">s:bean</span> <span class="attr">name</span>=<span class="string">"cn.aezo.tags.model.Dog"</span> <span class="attr">var</span>=<span class="string">"myDog"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"'myDogName'"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">s:bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;s:include value=&quot;include.html&quot;/&gt;</code> 导入外部文件(尽量不要使用，可使用jsp的include)</p>
</li>
<li><p>if elseif else</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">s:set</span> <span class="attr">var</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"#parameters.age[0]"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:set</span>&gt;</span><span class="comment">&lt;!-- 此处要带上[0],即取第一个 --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">s:if</span> <span class="attr">test</span>=<span class="string">"#age &lt; 0"</span>&gt;</span>wrong age!<span class="tag">&lt;/<span class="name">s:if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">s:elseif</span> <span class="attr">test</span>=<span class="string">"#age &lt; 20"</span>&gt;</span>too yong!<span class="tag">&lt;/<span class="name">s:elseif</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">s:else</span>&gt;</span>yeah!<span class="tag">&lt;/<span class="name">s:else</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>iterator遍历</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"&#123;1, 2, 3&#125;"</span> <span class="attr">var</span>=<span class="string">"item"</span> <span class="attr">status</span>=<span class="string">"status"</span>&gt;</span><span class="comment">&lt;!--status保存这循环的相关信息，如status.index表示下标--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#status.index"</span>/&gt;</span>: <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#item"</span>/&gt;</span>,</div><div class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>%{}</code>，其中%可以将{}中的内容强制转换为ognl表达式</p>
</li>
<li><constant name="struts.ui.theme" value="simple">使用UI标签的主题（使用较少），默认是xhtml,还可以为simple等,也可自己定义,可通过查看源码得知他定义的一些html元素。自己定义的主题要在src目录下，最终才会被编译到classes下，且起名为”template.你的主题名”,其中的template是默认参数</constant></li>
</ul>
<h3 id="struts2拦截器interceptor"><a href="#struts2拦截器interceptor" class="headerlink" title="struts2拦截器interceptor"></a>struts2拦截器interceptor</h3><ul>
<li>（1）自定义的拦截器实现xwork2的<code>Interceptor</code>接口</li>
<li><p>（2）在struts.xml中进行配置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"cn.aezo.others.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>（3）在action中进行添加拦截器</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"interceptor"</span> <span class="attr">class</span>=<span class="string">"cn.aezo.others.MyInterceptorAction"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span>&gt;</span>/others/interceptor.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span><span class="comment">&lt;!-- 要加上默认的拦截器 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>（4）token拦截器：可以产生一个随机字符串，可防止重复提交</p>
<ul>
<li>jsp页面使用<code>&lt;s:token&gt;&lt;/s:token&gt;</code>生成随机数</li>
<li>action的配置中加入struts2提供的拦截器<code>&lt;interceptor-ref name=&quot;token&quot;/&gt;</code></li>
</ul>
</li>
<li>（5）类型转换：实际上市struts2内置拦截器起的作用。只要在URL传参设参数值为约定的格式即可</li>
</ul>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul>
<li>strut2的声明式异常是使用拦截器来实现的</li>
<li>声明式异常：在所有的action中都throws Exception，拦截到struts.xml文件中，寻找全局异常映射和结果集进行页面显示</li>
</ul>
<h3 id="i18n国际化"><a href="#i18n国际化" class="headerlink" title="i18n国际化"></a>i18n国际化</h3><ul>
<li>（1）原理：使用java.util包中的ResourceBundle和Locale类，如ResourceBundle rb = ResourceBundle.getBundle(“app”, Locale.CHINA);</li>
<li>（2）struts2资源文件(properties)级别<ul>
<li>Action级别的国际化，properties文件前缀要是此Action的类名</li>
<li>包级别的，properties文件前缀要是package</li>
<li>全局级别的，前缀随便取。比较常用</li>
</ul>
</li>
<li>（3）全局级别时，要设置properties的前缀，即常量<constant name="struts.custom.i18n.resources" value="testStruts2"></constant></li>
<li>（4）在JSP页面可通过标签取值。<s:property value="getText('welcome.string')"><!-- 调用的Action的方法，实际中是ActionSupport的方法 --></s:property></li>
<li>（5）处理资源文件中带参数的问题：properties文件中写成如：param.string=欢迎：{0} ，然后在页面用    <s:text name="param.string"><s:param value="username"></s:param></s:text>获取url中的参数值(或者post表单)</li>
<li>（6）点击链接国际化：在链接后加参数request_locale=en_US或者request_locale=zh_CN，这样之后</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;struts2是 struts1和WebWork的结合&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;struts2的本质就是将请求与视图分
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="ssh" scheme="http://blog.aezo.cn/tags/ssh/"/>
    
      <category term="mvc" scheme="http://blog.aezo.cn/tags/mvc/"/>
    
  </entry>
  
  <entry>
    <title>python</title>
    <link href="http://blog.aezo.cn/2017/04/28/lang/python/"/>
    <id>http://blog.aezo.cn/2017/04/28/lang/python/</id>
    <published>2017-04-28T03:39:00.000Z</published>
    <updated>2017-10-18T11:16:55.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python简介"><a href="#python简介" class="headerlink" title="python简介"></a>python简介</h2><ul>
<li>python有两个版本python2(最新的为python2.7)和python3，两个大版本同时在维护</li>
<li>Linux下默认有python环境</li>
</ul>
<h2 id="python基础-易混淆-常用"><a href="#python基础-易混淆-常用" class="headerlink" title="python基础(易混淆/常用)"></a>python基础(易混淆/常用)</h2><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ol>
<li>模块安装<ul>
<li>可在<code>/Scripts</code>和<code>/Lib/site-packages</code>中查看可执行文件和模块源码</li>
</ul>
</li>
<li><p>常用模块</p>
<ul>
<li><code>pip</code> 可用于安装管理python其他模块<ul>
<li>安装（windows默认已经安装）<ul>
<li>将<code>https://bootstrap.pypa.io/get-pip.py</code>中的内容保存到本地<code>get-pip.py</code>文件中</li>
<li>上传<code>get-pip.py</code>至服务器，并设置为可执行</li>
<li><code>python get-pip.py</code> 安装</li>
<li>检查是否安装成功：<code>pip list</code> 可查看已经被管理的模块</li>
</ul>
</li>
<li>常见问题<ul>
<li>安装成功后，使用<code>pip list</code>仍然报错。windows执行<code>where pip</code>查看那些目录有pip程序，如strawberry(perl语言相关)目录也存在pip.exe，一种方法是将strawberry卸载</li>
</ul>
</li>
</ul>
</li>
<li><code>ConfigParser</code> 配置文件读取(该模块ConfigParser在Python3中，已更名为configparser)<ul>
<li><code>pip install ConfigParser</code></li>
<li>介绍：<a href="http://www.cnblogs.com/snifferhu/p/4368904.html" target="_blank" rel="external">http://www.cnblogs.com/snifferhu/p/4368904.html</a></li>
</ul>
</li>
<li><p><code>MySQLdb</code> mysql操作库</p>
<ul>
<li><p><code>pip install MySQL-python</code></p>
<blockquote>
<p>报错<code>win8下 pip安装mysql报错_mysql.c(42) : fatal error C1083: Cannot open include file: ‘config-win.h’: No such file or director</code>。解决办法：安装<a href="https://pypi.python.org/pypi/MySQL-python/1.2.5" target="_blank" rel="external">MySQL-python-1.2.5.win32-py2.7.exe</a>（就相当于pip安装）</p>
</blockquote>
</li>
<li><p>工具类：<a href="http://www.cnblogs.com/snifferhu/p/4369184.html" target="_blank" rel="external">http://www.cnblogs.com/snifferhu/p/4369184.html</a></p>
</li>
</ul>
</li>
<li><code>fabric</code> 主要在python自动化运维中使用(能自动登录其他服务器进行各种操作)<ul>
<li><code>pip install fabric</code> 安装</li>
<li>常见问题<ul>
<li>报错<code>fatal error: Python.h: No such file or directory</code><ul>
<li>安装<code>yum install python-devel</code> 安装python-devel(或者<code>yum install python-devel3</code>)</li>
</ul>
</li>
<li>报错<code>fatal error: ffi.h: No such file or directory</code><ul>
<li><code>yum install libffi libffi-devel</code> 安装libffi libffi-devel</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>scrapy</code> 主要用在python爬虫。可以css的形式方便的获取html的节点数据<ul>
<li><code>pip install scrapy</code> 安装</li>
<li>文档：<a href="http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html" target="_blank" rel="external">0.24-Zh</a>、<a href="https://doc.scrapy.org/en/latest/index.html" target="_blank" rel="external">latest-En</a></li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python简介&quot;&gt;&lt;a href=&quot;#python简介&quot; class=&quot;headerlink&quot; title=&quot;python简介&quot;&gt;&lt;/a&gt;python简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;python有两个版本python2(最新的为python2.7)和python
    
    </summary>
    
      <category term="lang" scheme="http://blog.aezo.cn/categories/lang/"/>
    
    
      <category term="python" scheme="http://blog.aezo.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>freemarker</title>
    <link href="http://blog.aezo.cn/2017/04/28/lang/freemarker/"/>
    <id>http://blog.aezo.cn/2017/04/28/lang/freemarker/</id>
    <published>2017-04-28T03:39:00.000Z</published>
    <updated>2017-10-22T11:00:24.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>官网：<a href="http://freemarker.org/" target="_blank" rel="external">http://freemarker.org/</a>、文档：<a href="http://freemarker.org/docs/index.html" target="_blank" rel="external">http://freemarker.org/docs/index.html</a></li>
</ul>
<h2 id="解析模板字符串"><a href="#解析模板字符串" class="headerlink" title="解析模板字符串"></a>解析模板字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtlU</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据模板文件输出内容到指定的输出流中(文件中)</div><div class="line">     * <span class="doctag">@param</span> name 模板文件的名称</div><div class="line">     * <span class="doctag">@param</span> path 模板文件的目录: 如ftl与此java文件同目录, 则此处为 ""</div><div class="line">     * <span class="doctag">@param</span> rootMap 模板的数据模型</div><div class="line">     * <span class="doctag">@param</span> outputStream 输出流</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rendToStream</span><span class="params">(String name, String path, Map&lt;String, Object&gt; rootMap, OutputStream outputStream)</span> <span class="keyword">throws</span> TemplateException, IOException </span>&#123;</div><div class="line">        Writer out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(outputStream, <span class="string">"UTF-8"</span>));</div><div class="line">        getTemplate(name, path).process(rootMap, out); <span class="comment">// 将模板文件内容以UTF-8编码输出到相应的流中</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != out) &#123;</div><div class="line">            out.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rendToStream</span><span class="params">(String sourceCode, Map&lt;String, Object&gt; rootMap, OutputStream outputStream)</span> <span class="keyword">throws</span></span></div><div class="line">            TemplateException, IOException &#123;</div><div class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_23);</div><div class="line">        cfg.setDefaultEncoding(<span class="string">"UTF-8"</span>);</div><div class="line"></div><div class="line">        Template template = <span class="keyword">new</span> Template(<span class="string">""</span>, sourceCode, cfg);</div><div class="line"></div><div class="line">        Writer out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(outputStream, <span class="string">"UTF-8"</span>));</div><div class="line">        template.process(rootMap, out);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != out) &#123;</div><div class="line">            out.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据模板文件输出内容到控制台</div><div class="line">     * <span class="doctag">@param</span> name       模板文件的名称</div><div class="line">     * <span class="doctag">@param</span> pathPrefix 模板文件的目录</div><div class="line">     * <span class="doctag">@param</span> rootMap    模板的数据模型</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rendToConsole</span><span class="params">(String name, String pathPrefix, Map&lt;String, Object&gt; rootMap)</span> <span class="keyword">throws</span></span></div><div class="line">            TemplateException, IOException &#123;</div><div class="line">        getTemplate(name, pathPrefix).process(rootMap, <span class="keyword">new</span> PrintWriter(System.out));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rendToConsole</span><span class="params">(String sourceCode, Map&lt;String, Object&gt; rootMap)</span> <span class="keyword">throws</span></span></div><div class="line">            TemplateException, IOException &#123;</div><div class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_23);</div><div class="line">        cfg.setDefaultEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">        Template template = <span class="keyword">new</span> Template(<span class="string">""</span>, sourceCode, cfg);</div><div class="line">        template.process(rootMap, <span class="keyword">new</span> PrintWriter(System.out));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取指定目录下的Ftl模板文件</div><div class="line">     * <span class="doctag">@param</span> name 模板文件的名称</div><div class="line">     * <span class="doctag">@param</span> path 模板文件的目录</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Template <span class="title">getTemplate</span><span class="params">(String name, String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_23); <span class="comment">//通过FreeMarker的Configuration对象可以读取ftl文件</span></div><div class="line">        cfg.setClassForTemplateLoading(FtlU.class, path); <span class="comment">// 设置模板文件的目录</span></div><div class="line">        cfg.setDefaultEncoding(<span class="string">"UTF-8"</span>);       <span class="comment">//Set the default charset of the template files</span></div><div class="line">        Template temp = cfg.getTemplate(name); <span class="comment">//在模板文件目录中寻找名为"name"的模板文件</span></div><div class="line">        <span class="keyword">return</span> temp; <span class="comment">//此时FreeMarker就会到类路径下的"path"文件夹中寻找名为"name"的模板文件</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试程序</div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TemplateException </span>&#123;</div><div class="line">        rendToConsole(<span class="string">"Hello $&#123;name&#125;"</span>, MiscU.Instance.toMap(<span class="string">"name"</span>, <span class="string">"smalle1"</span>));</div><div class="line"></div><div class="line">        rendToStream(<span class="string">"Hello $&#123;name&#125;"</span>, MiscU.Instance.toMap(<span class="string">"name"</span>, <span class="string">"smalle2"</span>), <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"D://temp/target0.ftl"</span>)));</div><div class="line"></div><div class="line">        rendToConsole(<span class="string">"test.ftl"</span>, <span class="string">"/mytpl"</span>, MiscU.Instance.toMap(<span class="string">"name"</span>, <span class="string">"smalle3"</span>)); <span class="comment">// mytpl为classpath根目录下文件夹</span></div><div class="line"></div><div class="line">        rendToStream(<span class="string">"test.ftl"</span>, <span class="string">"/mytpl"</span>, MiscU.Instance.toMap(<span class="string">"name"</span>, <span class="string">"smalle4"</span>), <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"D://temp/target.ftl"</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;http://freemarker.org/&quot; target=&quot;_blank&quot; rel=&quot;externa
    
    </summary>
    
      <category term="lang" scheme="http://blog.aezo.cn/categories/lang/"/>
    
    
      <category term="java" scheme="http://blog.aezo.cn/tags/java/"/>
    
      <category term="template" scheme="http://blog.aezo.cn/tags/template/"/>
    
      <category term="freemarker" scheme="http://blog.aezo.cn/tags/freemarker/"/>
    
  </entry>
  
  <entry>
    <title>npm</title>
    <link href="http://blog.aezo.cn/2017/04/02/web/npm/"/>
    <id>http://blog.aezo.cn/2017/04/02/web/npm/</id>
    <published>2017-04-02T03:13:00.000Z</published>
    <updated>2017-08-10T12:12:19.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm介绍"><a href="#npm介绍" class="headerlink" title="npm介绍"></a>npm介绍</h2><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>安装node的时候会默认包含npm</li>
<li>安装<a href="http://npm.taobao.org/" target="_blank" rel="external">cnpm</a>镜像(淘宝镜像下载较快)：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><ul>
<li>安装模块则是<code>cnpm install &lt;module-name&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><code>npm install &lt;module-name&gt;</code> 安装xxx(在当前项目安装)，<strong>更新模块也是此命令</strong><ul>
<li><code>npm i &lt;module-name&gt;</code> 简写方式</li>
<li><code>-g</code> 全局安装<ul>
<li>如果以Windows管理员运行的命令行，则会安装在nodejs安装目录的node_modules目录下。如果以普通用户运行的命令行，则会安装在用户的AppData/Roaming/npm/node_modules的目录下。建议以管理员运行</li>
</ul>
</li>
<li><code>--save</code>(简写<code>-S</code>) 自动将依赖更新到package.json文件的dependencies(依赖)中</li>
<li><code>--save-dev</code>(简写<code>-D</code>) 自动将依赖更新到package.json文件的devDependencies(运行时依赖)中</li>
</ul>
</li>
<li><code>npm init</code> 初始化项目，生成<code>package.json</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;npm介绍&quot;&gt;&lt;a href=&quot;#npm介绍&quot; class=&quot;headerlink&quot; title=&quot;npm介绍&quot;&gt;&lt;/a&gt;npm介绍&lt;/h2&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="node" scheme="http://blog.aezo.cn/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>firebase</title>
    <link href="http://blog.aezo.cn/2017/03/19/service/firebase/"/>
    <id>http://blog.aezo.cn/2017/03/19/service/firebase/</id>
    <published>2017-03-19T13:21:00.000Z</published>
    <updated>2017-07-17T13:08:57.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Firebase是google提供的快速构件应用的云服务。简单的可以说通过引入Firebase，你可以通过api去构建实时性的应用。</li>
<li><a href="https://firebase.google.com/" target="_blank" rel="external">官网</a></li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="Firebase帐号注册"><a href="#Firebase帐号注册" class="headerlink" title="Firebase帐号注册"></a>Firebase帐号注册</h3><ul>
<li>可通过google账户登录，选择免费版，新建一个项目。</li>
<li>点击<code>Authentication</code> - <code>登录方法</code> - 启用Google登录</li>
<li>点击<code>overview</code> - <code>将 Firebase 添加到您的网页应用</code> - 复制代码供下面使用</li>
</ul>
<h3 id="下载web版示例"><a href="#下载web版示例" class="headerlink" title="下载web版示例"></a>下载web版示例</h3><ul>
<li><a href="https://github.com/firebase/quickstart-js" target="_blank" rel="external">quickstart-js</a></li>
<li>该文件中包含了auth验证、database数据库、storage存储、messaging消息等示例</li>
<li>找到database/index.html，将上文复制的代码放到head中</li>
</ul>
<h3 id="为开发运行本地-Web-服务器"><a href="#为开发运行本地-Web-服务器" class="headerlink" title="为开发运行本地 Web 服务器"></a>为开发运行本地 Web 服务器</h3><ul>
<li>安装firebase命令行工具：<code>npm install -g firebase-tools</code>(重新运行安装命令，可更新此工具)</li>
<li>cmd进入到下文的database文件夹</li>
<li>启动服务器 <code>firebase serve</code></li>
<li>访问：<code>http://localhost:5000</code></li>
<li>点击登录，就会自动调用google登录验证api</li>
<li>该示例登录进入可书写博文，数据可在控制面板的<code>Database</code>中查看</li>
</ul>
<h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><p>最终可在控制面板的Hosting中查看</p>
<ul>
<li>启动一个新的命令行，cmd进入到下文的database文件夹</li>
<li>登录Google并授权 <code>firebase login</code></li>
<li><p>初始化应用 <code>firebase init</code>，运行后确认 - 选择Hosting - 选择创建的项目，创建根目录（默认会在此目录创建一个public的目作为根目录）</p>
<ul>
<li>运行 firebase init 命令会在您的项目的根目录下创建 firebase.json</li>
<li>当您初始化应用时，系统将提示您指定用作公共根目录的目录（默认为”public”）。如果您的公共根目录下不存在有效的 index.html 文件，系统将为您创建一个。</li>
<li><p>如一个firebase.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"hosting"</span>: &#123;</div><div class="line">    <span class="attr">"public"</span>: <span class="string">"./"</span>,</div><div class="line">    <span class="attr">"rewrites"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"source"</span>: <span class="string">"**"</span>,</div><div class="line">        <span class="attr">"destination"</span>: <span class="string">"/index.html"</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"ignore"</span>: [</div><div class="line">      <span class="string">"firebase.json"</span>,</div><div class="line">      <span class="string">"**/.*"</span>,</div><div class="line">      <span class="string">"**/node_modules/**"</span>,</div><div class="line">      <span class="string">"functions"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"database"</span>: &#123;</div><div class="line">    <span class="attr">"rules"</span>: <span class="string">"database.rules.json"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>部署网站 <code>firebase deploy</code></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Firebase是google提供的快速构件应用的云服务。简单的可以说通过引入Firebase，你可以通过api去构建实时性的应
    
    </summary>
    
      <category term="service" scheme="http://blog.aezo.cn/categories/service/"/>
    
    
      <category term="google" scheme="http://blog.aezo.cn/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>atom</title>
    <link href="http://blog.aezo.cn/2017/03/19/extend/atom/"/>
    <id>http://blog.aezo.cn/2017/03/19/extend/atom/</id>
    <published>2017-03-19T07:33:00.000Z</published>
    <updated>2017-07-17T13:08:56.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="atom安装"><a href="#atom安装" class="headerlink" title="atom安装"></a>atom安装</h2><h2 id="atom快捷键"><a href="#atom快捷键" class="headerlink" title="atom快捷键"></a>atom快捷键</h2><ol>
<li>快捷键查看：<code>File - Settings - Keybindings</code><ul>
<li>编辑用户快捷键：<code>File - Settings - Keymap</code>(编辑后无需重启)</li>
<li>插件快捷键可能会冲突。搜索某个快捷键时，后面表示会覆盖前面的</li>
</ul>
</li>
<li><p>常用快捷键设置</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##### 我自己加的快捷键 START #####</span></div><div class="line"><span class="comment"># 打开命令Panel: ctrl-shift-p</span></div><div class="line"></div><div class="line"><span class="comment"># 删除一行(ctrl-d) / ctrl-shift-k(默认)</span></div><div class="line"><span class="string">'atom-text-editor:not([mini])'</span>:</div><div class="line">  <span class="string">'ctrl-d'</span>: <span class="string">'editor:delete-line'</span></div><div class="line"><span class="comment"># 上下移动一行 ctrl-up、ctrl-down</span></div><div class="line"></div><div class="line"><span class="comment"># html预览切换（插件atom-html-preview）</span></div><div class="line"><span class="string">'atom-text-editor[data-grammar~=html]'</span>:</div><div class="line">  <span class="string">'ctrl-shift-b'</span>: <span class="string">'atom-html-preview:toggle'</span></div><div class="line"><span class="comment">##### 我自己加的快捷键 END #####</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="atom插件"><a href="#atom插件" class="headerlink" title="atom插件"></a>atom插件</h2><ul>
<li><a href="https://atom.io/packages/list" target="_blank" rel="external">插件排行榜</a></li>
<li><code>minimap</code> 代码地图</li>
<li><code>atom-beautify</code> 代码美化，Ctrl+Alt+B</li>
<li><code>file-icons</code> 文件图标美化</li>
<li><code>script</code> 脚本运行器，可运行几乎所有语言(有些需要运行环境)，<strong><code>Ctrl+Shift+B</code> 运行脚本</strong></li>
<li><code>atom-html-preview</code> html预览<ul>
<li>可在Atom编辑器中启一个预览的Tab，在预览页右键-Open Devtools可打开控制台</li>
</ul>
</li>
<li><code>markdown-writer</code> 可快速markdown文件(结合jekyll写博客)</li>
<li><code>git-plus</code> git增强工具。在设置中配置<code>git path</code>为<code>git.exe</code>的路径(如：<code>D:\java\Git\cmd\git.exe</code>)</li>
<li><p><code>platformio-ide-terminal</code> 终端嵌入(安装前需要安装git，并将git配置到path中)</p>
</li>
<li><p><code>vue-autocomplete</code> vue.js自动补全</p>
</li>
<li><code>language-vue</code> .vue文件高亮</li>
<li><code>autocomplete-python</code> python自动补全. 需要将python的执行版本设置到python中</li>
<li><code>autocomplete-php</code> 自动补全php. 需要配置php.exe的执行位置</li>
<li><code>php-server</code> 启动php服务器</li>
</ul>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ol>
<li>win安装或更新插件时，报错：<code>gyp ERR! stack Error: EPERM: operation not permitted</code><ul>
<li>解决办法：以管理员身份运行atom</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;atom安装&quot;&gt;&lt;a href=&quot;#atom安装&quot; class=&quot;headerlink&quot; title=&quot;atom安装&quot;&gt;&lt;/a&gt;atom安装&lt;/h2&gt;&lt;h2 id=&quot;atom快捷键&quot;&gt;&lt;a href=&quot;#atom快捷键&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="ide" scheme="http://blog.aezo.cn/tags/ide/"/>
    
  </entry>
  
  <entry>
    <title>亚马逊云(AWS)实践</title>
    <link href="http://blog.aezo.cn/2017/03/13/linux/aws/"/>
    <id>http://blog.aezo.cn/2017/03/13/linux/aws/</id>
    <published>2017-03-13T01:33:00.000Z</published>
    <updated>2017-07-23T05:14:26.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选购"><a href="#选购" class="headerlink" title="选购"></a>选购</h2><p>1.</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>需要在数据库所在安全组中把应用服务器IP加入</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;选购&quot;&gt;&lt;a href=&quot;#选购&quot; class=&quot;headerlink&quot; title=&quot;选购&quot;&gt;&lt;/a&gt;选购&lt;/h2&gt;&lt;p&gt;1.&lt;/p&gt;
&lt;h2 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="linux" scheme="http://blog.aezo.cn/categories/linux/"/>
    
    
      <category term="cloud" scheme="http://blog.aezo.cn/tags/cloud/"/>
    
  </entry>
  
</feed>
