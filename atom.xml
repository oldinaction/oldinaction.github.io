<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SmalleBlog | AEZOCN</title>
  <subtitle>Better Code,Better Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.aezo.cn/"/>
  <updated>2017-08-26T04:14:38.140Z</updated>
  <id>http://blog.aezo.cn/</id>
  
  <author>
    <name>Smalle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql-procedure</title>
    <link href="http://blog.aezo.cn/2017/08/24/db/mysql-procedure/"/>
    <id>http://blog.aezo.cn/2017/08/24/db/mysql-procedure/</id>
    <published>2017-08-24T12:33:00.000Z</published>
    <updated>2017-08-26T04:14:38.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>存储过程调试工具：<code>dbForge Studio for MySQL</code></li>
</ul>
<h2 id="存储过程示例"><a href="#存储过程示例" class="headerlink" title="存储过程示例"></a>存储过程示例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">CREATE DEFINER = 'root'@'localhost'</div><div class="line">PROCEDURE test.county(IN `in_provid` int, IN `in_urlid` int)</div><div class="line">BEGIN</div><div class="line">  DECLARE v_sql varchar(1000);</div><div class="line">  DECLARE c_cityid integer;</div><div class="line">  DECLARE c_cityname varchar(20);</div><div class="line">  DECLARE c_countyname varchar(20);</div><div class="line">  DECLARE c_cityid_tmp integer;</div><div class="line"></div><div class="line">  # 是否未找到数据标记(要在游标之前定义)</div><div class="line">  DECLARE done INT DEFAULT FALSE;</div><div class="line"></div><div class="line">  -- 定义第一个游标</div><div class="line">  DECLARE cur1 CURSOR FOR</div><div class="line">  SELECT</div><div class="line">    t.N_CITYID,</div><div class="line">    t.S_CITYNAME</div><div class="line">  FROM dict_city t</div><div class="line">  WHERE t.N_PROVID = in_provid;</div><div class="line"></div><div class="line">  # 临时表游标</div><div class="line">  DECLARE cur2 CURSOR FOR</div><div class="line">  SELECT</div><div class="line">    S_COUNTYNAME,</div><div class="line">    N_CITYID AS cityid</div><div class="line">  FROM tmp_table;</div><div class="line"></div><div class="line">  # 循环终止的标志，游标中如果没有数据就设置done为TRUE(停止遍历)</div><div class="line">  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;</div><div class="line"></div><div class="line">  # 创建临时表</div><div class="line">  DROP TABLE IF EXISTS tmp_table;</div><div class="line">  CREATE TEMPORARY TABLE IF NOT EXISTS tmp_table (</div><div class="line">    ID int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,</div><div class="line">    S_COUNTYNAME varchar(20),</div><div class="line">    N_CITYID int(10)</div><div class="line">  );</div><div class="line"></div><div class="line">  # mysql不能直接变量结果集, 此出场将结果集放到临时表中, 用于后面变量</div><div class="line">  OPEN cur1;</div><div class="line">  flag_loop: LOOP</div><div class="line">    # 取出每条记录并赋值给相关变量，注意顺序</div><div class="line">    # 变量的定义不要和你的select的列的键同名, 否则fetch into 会失败！</div><div class="line">    FETCH cur1 INTO c_cityid, c_cityname;</div><div class="line"></div><div class="line">    # FETCH之后, 如果没有数据则会运行SET done = TRUE</div><div class="line">    IF done THEN</div><div class="line">      # 跳出循环</div><div class="line">      LEAVE flag_loop;</div><div class="line">    END IF;</div><div class="line"></div><div class="line">    # 字符串截取，从第一位开始，截取2位</div><div class="line">    SET c_cityname = SUBSTRING(c_cityname, 1, 2);</div><div class="line"></div><div class="line">    # 动态sql执行后的结果记录集在MySQL中无法获取，因此需要转变思路将其放置到一个临时表中</div><div class="line">    # 动态sql需要使用CONCAT(a, b, c, ....)拼接</div><div class="line">    SET v_sql = CONCAT("insert into tmp_table(S_COUNTYNAME, N_CITYID) select t.`name`, ", c_cityid, " from sm_renthouse_url t where</div><div class="line">		t.pid in (select p.id from sm_renthouse_url p where p.pid = ", in_urlid, " and p.`name` like '%", c_cityname, "%')");</div><div class="line"></div><div class="line">    # 如果以@开头的变量可以不用通过declare语句事先声明</div><div class="line">    SET @v_sql = v_sql;</div><div class="line">    # 预处理需要执行的动态SQL，其中stmt是一个变量</div><div class="line">    PREPARE stmt FROM @v_sql;</div><div class="line">    # 执行SQL语句</div><div class="line">    EXECUTE stmt;</div><div class="line">    # 释放掉预处理段</div><div class="line">    DEALLOCATE PREPARE stmt;</div><div class="line">  END LOOP;</div><div class="line">  CLOSE cur1;</div><div class="line"></div><div class="line">  # 调试输出, 打印使用SELECT</div><div class="line">  SELECT</div><div class="line">    *</div><div class="line">  FROM tmp_table;</div><div class="line"></div><div class="line">  # 还原终止的标志, 用于第二个游标</div><div class="line">  SET done = FALSE;</div><div class="line"></div><div class="line">  OPEN cur2;</div><div class="line">  flag_loop: LOOP</div><div class="line">    FETCH cur2 INTO c_countyname, c_cityid_tmp;</div><div class="line">    IF done THEN</div><div class="line">      LEAVE flag_loop;</div><div class="line">    END IF;</div><div class="line"></div><div class="line">    INSERT INTO dict_county (S_COUNTYNAME, N_CITYID, S_STATE)</div><div class="line">      VALUES (c_countyname, c_cityid_tmp, '1');</div><div class="line"></div><div class="line">  END LOOP;</div><div class="line">  CLOSE cur2;</div><div class="line"></div><div class="line">  # 删除临时表</div><div class="line">  DROP TEMPORARY TABLE tmp_table;</div><div class="line">END</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;存储过程调试工具：&lt;code&gt;dbForge Studio for MySQL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="mysql" scheme="http://blog.aezo.cn/tags/mysql/"/>
    
      <category term="procedure" scheme="http://blog.aezo.cn/tags/procedure/"/>
    
  </entry>
  
  <entry>
    <title>Excel VBA</title>
    <link href="http://blog.aezo.cn/2017/08/20/others/excel-vba/"/>
    <id>http://blog.aezo.cn/2017/08/20/others/excel-vba/</id>
    <published>2017-08-20T12:03:00.000Z</published>
    <updated>2017-08-21T07:10:19.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><code>VBA</code>：Visual Basic for Applications是Visual Basic的一种宏语言</li>
<li><a href="https://msdn.microsoft.com/zh-cn/library/ee861528.aspx" target="_blank" rel="external">官方VBA文档</a>、<a href="https://support.office.com/zh-cn/excel" target="_blank" rel="external">官方Excel帮助</a>、<a href="https://docs.microsoft.com/zh-cn/dotnet/visual-basic/index" target="_blank" rel="external">官方VB文档</a></li>
<li><a href="http://www.yiibai.com/vba/vba_for_loop.html" target="_blank" rel="external">基础语法</a>、<a href="http://www.51zxw.net/list.aspx?cid=539" target="_blank" rel="external">51自学视频(后面几章收费)</a></li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li><p>不会写法的可以使用录制宏，然后进行代码查看</p>
</li>
<li><p><code>FormulaR1C1</code>是公式输入方法</p>
<ul>
<li>有中括号是相对于选定单元格的相对偏移量，”-“为向左或向上偏移，正数为右或下偏移。 无中括号为相对于选定单元格的绝对偏移量，没有负数。”R”和”C”对应行和列”</li>
<li>如：C1单元格为”=A1+B1”。Range(“C1”).FormulaR1C1 = “=RC[-2]+RC[-1]”</li>
<li>如：C1单元格为”=A2+E3” Range(“C1”).FormulaR1C1 = “=R[1]C[-2]+R[2]C[2]”</li>
</ul>
</li>
<li><code>Selection.AutoFill Destination:=fillRange, Type:=xlFillDefault</code> 自动填充<ul>
<li>此处<code>Selection</code>选中的Range即sourceRange(源)，根据sourceRange进行fillRange的填充。此时fillRange必须包含sourceRange。sourceRange中可以有公式等</li>
</ul>
</li>
<li><code>ActiveWindow.SmallScroll Down:=6</code>等是对窗口进行移动，不影响计算</li>
</ul>
<h2 id="宏界面配置"><a href="#宏界面配置" class="headerlink" title="宏界面配置"></a>宏界面配置</h2><ul>
<li>设置字体：工具-选项-编辑器格式-标准字体-Consolas (西方)</li>
<li>设置语法检测：工具-选项-编辑器-自动语法检测去勾选。防止编辑时弹框提示语法错误，运行时语法错误会提示</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="Delat-Ct法计算候选基因稳定性"><a href="#Delat-Ct法计算候选基因稳定性" class="headerlink" title="Delat Ct法计算候选基因稳定性"></a>Delat Ct法计算候选基因稳定性</h3><blockquote>
<p>此算法是临时帮朋友写的，可能与实际算法不符，仅供参考</p>
</blockquote>
<ul>
<li>简介：这是一种常见的算法，叫做Delat Ct法计算候选基因稳定性。最后得到的是每个基因的mean SD值，首先计算两个基因的ΔCt值，再计算其ΔCt值的方差，最后得到该基因与其余每个基因ΔCt值的方差的平均值。</li>
<li>excel表格数据如下：</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>beta-Actin</th>
<th>Tubulin-alpha</th>
<th>EF1A</th>
<th>GAPDH</th>
<th>Tubulin-beta</th>
<th>18S rRNA  </th>
</tr>
</thead>
<tbody>
<tr>
<td>卵子</td>
<td>23.82</td>
<td>23.82</td>
<td>23.93</td>
<td>25.48</td>
<td>25.76</td>
<td>17.67</td>
</tr>
<tr>
<td>受精后</td>
<td>22.47</td>
<td>23.94</td>
<td>22.51</td>
<td>23.31</td>
<td>23.91</td>
<td>13.74  </td>
</tr>
<tr>
<td>2cell</td>
<td>23.29</td>
<td>24.78</td>
<td>22.83</td>
<td>24.23</td>
<td>25.05</td>
<td>15.35</td>
</tr>
<tr>
<td>4cell</td>
<td>22.95</td>
<td>24.84</td>
<td>22.51</td>
<td>23.39</td>
<td>24.54</td>
<td>14.6</td>
</tr>
<tr>
<td>8cell</td>
<td>21.75</td>
<td>23.77</td>
<td>21.8</td>
<td>22.58</td>
<td>23.66</td>
<td>13.22</td>
</tr>
<tr>
<td>16cell</td>
<td>21.82</td>
<td>24.21</td>
<td>22.49</td>
<td>23.45</td>
<td>23.8</td>
<td>12.73</td>
</tr>
<tr>
<td>32cell</td>
<td>21.92</td>
<td>24.62</td>
<td>22.33</td>
<td>23.74</td>
<td>21.12</td>
<td>13.95</td>
</tr>
<tr>
<td>64cell</td>
<td>22.92</td>
<td>24.83</td>
<td>22.19</td>
<td>24.39</td>
<td>24.9</td>
<td>15.76</td>
</tr>
<tr>
<td>多cell</td>
<td>21.62</td>
<td>24.04</td>
<td>21.26</td>
<td>22.66</td>
<td>24.04</td>
<td>12.63</td>
</tr>
<tr>
<td>高囊胚1</td>
<td>23.06</td>
<td>25.08</td>
<td>23.08</td>
<td>24.45</td>
<td>25.09</td>
<td>15.17</td>
</tr>
<tr>
<td>高囊胚2</td>
<td>22.98</td>
<td>26.27</td>
<td>22.22</td>
<td>25.04</td>
<td>25.72</td>
<td>15.55</td>
</tr>
<tr>
<td>低囊胚</td>
<td>23</td>
<td>26.24</td>
<td>22.03</td>
<td>26.31</td>
<td>26.49</td>
<td>17.04</td>
</tr>
<tr>
<td>原肠胚前期</td>
<td>21.23</td>
<td>25.46</td>
<td>20</td>
<td>26.46</td>
<td>25.87</td>
<td>14.12</td>
</tr>
<tr>
<td>原肠胚中期</td>
<td>20.23</td>
<td>24.6</td>
<td>19.52</td>
<td>26.57</td>
<td>25.81</td>
<td>14.03</td>
</tr>
<tr>
<td>原肠胚后期</td>
<td>19.56</td>
<td>22.77</td>
<td>18.5</td>
<td>26.3</td>
<td>24.91</td>
<td>12.83</td>
</tr>
<tr>
<td>神经</td>
<td>19.46</td>
<td>23.87</td>
<td>17.66</td>
<td>26.82</td>
<td>24.58</td>
<td>15.86</td>
</tr>
<tr>
<td>肌节</td>
<td>18.03</td>
<td>22.7</td>
<td>16.48</td>
<td>23.35</td>
<td>23.79</td>
<td>12.86</td>
</tr>
<tr>
<td>器官形成期1</td>
<td>18.47</td>
<td>23.71</td>
<td>17.26</td>
<td>24.89</td>
<td>24.21</td>
<td>15.3</td>
</tr>
<tr>
<td>器官形成期2</td>
<td>18.65</td>
<td>23.6</td>
<td>17.83</td>
<td>23.94</td>
<td>23.74</td>
<td>15.92</td>
</tr>
<tr>
<td>器官形成期3</td>
<td>18.14</td>
<td>23.24</td>
<td>16.12</td>
<td>23.66</td>
<td>23.82</td>
<td>16</td>
</tr>
<tr>
<td>破膜</td>
<td>17.82</td>
<td>22.89</td>
<td>17.45</td>
<td>5.44</td>
<td>23.92</td>
<td>13.92</td>
</tr>
<tr>
<td>仔鱼</td>
<td>16.97</td>
<td>22.65</td>
<td>16.15</td>
<td>20.69</td>
<td>22.86</td>
<td>11.55</td>
</tr>
</tbody>
</table>
<ul>
<li><p>效果如下</p>
<p>  <img src="/data/images/2017/08/delacCt.png" alt="效果图"></p>
</li>
<li><p>VBA处理源码(效率可能较低)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Sub delacCt()</div><div class="line">&apos;</div><div class="line">&apos; Delac Ct算法计算基因mean SD 宏</div><div class="line">&apos;</div><div class="line">    Dim rows As Integer</div><div class="line">    Dim columns As Integer</div><div class="line">    Dim rangeItem1 As range</div><div class="line">    Dim rangeItem2 As range</div><div class="line">    Dim targetCellRange1 As range</div><div class="line">    Dim targetCellRange2 As range</div><div class="line">    Dim isStart As Boolean</div><div class="line"></div><div class="line">    &apos;dataCell为一个Range对象</div><div class="line">    Set myRange = Application.InputBox(prompt:=&quot;按住Shift选择数据所在区域（包含行标题不包含列标题）&quot;, Type:=8)</div><div class="line">    &apos;Set myRange = range(&quot;B1:D23&quot;)</div><div class="line"></div><div class="line">    &apos;获取此区域的总行数和总列数</div><div class="line">    rows = myRange.rows.count</div><div class="line">    columns = myRange.columns.count</div><div class="line"></div><div class="line">    &apos;循环其中两个基因</div><div class="line">    With myRange</div><div class="line">        For i = 1 To columns Step 1</div><div class="line">            &apos;每一行的方差</div><div class="line">            Dim total As Double</div><div class="line">            total = 0</div><div class="line"></div><div class="line">            For j = i + 1 To columns Step 1</div><div class="line">                &apos;此处.代表myRange(With中)</div><div class="line">                Set rangeItem1 = .columns(i)</div><div class="line">                Set rangeItem2 = .columns(j)</div><div class="line"></div><div class="line">                Dim cellRow As Integer</div><div class="line">                Dim cellColumn As Integer</div><div class="line">                cellRow = i * (rows + 3) + 1</div><div class="line">                cellColumn = (j - 2) * 4 + 2</div><div class="line"></div><div class="line">                &apos;目标单元格</div><div class="line">                Set targetCellRange1 = Worksheets(1).Cells(cellRow, cellColumn)</div><div class="line">                Set targetCellRange2 = Worksheets(1).Cells(cellRow, cellColumn + 1)</div><div class="line"></div><div class="line">                &apos;复制并粘贴其中某两个基因</div><div class="line">                Call geneCopy(rangeItem1, targetCellRange1)</div><div class="line">                Call geneCopy(rangeItem2, targetCellRange2)</div><div class="line"></div><div class="line">                &apos;计算方差</div><div class="line">                total = total + geneCalculate(range(targetCellRange1, targetCellRange1.Offset(rows - 1, 0)))</div><div class="line">            Next</div><div class="line"></div><div class="line">            &apos; 计算方差平均值</div><div class="line">            If i &lt; columns Then</div><div class="line">                &apos;MsgBox total / (columns - i)</div><div class="line">                Dim row As Integer</div><div class="line">                &apos;方差所在行</div><div class="line">                row = targetCellRange1.Offset(rows - 1, 0).row + 1</div><div class="line"></div><div class="line">                Worksheets(1).range(&quot;A&quot; &amp; row).Value = &quot;SD&quot;</div><div class="line">                Worksheets(1).range(&quot;A&quot; &amp; row + 1).Value = &quot;mean SD&quot;</div><div class="line">                Worksheets(1).range(&quot;B&quot; &amp; row + 1).Value = total / (columns - i)</div><div class="line">            End If</div><div class="line">        Next</div><div class="line">    End With</div><div class="line"></div><div class="line">    &apos;ActiveWorkbook.Save</div><div class="line">End Sub</div><div class="line"></div><div class="line">Private Sub geneCopy(rangeItem As range, targetCellRange As range)</div><div class="line">&apos;</div><div class="line">&apos; 复制并粘贴其中某两个基因</div><div class="line">&apos;</div><div class="line">    rangeItem.Select</div><div class="line">    Selection.Copy</div><div class="line"></div><div class="line">    targetCellRange.Select</div><div class="line">    ActiveSheet.Paste</div><div class="line">End Sub</div><div class="line"></div><div class="line">Private Function geneCalculate(targetRange1 As range) As Double</div><div class="line">&apos;</div><div class="line">&apos; 对两个基因进行计算</div><div class="line">&apos;</div><div class="line">    &apos;求差值</div><div class="line">    Call subValue(targetRange1)</div><div class="line"></div><div class="line">    &apos;求方差(targetRange1.Row是获取该单元格得在Sheet中是第几行)</div><div class="line">    geneCalculate = varianceValue(range(Worksheets(1).Cells(targetRange1.row + 1, targetRange1.Column + 2), _</div><div class="line">            Worksheets(1).Cells(targetRange1.row + targetRange1.rows.count - 1, targetRange1.Column + 2)))</div><div class="line"></div><div class="line">    &apos;MsgBox geneCalculate</div><div class="line">End Function</div><div class="line"></div><div class="line">Private Sub subValue(rangeItem1 As range)</div><div class="line">&apos;</div><div class="line">&apos; 求差值</div><div class="line">&apos;</div><div class="line">    Dim sourceRange As range</div><div class="line">    Dim fillRange As range</div><div class="line"></div><div class="line">    Set sourceRange = Worksheets(1).Cells(rangeItem1.row + 1, rangeItem1.Column + 2)</div><div class="line">    sourceRange.Select</div><div class="line">    ActiveCell.FormulaR1C1 = &quot;=RC[-2]-RC[-1]&quot;</div><div class="line"></div><div class="line">    Set fillRange = range(Worksheets(1).Cells(rangeItem1.row + 1, rangeItem1.Column + 2), _</div><div class="line">                            Worksheets(1).Cells(rangeItem1.row + rangeItem1.rows.count - 1, rangeItem1.Column + 2))</div><div class="line"></div><div class="line">    &apos;此处根据选中的sourceRange进行fillRange的填充，fillRange必须包含sourceRange</div><div class="line">    Selection.AutoFill Destination:=fillRange, Type:=xlFillDefault</div><div class="line">End Sub</div><div class="line"></div><div class="line">Private Function varianceValue(range As range) As Double</div><div class="line">&apos;</div><div class="line">&apos; 求方差</div><div class="line">&apos;</div><div class="line">    Dim targetCellRange As range</div><div class="line"></div><div class="line">    Set targetCellRange = Worksheets(1).Cells(range.row + range.rows.count, range.Column)</div><div class="line">    targetCellRange.Select</div><div class="line"></div><div class="line">    targetCellRange.FormulaR1C1 = &quot;=SQRT(VAR(R[-22]C[0]:R[-1]C[0]))&quot;</div><div class="line"></div><div class="line">    &apos;返回值</div><div class="line">    varianceValue = targetCellRange.Value</div><div class="line">End Function</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VBA&lt;/code&gt;：Visual Basic for Applications是Visual Basic的一种宏语
    
    </summary>
    
      <category term="others" scheme="http://blog.aezo.cn/categories/others/"/>
    
    
      <category term="excel" scheme="http://blog.aezo.cn/tags/excel/"/>
    
      <category term="vb" scheme="http://blog.aezo.cn/tags/vb/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="http://blog.aezo.cn/2017/08/05/java/springcloud/"/>
    <id>http://blog.aezo.cn/2017/08/05/java/springcloud/</id>
    <published>2017-08-05T11:36:00.000Z</published>
    <updated>2017-08-05T11:36:36.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>架构演进<ol>
<li>单体架构：复杂度逐渐变高、部署速度慢、阻碍技术创新、无法按需伸缩</li>
<li>SOA <a href="[SOA和微服务架构的区别](https://www.zhihu.com/question/37808426)">^1</a></li>
<li>微服务</li>
</ol>
</li>
<li>微服务特点<ul>
<li>微服务可独立运行在自己的进程里</li>
<li>一系列独立运行的微服务构成整个系统</li>
<li>每个服务独立开发维护</li>
<li>微服务之间通过REST API或RPC等方式通信</li>
<li>优点：易于开发和维护，启动快，技术栈不受限制，按需伸缩，DevOps</li>
<li>挑战：运维要求较高，分布式的复杂性，接口调整成本高</li>
</ul>
</li>
<li>微服务设计原则：单一职责原则、服务自治原则、轻量级通信原则、接口明确原则</li>
<li>微服务开发框架：<code>Spring Cloud</code>、<code>Dubbo</code>、<code>Dropwizard</code>、<code>Consul</code>等</li>
<li>Spring Cloud是基于Spring Boot的用于快速构建分布式系统工具集</li>
<li>Spring Cloud特点：约定优于配置、开箱即用，快速启动、轻量级组件、组件丰富、选型中立</li>
<li>本文相关软件：JDK: 1.8，SpringCloud: Dalston.SR1</li>
</ul>
<h2 id="微服务构建"><a href="#微服务构建" class="headerlink" title="微服务构建"></a>微服务构建</h2><ul>
<li>服务提供者、服务消费者</li>
<li>服务消费者中通过restTemp调用服务提供者提供的服务<ul>
<li>如：<code>User user = this.restTemplate.getForObject(&quot;http://localhost:7900/simple/&quot; + id, User.class);</code></li>
</ul>
</li>
</ul>
<h2 id="Eureka服务发现"><a href="#Eureka服务发现" class="headerlink" title="Eureka服务发现"></a>Eureka服务发现</h2><ul>
<li><p>服务注册与发现</p>
<p>  <img src="/data/images/2017/07/服务注册与发现.png" alt="服务注册与发现"></p>
<ul>
<li>服务发现方式 <a href="[服务发现的可行方案以及实践案例](http://blog.daocloud.io/microservices-4/)">^2</a><ul>
<li>客户端发现：Eureka、Zk</li>
<li>服务端发现：Consul + nginx</li>
</ul>
</li>
<li>服务注册表是一个记录当前可用服务实例的网络信息的数据库，是服务发现机制的核心。服务注册表提供查询API和管理API，使用查询API获得可用的服务实例，使用管理API实现注册和注销</li>
</ul>
</li>
<li><p>简介：Eureka是<code>Netflix</code>开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。Spring Cloud将它集成在其子项目<code>spring-cloud-netflix</code>中，以实现Spring Cloud的服务发现功能</p>
</li>
<li><p>架构图</p>
<p>  <img src="/data/images/2017/07/eureka.png" alt="eureka"></p>
<ul>
<li>AWS概念：us-east-1c、us-east-1d等是zone，它们都属于us-east-1这个region</li>
<li>在应用启动后，将会向Eureka Server发送心跳（默认周期为30秒）。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个服务节点移除（默认90秒）</li>
<li>Eureka还提供了客户端缓存的机制，即使所有的Eureka Server都挂掉，客户端依然可以利用缓存中的信息消费其他服务的API</li>
</ul>
</li>
<li><p>eureka server</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- 用于注册中心访问账号认证，非必须 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在Application.java中加注解<code>@EnableEurekaServer</code></p>
</li>
<li><p>application.yml配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8761</span></div><div class="line"></div><div class="line"><span class="comment"># 引入了spring-boot-starter-security则会默认开启认证</span></div><div class="line"><span class="attr">security:</span></div><div class="line"><span class="attr">  basic:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">true</span> <span class="comment">#开启eureka后台登录认证</span></div><div class="line">  <span class="comment"># 不配置user，则默认的用户名为user，密码为自动生成(在控制台可查看)</span></div><div class="line"><span class="attr">  user:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">    password:</span> <span class="string">smalle</span></div><div class="line"></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  client:</span></div><div class="line">    <span class="comment"># eureka server默认也是一个eureka client.以下两行仅将此App当成eureka server，不当成eureka client(由于是单点测试)</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></div><div class="line">    <span class="comment"># 将eureka注册到哪个url</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://user:password@$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></div></pre></td></tr></table></figure>
</li>
<li><p>后台地址：<code>http://localhost:8761</code></p>
</li>
</ul>
</li>
<li><p>eureka client</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在Application.java中加注解<code>@EnableEurekaClient</code></p>
</li>
<li><p>application.yml配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eureka客户端配置</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://smalle:smalle@localhost:8761/eureka/</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line">    <span class="comment"># 启用ip访问eureka server(默认是使用主机名进行访问)</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></div><div class="line">    <span class="comment"># 实例id</span></div><div class="line"><span class="attr">    instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>示例请看源码</p>
<ul>
<li>示例中使用H2数据库，IDEA连接方式：path:<code>mem:testdb</code>, user:<code>sa</code>, password:空, url:<code>jdbc:h2:mem:testdb</code>, 使用<code>Embedded</code>或<code>In-memory</code>方式连接</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><ul>
<li><p>简介</p>
<ul>
<li>Ribbon是Netflix发布的云中间层服务开源项目，其主要功能是提供客户端侧负载均衡算法。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，Ribbon是一个客户端负载均衡器，我们可以在配置文件中列出Load Balancer后面所有的机器，Ribbon会自动基于某种规则（如简单轮询，随机连接等）去连接这些机器，我们也很容易使用Ribbon实现自定义的负载均衡算法。</li>
<li><p>Eureka与Ribbon连用</p>
<p>  <img src="/data/images/2017/07/eureka-ribbon.png" alt="eureka-ribbon"></p>
<ul>
<li>Ribbon工作时分为两步：第一步先选择 Eureka Server, 它优先选择在同一个Zone且负载较少的Server；第二步再根据用户指定的策略，在从Server取到的服务注册列表中选择一个地址。其中Ribbon提供了多种策略，例如轮询round robin、随机Random、根据响应时间加权等</li>
</ul>
</li>
</ul>
</li>
<li><p>基本使用</p>
<ul>
<li>引入依赖：group：<code>org.springframework.cloud</code>，artifact id：<code>spring-cloud-starter-ribbon</code><ul>
<li>如果引入了<code>spring-cloud-starter-eureka</code>中默认引入了，此时可无需再引入</li>
</ul>
</li>
<li><p>在restTemplate对应的Bean上注解<code>@LoadBalanced</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@LoadBalanced</span> <span class="comment">// 使用ribbon实现客户端负载均衡</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>备注：此时需要启动多个服务提供者进行测试，IDEA中：</p>
<ul>
<li>可以先启动一个后再将端口改掉再启动另外一个</li>
<li>(推荐) <code>Eidt Configurations</code>再配置一个Spring boot的启动项，配置时将<code>Spring Boot Settings</code> - <code>Override parameters</code>添加一个参数<code>server.port=8080</code></li>
</ul>
</li>
</ul>
</li>
<li><p>自定义负载均衡策略</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># robbin负载均衡策略优先级：配置文件策略 &gt; 代码级别策略 &gt; ribbon默认策略(com.netflix.loadbalancer.ZoneAvoidanceRule)</span></div><div class="line"><span class="attr">provider-user:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line">      <span class="comment"># 当访问服务provider-user时采用随机策略RandomRule，此时访问其他服务时仍然为默认策略ZoneAvoidanceRule；WeightedResponseTimeRule响应时间加权策略</span></div><div class="line"><span class="attr">      NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></div></pre></td></tr></table></figure>
</li>
<li><p>脱离Eureka的配置，此时仍然可以运行Eureka，但是不从eureka中获取服务地址，而是从配置文件中读取</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">stores:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line"><span class="attr">    listOfServers:</span> <span class="string">example.com,aezo.cn</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Feign声明式服务调用"><a href="#Feign声明式服务调用" class="headerlink" title="Feign声明式服务调用"></a>Feign声明式服务调用</h2><ul>
<li>简介</li>
<li><p>基本使用(服务消费者)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--Feign声明式服务调用--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类加注解<code>@EnableFeignClients</code></p>
</li>
<li><p>定义FeignClient接口Bean</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 此服务消费者需要调用的服务声明</span></div><div class="line"><span class="meta">@FeignClient</span>(<span class="string">"provider-user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</div><div class="line">    <span class="comment">// Feign不支持@GetMapping, @PathVariable必须指明参数值</span></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/simple/&#123;id&#125;"</span>)</div><div class="line">    <span class="function">User <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, value = <span class="string">"/feign-post"</span>)</div><div class="line">    <span class="function">User <span class="title">postFeignUser</span><span class="params">(@RequestBody User user)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在controller中直接调用接口中方法(此时不直接调用restTemplate)</p>
</li>
</ul>
</li>
</ul>
<h2 id="Hystrix服务容错保护-断路器"><a href="#Hystrix服务容错保护-断路器" class="headerlink" title="Hystrix服务容错保护(断路器)"></a>Hystrix服务容错保护(断路器)</h2><ul>
<li>简介</li>
<li><p>基本使用(服务消费者)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--服务容错保护(断路器) Hystrix--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类加注解<code>@EnableCircuitBreaker</code></p>
</li>
<li><p>声明断路后回调函数</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"findByIdFallBack"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    <span class="comment">// virtual ip: 服务的spring.application.name</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://provider-user/simple/"</span> + id, User.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当服务调用失败或者超时则回调此函数. 此函数参数和返回值必须和调用函数一致</span></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByIdFallBack</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    System.out.println(id + <span class="string">", error[hystrix]"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Zuul-API-GateWay：网关"><a href="#Zuul-API-GateWay：网关" class="headerlink" title="Zuul (API GateWay：网关)"></a>Zuul (API GateWay：网关)</h2><ul>
<li>简介</li>
<li><p>基本使用</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- API网关。包含actuator、hystrix、ribbon --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类声明<code>@EnableZuulProxy</code></p>
</li>
<li><p>基础配置application.yml</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line">  <span class="comment"># 忽略表达式。当遇到路径中有admin的不进行路由</span></div><div class="line">  <span class="comment"># ignored-patterns: /**/admin/**</span></div><div class="line">  <span class="comment"># 路由前缀</span></div><div class="line">  <span class="comment"># prefix: /api</span></div><div class="line">  <span class="comment"># zuul默认会过滤路由前缀(strip-prefix=true)，此处是关闭此过滤</span></div><div class="line">  <span class="comment"># strip-prefix: false</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line">    <span class="comment"># 通配符(ant规范)：? 代表一个任意字符，* 代表多个任意字符，** 代表多个任意字符且支持多级目录</span></div><div class="line">    <span class="comment"># 此处路径在配置文件中越靠前的约优先（系统将所有路径放到LinkedHashMap中，当匹配到一个后就终止匹配）</span></div><div class="line">    <span class="comment"># 现在可以同时访问http://localhost:5555/consumer-movie-ribbon/movie/1 和 http://localhost:5555/api-movie/movie/1</span></div><div class="line">    <span class="comment"># api-movie为规则名, 可通过spring cloud config进行动态加载(覆盖)</span></div><div class="line"><span class="attr">    api-movie:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-movie/**</span></div><div class="line">      <span class="comment"># 从eureka中获取此服务(spring.application.name)的地址(面向服务的路由)</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">consumer-movie-ribbon</span></div><div class="line"><span class="attr">    api-user:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-user/**</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">provider-user</span></div><div class="line">    <span class="comment"># 本地跳转(当访问/api-local/**的时候，则会转到当前应用的/local/**的地址)</span></div><div class="line">    <span class="comment"># api-local:</span></div><div class="line">    <span class="comment">#   path: /api-local/**</span></div><div class="line">    <span class="comment">#   url: forward:/local</span></div><div class="line">    <span class="comment"># 禁用过滤器：zuul.&lt;FilterClassName&gt;.&lt;filterType&gt;.disable=true</span></div><div class="line">    <span class="comment"># AccessFilter:</span></div><div class="line">    <span class="comment">#   pre:</span></div><div class="line">    <span class="comment">#     disable: true</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自定义路由规则</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> PatternServiceRouteMapper <span class="title">serviceRouteMapper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 将serviceName-v1映射成/v1/serviceName. 未匹配到则按照原始的</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PatternServiceRouteMapper(</div><div class="line">            <span class="string">"(?&lt;name&gt;^.+)-(?&lt;version&gt;v.+$)"</span>,</div><div class="line">            <span class="string">"$&#123;version&#125;/$&#123;name&#125;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>过滤器</p>
<ul>
<li>Zuul过滤器核心处理器(<code>com.netflix.zuul.FilterProcessor</code>)</li>
<li>核心过滤器处理(对应包<code>org.springframework.cloud.netflix.zuul.filters</code>)</li>
<li><p>自定义过滤器</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(AccessFilter.class);</div><div class="line"></div><div class="line">    <span class="comment">// 过滤器类型，决定过滤器在请求的哪个生命周期中执行</span></div><div class="line">    <span class="comment">// pre：表示请求在路由之前执行</span></div><div class="line">    <span class="comment">// routing：在路由请求时被执行(调用真实服务应用时)</span></div><div class="line">    <span class="comment">// post：路由完成(服务调用完成)被执行</span></div><div class="line">    <span class="comment">// error：出错时执行</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 多个过滤器时，控制过滤器的执行顺序（数值越小越优先）</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断该过滤器是否需要被执行(true需要执行)，可根据实际情况进行范围限定</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 过滤器的具体逻辑</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        RequestContext ctx = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = ctx.getRequest();</div><div class="line"></div><div class="line">        logger.info(<span class="string">"send &#123;&#125; request to &#123;&#125;"</span>, request.getMethod(), request.getRequestURL().toString()); <span class="comment">// send GET request to http://localhost:5555/api-movie/movie/1</span></div><div class="line"></div><div class="line">        Object accessToken = request.getParameter(<span class="string">"accessToken"</span>);</div><div class="line">        <span class="keyword">if</span>(accessToken == <span class="keyword">null</span>) &#123;</div><div class="line">            logger.warn(<span class="string">"access token is empty, add parameter like: accessToken=smalle"</span>);</div><div class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>); <span class="comment">// 令zuul过滤此请求，不进行路由</span></div><div class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</div><div class="line">            ctx.setResponseBody(<span class="string">"zuul filter"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        logger.info(<span class="string">"access token ok"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 测试异常过滤器（org.springframework.cloud.netflix.zuul.filters.post.SendErrorFilter）</span></div><div class="line">        <span class="comment">// doSomteing();</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomteing</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"run error"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自定义异常信息：出现异常会forward到<code>/error</code>的端点，<code>/error</code>端点的实现来源于Spring Boot的<code>org.springframework.boot.autoconfigure.web.BasicErrorController</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最好使用postman等工具测试</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</div><div class="line">        map.remove(<span class="string">"exception"</span>); <span class="comment">// 移除exception信息，客户端将看不到此信息</span></div><div class="line">        map.put(<span class="string">"myAttr"</span>, <span class="string">"hello"</span>);</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>动态路由：请见分布式配置中心(Config)部分</p>
</li>
</ul>
<h2 id="Config-分布式配置中心-Spring-Cloud-Config"><a href="#Config-分布式配置中心-Spring-Cloud-Config" class="headerlink" title="Config 分布式配置中心(Spring Cloud Config)"></a>Config 分布式配置中心(Spring Cloud Config)</h2><ul>
<li><p>配置中心(Config服务器端)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- 配置中心 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- 用于配置中心访问账号认证 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!--向eureka注册，服务化配置中心--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类添加<code>@EnableConfigServer</code>，开启服务发现则还要加<code>@EnableDiscoveryClient</code></p>
</li>
<li><p>配置文件</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      server:</span></div><div class="line"><span class="attr">        git:</span></div><div class="line">          <span class="comment"># 可以使用占位符&#123;application&#125;、&#123;profile&#125;、&#123;label&#125;</span></div><div class="line"><span class="attr">          uri:</span> <span class="attr">https://git.oschina.net/smalle/spring-cloud-config-test.git</span></div><div class="line">          <span class="comment"># 搜索此git仓库的配置文件目录</span></div><div class="line"><span class="attr">          search-paths:</span> <span class="string">config-repo</span></div><div class="line"><span class="attr">          username:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">          password:</span> <span class="string">aezocn</span></div><div class="line"></div><div class="line"><span class="attr">  server:</span></div><div class="line"><span class="attr">    port:</span> <span class="number">7000</span></div><div class="line"></div><div class="line"><span class="attr">  security:</span></div><div class="line"><span class="attr">    basic:</span></div><div class="line"><span class="attr">      enabled:</span> <span class="literal">true</span> <span class="comment"># 开启权限验证(默认是false)</span></div><div class="line"><span class="attr">    user:</span></div><div class="line"><span class="attr">      name:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">      password:</span> <span class="string">smalle</span></div><div class="line"></div><div class="line">  <span class="comment"># eureka客户端配置</span></div><div class="line"><span class="attr">  eureka:</span></div><div class="line"><span class="attr">    client:</span></div><div class="line"><span class="attr">      serviceUrl:</span></div><div class="line"><span class="attr">        defaultZone:</span> <span class="attr">http://smalle:smalle@localhost:8761/eureka/</span></div><div class="line"><span class="attr">    instance:</span></div><div class="line">      <span class="comment"># 启用ip访问</span></div><div class="line"><span class="attr">      prefer-ip-address:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在git仓库的config-repo目录下添加配置文件: <code>consumer-movie-ribbon.yml</code>(写如配置如：from: git-default-1.0. 下同)、<code>consumer-movie-ribbon-dev.yml</code>、<code>consumer-movie-ribbon-test.yml</code>、<code>consumer-movie-ribbon-prod.yml</code>，并写入参数</p>
</li>
<li>访问：<code>http://localhost:7000/consumer-movie-ribbon/prod/master</code>即可获取应用为<code>consumer-movie-ribbon</code>，profile为<code>prod</code>，git分支为<code>master</code>的配置数据(<code>/{application}/{profile}/{label}</code>)<ul>
<li>某application对应的配置命名必须为<code>{application}-{profile}.yml</code>，其中<code>{profile}</code>和<code>{label}</code>可在对应的application的<code>bootstrap.yml</code>中指定</li>
<li>访问配置路径后，程序默认会将配置数据下载到本地，当git仓库不可用时则获取本地的缓存数据</li>
<li>支持git/svn/本地文件等</li>
</ul>
</li>
</ul>
</li>
<li><p>客户端配置映射</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- 配置中心客户端 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加<code>bootstrap.yml</code>配置文件(不能放在application.yml中)</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bootstrap.yml其优先级高于application.yml</span></div><div class="line"><span class="attr">spring:</span></div><div class="line">  <span class="comment"># application:</span></div><div class="line">  <span class="comment">#  name: consumer-movie-ribbon</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line">      <span class="comment"># (1) config server地址</span></div><div class="line">      <span class="comment"># uri: http://localhost:7000/</span></div><div class="line">      <span class="comment"># (2) 配置中心实行服务化(向eureka注册了自己)，此处要开启服务发现，并指明配置中心服务id</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">        service-id:</span> <span class="string">config-server</span></div><div class="line"><span class="attr">      profile:</span> <span class="string">prod</span></div><div class="line"><span class="attr">      label:</span> <span class="string">master</span></div><div class="line">      <span class="comment"># 如果配置中心开启了权限验证，此处填写相应的用户名和密码</span></div><div class="line"><span class="attr">      username:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">      password:</span> <span class="string">smalle</span></div><div class="line"></div><div class="line"><span class="comment"># eureka客户端配置(使用了spring cloud config, 则eureka的配置必须写在bootstrap.yml中，否则报找不到config server )</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://smalle:smalle@localhost:8761/eureka/</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line">    <span class="comment"># 启用ip访问</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>测试程序</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @RefreshScope // 之后刷新config后可重新注入值</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigController</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;from:none&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String from;</div><div class="line"></div><div class="line">    <span class="comment">// 测试从配置中心获取配置数据，访问http://localhost:9000/from</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/from"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">from</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.from; <span class="comment">// 会从git仓库中读取配置数据</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>动态刷新配置(可获取最新配置信息的git提交)</p>
<ul>
<li>config客户端重启会刷新配置(重新注入配置信息)</li>
<li>动态刷新<ul>
<li>在需要动态加载配置的Bean上加注解<code>@RefreshScope</code></li>
<li>给 <strong>config client</strong> 加入权限验证依赖(<code>org.springframework.boot/spring-boot-starter-security</code>)，并在对应的application.yml中开启验证<ul>
<li>否则访问<code>/refresh</code>端点会失败，报错：<code>Consider adding Spring Security or set &#39;management.security.enabled&#39; to false.</code>(需要加入Spring Security或者关闭端点验证)</li>
</ul>
</li>
<li>对应的需要注入配置的类加<code>@RefreshScope</code></li>
<li><code>POST</code>请求<code>http://localhost:9000/refresh</code>(将Postman的Authorization选择Basic Auth和输入用户名/密码)</li>
<li>再次访问config client的 <a href="http://localhost:9000/from" target="_blank" rel="external">http://localhost:9000/from</a> 即可获取最新git提交的数据(由于开启了验证，所有端点都需要输入用户名密码)<ul>
<li>得到如<code>[&quot;from&quot;]</code>的结果(from配置文件中改变的key)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>动态加载网关配置</p>
<ul>
<li>在<code>api-gateway-zuul</code>服务中同上述一样加<code>bootstrap.yml</code>，并对eureka和config server进行配置</li>
<li><p>在<code>application.yml</code>对</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line"><span class="attr">    api-movie:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-movie/**</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">consumer-movie-ribbon</span></div><div class="line">      <span class="comment"># 如果consumer-movie-ribbon服务开启了权限验证，则需要防止zuul将头信息(Cookie/Set-Cookie/Authorization)过滤掉了.(多用于API网关下的权限验证等服务)</span></div><div class="line">      <span class="comment"># 此方法是对指定规则开启自定义敏感头. 还有一中解决方法是设置路由敏感头为空(则不会过滤任何头信息)：zuul.routes.&lt;route&gt;.sensitiveHeaders=</span></div><div class="line"><span class="attr">      customSensitiveHeaders:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># 为了动态刷新配置(spring cloud config)，执行/refresh端点(此端点需要加入Spring Security或者关闭端点验证)</span></div><div class="line"><span class="attr">security:</span></div><div class="line"><span class="attr">  basic:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  user:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">    password:</span> <span class="string">smalle</span></div></pre></td></tr></table></figure>
</li>
<li><p>在git仓库中加入<code>api-gateway-zuul-prod.yml</code>等配置文件，并加入配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line"><span class="attr">    api-movie:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-movie-config/**</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">consumer-movie-ribbon</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>POST</code>请求<code>http://localhost:5555/refresh</code>即可刷新<code>api-gateway-zuul</code>的配置，因此动态加载了路由规则zuul.routes.api-movie</p>
</li>
</ul>
</li>
</ul>
<h2 id="Bus-消息总线-Spring-Cloud-Bus"><a href="#Bus-消息总线-Spring-Cloud-Bus" class="headerlink" title="Bus 消息总线(Spring Cloud Bus)"></a>Bus 消息总线(Spring Cloud Bus)</h2><ul>
<li>简介：使用轻量级的消息代理来构建一个公用的消息主题让系统中所有微服务都连接上来，由于该主题会被所有实例监听和消费所以称消息总线。各个实例都可以广播消息让其他实例消费。</li>
<li>是基于消息队列(如：ActiveMQ/Kafka/RabbitMQ/RocketMQ), Spring Cloud Bus暂时支持RabbitMQ和Kafka</li>
</ul>
<h3 id="以RabbitMQ为例"><a href="#以RabbitMQ为例" class="headerlink" title="以RabbitMQ为例"></a>以RabbitMQ为例</h3><blockquote>
<p>RabbitMQ是实现了高级消息队列协议(AMQP)的开源消息代理软件，也称为面向消息的中间件。后续操作需要先安装RabbitMQ服务。关于RabbitMQ在SpringBoot中的使用参考SpringBoot章节</p>
</blockquote>
<ul>
<li><p>在<code>config-server</code>和<code>consumer-movie-ribbon</code>两个服务中加入bus依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- 消息总线 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动RabbitMQ服务(如果未修改默认配置，则SpringBoot会自动连接。自定义配置如下)</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这是springboot的默认配置，可根据实际情况修改</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  rabbitmq:</span></div><div class="line"><span class="attr">    host:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">    port:</span> <span class="number">5672</span></div><div class="line"><span class="attr">    username:</span> <span class="string">guest</span></div><div class="line"><span class="attr">    password:</span> <span class="string">guest</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动一个<code>config-server</code>和两个<code>consumer-movie-ribbon</code>(9000、9002)</p>
</li>
<li>修改上述【分布式配置中心】的git管理的配置字段<code>from</code></li>
<li>刷新<code>config-server</code>：<code>POST</code>访问<a href="http://localhost:7000/bus/refresh" target="_blank" rel="external">http://localhost:7000/bus/refresh</a><ul>
<li><code>POST</code>访问<a href="http://localhost:7000/refresh" target="_blank" rel="external">http://localhost:7000/refresh</a> 只能刷新<code>config-server</code>本身</li>
<li><code>POST</code>访问<a href="http://localhost:7000/bus/refresh" target="_blank" rel="external">http://localhost:7000/bus/refresh</a> 可以刷新消息总线上所有的服务</li>
<li><code>POST</code>访问<a href="http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:9000" target="_blank" rel="external">http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:9000</a> 可以刷新的指定服务实例</li>
<li><code>POST</code>访问<a href="http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:**" target="_blank" rel="external">http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:**</a> 可以刷新服务consumer-movie-ribbon下的所有实例</li>
<li>刷新消息总线上的任何一个服务都可以到达此效果(消息总线上的其他服务会收到触发刷新服务的消息，进行同步刷新)</li>
</ul>
</li>
<li><p>原理如下 [^3]</p>
<p>  <img src="/data/images/2017/07/spring-cloud-bus.png" alt="spring-cloud-bus"></p>
</li>
</ul>
<h3 id="以Kafka为例"><a href="#以Kafka为例" class="headerlink" title="以Kafka为例"></a>以Kafka为例</h3><blockquote>
<p>Kafka是有LinkedIn开发的分布式消息系统，现由Apache维护，使用Scala实现。</p>
</blockquote>
<ul>
<li><p>更换依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>只需更换依赖，其他地方同rabbitmq即可(使用kafka默认配置时会产生一个Topic为)</p>
</li>
<li>启动kafka(包括zookeeper). 关于<code>Kafka</code>使用可查看文章【Kafka】</li>
<li>启动应用后会产生一个名为springCloudBus的Topic</li>
</ul>
<h2 id="Stream-消息驱动-Spring-Cloud-Stream"><a href="#Stream-消息驱动-Spring-Cloud-Stream" class="headerlink" title="Stream 消息驱动(Spring Cloud Stream)"></a>Stream 消息驱动(Spring Cloud Stream)</h2><ul>
<li>简介<ul>
<li>Spring Cloud Stream本质上是整合了Spring Boot和Spring integration，主要包含发布-订阅、消息组、分区三个概念</li>
<li>其功能是为应用程序(Spring Boot)和消息中间件之间添加一个绑定器(Binder)，只对应用程序提供统一的Channel通道，从而应用程序不需要考虑不同消息中间件的实现(调用规则)</li>
<li>暂时只支持RabbitMQ和Kafka的自动化配置</li>
</ul>
</li>
<li><p>入门案例</p>
<ul>
<li><p>引入依赖(以服务<code>consumer-movie-ribbon</code>为例)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- 消息驱动 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 基于rabbitmq(也可以引入spring-cloud-stream-binder-rabbit/kafka/redis) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>application.yml 部分配置(consumer-movie-ribbon)</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">consumer-movie-ribbon</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line">    <span class="comment"># Spring Cloud Stream配置</span></div><div class="line"><span class="attr">    stream:</span></div><div class="line"><span class="attr">      bindings:</span></div><div class="line">        <span class="comment"># input为定义的通道名称</span></div><div class="line"><span class="attr">        input:</span></div><div class="line">          <span class="comment"># 通道数据传输类型</span></div><div class="line">          <span class="comment"># content-type: text/plain # application/json</span></div><div class="line">          <span class="comment"># 将此实例的某个Stream(input)定义为某个消费组(同一个消费组里面的实例只有其中一个对消息进行消费, 否则所有的实例都会消费, 建议定义)</span></div><div class="line"><span class="attr">          group:</span> <span class="string">group-movie</span></div><div class="line">          <span class="comment"># 应用中的监听的input通道对应中间件的主题(rabbitmq的Exchange, kafka的Topic)为xxx(默认是通道名称, 此时即input)</span></div><div class="line">          <span class="comment"># destination: xxx</span></div><div class="line">        <span class="comment"># ...此处省略其他通道配置...</span></div></pre></td></tr></table></figure>
</li>
<li><p>消息接受者(consumer-movie-ribbon)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开启绑定，启动消息驱动。</span></div><div class="line"><span class="comment">// @EnableBinding属性value可指定多个关于消息通道的配置(类)，表示需要加载的类，即根据这些类中的注解(@Input、@Output生成bean)</span></div><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;Processor.class, MyChannel.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 消息消费者监听的通道名称.</span></div><div class="line">    <span class="meta">@StreamListener</span>(Processor.INPUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"msg = "</span> + msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// @StreamListener可将收到的消息(json/xml数据格式)转换成具体的对象</span></div><div class="line">    <span class="meta">@StreamListener</span>(MyChannel.CHANNEL2_INPUT) <span class="comment">// 接受rabbitmq的channel1_output</span></div><div class="line">    <span class="meta">@SendTo</span>(MyChannel.CHANNEL2_OUTPUT) <span class="comment">// 收到消息后进行反馈(给rabbitmq的channel1_input发送)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">receive2</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"user.getUsername() ==&gt; "</span> + user.getUsername());</div><div class="line">        <span class="keyword">return</span> <span class="string">"SinkReceiver.receive2 = "</span> + user; <span class="comment">// 将此数据返回给消息发送这或者其他服务</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义通道</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyChannel</span> </span>&#123;</div><div class="line">    <span class="comment">// 输入输出通道名称最好不要相同</span></div><div class="line">    String CHANNEL2_INPUT = <span class="string">"channel2_input"</span>;</div><div class="line">    String CHANNEL2_OUTPUT = <span class="string">"channel2_output"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Input</span>(MyChannel.CHANNEL2_INPUT)</div><div class="line">    <span class="function">SubscribableChannel <span class="title">channel2_input</span><span class="params">()</span></span>; <span class="comment">// 设置消息通道名称(默认使用方法名作为消息通道名)，表示从该通道发送数据</span></div><div class="line"></div><div class="line">    <span class="meta">@Output</span>(MyChannel.CHANNEL2_OUTPUT)</div><div class="line">    <span class="function">MessageChannel <span class="title">channel2_output</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>易错点：<ul>
<li>在两个类中分别@EnableBinding绑定Processor，并同时监听@Input则报错 unknown.channel.name.(一个应用中不能绑定多个相同名称的@Input、@Output; 同理, Processor只能被一个类@EnableBinding绑定或者被两个类分别绑定@Input、@Output)</li>
<li>如果一个应用需要监听相同的主题(如：input)，可以重新命名一个@Input(“xxx”), 然后通过spring.cloud.stream.bindings.xxx.destination=input来监听input主题。或者将监听程序写在一个类中</li>
</ul>
</li>
</ul>
</li>
<li><p>消息发送者(provider-user)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableBinding</span>(MyChannel.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkSender</span> </span>&#123;</div><div class="line">    <span class="comment">// 法一：注入绑定接口</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MyChannel myChannel;</div><div class="line"></div><div class="line">    <span class="comment">// 法二：注入消息通道</span></div><div class="line">    <span class="meta">@Autowired</span> <span class="meta">@Qualifier</span>(<span class="string">"input"</span>) <span class="comment">// 此时有多个MessageChannel(根据SinkSender中@Output注入的), 需要指明</span></div><div class="line">    <span class="keyword">private</span> MessageChannel channel;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MessageChannel channel1_output;</div><div class="line"></div><div class="line">    <span class="comment">// 也可以这样注入</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SinkSender</span><span class="params">(@Qualifier(<span class="string">"channel1_output"</span>)</span> MessageChannel channel) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.channel1_output = channel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试基本的消息发送和接受</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 此条消息会在测试程序中打印</span></div><div class="line">        myChannel.channel().send(MessageBuilder.withPayload(<span class="string">"hello stream [from provider-user]"</span>).build());</div><div class="line"></div><div class="line">        <span class="comment">// 此条消息会在消息消费者中显示</span></div><div class="line">        channel.send(MessageBuilder.withPayload(<span class="string">"hello channel [from provider-user]"</span>).build());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试@StreamListener对消息自动转换和消息反馈</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgTransform</span><span class="params">()</span> </span>&#123;</div><div class="line">        channel1_output.send(MessageBuilder.withPayload(<span class="string">"&#123;\"id\": 1, \"username\": \"smalle\"&#125;"</span>).build());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 用于接受反馈消息</span></div><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;MyChannel.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelReceiver</span> </span>&#123;</div><div class="line">    <span class="comment">// 接受反馈的消息</span></div><div class="line">    <span class="meta">@StreamListener</span>(MyChannel.CHANNEL1_INPUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveSendTo</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"ChannelReceiver.receiveSendTo ==&gt; "</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义通道</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyChannel</span> </span>&#123;</div><div class="line">    String CHANNEL = <span class="string">"input"</span>;</div><div class="line">    String CHANNEL1_INPUT = <span class="string">"channel1_input"</span>;</div><div class="line">    String CHANNEL1_OUTPUT = <span class="string">"channel1_output"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Input</span>(MyChannel.CHANNEL1_INPUT)</div><div class="line">    <span class="function">SubscribableChannel <span class="title">channel1_input</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Output</span>(MyChannel.CHANNEL)</div><div class="line">    <span class="function">MessageChannel <span class="title">channel</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Output</span>(MyChannel.CHANNEL1_OUTPUT)</div><div class="line">    <span class="function">MessageChannel <span class="title">channel1_output</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Spring integration原生支持(了解，Spring Cloud Stream是基于它实现的)</p>
<ul>
<li><p>消息消费者(consumer-movie-ribbon)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;MyChannel.class&#125;) <span class="comment">// 收发消息的通道不能使用同一个MessageChannel</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@ServiceActivator</span>(inputChannel = MyChannel.POLLER_INPUT) <span class="comment">// 收发消息的通道不能使用同一个MessageChannel</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"MyReceiver: msg = "</span> + msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 消息转换(也可放在MySender中)，@ServiceActivator本身不具备消息转换功能(如：json/xml转成具体的对象)</span></div><div class="line">    <span class="meta">@Transformer</span>(inputChannel = MyChannel.POLLER_INPUT, outputChannel = MyChannel.POLLER_OUTPUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Date msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>).format(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>消息生产者(provider-user)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;MyChannel.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySender</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span> <span class="comment">// 项目启动后便会执行</span></div><div class="line">    <span class="meta">@InboundChannelAdapter</span>(value = MyChannel.POLLER_OUTPUT, poller = <span class="meta">@Poller</span>(fixedDelay = <span class="string">"5000"</span>)) <span class="comment">// 对MyChannel.POLLER_OUTPUT通道进行输出. poller表示轮询，此时为每5秒执行一次方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MessageSource&lt;Date&gt; <span class="title">timeMsgSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> () -&gt; <span class="keyword">new</span> GenericMessage&lt;&gt;(<span class="keyword">new</span> Date());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>消息分区(未测试)</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 消费者配置</div><div class="line"># 当前消费者的总实例数量(消息分区需要设置)</div><div class="line">spring.cloud.stream.instanceCount=2</div><div class="line"># 当前实例的索引号(消息分区需要设置，最大为instance-count - 1)</div><div class="line">spring.cloud.stream.instanceIndex=0</div><div class="line"># 开启消费者分区功能</div><div class="line">spring.cloud.stream.bindings.input.consumer.partitioned=true</div><div class="line"></div><div class="line"># 生成者配置</div><div class="line">spring.cloud.stream.bindings.output.destination=input</div><div class="line"># 可根据实际消息规则配置SpEL表达式生成分区键用于分配出站数据, 用于消息分区</div><div class="line">spring.cloud.stream.bindings.output.producer.partitionKeyExpression=payload</div><div class="line"># 分区数量</div><div class="line">spring.cloud.stream.bindings.output.producer.partitionCount=2</div></pre></td></tr></table></figure>
</li>
<li><p>绑定器SPI</p>
<ul>
<li>绑定器是将程序(SpringBoot)中的输入/输出通道和消息中间件的输入输出做绑定</li>
<li>Spring Cloud Stream暂时只实现了RabbitMQ和Kafka的绑定其，因此只支持此二者的自动化配置</li>
<li><p>可自己实现其他消息中间件的绑定器</p>
<ul>
<li>一个实现Binder接口的类</li>
<li>一个Spring配置加载类，用来连接中间件</li>
<li><p>一个或多个能够在classpath下找到META-INF/spring.binders定义绑定器定的文件。如：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rabbit:\</div><div class="line">org.springframework.cloud.stream.binder.rabbit.config.RabbitServiceAutoConfiguration</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>绑定器配置</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 默认的绑定器为rabbit(名字是META-INF/spring.binders中定义的)</div><div class="line">spring.cloud.stream.defaultBinder=rabbit</div><div class="line"># 定义某个通道(input)的绑定器</div><div class="line">spring.cloud.stream.bindings.input.binder=kafka</div><div class="line"></div><div class="line"># 为不同通道定义同一类型不同环境的绑定器</div><div class="line">spring.cloud.stream.bindings.input.binder=rabbit1</div><div class="line">spring.cloud.stream.bindings.output.binder=rabbit2</div><div class="line"># 定义rabbit1的类型和环境(此处省略rabbit2的配置)</div><div class="line">spring.cloud.stream.binders.rabbit1.type=rabbit1</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.host=127.0.0.1</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.port=5672</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.username=guest</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.password=guest</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Sleuth-分布式服务跟踪-Spring-Cloud-Sleuth"><a href="#Sleuth-分布式服务跟踪-Spring-Cloud-Sleuth" class="headerlink" title="Sleuth 分布式服务跟踪(Spring Cloud Sleuth)"></a>Sleuth 分布式服务跟踪(Spring Cloud Sleuth)</h2><ul>
<li>简介<ul>
<li>用来跟踪每个请求在全链路调用的过程，可快速发现每条链路上的性能瓶颈</li>
<li>构建后会自动监控RabbitMQ/Kafka传递的请求、Zuul代理传递的请求、RestTemplate发起的请求</li>
</ul>
</li>
<li><p>入门案例</p>
<ul>
<li><p>引入依赖(在生产者和消费者中都引入)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- 服务跟踪 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>访问生产者<code>http://localhost:8000/simple/1</code>，控制台输出类似<code>TRACE [provider-user,0ec3c3b4ee83efd5,0ec3c3b4ee83efd5,false]</code>的信息，信息中括号的值分别代表：应用名称、Trace ID(一个请求链路的唯一标识)、Span ID(一个基本工作单元，如一个Http请求)、是否将信息收集到Zipkin等服务中来收集和展示</p>
</li>
<li>添加配置<code>logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG</code>可打印更多信息</li>
</ul>
</li>
<li>请求头信息：<code>org.springframework.cloud.sleuth.Span</code></li>
<li><p>抽样收集</p>
<ul>
<li>Spring Cloud Sleuth收集策略通过Sampler接口实现(通过isSampled返回boolean判断是否收集)，默认会使用PercentageBasedSampler实现的抽样策略</li>
<li><code>spring.sleuth.sampler.percentage=0.1</code> 代表收集10%的请求跟踪信息</li>
<li><p>可收集请求头信息中包含某个tag的样品</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagSampler</span> <span class="keyword">implements</span> <span class="title">Sampler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String tag;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TagSampler</span><span class="params">(String tag)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tag = tag;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSampled</span><span class="params">(Span span)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> span.tags().get(tag) != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>与Zipkin整合(推荐)</p>
<ul>
<li><p>建立zipkin server</p>
<ul>
<li>新建服务<code>zipkin-server</code></li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- eureka客户端 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Zipkin创建sleuth主题的stream --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--包含Zipkin服务的核心依赖(zipkin-server)、消息中间件的核心依赖、扩展数据存依赖等. 不包含Zipkin前端界面依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Zipkin前端界面依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 存储Zipkin跟踪信息到mysql(可选. 使用mysql后, Zipkin前端界面显示的数据是通过Restful API从数据库中获取的. 不使用数据存储在Zipkin内部) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类加注解<code>@EnableEurekaClient</code>、<code>@EnableZipkinStreamServer</code>(用stream方式启动，包含常规启动@EnableZipkinServer和创建sleuth的stream主题)</p>
</li>
<li><p>application.yml配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">9411</span></div><div class="line"></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">zipkin-server</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line">    <span class="comment"># 建表语句, 用来新建zipkin跟踪信息相关表(zipkin_spans、zipkin_annotations、zipkin_dependencies), 文件在Maven:io.zipkin.java:zipkin.storage.mysql目录下</span></div><div class="line"><span class="attr">    schema:</span> <span class="attr">classpath:/mysql.sql</span></div><div class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/test</span></div><div class="line"><span class="attr">    username:</span> <span class="string">root</span></div><div class="line"><span class="attr">    password:</span> <span class="string">root</span></div><div class="line"><span class="attr">    initialize:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    continue-on-error:</span> <span class="literal">true</span></div><div class="line">  <span class="comment"># 不对此服务开启跟踪</span></div><div class="line"><span class="attr">  sleuth:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># 改变zipkin日志跟踪信息存储方式为mysql(测试也可不使用mysql存储)</span></div><div class="line"><span class="attr">zipkin:</span></div><div class="line"><span class="attr">  storage:</span></div><div class="line"><span class="attr">    type:</span> <span class="string">mysql</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>被跟踪的应用(在生产者和消费者中都引入)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--服务跟踪与Zipkin整合(可选)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果zipkin没有使用eureka， 则需要在application.yml中添加<code>spring.zipkin.base-url: http://localhost:9411/</code>(zipkin server地址)</p>
</li>
</ul>
</li>
<li>进入到zipkin server后台界面查看跟踪信息：<a href="http://localhost:9411/(跟踪信息可能会有延迟" target="_blank" rel="external">http://localhost:9411/(跟踪信息可能会有延迟</a>)</li>
</ul>
</li>
<li><p>ELK日志分析系统(Logstash)</p>
<ul>
<li>ELK平台包含：ElasticSerch(分布式搜索引擎)、Logstash(日志收集-过滤-存储)、Kibana(界面展现)三个开源工具。(与Zipkin类似，二者不建议同时使用)</li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--服务跟踪与ELK日志分析平台整合(可选，此包用于Logstash收集日志)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>将spring.application.name配置到bootstrap.yml中</p>
</li>
<li>在resources目录加logback-spring.xml文件(请看源码)</li>
</ul>
</li>
</ul>
<hr>
<p>[^3]: <a href="http://blog.csdn.net/sosfnima/article/details/53178326" target="_blank" rel="external">Spring Cloud Bus原理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;架构演进&lt;ol&gt;
&lt;li&gt;单体架构：复杂度逐渐变高、部署速度慢、阻碍技术创新、无法按需伸缩&lt;/li&gt;
&lt;li&gt;SOA &lt;a hr
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="http://blog.aezo.cn/tags/SpringCloud/"/>
    
      <category term="微服务" scheme="http://blog.aezo.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Eureka" scheme="http://blog.aezo.cn/tags/Eureka/"/>
    
      <category term="Ribbon" scheme="http://blog.aezo.cn/tags/Ribbon/"/>
    
      <category term="Feign" scheme="http://blog.aezo.cn/tags/Feign/"/>
    
      <category term="Hystrix" scheme="http://blog.aezo.cn/tags/Hystrix/"/>
    
      <category term="Zuul" scheme="http://blog.aezo.cn/tags/Zuul/"/>
    
      <category term="Config" scheme="http://blog.aezo.cn/tags/Config/"/>
    
      <category term="Bus" scheme="http://blog.aezo.cn/tags/Bus/"/>
    
  </entry>
  
  <entry>
    <title>spring</title>
    <link href="http://blog.aezo.cn/2017/07/01/java/spring/"/>
    <id>http://blog.aezo.cn/2017/07/01/java/spring/</id>
    <published>2017-07-01T10:47:00.000Z</published>
    <updated>2017-07-24T10:44:08.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol>
<li>spring项目官网：<a href="https://spring.io/projects" target="_blank" rel="external">https://spring.io/projects</a> ，其中的<code>spring-framework</code>即是spring框架内容</li>
<li>历史：(1) spring 1.x，xml配置时代 (2) spring 2.x，注解时代 (3) <strong>spring 3.x，java配置</strong></li>
<li>spring模块(每个模块有个jar包)：<ul>
<li>核心容器：<code>spring-core</code>, <code>spring-beans</code>, <code>spring-context</code>(运行时spring容器), <code>spring-context-support</code>(spring对第三方包的集成支持), <code>spring-expression</code>(使用表达式语言在运行时查询和操作对象)</li>
<li>AOP：spring-aop, spring-aspects</li>
<li>消息：spring-messaging</li>
<li>数据访问：<code>spring-jdbc</code>, <code>spring-tx</code>(提供编程式和声明明式事物支持), <code>spring-orm</code>, <code>spring-oxm</code>(提供对对象/xml映射技术支持), <code>spring-jms</code>(提供jms支持)</li>
<li>Web： <code>spring-web</code>(在web项目中提供spring容器), <code>spring-webmvc</code>(基于Servlet的SpringMVC), <code>spring-websocket</code>, <code>spring-webmvc-portlet</code></li>
</ul>
</li>
<li>spring生态：<code>Spring Boot</code>(使用默认开发配置来快速开发)、<code>Spring Cloud</code>(为分布式系统开发提供工具集)等</li>
<li>本文档基于spring4.3.8</li>
</ol>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ul>
<li><p>maven依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--包含spring-core、spring-beans、spring-aop、spring-expression、spring-instrument--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>依赖注入</p>
<ul>
<li>声明Bean的注解(下面几个注解效果一样)：<ul>
<li><code>@Component</code> 没有明确的角色</li>
<li><code>@Service</code> 在业务逻辑层(cn.aezo.spring.aop_spel.service)使用</li>
<li><code>@Repository</code> 在数据访问层(cn.aezo.spring.aop_spel.dao)使用</li>
<li><code>@Controller</code> 在展现层使用</li>
</ul>
</li>
<li>注入Bean的注解(效果一样)<ul>
<li><code>@Autowired</code> Spring提供(默认按类型by type(根据类); 如果想用by name，则使用<code>@Qualifier(&quot;my-bean-name&quot;)</code>)</li>
<li><code>@Resource</code> JSR-250提供(常用)</li>
<li><code>@Inject</code> JSR-330提供</li>
</ul>
</li>
</ul>
</li>
<li>java配置<ul>
<li><code>@Configuration</code> 注解类表示此类是一个配置类，里面有0个或者多个<code>@Bean</code><ul>
<li><code>@ComponetScan(&quot;cn.aezo&quot;)</code> 定义需要扫描的包名，并将里面的<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>注解的类注册为Bean</li>
</ul>
</li>
<li><code>@Bean</code> 注解方法，表示当前方法的返回值是一个Bean，Bean的名称是方法名</li>
<li>一般公共类使用java配置进行Bean声明，业务相关类使用注解进行Bean声明</li>
</ul>
</li>
<li><p>调用</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");</span></div><div class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class); <span class="comment">// AppConfig为定义的java配置类</span></div><div class="line"></div><div class="line">Hello hello = context.getBean(<span class="string">"hello"</span>, Hello.class);</div><div class="line">hello.hello();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul>
<li>相关注解<ul>
<li><code>@Aspect</code> 声明一个切面</li>
<li><code>@Before</code>、<code>@After</code>、<code>@Around</code> 定义建言(advice)</li>
</ul>
</li>
<li><p>maven依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!--不要也可测试成功--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>编写切面</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span> <span class="comment">// 声明一个切面</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</div><div class="line">    <span class="comment">// 法一：简单</span></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* cn.aezo.spring.base.annotation.aop.DemoMethodService.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</div><div class="line">        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();</div><div class="line">        Method method = methodSignature.getMethod();</div><div class="line">        System.out.println(<span class="string">"方法规则式拦截[@Before-execution]："</span> + method.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>调用service</p>
</li>
</ul>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><ul>
<li><code>@Scope(&quot;prototype&quot;)</code> 注解类(配置Bean的作用域)<ul>
<li><code>singleton</code> 整个容器共享一个实例（默认配置）</li>
<li><code>prototype</code> 每次调用新建一个实例</li>
<li><code>request</code> Web项目中，每一个Http Request新建一个实例</li>
<li><code>session</code></li>
<li><code>globalSession</code> 用于portal应用</li>
</ul>
</li>
</ul>
<h3 id="EL-Spring-EL"><a href="#EL-Spring-EL" class="headerlink" title="EL(Spring-EL)"></a>EL(Spring-EL)</h3><ul>
<li><code>@Value</code> 在其中输入EL表达式。可对资源进行注入</li>
<li><p>实例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.aezo.spring.base.annotation.el"</span>)</div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:cn/aezo/spring/base/annotation/el/el.properties"</span>) <span class="comment">// 注入配置文件</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ELConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"I Love You"</span>)</div><div class="line">    <span class="keyword">private</span> String normal;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;systemProperties['os.name']&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String osName;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;T(java.lang.Math).random() * 100.0&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String randomNumber;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;site.url:www.aezo.cn&#125;"</span>) <span class="comment">// 读取配置文件(需要注入配置文件)，使用$而不是#。冒号后面是缺省值</span></div><div class="line">    <span class="keyword">private</span> Resource siteUrl;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;demoService.another&#125;"</span>) <span class="comment">// 读取其他类属性的@Value注解值</span></div><div class="line">    <span class="keyword">private</span> String fromAnother;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"classpath:cn/aezo/spring/base/annotation/el/test.txt"</span>)</div><div class="line">    <span class="keyword">private</span> Resource testFile;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"http://www.baidu.com"</span>)</div><div class="line">    <span class="keyword">private</span> Resource testUrl;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Environment environment;</div><div class="line"></div><div class="line">    <span class="comment">// @Bean</span></div><div class="line">    <span class="comment">// public static PropertySourcesPlaceholderConfigurer propertyConfigurer() &#123;</span></div><div class="line">    <span class="comment">//     return new PropertySourcesPlaceholderConfigurer();</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputResource</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"normal = "</span> + normal);</div><div class="line">        System.out.println(<span class="string">"osName = "</span> + osName);</div><div class="line">        System.out.println(<span class="string">"randomNumber = "</span> + randomNumber);</div><div class="line">        System.out.println(<span class="string">"normal = "</span> + siteUrl);</div><div class="line">        System.out.println(<span class="string">"fromAnother = "</span> + fromAnother);</div><div class="line">        System.out.println(<span class="string">"environment = "</span> + environment.getProperty(<span class="string">"site.url"</span>));</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"testFile = "</span> + IOUtils.toString(testFile.getInputStream(), <span class="string">"UTF-8"</span>));</div><div class="line">            System.out.println(<span class="string">"testUrl = "</span> + IOUtils.toString(testUrl.getInputStream(), <span class="string">"UTF-8"</span>));</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h3><ul>
<li>不同的环境读取不同的配置文件：<code>dev</code>/<code>prod</code></li>
</ul>
<h3 id="Application-Event"><a href="#Application-Event" class="headerlink" title="Application Event"></a>Application Event</h3><ul>
<li>事件：一个Bean(A)完成某个任务后，可以给另外一个Bean(B)发送事件，前提是B对A进行了监听</li>
<li><p>方法：</p>
<ul>
<li><p>继承<code>ApplicationEvent</code> 进行事件定义</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoEvent</span><span class="params">(Object source, String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(source);</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现<code>ApplicationListener</code> 进行事件监听</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">DemoEvent</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(DemoEvent demoEvent)</span> </span>&#123;</div><div class="line">        String message = demoEvent.getMessage();</div><div class="line">        System.out.println(<span class="string">"DemoListener.onApplicationEvent=="</span> + message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>applicationContext.publishEvent(new DemoEvent(this, message));</code> 发布事件</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoPublisher</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ApplicationContext applicationContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        applicationContext.publishEvent(<span class="keyword">new</span> DemoEvent(<span class="keyword">this</span>, message));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="Spring-Aware"><a href="#Spring-Aware" class="headerlink" title="Spring Aware"></a>Spring Aware</h3><ul>
<li>Spring依赖注入最大的亮点就是你所有的Bean对Spring容器的存在是无意识的。即你可以将容器换成其他容器，如Google Guice，这是Bean之间的耦合度很低。</li>
<li>Spring Aware可以让你的Bean调用Spring提供的资源，缺点是Bean会和Spring框架耦合。</li>
<li>相关接口<ul>
<li><code>BeanNameAware</code> 获得容器中Bean的名称</li>
<li><code>BeanFactoryAware</code> 获得当前Bean Factory，这样就有可以调用容器服务</li>
<li><code>ApplicationContextAware</code> 获得当前Application Context，这样就有可以调用容器服务</li>
<li><code>MessageSourceAware</code> 获得当前Message Source，可以获得文本信息</li>
<li><code>ApplicationEventPublisherAware</code> 应用事件发布器，可以发布事件</li>
<li><code>ResourceLoaderAware</code> 获得资源加载器，可以获取外部资源</li>
</ul>
</li>
<li><p>实例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwareService</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">ResourceLoaderAware</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String beanName;</div><div class="line">    <span class="keyword">private</span> ResourceLoader loader;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.beanName = s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loader = resourceLoader;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputResult</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"beanName = "</span> + beanName);</div><div class="line">        Resource resource = loader.getResource(<span class="string">"classpath:cn/aezo/spring/base/annotation/springaware/test.txt"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String test = IOUtils.toString(resource.getInputStream(), <span class="string">"UTF-8"</span>);</div><div class="line">            System.out.println(<span class="string">"test = "</span> + test);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul>
<li>Spring通过任务执行器(TaskExecutor)来实现多线程和并发编程。使用<code>ThreadPoolTaskExecutor</code>可实现一个基于线程池的TaskExecutor。</li>
<li><code>@EnableAsync</code> 可开启对异步任务的支持。需要对应的配置类实现</li>
<li><code>@Async</code> 注解执行异步任务的方法</li>
<li><p>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取线程池</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.aezo.spring.base.annotation.thread"</span>)</div><div class="line"><span class="meta">@EnableAsync</span> <span class="comment">// 开启异步任务支持</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskExecutorConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">        ThreadPoolTaskExecutor taskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</div><div class="line">        taskExecutor.setCorePoolSize(<span class="number">5</span>);</div><div class="line">        taskExecutor.setMaxPoolSize(<span class="number">10</span>);</div><div class="line">        taskExecutor.setQueueCapacity(<span class="number">25</span>);</div><div class="line">        taskExecutor.initialize();</div><div class="line">        <span class="keyword">return</span> taskExecutor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义异步方法</span></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskService</span> </span>&#123;</div><div class="line">    <span class="meta">@Async</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeAsyncTask</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"i = "</span> + i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Async</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeAsyncTaskPlus</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"i+1 = "</span> + (i+<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ul>
<li><code>@EnableScheduling</code> 开启定时任务</li>
<li><p><code>@Scheduled</code> 执行任务的方法</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.aezo.spring.base.annotation.scheduled"</span>)</div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskScheduledConfig</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTaskService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>) <span class="comment">// 5000毫秒. fixedRate每隔固定时间执行</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"每隔5秒执行一次："</span> + dateFormat.format(<span class="keyword">new</span> Date()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 50 14 ? * *"</span>) <span class="comment">// 每天14.50执行</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fixTimeException</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"在指定时间执行："</span> + dateFormat.format(<span class="keyword">new</span> Date()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="条件注解-Condition"><a href="#条件注解-Condition" class="headerlink" title="条件注解(Condition)"></a>条件注解(Condition)</h3><ul>
<li><code>@Condition</code> 根据满足某一特定条件来创建某个特定的Bean. 如某个Bean创建后才会创建另一个Bean(Spring 4.x)</li>
<li>方法<ul>
<li>条件类实现<code>Condition</code>接口</li>
<li>自定义服务接口，并有多种实现</li>
<li>在<code>@Configuration</code>中<code>@Bean</code>的方法上注解<code>@Conditional(条件类.class)</code>表示符合此条件才会创建对应的Bean</li>
</ul>
</li>
</ul>
<h3 id="组合注解、元注解"><a href="#组合注解、元注解" class="headerlink" title="组合注解、元注解"></a>组合注解、元注解</h3><ul>
<li>元注解是指可以注解到其他注解上的注解，被元注解注解之后的注解称之为组合注解</li>
<li>如<code>@Configuration</code>是包含<code>@Component</code>的组合注解，<code>@Component</code>为元注解</li>
<li><p>示例，将<code>@Configuration</code>和<code>@ComponentScan</code>组合成一个注解</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WiselyConfiguration &#123;</div><div class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;spring项目官网：&lt;a href=&quot;https://spring.io/projects&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="spring" scheme="http://blog.aezo.cn/tags/spring/"/>
    
      <category term="spring-mvc" scheme="http://blog.aezo.cn/tags/spring-mvc/"/>
    
  </entry>
  
  <entry>
    <title>hibernate</title>
    <link href="http://blog.aezo.cn/2017/05/21/java/hibernate/"/>
    <id>http://blog.aezo.cn/2017/05/21/java/hibernate/</id>
    <published>2017-05-21T07:39:00.000Z</published>
    <updated>2017-09-25T13:27:45.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>ORM框架(对象关系映射)<ul>
<li>JDBC操作数据库很繁琐</li>
<li>Sql语句编写并不是面向对象的</li>
<li>可以在对象和关系表之间建立关联来简化编程</li>
<li>0/R Mapping 简化编程</li>
<li>0/R Mapping跨越数据库平台</li>
</ul>
</li>
<li>ssh流程/hibernate流程(<strong>视频01、02</strong>)、hibernate原理(<strong>视频06(反射)、hiberbate内部大多直接以生成二进制码的形式实现</strong>)</li>
<li>O/RMapping编程模型（<strong>映射接口使用jpa的，编程接口使用hibernate的</strong>）<ul>
<li>映射模型<ul>
<li>jpa annotation(java提供的annotation配置–常用)</li>
<li>hibernate annotation extension(Hibernate扩展的annotation配置–较少用)</li>
<li>hibernate xml(Hibernate的xml配置方式–常用)</li>
<li>jpa xml(java提供的xml配置–较少用)</li>
</ul>
</li>
<li>编程接口（做CRUD）<ul>
<li>Jpa(不常用)</li>
<li>hibernate(现在用)</li>
</ul>
</li>
<li>数据査询语言<ul>
<li>HQL(常用)</li>
<li>EJBQL(JPQL)：是HQL的一个子集. EJB必须用在容器(application server)中，而hibernate可以在j2se中使用</li>
</ul>
</li>
</ul>
</li>
<li>JPA：Java Persistence API. JPA是接口/规范，hibernate是其实现. JPA是hibernate的作者基于hibernate抽象出来的. JPA是EJB3.0的的一部分</li>
<li>本文档基于hibernate3.3.2</li>
<li>资源下载：<a href="https://sourceforge.net/projects/hibernate/files/hibernate3/3.3.2.GA/hibernate-distribution-3.3.2.GA-dist.tar.gz/download" target="_blank" rel="external">hibernate-distribution-3.3.2.GA</a>、<a href="https://sourceforge.net/projects/hibernate/files/hibernate-annotations/3.4.0.GA/hibernate-annotations-3.4.0.GA.zip/download" target="_blank" rel="external">hibernate-annotations-3.4.0.GA</a>、<a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12/1.5.8" target="_blank" rel="external">slf4jl.5.8</a>、<a href="https://mvnrepository.com/artifact/log4j/log4j/1.2.15" target="_blank" rel="external">log4j-1.2.15</a></li>
<li><p>jar包如下：(日志使用的log4j)</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">antlr-2.7.6.jar</div><div class="line">commons-collections-3.1.jar</div><div class="line">dom4j-1.6.1.jar</div><div class="line">ejb3-persistence.jar</div><div class="line">hibernate3.jar</div><div class="line">hibernate-annotations.jar</div><div class="line">hibernate-commons-annotations.jar</div><div class="line">javassist-3.9.0.GA.jar</div><div class="line">jta-1.1.jar</div><div class="line">junit-4.7.jar</div><div class="line">log4j-1.2.15.jar</div><div class="line">mysql-connector-java-5.1.26-bin.jar</div><div class="line">slf4j-api-1.5.8.jar</div><div class="line">slf4j-log4j12-1.5.8.jar</div></pre></td></tr></table></figure>
<ul>
<li><code>slf4j-api</code>是一个日志接口，其实现可以为<code>log4j</code>(需要对应的适配器进行接口转换，如<code>slf4j-log4j12-1.5.8.jar</code>)、<code>slf nodep</code>、<code>jdk logging api</code>、<code>apache commons-logging</code></li>
</ul>
</li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><blockquote>
<p><code>test/cn.aezo.hibernate.hello.StudentTest</code></p>
</blockquote>
<ol>
<li><p>配置<code>hibernate.cfg.xml</code>(配置数据源、加入)</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- hibernate使用xml配置数据库映射的helloworld案例。 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.aezo.hibernate.hello"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Student"</span> <span class="attr">table</span>=<span class="string">"student"</span>&gt;</span></div><div class="line"> 		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span><span class="comment">&lt;!-- 定义id自动生成器 --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 当使用联合主键时的配置 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 因为使用UTF-8编码是主键长度不能超过256个字节，而默认id长度是int(11),name长度是varchar(255)，则超出长度，故此处应该定义长度 --&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">        &lt;composite-id name="pk" class="cn.aezo.hibernate.model.StudentPK"&gt;</div><div class="line">        	&lt;key-property name="id"&gt;&lt;/key-property&gt;</div><div class="line">        	&lt;key-property name="name" length="50"&gt;&lt;/key-property&gt;</div><div class="line">        &lt;/composite-id&gt;</div><div class="line">        --&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置Student的映射关系(Student.hbm.xml，需要放在对应类的同级目录)，并将其加入hibernate.cfg.xml中(<code>&lt;mapping resource=&quot;cn/aezo/hibernate/hello/Student.hbm.xml&quot;/&gt;</code>)</p>
</li>
</ol>
<h3 id="Annotation注解-常用"><a href="#Annotation注解-常用" class="headerlink" title="Annotation注解 (常用)"></a>Annotation注解 (常用)</h3><blockquote>
<p><code>test/cn.aezo.hibernate.hello.TeacherTest</code></p>
</blockquote>
<ol>
<li>配置<code>hibernate.cfg.xml</code>(配置数据源、加入)</li>
<li>给Teacher加注解</li>
<li>将Teacher映射加入到hibernate.cfg.xml中(<code>&lt;mapping class=&quot;cn.aezo.hibernate.hello.Teacher&quot;/&gt;</code>)</li>
</ol>
<h2 id="hibernate-cfg-xml配置"><a href="#hibernate-cfg-xml配置" class="headerlink" title="hibernate.cfg.xml配置"></a>hibernate.cfg.xml配置</h2><ul>
<li>此配置文件需要放入在src目录</li>
<li><p>配置如下</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置链接数据信息，配置后不需要自己写连接代码Database connection settings --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/hiber<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- JDBC connection pool (use the built-in) --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;property name="connection.pool_size"&gt;1&lt;/property&gt; --&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 方言,告诉hibernate使用的sql语言是mysql规定的 SQL dialect--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 通过getCurrentSession()获取此上下文的session，没有则自动创建。thread表示线程级别,jta用于分布式事物管理(不同的数据库服务器),使用时需要中间件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Disable the second-level cache  --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.provider_class"</span>&gt;</span>org.hibernate.cache.NoCacheProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 展示sql语句 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 展示sql语句是格式化一下，更加美观 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 自动生成建表语句：hibernate建表后的字段顺序并不是和model字段顺序一致(内部使用TreeMap保存) --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 测试那个就映射那个，将其他映射先去掉防止干扰 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/aezo/hibernate/hello/Student.hbm.xml"</span>/&gt;</span><span class="comment">&lt;!-- 使用xml方式需要的映射格式 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"cn.aezo.hibernate.hello.Teacher"</span>/&gt;</span><span class="comment">&lt;!-- 使用annotation方式需要的映射格式 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="相关注解类"><a href="#相关注解类" class="headerlink" title="相关注解类"></a>相关注解类</h2><p><strong>注解要么写在字段上，要么写在get方法上，千万不能混合使用，否则会报：</strong> <code>Could not determine type for: java.util.List, at table</code></p>
<ul>
<li>注解应该导入jpa的注解，如<strong><code>javax.persistence.*</code></strong></li>
<li><p>类级别</p>
<ul>
<li><strong><code>@Entity</code></strong>: 注解实体类, 最终会和数据库的表对应. <strong>注解了之后需要将该类加到hibernate.cfg.xml的mapping中</strong></li>
<li><strong><code>@Table(name=&quot;_teacher&quot;)</code></strong> 当实体类的类名和对应的表名不一致时批注,此时对应表的实际名为_teacher</li>
<li><p><code>@IdClass(TeacherPK.class)</code> 定义联合主键的类</p>
<blockquote>
<p>如 <code>cn.aezo.hibernate.hello.Teacher</code></p>
</blockquote>
<ul>
<li><code>@EmbeddedlD</code>/<code>@ Embeddable</code>也可以定义联合主键</li>
</ul>
</li>
<li><code>@SequenceGenerator(name = &quot;teacherSeq&quot;, sequenceName = &quot;teacherSeq_db&quot;)</code> Id生成策略使用能够sequence<ul>
<li>在主键上加注解 <code>@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;teacherSeq&quot;)</code></li>
<li>常用ID生成策略有native identity sequence uuid(xml配置)</li>
</ul>
</li>
<li><code>@TableGenerator</code> 用一张表存储所有表主键的当前值(id生成策略)</li>
<li><code>@BatchSize(size=5)</code> 发出sql语句时一次性取出5条数据</li>
</ul>
</li>
<li><p>字段/方法级别</p>
<ul>
<li><strong><code>@Id</code></strong> 主键; <code>@Basic</code> 其他属性,可省略</li>
<li><strong><code>@GeneratedValue</code></strong> 批注后主键会自动生成值，默认使用id生成策略是AUTO。@GeneratedValue(strategy=GenerationType.AUTO)，其中(strategy=GenerationType.AUTO)可以省略，会自动根据mysql/oracle转换，相当于xml方式中的native</li>
<li><strong><code>@Column(name=&quot;_title&quot;)</code></strong> 当实际的字段名和类的属性名不一致时才需批注,此时表示对应的表中的字段实际名为_title。最好一致</li>
<li><code>@JoinColumn</code>、<code>@OneToMany</code>等见下文关系映射</li>
<li><code>@OrderBy(&quot;name ASC&quot;)</code> 排序</li>
<li><code>@Transient</code> 透明的.表示此字段在更新时不保存到数据库中,即不参加持久化.这是annotation的写法,在xml中则不写此属性即可</li>
<li><code>@Temporal(value=TemporalType.DATE)</code> 表示相应日期类型只记录日期,最终表的字段类型是DATE。不写的话默认是记录日期和时间,字段类型是TIMESTAMP。此处可以省略”value=”。不常用</li>
<li><p><code>@Enumerated(EnumType.STRING)</code> 声明枚举类型。EnumType.STRING表示在表中生成的字段类型是varchar;EnumType.ORDINAL表示表中生成的字段类型是int，并且拿枚举的下表存储</p>
<blockquote>
<p>如 <code>test/cn.aezo.hibernate.hello.TeacherTest</code></p>
</blockquote>
</li>
</ul>
</li>
<li><p>annotation字段映射位置：可以在field上或者get方法上(建议)，如果写在field则破坏了面向对象的机制，写在get方法是public的，所有一般写在get方法上</p>
</li>
</ul>
<h2 id="核心开发接口"><a href="#核心开发接口" class="headerlink" title="核心开发接口"></a>核心开发接口</h2><ol>
<li><p>示例</p>
<blockquote>
<p>如 <code>test/cn.aezo.hibernate.coreapi.TeacherTest</code></p>
</blockquote>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Configuration cfg = Configuration().configure(); // xml可以使用</span></div><div class="line">AnnotationConfiguration acfg = <span class="keyword">new</span> AnnotationConfiguration().configure(); <span class="comment">// xml和Annotation都能使用</span></div><div class="line"></div><div class="line">SessionFactory　session = acfg.buildSessionFactory();</div><div class="line"></div><div class="line">Session session = sf.getCurrentSession(); <span class="comment">//从上下文找(要在hibernate配置文件中配置session运行的上下文)，如果有直接用，如果没有重新创建。事务提交自动close，下次获取的就是新的session</span></div><div class="line"><span class="comment">// Session session =  sf.openSession(); //每次都是新的，需要close</span></div><div class="line"></div><div class="line">session.beginTransaction(); <span class="comment">//开始一个事物</span></div><div class="line"></div><div class="line">session.save(teacher1);</div><div class="line">Teacher1 teacher1 = (Teacher1)session.load(Teacher1.class, <span class="number">1</span>); <span class="comment">// 存在懒加载</span></div><div class="line"><span class="comment">// Teacher1 teacher1 = (Teacher1)session.get(Teacher1.class, 1); // 不存在懒加载</span></div><div class="line"></div><div class="line">session.getTransaction().commit(); <span class="comment">//提交事物</span></div><div class="line"><span class="comment">// session.close();</span></div><div class="line"></div><div class="line">System.out.println(teacher1.getName()); <span class="comment">// 懒加载时，此处会报错</span></div></pre></td></tr></table></figure>
</li>
<li><p>接口</p>
<ul>
<li><code>Configuration</code> / <code>AnnotationConfiguration</code>: 管理配置信息(hibernate.cfg.xml), 用来产生SessionFactory(使用buildSessionFactory方法产生Session)<ul>
<li>方法：<code>buildSessionFactory</code></li>
</ul>
</li>
<li><code>SessoinFactor</code>: 用来产生和管理Session, 通常情况下每个应用只需要一个SessionFactory(除非要访间多个数据库)<ul>
<li>方法：<code>getCurrentsession</code>(从上下文中获取，如果上下文中没有则创建一个新的。常在事物中使用，事物提交后此session则关闭)、<code>openSession</code>(每次都是新的session，需要close)</li>
<li>getCurrentsession的上下文配置：<code>&lt;property name=&quot;current_session_context_classs&quot;&gt;thread&lt;/property&gt;</code>(jta、thread常用 managed、custom.Class少用)<ul>
<li>上下文主要有thread和jta两种。thread依赖于数据库本身的，简称Connection事务，只针对一个数据库。jta从分布式界定事物</li>
<li><strong><code>jta</code>(全称java transaction api) java分布式事务管理（多数据库访问）, jta需要application server支持，由中间件提供（jboss、WebLogic等，tomcat不支持）</strong></li>
</ul>
</li>
</ul>
</li>
<li><code>Session</code>: 管理一个数据库的任务单元（简单说就是增 删 改 查）<ul>
<li>方法：<code>sava</code>、<code>delete</code>、<code>get</code>、<code>load</code>、<code>update</code>、<code>saveOrUpdate</code>、<code>clear</code>、<code>flush</code></li>
<li><strong>get与load的区别</strong><ul>
<li>不存在对应记录时表现不一样</li>
<li>load返回的是代理对象，等到真正用到对象的内容时才发出sql语句(懒加载的)</li>
<li>get直接从数据库加载，不会延迟</li>
<li><code>User3 user3 = (User3)session.get(User3.class, 1);</code>、<code>User3 user3 = (User3)session.load(User3.class, 1);</code></li>
</ul>
</li>
<li>update(视频32)<ul>
<li>用来更新detached对象，更新完成后转为persistent状态</li>
<li>update时默认会更新全部字段，更新部分字段的解决办法<ul>
<li>使用 HQL(EjBQL)(建议）</li>
<li>xml设定property标签的update属性，annotation设定@Column的updatable=false，不过这种方式很少用，因为不灵活</li>
<li>xml中使用dynamic-update。同一个session可以，跨session不行，不过可以用merge方法</li>
</ul>
</li>
</ul>
</li>
<li>clear：无论是load还是get,都会首先査找缓存（一级缓存)，如果没有才会去数据库査找。调用clear()方法可以强制清除session缓存</li>
<li>flush<ul>
<li>强制将内存(session缓存)与数据库同步. 默认情况下是session的事务提交(commit)时才同步!</li>
<li>session的FlushMode设置, 可以设定在什么时候同步缓存与数据库(很少用)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>三种对象状态(transient、persistent、detached)</p>
<ul>
<li>三种状态：<ul>
<li>transient：内存中一个对象，内存和缓存(session缓存)中都没有ID。刚new 对象之后</li>
<li>persistent：ID在内存、缓存、数据库中都有。save了之后</li>
<li>detached：ID在内存和数据库中有，在缓存中没有。事物提交后(session关闭)</li>
</ul>
</li>
<li>三种状态的区分关键在于有没有ID，ID在数据库中有没有，在内存中有没有，在session缓存中有没有</li>
</ul>
</li>
</ol>
<h2 id="关系映射-视频35-52"><a href="#关系映射-视频35-52" class="headerlink" title="关系映射 (视频35-52)"></a>关系映射 (视频35-52)</h2><p>一对一：<code>@0neTo0ne</code>、<code>@JoinColumn</code>；一对多/多对一：<code>@OneToMany</code>、<code>@ManyToOne</code>、<code>@JoinColumn</code>；多对多：<code>@ManyToMany</code>、<code>@JoinTable</code>（<strong>字段定义和set方法省略</strong>）</p>
<ol>
<li><p>一对一</p>
<ul>
<li><code>@0neTo0ne</code> 指定关系, <code>@JoinColumn</code> 用于指定外键名称, 省略该注解则使用默认的外键名称,  <code>@JoinColumns</code> 联合主键使用, <code>@Embedded</code> 组件映射使用</li>
<li><p><strong>一对一单向外键关联</strong>(src/cn.aezo.hibernate.one2one_uni_fk)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Husband类的被约束表字段的get方法上加@0neTo0ne @JoinColumn. 最终会在Husband的表中生成外键</span></div><div class="line"><span class="meta">@OneToOne</span></div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"wifeId"</span>)<span class="comment">// 指定生成的数据库字段名，不写@JoinColumn则默认生成外键名为wife_id</span></div><div class="line"><span class="function"><span class="keyword">public</span> Wife <span class="title">getWife</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> wife;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>Husband表会多出一个字段wifeId, 即为外键</strong></li>
<li><p>xml设置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.aezo.hibernate.one2one_uni_fk.Husband"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"wife"</span> <span class="attr">column</span>=<span class="string">"wifeId"</span> <span class="attr">unique</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>一对一双向外键关联</strong>(src/cn.aezo.hibernate.one2one_bi_fk, 视频37)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Husband1类</span></div><div class="line"><span class="meta">@OneToOne</span></div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"wife1Id"</span>)<span class="comment">//指定生成的数据库字段名，否则默认生成外键名为wife_id. 最终只会在Husband的表中生成外键</span></div><div class="line"><span class="function"><span class="keyword">public</span> Wife1 <span class="title">getWife1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> wife1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Wife1类</span></div><div class="line"><span class="comment">// 此处表示Husband中对"getWife"中的wife字段设置的外键是主导，此处只是指明关系但是并不会在Wife1表中生成外键。双向关系必须指明</span></div><div class="line"><span class="comment">// 双向时这个地方也需要一个关联关系，但是Husband1中wife1已经指明了关联关系且有一个外键了，故不应该再在Wife1生成一个外键。mappedBy就表明此处参考(映射到)Husband1中的wife1字段</span></div><div class="line"><span class="meta">@OneToOne</span>(mappedBy=<span class="string">"wife1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Husband1 <span class="title">getHusband1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> husband1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>凡是双向关联，必设<code>mappedBy</code></strong></li>
<li><strong><code>一对一单向外键关联与一对一双向外键关联在数据库的表的格式是一样的,区别在于java程序中. 双向外键关联可通过Hibernate在两个类间互相调用彼此,而单向外键关联只能单方向调用.</code></strong></li>
</ul>
</li>
<li>一对一单向主键关联(<code>@OneToOne、@primaryKeyJoinColumn</code>)</li>
<li>一对一双向主键关联(<code>@OneToOne、@primaryKeyJoinColumn</code>)</li>
<li><p><strong>一对一的单向联合主键的外键关联</strong>(src/cn.aezo.hibernate.one2one_uni_fk_composite)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Husband2类(Wife2是一个联合主键类, name是只最终会在Husband2中生成的字段名即外键名, referencedColumnName指这个外键参考的字段)</span></div><div class="line"><span class="meta">@OneToOne</span></div><div class="line"><span class="meta">@JoinColumns</span>(&#123;</div><div class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"wife2Id"</span>, referencedColumnName=<span class="string">"id"</span>),</div><div class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"wife2Name"</span>, referencedColumnName=<span class="string">"name"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> Wife2 <span class="title">getWife2</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> wife2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>组件映射(src/cn.aezo.hibernate.component)</p>
<ul>
<li>一个对象是另外一个对象的一部分，java中有两个对象，但是保存在一张表中</li>
<li><code>@Embedded</code> 注解的字段表明该对象是从别的位置嵌入过来的,是不需要单独映射的表</li>
<li><code>@AttributeOverride</code> 注解需要写在getWife方法上, 可以重新指定生成的Wife类组件生成的字段名, 例如:Husband与Wife两个类中都有name字段,这样在生成表的时候会有冲突, 此时采用@AttributeOverride注解可以指定Wife类中的name属性对应新的字段名”wifename”</li>
<li>xml中使用 <code>&lt;component&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>多对一、一对多</strong></p>
<ul>
<li>指当前类(写注解的类)相对于注解属性(对应的类)的关系</li>
<li><p>多对一单向关联：<code>@ManyToOne</code>(src/cn.aezo.hibernate.many2one_uni)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// User类. 外键保存在User类中</span></div><div class="line"><span class="meta">@ManyToOne</span></div><div class="line"><span class="function"><span class="keyword">public</span> Group <span class="title">getGroup</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> group;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>xml中</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">    cascade取值all,none,save-update,delete,对象间的级联操作,只对增删改起作用.</div><div class="line">    在存储时User时,设置了cascade="all"会自动存储相应的t_group.而不用管user关联的对象(通常情况下会优先存储关联的对象,然后再存储user)</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"group"</span> <span class="attr">column</span>=<span class="string">"groupid"</span> <span class="attr">cascade</span>=<span class="string">"all"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>一对多单向关联：<code>@OneToMany</code>(src/cn.aezo.hibernate.one2many_uni)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Group1类. 外键保存在User1类中</span></div><div class="line"><span class="meta">@OneToMany</span></div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"groupId"</span>)<span class="comment">// Hibernate默认将OneToMany理解为ManyToMany的特殊形式，如果不指定生成的外键列@JoinColumn(name="groupId")，则会默认生成多对多的关系,产生一张中间表</span></div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;User1&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>xml中</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"groupId"</span>/&gt;</span>指定生成外键字段的名字</div><div class="line">    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"cn.aezo.hibernate.one2many_uni.User1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>一对多/多对一双向关联(src/cn.aezo.hibernate.one2many_many2one_bi)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// User2类</span></div><div class="line"><span class="meta">@ManyToOne</span> <span class="comment">// 配置规则:一般以多的一端为主,先配置多的一端</span></div><div class="line"><span class="function"><span class="keyword">public</span> Group2 <span class="title">getGroup</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> group;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Group2类</span></div><div class="line"><span class="meta">@OneToMany</span>(mappedBy=<span class="string">"group"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;User2&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>多对多(会生成中间表)</p>
<ul>
<li><code>@ManyToMany</code>、<code>@JoinTable</code></li>
<li><p>多对多单向外键关联(src/cn.aezo.hibernate.many2many_uni)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Teacher2类</span></div><div class="line"><span class="meta">@ManyToMany</span><span class="comment">// 多对多关联 Teacher是主的一方 Student是附属的一方</span></div><div class="line"><span class="meta">@JoinTable</span>(</div><div class="line">    joinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"teacherId"</span>)&#125;,<span class="comment">//本类主键在中间表生成的对应字段名</span></div><div class="line">    inverseJoinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"student2Id"</span>)&#125;<span class="comment">//对方类主键在中间表生成的对应字段名</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;Student2&gt; <span class="title">getStudent2s</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> student2s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>多对多双向外键关联</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 在Teacher这一端的students上配置</div><div class="line">@ManyToMany</div><div class="line">@JoinTable(</div><div class="line">    name=&quot;t_s&quot;,</div><div class="line">    joinColumns=&#123;@JoinColumn(name=&quot;teacher_id&quot;)&#125;,</div><div class="line">    inverseJoinColumns=&#123;@JoinColumn(name=&quot;student_id&quot;)&#125;</div><div class="line">)</div><div class="line"></div><div class="line">// 在Student一端的teachers只需要配置</div><div class="line">@ManyToMany(mappedBy=&quot;students&quot;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>关联关系中的CRUD、Cascade(级联)、Fetch(test/cn.aezo.hibernate.one2many_many2one_bi_curd)</p>
<ul>
<li><p><strong>设定<code>cascade</code>以设定在持久化时对于关联对象的操作（CUD，R归Fetch管）</strong></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Group3类</span></div><div class="line"><span class="meta">@OneToMany</span>(</div><div class="line">    mappedBy=<span class="string">"group"</span>,</div><div class="line">    cascade=&#123;CascadeType.ALL&#125;<span class="comment">//cascade=CascadeType.ALL表示存储user表时把与他相关联的表也存储，否则需要自己先手动存储关联的那个表</span></div><div class="line">    <span class="comment">//,fetch=FetchType.EAGER//取一对多时，默认只会取出一不会取出多,即fetch默认是lazy，此时设置了eager则会在取组的同时取出用户信息。一般不这么用</span></div><div class="line">)<span class="comment">//cascade设定CUD，fetch设定R</span></div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;User3&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// User3类</span></div><div class="line"><span class="meta">@ManyToOne</span>(cascade=&#123;CascadeType.ALL&#125;)<span class="comment">//cascade=CascadeType.ALL表示存储user表时把与他相关联的表也存储，否则需要自己先手动存储关联的那个表</span></div><div class="line"><span class="function"><span class="keyword">public</span> Group3 <span class="title">getGroup</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> group;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>只要有关联关系(包括所有关联类型)，默认保存A，hibernate不会自动保存B. 设置在A中设置cascade可以让hibernate在保存A的时候也保持B. 如果需要保存B也保存A，则需要在B中也设置cascade</li>
<li>CascadeType取值：<ul>
<li><code>ALL</code>      Cascade all operations所有情况(CUD)</li>
<li><code>MERGE</code>    Cascade merge operation合并(merge=save+update)</li>
<li><code>PERSIST</code>  Cascade persist operation存储 persist()</li>
<li><code>REFRESH</code>  Cascade refresh operation刷新</li>
<li><code>REMOVE</code>   Cascade remove operation删除</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>fetch</code>获取数据的方式</strong></p>
<ul>
<li>查询时@ManyToOne默认会把一的那一方取出来(默认为EAGER)，@OneToMany则不会默认把多的那一方取出来(默认为LAZY). 修改fetch则可以改变默认取值方式</li>
<li>取值有：<code>FetchType.LAZY</code>(懒惰) 和 <code>FetchType.EAGER</code>(渴望)</li>
<li><p>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示例一</span></div><div class="line">Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line"><span class="comment">// User3 user3 = (User3)session.load(User3.class, 1);</span></div><div class="line">User3 user3 = (User3)session.get(User3.class, <span class="number">1</span>); <span class="comment">//当多对一时，取多时，默认会把一也取出来。此时取用户的信息时也会把组的信息取出来放到内存中</span></div><div class="line">session.getTransaction().commit();</div><div class="line">System.out.println(user3.getGroup().getName()); <span class="comment">// 可以正常获取, @ManyToOne默认是EAGER。如果上面是load则此处会报错</span></div><div class="line"></div><div class="line"><span class="comment">// 示例二</span></div><div class="line">Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line">Group3 group3 = (Group3)session.get(Group3.class, <span class="number">1</span>);<span class="comment">//取一对多时，默认只会取出一不会取出多。但如果在关联的批注处设定了fetch=FetchType.EAGER，则会同时取出用户信息</span></div><div class="line"><span class="comment">// Set&lt;User3&gt; user3s = group3.getUsers(); // ### 如果fetch没有设定了eager，则可以在此处手动把User都拿出来放到内存中. 一般是一对多时手动获取多的那一方 ###</span></div><div class="line">session.getTransaction().commit();</div><div class="line"></div><div class="line"><span class="comment">// ### 如果fetch设定了eager则已经将用户信息取到内存中了. 否则此处会报错 ###</span></div><div class="line"><span class="keyword">for</span>(User3 u : group3.getUsers()) &#123;</div><div class="line">    System.out.println(u.getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>删除操作：如果Group和User都设置了CascadeType.ALL，则在删除user时也会把group删除. 解决办法</p>
<ul>
<li>直接写Hql语句执行删除（推荐）</li>
<li>去掉@ManyToOne(cascade={CascadeType.All})设置, 手动执行CRU</li>
<li><p>将user对象的group属性设为null，相当于打断User与Group间的关联</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">session.beginTransaction();</div><div class="line">User user = (User)session.load(User.class,<span class="number">1</span>);</div><div class="line">user.setGroup(<span class="keyword">null</span>);</div><div class="line">session.delete(user);</div><div class="line">session.getTransaction().commit();</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>集合映射(src/cn.aezo.hibernate.collections_mapping)</p>
<ul>
<li><p>多的一方是什么的存储方式：Set(常用)、List、Map</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用Map存储</span></div><div class="line"><span class="meta">@OneToMany</span>(mappedBy=<span class="string">"group"</span>,cascade=&#123;CascadeType.ALL&#125;)</div><div class="line"><span class="meta">@MapKey</span>(name=<span class="string">"id"</span>)<span class="comment">//以users中user的id作为map的key</span></div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;Integer, User4&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>继承映射(视频55)</p>
<ul>
<li><code>SINGLE_TABLE</code> 一张总表保存</li>
<li><code>TABLE_PER_CLASS</code> 每个类分别一张表(最终也会生成3张表，使用@TableGenerator的id生成策略映射)<ul>
<li>使用多态查询时会查3张表并进行合并</li>
</ul>
</li>
<li><code>JOINED</code> 每个子类一张表(最终也会生成3张表，使用@Inheritance(strategy=InheritanceType.JOINED))<ul>
<li>查询必须使用进行联合</li>
</ul>
</li>
</ul>
</li>
<li><p>树状结构设计(src/cn.aezo.hibernate.tree)</p>
<ul>
<li><p>在一个类中同时使用一对多和多对一</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Org组织类，对应表Org(id, pid, name)</span></div><div class="line"><span class="meta">@OneToMany</span>(</div><div class="line">    mappedBy=<span class="string">"parent"</span>,</div><div class="line">    cascade=&#123;CascadeType.ALL&#125;</div><div class="line">    <span class="comment">//,fetch=FetchType.EAGER//只适合小级别的树，同时取出所有的，打印就可以打印在一起了；否则就在需要的时候发起sql语句</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;Org&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> children;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@ManyToOne</span></div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"parent_id"</span>)<span class="comment">//只需写在关联处即可，所有也可写在@OneToMany的下面</span></div><div class="line"><span class="function"><span class="keyword">public</span> Org <span class="title">getParent</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> parent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>易错点</p>
<ul>
<li>在一个实体文件中，所有的注解要么全部放在字段上，要么全部放在get方法上，不能混合使用. 否则报错<code>Caused by: org.hibernate.MappingException: Could not determine type for...</code></li>
</ul>
</li>
</ol>
<h2 id="HQL-test-cn-aezo-hibernate-hql1-2"><a href="#HQL-test-cn-aezo-hibernate-hql1-2" class="headerlink" title="HQL (test/cn.aezo.hibernate.hql1/2)"></a>HQL (test/cn.aezo.hibernate.hql1/2)</h2><ol>
<li>查询语言：NativeSQL(oracle/mysql原生) &gt; HQL(hibernate查询语言) &gt; EJBQL(JPQL 1.0, 可以跨ORM框架) &gt; QBC(Query By Criteria) &gt; QBE(Query By Example)</li>
<li><p>举例(查询、修改、删除)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">import</span> org.hibernate.Query;</div><div class="line">  <span class="keyword">import</span> org.hibernate.Session;</div><div class="line"></div><div class="line">  <span class="comment">// HQL 面向对象的查询语言，此处要写类名而不是表名，可以省略 select *</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Category c where c.name &gt; 'c5' order by c.name desc"</span>);</div><div class="line">  List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list(); <span class="comment">// q.iterate()</span></div><div class="line"></div><div class="line">  <span class="comment">// 链式编程</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Category c where c.id &gt; :min and c.id &lt; :max"</span>)</div><div class="line">                   .setInteger(<span class="string">"min"</span>, <span class="number">2</span>)</div><div class="line">                   .setInteger(<span class="string">"max"</span>, <span class="number">8</span>);</div><div class="line">  List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line"></div><div class="line">  <span class="comment">// setParameter会自动转换参数类型</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Category c where c.id &gt; ? and c.id &lt; ?"</span>);</div><div class="line">  q.setParameter(<span class="number">0</span>, <span class="number">2</span>).setParameter(<span class="number">1</span>, <span class="number">8</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 分页(取第二条到第4条数据)</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Category c order by c.name desc"</span>);</div><div class="line">  q.setMaxResults(<span class="number">4</span>);</div><div class="line">  q.setFirstResult(<span class="number">2</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 获取Topic的Category类的属性id (Topic下的Category是@ManyToOne，默认在查询Topic的会取Category)</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic t where t.category.id = 1"</span>);</div><div class="line">  <span class="comment">// 如果设置成Lazy，则当调用t.getCategory()的时候才会查询Category</span></div><div class="line"></div><div class="line">  <span class="comment">// 从实体中取出一个VO/DTO（下面的MsgInfo不是一个实体，是一个VO/DTO，他需要一个对应的构造方法）</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select new cn.aezo.hibernate.hql1.MsgInfo(m.id, m.cont, m.topic.title, m.topic.category.name) from Msg m"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// join连接(left join)</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select t.title, c.name from Topic t join t.category c"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 对象查询（调用的是equals方法）</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Msg m where m = :MsgToSearch"</span>);</div><div class="line">  Msg m = <span class="keyword">new</span> Msg();</div><div class="line">  m.setId(<span class="number">1</span>);</div><div class="line">  q.setParameter(<span class="string">"MsgToSearch"</span>, m);</div><div class="line">  Msg mResult = (Msg) q.uniqueResult(); <span class="comment">// 返回唯一结果(确定里面只有一条)</span></div><div class="line"></div><div class="line">  <span class="comment">// is empty 和 is not empty（最终sql语句使用了exists、not exists）</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where t.msgs is empty"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where not exists (select m.id from Msg1 m where m.topic.id=t.id)"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 获取时间</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select current_date, current_time, current_timestamp, t.id from Topic1 t"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 时间比较</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where t.createDate &lt; :date"</span>);</div><div class="line">  q.setParameter(<span class="string">"date"</span>, <span class="keyword">new</span> Date());</div><div class="line"></div><div class="line">  <span class="comment">// 分组</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select t.title, count(*) from Topic1 t group by t.title"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"select t.title, count(*) from Topic1 t group by t.title having count(*) &gt;= 1"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 原生sql查询</span></div><div class="line">  SQLQuery q = session.createSQLQuery(<span class="string">"select * from category limit 2,4"</span>).addEntity(Category1.class);</div><div class="line">  List&lt;Category1&gt; categories = (List&lt;Category1&gt;)q.list();</div><div class="line"></div><div class="line">  <span class="comment">// 常用查询</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select count(*) from Msg m"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"select max(m.id), min(m.id), avg(m.id), sum(m.id) from Msg m"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Msg m where m.id between 3 and 5"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Msg m where m.id in (3,4, 5)"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Msg m where m.cont is not null"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where t.title like '%5'"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where t.title like '_5'"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 别名查询</span></div><div class="line">  <span class="comment">// (1) 在实体上进行注解查询语句，去别名topic.selectCertainTopic（原生sql语句查询别名注解@NamedNativeQueries）</span></div><div class="line">  <span class="meta">@NamedQueries</span>(&#123;</div><div class="line">     <span class="meta">@NamedQuery</span>(name=<span class="string">"topic.selectCertainTopic"</span>, query=<span class="string">"from Topic t where t.id = :id"</span>)</div><div class="line">&#125;)</div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Topic1</span> </span>&#123;...&#125;</div><div class="line">  <span class="comment">// (2) 使用上叙别名</span></div><div class="line">  Query q = session.getNamedQuery(<span class="string">"topic.selectCertainTopic"</span>);</div><div class="line">  q.setParameter(<span class="string">"id"</span>, <span class="number">5</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 执行修改/删除</span></div><div class="line">  Query q = session.createQuery(<span class="string">"update Topic1 t set t.title = upper(t.title)"</span>) ;</div><div class="line">  q.executeUpdate();</div></pre></td></tr></table></figure>
</li>
<li><p>QBC/QBE (test/cn.aezo.hibernate.qbc/qbe)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// QBC (Query By Criteria). 此时不需要sql语句, 纯面向对象了</span></div><div class="line"><span class="comment">// criterion 约束/标准/准则</span></div><div class="line">Criteria c = session.createCriteria(Topic2.class) <span class="comment">// from Topic</span></div><div class="line">             .add(Restrictions.gt(<span class="string">"id"</span>, <span class="number">2</span>)) <span class="comment">// greater than = id &gt; 2</span></div><div class="line">             .add(Restrictions.lt(<span class="string">"id"</span>, <span class="number">8</span>)) <span class="comment">// little than = id &lt; 8</span></div><div class="line">             .add(Restrictions.like(<span class="string">"title"</span>, <span class="string">"t_"</span>))</div><div class="line">             .createCriteria(<span class="string">"category"</span>)</div><div class="line">             .add(Restrictions.between(<span class="string">"id"</span>, <span class="number">3</span>, <span class="number">5</span>)) <span class="comment">// category.id &gt;= 3 and category.id &lt;=5</span></div><div class="line">             ;</div><div class="line"><span class="comment">// DetachedCriterea</span></div><div class="line"><span class="keyword">for</span>(Object o : c.list()) &#123;</div><div class="line">    Topic2 t = (Topic2) o;</div><div class="line">    System.out.println(t.getId() + <span class="string">"-"</span> + t.getTitle());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// QBE (Query By Example)</span></div><div class="line">Topic3 tExample = <span class="keyword">new</span> Topic3();</div><div class="line">tExample.setTitle(<span class="string">"T_"</span>);</div><div class="line"></div><div class="line">Example e = Example.create(tExample)</div><div class="line">            .ignoreCase().enableLike();</div><div class="line">Criteria c = session.createCriteria(Topic3.class)</div><div class="line">             .add(Restrictions.gt(<span class="string">"id"</span>, <span class="number">2</span>))</div><div class="line">             .add(Restrictions.lt(<span class="string">"id"</span>, <span class="number">8</span>))</div><div class="line">             .add(e)</div><div class="line">             ;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Object o : c.list()) &#123;</div><div class="line">    Topic3 t = (Topic3)o;</div><div class="line">    System.out.println(t.getId() + <span class="string">"-"</span> + t.getTitle());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h2><ol>
<li><code>session.clear()</code>的运用，尤其在不断分页循环的时候<ul>
<li>在一个大集合中进行遍历，遍历msg，取出其中的含有敏感字样的对象</li>
<li>另外一种形式的内存泄露(面试题：Java在语法级别没有内存泄漏，但是可由java引起。例如：连接池不关闭或io读取后不关闭)</li>
</ul>
</li>
<li>1+N问题<ul>
<li>使用LAZY。<code>@ManyToOne</code> 默认是EAGER（默认在查询主表是，也会查询子表的数据，发出sql语句）。可将其改为<code>@ManyToOne(fetch=FetchType.LAZY)</code>，此时当使用的时候(如:t.getCategory().getName()时)才会发出sql语句</li>
<li>hql语句中使用<code>join fetch</code>。如将hql语句改成<code>from Topic t left join fetch t.category c</code></li>
<li>QBC。如使用createCriteria查询，会自动生成含join fetch的sql语句</li>
</ul>
</li>
<li>list和iterate不同之处<ul>
<li>list取所有；iterate先取ID，等用到的时候再根据ID来取对象</li>
<li>session中list第二次发出仍会到数据库査询；iterate第二次首先找session级缓存</li>
</ul>
</li>
<li><p>一级缓存和二级缓存和査询缓存(指两次查询的条件一样)</p>
<ul>
<li>一级缓存是session级别的缓存；二级缓存是SessionFactory级别的缓存，可以跨越session存在；</li>
<li><p>二级缓存</p>
<ul>
<li><p>打开二级缓存，hibernate.cfg.xml设定：</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--使用二级缓存--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.provider_class"</span>&gt;</span>org.hibernate.cache.EhCacheProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--使用EhCache提供商提供的二级缓存--&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Cache</code>注解(由hibernate扩展提供)</p>
<ul>
<li><code>@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)</code></li>
<li>使用EhCache二级缓存 需要导入ehcache-1.2.3.jar及commons-logging-1.0.4.jar包</li>
</ul>
</li>
<li>二级缓存的使用场景：<strong>经常被访问、改动不大或不会经常改动、数重有限（如权限信息、组织信息）</strong></li>
<li>load默认使用二级缓存；iterate默认使用二级缓存；list默认往二级缓存加数据，但是查询的时候不使用</li>
<li>查询缓存(指两次查询的条件一样)<ul>
<li><code>&lt;property name=&quot;cache.use_query_cache&quot;&gt;true&lt;/property&gt;</code> 查询缓存依赖与二级缓存，需要打开二级缓存</li>
<li>调用Query的<code>setCachable(true)</code>方法指明使用二级缓存，如：<code>session.createQuery(&quot;from Category&quot;).setCacheable(true).list();</code></li>
</ul>
</li>
<li>缓存算法：LRU、LFU、FIFO<ul>
<li>LRU: Least Recently Used 最近很少被使用，按使用时间</li>
<li>LFU: Least Frequently Used 按命中率高低</li>
<li>FIFO: First In First Out 按顺序替换</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>事务并发处理<ul>
<li>事务：ACID (Atomic原子性、Consistency一致性、Itegrity独立性、Durability持久性)</li>
<li>事务并发时可能出现的问题<ul>
<li><code>dirty read</code>脏读(读到了另一个事务在处理中还未提交的数据)</li>
<li><code>non-repeatable read</code>不可重复读(一个事物中两次读取的数据不一致，被其他事物影响了)</li>
<li><code>phantom read</code>幻读(主要针对插入和删除，在读的过程中，另外一个事物插入或删除了一条数据影响了读的结果)</li>
</ul>
</li>
<li>数据库的事务隔离机制<ul>
<li>查看 <code>java.sql.Connection</code> 文档</li>
<li>1：<code>read-uncommitted</code> 2：<code>read-committed</code> 4：<code>repeatable read</code> 8：<code>serializable</code>（数字代表对应值或级别，级别越高越安全但是效率约低）           <ul>
<li><code>read-uncommitted</code>(允许读取未提交的数据) 会出现dirty read, phantom-read, non-repeatable read 问题</li>
<li><strong><code>read-commited</code></strong>(读取已提交的数据 项目中一般都使用这个)不会出现dirty read，因为只有另一个事务提交才会读出来结果，但仍然会出现 non-repeatable read 和 phantom-read。使用read-commited机制可用悲观锁、乐观锁来解决non-repeatable read 和 phantom-read问题</li>
<li><code>repeatable read</code>(事务执行中其他事务无法执行修改或插入操作，较安全)</li>
<li><code>serializable</code> 解决一切问题(顺序执行事务 不并发，实际中很少用)</li>
<li>为什么取值要使用 1 2 4 8 而不是 1 2 3 4。1=0000  2=0010 4=0100 8=1000(位移计算效率高)</li>
</ul>
</li>
<li>hibernate设置<ul>
<li>设定hibernate的事务隔离级别(使用hibernate.connection.isolation配置，取值1、2、4、8)</li>
<li>hibernate.connection.isolation = 2（如果不设 默认依赖数据库本身的级别）</li>
<li>用悲观锁解决repeatable read的问题（依赖于数据库的锁）<ul>
<li>法一：<code>select ... for update</code></li>
<li>法二：使用另一种load方法：<code>load(xxx.class, i, LockMode.Upgrade)</code> i=1/2/4/8</li>
</ul>
</li>
<li>Hibernate(JPA)乐观锁定(ReadCommitted)<ul>
<li>实体类中增加version属性(数据库也会对应生成该字段,初始值为0)，并在其get方法前加<code>@Version</code>注解，则在操作过程中没更新一次该行数据则version值加1，即可在事务提交前判断该数据是否被其他事务修改过</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ORM框架(对象关系映射)&lt;ul&gt;
&lt;li&gt;JDBC操作数据库很繁琐&lt;/li&gt;
&lt;li&gt;Sql语句编写并不是面向对象的&lt;/li&gt;
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="ssh" scheme="http://blog.aezo.cn/tags/ssh/"/>
    
      <category term="orm" scheme="http://blog.aezo.cn/tags/orm/"/>
    
  </entry>
  
  <entry>
    <title>windows</title>
    <link href="http://blog.aezo.cn/2017/05/10/extend/windows/"/>
    <id>http://blog.aezo.cn/2017/05/10/extend/windows/</id>
    <published>2017-05-10T07:26:00.000Z</published>
    <updated>2017-08-28T06:17:37.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>注释：<code>::</code>、<code>rem</code>等 <a href="[注释](http://blog.csdn.net/wh_19910525/article/details/8125762)">^1</a></li>
<li><code>title</code>: 设置cmd窗口标题(乱码时，需要将文件记事本打开另保存为ANSI)</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><p>运行java</p>
  <figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">title</span>=<span class="built_in">cmd</span>窗口的标题</div><div class="line"><span class="built_in">echo</span> off</div><div class="line"><span class="comment">rem 我的注释：`%~d0`挂载项目到第一个驱动器，并设置当前目录为项目根目录</span></div><div class="line">%~d0</div><div class="line"><span class="built_in">set</span> MY_PROJECT_HOME=%~p0</div><div class="line"><span class="built_in">cd</span> <span class="variable">%MY_PROJECT_HOME%</span></div><div class="line"><span class="built_in">echo</span> on</div><div class="line">"<span class="variable">%JAVA_HOME%</span>\bin\java" -jar my.jar</div><div class="line"><span class="built_in">echo</span> off</div></pre></td></tr></table></figure>
<ul>
<li>此时配置文件应和jar包位于同一目录</li>
<li>如果<code>set MY_PROJECT_HOME=%~p0..\</code>则表示设置bat文件所在目录的的上级目录为项目根目录</li>
<li>如果不是系统默认jdk，可将<code>%JAVA_HOME%</code>换成对应的路径</li>
</ul>
</li>
<li><p>后台运行bat文件</p>
  <figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> "%<span class="number">1</span>" == "h" <span class="keyword">goto</span> begin</div><div class="line">mshta vbscript:createobject("wscript.shell").run("%~nx0 h",<span class="number">0</span>)(window.close)&amp;&amp;<span class="keyword">exit</span></div><div class="line">:begin</div><div class="line">:: 这是注释，后面运行脚本，如：</div><div class="line">java -jar my.jar</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注释：&lt;code&gt;::&lt;/code&gt;、&lt;code&gt;rem&lt;/code&gt;等 &lt;a href=&quot;[注释](http://blog.c
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="bat" scheme="http://blog.aezo.cn/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>struts2</title>
    <link href="http://blog.aezo.cn/2017/05/06/java/struts2/"/>
    <id>http://blog.aezo.cn/2017/05/06/java/struts2/</id>
    <published>2017-05-06T10:06:00.000Z</published>
    <updated>2017-07-23T05:13:59.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol>
<li>struts2是 struts1和WebWork的结合</li>
<li><strong>struts2的本质就是将请求与视图分开</strong> (struts2原理：<strong>视频09</strong>)</li>
<li>官网：<a href="http://struts.apache.org/" target="_blank" rel="external">http://struts.apache.org/</a>, 下文基于版本2.3.24(当前更新到2.5.10)</li>
<li><p>所需jar包：struts2/lib下的jar包</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">commons-fileupload-1.3.1.jar</div><div class="line">commons-io-2.2.jar</div><div class="line">commons-lang3-3.2.jar</div><div class="line">freemarker-2.3.22.jar</div><div class="line">javassist-3.11.0.GA.jar</div><div class="line">ognl-3.0.6.jar</div><div class="line">struts2-core-2.3.24.1.jar</div><div class="line">xwork-core-2.3.24.1.jar</div></pre></td></tr></table></figure>
</li>
<li><p>struts知识点</p>
<ul>
<li>Action<ul>
<li>a)namespace（掌握）</li>
<li>b)path（掌握）</li>
<li>c)DMI（掌握）</li>
<li>d)wildcard（掌握）</li>
<li>e)接收参数（掌握前两种）</li>
<li>f)访问request等（掌握Map IOC方式）</li>
<li>g)简单数据验证（掌握addFieldError和<code>&lt;s:fieldError&gt;</code>）</li>
</ul>
</li>
<li>Result<ul>
<li>a)结果类型（掌握四种，重点两种）</li>
<li>b)全局结果（掌握）</li>
<li>c)动态结果（了解）</li>
</ul>
</li>
<li><strong>OGNL表达式</strong>（精通）<ul>
<li>a)# % $</li>
</ul>
</li>
<li>Struts标签<ul>
<li>a)掌握常用的</li>
</ul>
</li>
<li>声明式异常处理（了解）</li>
<li>I18N（了解）</li>
<li>CRUD的过程（最重要是设计与规划）（精通）</li>
<li>Interceptor的原理（掌握）<strong><em>视频中分析了Struts2源码</em></strong></li>
<li>类型转换（掌握默认，了解自定义）</li>
</ul>
</li>
</ol>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ul>
<li><p>web.xml中加入</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- struts2的核心拦截器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在src目录新建struts.xml(注意路径为src, 名称为struts.xml)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span>&gt;</span><span class="comment">&lt;!-- 省略class, 则自动调用xwork的一个ActionSupport类 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>扩展</p>
<ul>
<li><p>给jar包导入源码和doc文档</p>
<blockquote>
<ul>
<li>（1）给jar包导入源码(给struts2-core-2.3.24.1.jar导入源码)：右键相应jar包-&gt;properties-&gt;Java Source Attachment-&gt;External location-&gt;External Folder-&gt;D:/Java/struts-2.3.24.1/src/core/src/main/java</li>
<li>（2）给此jar包导入doc文档：右键相应jar包-&gt;properties-&gt;Javadoc Location-&gt;javadoc URL-&gt;D:/Java/struts-2.3.24.1/docs/struts2-core/apidocs(定位到相应类，按F1，点击javadoc查看相应文档)</li>
</ul>
</blockquote>
</li>
<li><p>添加XML文件自动提示功能</p>
<blockquote>
<ul>
<li>（1）解压struts-2.3.24.1\lib\struts2-core-2.3.24.1.jar</li>
<li>（2）记录struts.xml内DOCTYPE的一个值<a href="http://struts.apache.org/dtds/struts-2.3.dtd" target="_blank" rel="external">http://struts.apache.org/dtds/struts-2.3.dtd</a></li>
<li>（3）Windows-&gt;搜索catalog-&gt;XML catalog-&gt;add-&gt;{Location:struts-2.3.24.1\lib\struts2-core-2.3.24.1\struts-2.3.dtd, Key type:URL, Key:<a href="http://struts.apache.org/dtds/struts-2.3.dtd}" target="_blank" rel="external">http://struts.apache.org/dtds/struts-2.3.dtd}</a></li>
</ul>
</blockquote>
</li>
<li><p>本地拷贝项目</p>
<blockquote>
<ul>
<li>需要修改Web Context-root(项目右键-&gt;properties-&gt;MyEclipse-&gt;Project Facets-&gt;Web)</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="struts-xml"><a href="#struts-xml" class="headerlink" title="struts.xml"></a>struts.xml</h3><ol>
<li>package</li>
</ol>
<ul>
<li><code>package</code>(是为了区分重名的action，类似于java中的包)<ul>
<li>name:包名</li>
<li>namespace:命名空间，此namespace和action中name的值的组合不能重复<ul>
<li>（1）namespace决定了action的访问路径，默认为””，可以接受所有路径的action</li>
<li>（2）namespace可以写为/，或者/xxx，或者/xxx/yyy，对应的action访问路径如/index.action，/xxx/index.action，或者/xxx/yyy/index.action(其中index为action的属性name值，后面的.action可省略)</li>
<li>（3）package和namespace最好用模块来进行命名</li>
</ul>
</li>
<li>extends:继承了那个包，所有的包都继承了<code>struts-default</code>，来自struts2-core-2.3.24.1.jar-&gt;struts-default.xml</li>
</ul>
</li>
<li><code>package</code>&gt;<code>action</code><ul>
<li>name:此action名称(在浏览器的url中要访问此action就要输入此名称)</li>
<li>class:当访问此action时，就会调用相应的java类(如果没有就默认访问ActionSupport，ActionSupport是xwork的一个类，他实现了Action接口；<strong>实际中一般使用类继承ActionSupport</strong>)<ul>
<li><strong>每一个访问请求都会重新new一个对象</strong></li>
</ul>
</li>
<li>method:当访问此action时，要调用相应class类的相应的方法。默认调用<code>execute()</code>方法<ul>
<li>动态方法调用：添加配置<code>&lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;true&quot; /&gt;</code>，使用myAction!myMethod方式调用</li>
<li>注：除了用method属性指定相应的action调用方法(缺点是产生太多action)；还可以在url地址中动态指定(动态方法调用DMI，使用!，视频13还没测试成功)；实际中多使用通配符</li>
</ul>
</li>
</ul>
</li>
<li><code>package</code>&gt;<code>action</code>&gt;<code>result</code><ul>
<li>name:此result名称</li>
<li>原理：访问时，先获取实现了Action接口的类或者其子类的execute()方法的返回值，然后匹配name属性为此返回值的result，再显示此result标签中的页面</li>
<li>注：属性为successs时可省略此name属性，因为Action接口execute()方法默认返回的是success字符串</li>
<li>注：默认有<code>SUCCESS</code>/<code>ERROR</code>/<code>INPUT</code>/<code>LOGIN</code>等常量，有时候使用SUCCESS可以解决，但仍用INPUT是为了作区分</li>
</ul>
</li>
</ul>
<ol>
<li><p><strong>struts2中的路径问题</strong>（jsp文件中的href路径）</p>
<ul>
<li>struts2是根据action的路径而不是jsp路径来确定，所有尽量不要使用相对路径，虽然可以用redirect方式解决，但redirect方式并非必要</li>
<li>解决办法<ul>
<li>统一使用绝对路径(JSP页面的绝对路径中第一个”/“指的是服务器的根路径，而不是项目的根路径)</li>
<li>在jsp中用request.getContextPath()方式来拿到webapp的路径,或者使用myeclipse常用的指定basePath</li>
<li>参考源码：<code>WebRoot/others/testPath.jsp</code></li>
</ul>
</li>
</ul>
</li>
<li><p>通配符，可以将配置量降到最低</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 如果namespace="/" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*_*"</span> <span class="attr">class</span>=<span class="string">"cn.aezo.wildcard.&#123;1&#125;"</span> <span class="attr">method</span>=<span class="string">"&#123;2&#125;"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span>&gt;</span>/wildcard/&#123;1&#125;_&#123;2&#125;.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>注释：{1}表示第一个<em>，{2}表示第二个</em>；如果访问<a href="http://localhost:8080/Student_add，则{1}为Student，{2}为add；匹配是以最佳匹配优先" target="_blank" rel="external">http://localhost:8080/Student_add，则{1}为Student，{2}为add；匹配是以最佳匹配优先</a></li>
<li>建议使用到<code>*_*</code>，如果*太多程序可读性降低</li>
</ul>
</li>
</ol>
<h3 id="接收用户传入参数"><a href="#接收用户传入参数" class="headerlink" title="接收用户传入参数"></a>接收用户传入参数</h3><ul>
<li>（1）用Action属性接收url中的参数</li>
<li>（2）使用域模型DomainModel接收参数,一般使用的方法(可以同时使用vo/do/dto来对数据进行处理)<ul>
<li>使用Domain Model时，在url地址中传<strong>user.username</strong>=smalle的话，Struts2会自动根据User类中无参构造方法帮忙new一个对象</li>
<li>所以此时如果我们有自己的构造方法，则系统不会帮我们自动生成无参构造方法，则一定要自己写上这个无参构造方法供Struts2调用</li>
</ul>
</li>
<li>（3）使用模型驱动ModelDriven接收参数，此方式不常用，但涉及了MVC的概念<br>Struts2中的MVC概念：M是各种类似User的类，V是各种jsp页面，C是各种Action；通过Action控制请求的处理和请求的展现；因此将请求的发生、处理、展现进行了分离</li>
</ul>
<h3 id="strtus常量（乱码问题）"><a href="#strtus常量（乱码问题）" class="headerlink" title="strtus常量（乱码问题）"></a>strtus常量（乱码问题）</h3><ul>
<li>（1）struts2默认的常量都在struts2-core-2.3.24.1.jar-&gt;org.apache.struts2-&gt;default.properties中</li>
<li>（2）struts2默认编码是UTF-8，设置方法<constant name="struts.i18n.encoding" value="UTF-8"></constant></li>
<li>（3）internationalization(i18n，指的是i和n之间有18个字母)</li>
<li>（4）还可以在web.xml中定义一个编码拦截器，在struts2拦截之前做一次编码处理</li>
</ul>
<h3 id="数据校验和strtus2标签初步"><a href="#数据校验和strtus2标签初步" class="headerlink" title="数据校验和strtus2标签初步"></a>数据校验和strtus2标签初步</h3><ul>
<li>（1）在Action中使用<code>this.addFieldError(&quot;errname&quot;, &quot;errmsg&quot;);</code>设定字段错误信息，在JSP页面使用struts2标签<code>&lt;s:fielderror fieldName=&quot;errname&quot;/&gt;</code>获取errmsg</li>
<li>（2）<code>&lt;%@ taglib uri=&quot;/struts-tags&quot; prefix=&quot;s&quot; %&gt;</code>在jsp页面导入struts2标签；<ul>
<li>其中uri是文件(struts2-core-2.3.24.1.jar-&gt;META-INF-&gt;struts-tags.tld)中”<uri>/struts-tags</uri>“的值，prefix指标签前缀为s</li>
</ul>
</li>
<li>（3）<code>&lt;s:debug&gt;&lt;/s:debug&gt;</code><!-- 使用debug模式可查看很多可以获取的值 --></li>
<li>（4）<code>&lt;s:property value=&quot;...&quot;/&gt;</code><!-- 获取debug模式中的Value Stack(直接在value填写Property Name)和Stack Context(又称ActionContext，在value中填写"#key")中的值 --></li>
</ul>
<h3 id="action中访问web元素-request、session、application"><a href="#action中访问web元素-request、session、application" class="headerlink" title="action中访问web元素(request、session、application)**"></a>action中访问web元素(request、session、application)**</h3><ul>
<li>（1）context就是上下文，也可以认为是运行环境，如servletContext就只servlet运行的环境</li>
<li>（2）使用DI/IoC解决，即实现接口<code>RequestAware</code>、<code>SessionAware</code>、<code>ApplicationAware</code>（<strong>视频21-22</strong>）<ul>
<li><code>DI</code>: dependency injection依赖注入</li>
<li><code>IoC</code>: inverse of control控制反转</li>
</ul>
</li>
</ul>
<h3 id="包含模块配置文件"><a href="#包含模块配置文件" class="headerlink" title="包含模块配置文件"></a>包含模块配置文件</h3><ul>
<li><code>&lt;include file=&quot;/cn/aezo/others/xxx.xml&quot; /&gt;</code> xxx.xml相当于一个普通的struts.xml文件</li>
</ul>
<h3 id="默认action"><a href="#默认action" class="headerlink" title="默认action"></a>默认action</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">default-action-ref</span> <span class="attr">name</span>=<span class="string">"def"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-action-ref</span>&gt;</span><span class="comment">&lt;!-- 要写在此package的所有action之前 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"def"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span>&gt;</span>/default.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="result相关"><a href="#result相关" class="headerlink" title="result相关"></a>result相关</h3><ul>
<li><code>package&gt;action&gt;result&gt;type</code>(Result类型)<ul>
<li><code>dispatcher</code>    服务器端跳转，只能跳转到页面(jsp/html)，不能是action</li>
<li><code>redirect</code>    客户端跳转，只能跳转到页面(jsp/html)，不能是action</li>
<li><code>chain</code>        服务器端跳转，指forward到action,result中的action不要加/</li>
<li><code>redirectAction</code>    客户端跳转，可跳转到action,result中的action不要加/</li>
<li>freemarker</li>
<li>httpheader</li>
<li>stream</li>
<li>xslt</li>
<li>plaintext</li>
<li>tiles</li>
</ul>
</li>
<li>一次request只有一个值栈valueStack；以forward的形式跳转(dispatcher/chain)时，request没变，因此valueStack不变。而客户端跳转则值栈改变</li>
<li><p>全局结果集global-results</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">global-results</span>&gt;</span><span class="comment">&lt;!-- 相当于该包和该包的子包所有的action中都包含这条result --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"mainPage"</span>&gt;</span>/global/mainPage.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>动态结果集</p>
<ul>
<li>在action中使用属性定义结果集并动态赋值，在struts.xml中使用ognl表达式，如${属性}来获取valueStack中的这个属性(也是在action中定义的属性)</li>
</ul>
</li>
<li>带参数的结果集(request值栈：<strong>视频32</strong>)<ul>
<li>一次request只有一个值栈valueStack；以forward的形式跳转(dispatcher/chain)时，request没变，因此valueStack不变。而客户端跳转则值栈改变</li>
<li>valueStack是request对象中的相关信息，如果是客户端跳转到jsp页面，则url上的带的参数在request域对象中是取不到到，只能在上下文中通过parameters获取</li>
</ul>
</li>
</ul>
<h3 id="OGNL-表达式"><a href="#OGNL-表达式" class="headerlink" title="OGNL 表达式"></a>OGNL 表达式</h3><blockquote>
<p>OGNL表达式是通常要结合Struts2的标志一起使用，如<s:property value="#xx">，el表达式可以单独使用${sessionScope.username}。详细区别如：<a href="http://www.cnblogs.com/ycxyyzw/p/3493513.html" target="_blank" rel="external">http://www.cnblogs.com/ycxyyzw/p/3493513.html</a></s:property></p>
</blockquote>
<ul>
<li>ognl表达式：如果标签对应的value的属性类型是Object时，且value中的值可以从值栈中获取就视为ognl表达式<ul>
<li>如<s:property value="name">中s:property是struts2标签，而value中的字符串才是ognl表达式</s:property></li>
</ul>
</li>
<li>ognl访问值栈中action的普通属性 <code>&lt;s:property value=&quot;user.age&quot; /&gt;</code></li>
<li>ognl访问值栈中对象的普通属性 <code>&lt;s:property value=&quot;user.age&quot; /&gt;</code></li>
<li>ognl访问静态成员<ul>
<li>（1）格式为：”@类名@属性/方法”，而”@@方法”只适用于调用Math类中的方法</li>
<li>（2）访问静态方法需要设置常量struts.ognl.allowStaticMethodAccess=true</li>
</ul>
</li>
<li>ognl访问集合<ul>
<li>（1）访问集合<s:property value="users"></s:property></li>
<li>（2）访问集合中某个元素：List<s:property value="users[1]">，Map<s:property value="userMaps.userm1">(Set访问不到)</s:property></s:property></li>
<li>（3）访问List、Set中元素的所有属性的集合<s:property value="users.{age}"></s:property></li>
<li>（4）访问Map的所有Key和Value<s:property value="userMaps.keys"><s:property value="userMaps.values"></s:property></s:property></li>
<li>（5）访问容器大小<s:property value="users.size()">或者value=”users.size”</s:property></li>
</ul>
</li>
<li>ognl投影(过滤)<ul>
<li>（1）获取user集合中age&gt;1的子集合中的第一个元素<s:property value="users.{?#this.age==1}[1]"></s:property></li>
<li>（2）^表示获取开头的元素，$表示获取结尾的元素，如：<s:property value="users.{^#this.age>1}.{age}">、<s:property value="users.{$#this.age>1}.{age}"></s:property></s:property></li>
</ul>
</li>
<li>ognl中的<code>[0]</code><ul>
<li>使用[0]访问所有action和DefaultTextProvider组成集合的对象(只有服务器端跳转是才会有多个action),如：<s:property value="[0]"></s:property></li>
</ul>
</li>
</ul>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>jsp中引入 <code>&lt;%@ taglib uri=&quot;/struts-tags&quot; prefix=&quot;s&quot; %&gt;</code>。其中uri是文件(struts2-core-2.3.24.1.jar-&gt;META-INF-&gt;struts-tags.tld)中”<uri>/struts-tags</uri>“的值，prefix指标签前缀为s</p>
<ul>
<li><code>&lt;s:debug&gt;&lt;/debug&gt;</code> 查看值栈，但是debug这行代码的位置可能会影响查看到的结果。如定义set、bean等的属性var，则会把这个var的值当做是键，和真正的值放到Stack Context中</li>
<li><code>&lt;s:property value=&quot;&quot;/&gt;</code> 获取Value Stack中的值，其中的value前不需加#，获取Stack Context中的值，前面可加#也可不加#；但是当和Value Stack有重名时，不加#表示访问Value Stack，加#表示访问Stack Context；且获取Stack Context中的request必须加#。</li>
<li><code>&lt;s:set var=&quot;adminName&quot; value=&quot;username&quot;/&gt;</code> 设置变量，默认是设在request和actionContext/StackContext中</li>
<li><p>定义bean</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">s:bean</span> <span class="attr">name</span>=<span class="string">"cn.aezo.tags.model.Dog"</span> <span class="attr">var</span>=<span class="string">"myDog"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"'myDogName'"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">s:bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;s:include value=&quot;include.html&quot;/&gt;</code> 导入外部文件(尽量不要使用，可使用jsp的include)</p>
</li>
<li><p>if elseif else</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">s:set</span> <span class="attr">var</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"#parameters.age[0]"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:set</span>&gt;</span><span class="comment">&lt;!-- 此处要带上[0],即取第一个 --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">s:if</span> <span class="attr">test</span>=<span class="string">"#age &lt; 0"</span>&gt;</span>wrong age!<span class="tag">&lt;/<span class="name">s:if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">s:elseif</span> <span class="attr">test</span>=<span class="string">"#age &lt; 20"</span>&gt;</span>too yong!<span class="tag">&lt;/<span class="name">s:elseif</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">s:else</span>&gt;</span>yeah!<span class="tag">&lt;/<span class="name">s:else</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>iterator遍历</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"&#123;1, 2, 3&#125;"</span> <span class="attr">var</span>=<span class="string">"item"</span> <span class="attr">status</span>=<span class="string">"status"</span>&gt;</span><span class="comment">&lt;!--status保存这循环的相关信息，如status.index表示下标--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#status.index"</span>/&gt;</span>: <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#item"</span>/&gt;</span>,</div><div class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>%{}</code>，其中%可以将{}中的内容强制转换为ognl表达式</p>
</li>
<li><constant name="struts.ui.theme" value="simple">使用UI标签的主题（使用较少），默认是xhtml,还可以为simple等,也可自己定义,可通过查看源码得知他定义的一些html元素。自己定义的主题要在src目录下，最终才会被编译到classes下，且起名为”template.你的主题名”,其中的template是默认参数</constant></li>
</ul>
<h3 id="struts2拦截器interceptor"><a href="#struts2拦截器interceptor" class="headerlink" title="struts2拦截器interceptor"></a>struts2拦截器interceptor</h3><ul>
<li>（1）自定义的拦截器实现xwork2的<code>Interceptor</code>接口</li>
<li><p>（2）在struts.xml中进行配置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"cn.aezo.others.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>（3）在action中进行添加拦截器</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"interceptor"</span> <span class="attr">class</span>=<span class="string">"cn.aezo.others.MyInterceptorAction"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span>&gt;</span>/others/interceptor.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span><span class="comment">&lt;!-- 要加上默认的拦截器 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>（4）token拦截器：可以产生一个随机字符串，可防止重复提交</p>
<ul>
<li>jsp页面使用<code>&lt;s:token&gt;&lt;/s:token&gt;</code>生成随机数</li>
<li>action的配置中加入struts2提供的拦截器<code>&lt;interceptor-ref name=&quot;token&quot;/&gt;</code></li>
</ul>
</li>
<li>（5）类型转换：实际上市struts2内置拦截器起的作用。只要在URL传参设参数值为约定的格式即可</li>
</ul>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul>
<li>strut2的声明式异常是使用拦截器来实现的</li>
<li>声明式异常：在所有的action中都throws Exception，拦截到struts.xml文件中，寻找全局异常映射和结果集进行页面显示</li>
</ul>
<h3 id="i18n国际化"><a href="#i18n国际化" class="headerlink" title="i18n国际化"></a>i18n国际化</h3><ul>
<li>（1）原理：使用java.util包中的ResourceBundle和Locale类，如ResourceBundle rb = ResourceBundle.getBundle(“app”, Locale.CHINA);</li>
<li>（2）struts2资源文件(properties)级别<ul>
<li>Action级别的国际化，properties文件前缀要是此Action的类名</li>
<li>包级别的，properties文件前缀要是package</li>
<li>全局级别的，前缀随便取。比较常用</li>
</ul>
</li>
<li>（3）全局级别时，要设置properties的前缀，即常量<constant name="struts.custom.i18n.resources" value="testStruts2"></constant></li>
<li>（4）在JSP页面可通过标签取值。<s:property value="getText('welcome.string')"><!-- 调用的Action的方法，实际中是ActionSupport的方法 --></s:property></li>
<li>（5）处理资源文件中带参数的问题：properties文件中写成如：param.string=欢迎：{0} ，然后在页面用    <s:text name="param.string"><s:param value="username"></s:param></s:text>获取url中的参数值(或者post表单)</li>
<li>（6）点击链接国际化：在链接后加参数request_locale=en_US或者request_locale=zh_CN，这样之后</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;struts2是 struts1和WebWork的结合&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;struts2的本质就是将请求与视图分
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="ssh" scheme="http://blog.aezo.cn/tags/ssh/"/>
    
      <category term="mvc" scheme="http://blog.aezo.cn/tags/mvc/"/>
    
  </entry>
  
  <entry>
    <title>python</title>
    <link href="http://blog.aezo.cn/2017/04/28/lang/python/"/>
    <id>http://blog.aezo.cn/2017/04/28/lang/python/</id>
    <published>2017-04-28T03:39:00.000Z</published>
    <updated>2017-08-18T10:44:17.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python简介"><a href="#python简介" class="headerlink" title="python简介"></a>python简介</h2><ul>
<li>python有两个版本python2(最新的为python2.7)和python3，两个大版本同时在维护</li>
<li>Linux下默认有python环境</li>
</ul>
<h2 id="python基础-易混淆-常用"><a href="#python基础-易混淆-常用" class="headerlink" title="python基础(易混淆/常用)"></a>python基础(易混淆/常用)</h2><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ol>
<li>模块安装<ul>
<li>可在<code>/Scripts</code>和<code>/Lib/site-packages</code>中查看可执行文件和模块源码</li>
</ul>
</li>
<li><p>常用模块</p>
<ul>
<li><code>pip</code> 可用于安装管理python其他模块<ul>
<li>安装（windows默认已经安装）<ul>
<li>将<code>https://bootstrap.pypa.io/get-pip.py</code>中的内容保存到本地<code>get-pip.py</code>文件中</li>
<li>上传<code>get-pip.py</code>至服务器，并设置为可执行</li>
<li><code>python get-pip.py</code> 安装</li>
<li>检查是否安装成功：<code>pip list</code> 可查看已经被管理的模块</li>
</ul>
</li>
<li>常见问题<ul>
<li>安装成功后，使用<code>pip list</code>仍然报错。windows执行<code>where pip</code>查看那些目录有pip程序，如strawberry(perl语言相关)目录也存在pip.exe，一种方法是将strawberry卸载</li>
</ul>
</li>
</ul>
</li>
<li><code>ConfigParser</code> 配置文件读取(该模块ConfigParser在Python3中，已更名为configparser)<ul>
<li><code>pip install ConfigParser</code></li>
<li>介绍：<a href="http://www.cnblogs.com/snifferhu/p/4368904.html" target="_blank" rel="external">http://www.cnblogs.com/snifferhu/p/4368904.html</a></li>
</ul>
</li>
<li><p><code>MySQLdb</code> mysql操作库</p>
<ul>
<li><p><code>pip install MySQL-python</code></p>
<blockquote>
<p>报错<code>win8下 pip安装mysql报错_mysql.c(42) : fatal error C1083: Cannot open include file: ‘config-win.h’: No such file or director</code>。解决办法：安装<a href="https://pypi.python.org/pypi/MySQL-python/1.2.5" target="_blank" rel="external">MySQL-python-1.2.5.win32-py2.7.exe</a>（就相当于pip安装）</p>
</blockquote>
</li>
<li><p>工具类：<a href="http://www.cnblogs.com/snifferhu/p/4369184.html" target="_blank" rel="external">http://www.cnblogs.com/snifferhu/p/4369184.html</a></p>
</li>
</ul>
</li>
<li><code>fabric</code> 主要在python自动化运维中使用(能自动登录其他服务器进行各种操作)<ul>
<li><code>pip install fabric</code> 安装</li>
<li>常见问题<ul>
<li>报错<code>fatal error: Python.h: No such file or directory</code><ul>
<li>安装<code>yum install python-devel</code> 安装python-devel(或者<code>yum install python-devel3</code>)</li>
</ul>
</li>
<li>报错<code>fatal error: ffi.h: No such file or directory</code><ul>
<li><code>yum install libffi libffi-devel</code> 安装libffi libffi-devel</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>scrapy</code> 主要用在python爬虫。可以css的形式方便的获取html的节点数据<ul>
<li><code>pip install scrapy</code> 安装</li>
<li>文档：<a href="http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html" target="_blank" rel="external">0.24-Zh</a>、<a href="https://doc.scrapy.org/en/latest/index.html" target="_blank" rel="external">latest-En</a></li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python简介&quot;&gt;&lt;a href=&quot;#python简介&quot; class=&quot;headerlink&quot; title=&quot;python简介&quot;&gt;&lt;/a&gt;python简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;python有两个版本python2(最新的为python2.7)和python
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="python" scheme="http://blog.aezo.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>npm</title>
    <link href="http://blog.aezo.cn/2017/04/02/web/npm/"/>
    <id>http://blog.aezo.cn/2017/04/02/web/npm/</id>
    <published>2017-04-02T03:13:00.000Z</published>
    <updated>2017-08-10T12:12:19.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm介绍"><a href="#npm介绍" class="headerlink" title="npm介绍"></a>npm介绍</h2><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>安装node的时候会默认包含npm</li>
<li>安装<a href="http://npm.taobao.org/" target="_blank" rel="external">cnpm</a>镜像(淘宝镜像下载较快)：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><ul>
<li>安装模块则是<code>cnpm install &lt;module-name&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><code>npm install &lt;module-name&gt;</code> 安装xxx(在当前项目安装)，<strong>更新模块也是此命令</strong><ul>
<li><code>npm i &lt;module-name&gt;</code> 简写方式</li>
<li><code>-g</code> 全局安装<ul>
<li>如果以Windows管理员运行的命令行，则会安装在nodejs安装目录的node_modules目录下。如果以普通用户运行的命令行，则会安装在用户的AppData/Roaming/npm/node_modules的目录下。建议以管理员运行</li>
</ul>
</li>
<li><code>--save</code>(简写<code>-S</code>) 自动将依赖更新到package.json文件的dependencies(依赖)中</li>
<li><code>--save-dev</code>(简写<code>-D</code>) 自动将依赖更新到package.json文件的devDependencies(运行时依赖)中</li>
</ul>
</li>
<li><code>npm init</code> 初始化项目，生成<code>package.json</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;npm介绍&quot;&gt;&lt;a href=&quot;#npm介绍&quot; class=&quot;headerlink&quot; title=&quot;npm介绍&quot;&gt;&lt;/a&gt;npm介绍&lt;/h2&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="node" scheme="http://blog.aezo.cn/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>firebase</title>
    <link href="http://blog.aezo.cn/2017/03/19/others/service/firebase/"/>
    <id>http://blog.aezo.cn/2017/03/19/others/service/firebase/</id>
    <published>2017-03-19T13:21:00.000Z</published>
    <updated>2017-07-17T13:08:57.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Firebase是google提供的快速构件应用的云服务。简单的可以说通过引入Firebase，你可以通过api去构建实时性的应用。</li>
<li><a href="https://firebase.google.com/" target="_blank" rel="external">官网</a></li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="Firebase帐号注册"><a href="#Firebase帐号注册" class="headerlink" title="Firebase帐号注册"></a>Firebase帐号注册</h3><ul>
<li>可通过google账户登录，选择免费版，新建一个项目。</li>
<li>点击<code>Authentication</code> - <code>登录方法</code> - 启用Google登录</li>
<li>点击<code>overview</code> - <code>将 Firebase 添加到您的网页应用</code> - 复制代码供下面使用</li>
</ul>
<h3 id="下载web版示例"><a href="#下载web版示例" class="headerlink" title="下载web版示例"></a>下载web版示例</h3><ul>
<li><a href="https://github.com/firebase/quickstart-js" target="_blank" rel="external">quickstart-js</a></li>
<li>该文件中包含了auth验证、database数据库、storage存储、messaging消息等示例</li>
<li>找到database/index.html，将上文复制的代码放到head中</li>
</ul>
<h3 id="为开发运行本地-Web-服务器"><a href="#为开发运行本地-Web-服务器" class="headerlink" title="为开发运行本地 Web 服务器"></a>为开发运行本地 Web 服务器</h3><ul>
<li>安装firebase命令行工具：<code>npm install -g firebase-tools</code>(重新运行安装命令，可更新此工具)</li>
<li>cmd进入到下文的database文件夹</li>
<li>启动服务器 <code>firebase serve</code></li>
<li>访问：<code>http://localhost:5000</code></li>
<li>点击登录，就会自动调用google登录验证api</li>
<li>该示例登录进入可书写博文，数据可在控制面板的<code>Database</code>中查看</li>
</ul>
<h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><p>最终可在控制面板的Hosting中查看</p>
<ul>
<li>启动一个新的命令行，cmd进入到下文的database文件夹</li>
<li>登录Google并授权 <code>firebase login</code></li>
<li><p>初始化应用 <code>firebase init</code>，运行后确认 - 选择Hosting - 选择创建的项目，创建根目录（默认会在此目录创建一个public的目作为根目录）</p>
<ul>
<li>运行 firebase init 命令会在您的项目的根目录下创建 firebase.json</li>
<li>当您初始化应用时，系统将提示您指定用作公共根目录的目录（默认为”public”）。如果您的公共根目录下不存在有效的 index.html 文件，系统将为您创建一个。</li>
<li><p>如一个firebase.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"hosting"</span>: &#123;</div><div class="line">    <span class="attr">"public"</span>: <span class="string">"./"</span>,</div><div class="line">    <span class="attr">"rewrites"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"source"</span>: <span class="string">"**"</span>,</div><div class="line">        <span class="attr">"destination"</span>: <span class="string">"/index.html"</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"ignore"</span>: [</div><div class="line">      <span class="string">"firebase.json"</span>,</div><div class="line">      <span class="string">"**/.*"</span>,</div><div class="line">      <span class="string">"**/node_modules/**"</span>,</div><div class="line">      <span class="string">"functions"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"database"</span>: &#123;</div><div class="line">    <span class="attr">"rules"</span>: <span class="string">"database.rules.json"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>部署网站 <code>firebase deploy</code></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Firebase是google提供的快速构件应用的云服务。简单的可以说通过引入Firebase，你可以通过api去构建实时性的应
    
    </summary>
    
      <category term="service" scheme="http://blog.aezo.cn/categories/service/"/>
    
    
      <category term="google" scheme="http://blog.aezo.cn/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>atom</title>
    <link href="http://blog.aezo.cn/2017/03/19/extend/atom/"/>
    <id>http://blog.aezo.cn/2017/03/19/extend/atom/</id>
    <published>2017-03-19T07:33:00.000Z</published>
    <updated>2017-07-17T13:08:56.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="atom安装"><a href="#atom安装" class="headerlink" title="atom安装"></a>atom安装</h2><h2 id="atom快捷键"><a href="#atom快捷键" class="headerlink" title="atom快捷键"></a>atom快捷键</h2><ol>
<li>快捷键查看：<code>File - Settings - Keybindings</code><ul>
<li>编辑用户快捷键：<code>File - Settings - Keymap</code>(编辑后无需重启)</li>
<li>插件快捷键可能会冲突。搜索某个快捷键时，后面表示会覆盖前面的</li>
</ul>
</li>
<li><p>常用快捷键设置</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##### 我自己加的快捷键 START #####</span></div><div class="line"><span class="comment"># 打开命令Panel: ctrl-shift-p</span></div><div class="line"></div><div class="line"><span class="comment"># 删除一行(ctrl-d) / ctrl-shift-k(默认)</span></div><div class="line"><span class="string">'atom-text-editor:not([mini])'</span>:</div><div class="line">  <span class="string">'ctrl-d'</span>: <span class="string">'editor:delete-line'</span></div><div class="line"><span class="comment"># 上下移动一行 ctrl-up、ctrl-down</span></div><div class="line"></div><div class="line"><span class="comment"># html预览切换（插件atom-html-preview）</span></div><div class="line"><span class="string">'atom-text-editor[data-grammar~=html]'</span>:</div><div class="line">  <span class="string">'ctrl-shift-b'</span>: <span class="string">'atom-html-preview:toggle'</span></div><div class="line"><span class="comment">##### 我自己加的快捷键 END #####</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="atom插件"><a href="#atom插件" class="headerlink" title="atom插件"></a>atom插件</h2><ul>
<li><a href="https://atom.io/packages/list" target="_blank" rel="external">插件排行榜</a></li>
<li><code>minimap</code> 代码地图</li>
<li><code>atom-beautify</code> 代码美化，Ctrl+Alt+B</li>
<li><code>file-icons</code> 文件图标美化</li>
<li><code>script</code> 脚本运行器，可运行几乎所有语言(有些需要运行环境)，<strong><code>Ctrl+Shift+B</code> 运行脚本</strong></li>
<li><code>atom-html-preview</code> html预览<ul>
<li>可在Atom编辑器中启一个预览的Tab，在预览页右键-Open Devtools可打开控制台</li>
</ul>
</li>
<li><code>markdown-writer</code> 可快速markdown文件(结合jekyll写博客)</li>
<li><code>git-plus</code> git增强工具。在设置中配置<code>git path</code>为<code>git.exe</code>的路径(如：<code>D:\java\Git\cmd\git.exe</code>)</li>
<li><p><code>platformio-ide-terminal</code> 终端嵌入(安装前需要安装git，并将git配置到path中)</p>
</li>
<li><p><code>vue-autocomplete</code> vue.js自动补全</p>
</li>
<li><code>language-vue</code> .vue文件高亮</li>
<li><code>autocomplete-python</code> python自动补全. 需要将python的执行版本设置到python中</li>
<li><code>autocomplete-php</code> 自动补全php. 需要配置php.exe的执行位置</li>
<li><code>php-server</code> 启动php服务器</li>
</ul>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ol>
<li>win安装或更新插件时，报错：<code>gyp ERR! stack Error: EPERM: operation not permitted</code><ul>
<li>解决办法：以管理员身份运行atom</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;atom安装&quot;&gt;&lt;a href=&quot;#atom安装&quot; class=&quot;headerlink&quot; title=&quot;atom安装&quot;&gt;&lt;/a&gt;atom安装&lt;/h2&gt;&lt;h2 id=&quot;atom快捷键&quot;&gt;&lt;a href=&quot;#atom快捷键&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="ide" scheme="http://blog.aezo.cn/tags/ide/"/>
    
  </entry>
  
  <entry>
    <title>亚马逊云(AWS)实践</title>
    <link href="http://blog.aezo.cn/2017/03/13/linux/aws/"/>
    <id>http://blog.aezo.cn/2017/03/13/linux/aws/</id>
    <published>2017-03-13T01:33:00.000Z</published>
    <updated>2017-07-23T05:14:26.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选购"><a href="#选购" class="headerlink" title="选购"></a>选购</h2><p>1.</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>需要在数据库所在安全组中把应用服务器IP加入</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;选购&quot;&gt;&lt;a href=&quot;#选购&quot; class=&quot;headerlink&quot; title=&quot;选购&quot;&gt;&lt;/a&gt;选购&lt;/h2&gt;&lt;p&gt;1.&lt;/p&gt;
&lt;h2 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="linux" scheme="http://blog.aezo.cn/categories/linux/"/>
    
    
      <category term="cloud" scheme="http://blog.aezo.cn/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="http://blog.aezo.cn/2017/01/16/arch/nginx/"/>
    <id>http://blog.aezo.cn/2017/01/16/arch/nginx/</id>
    <published>2017-01-16T08:54:00.000Z</published>
    <updated>2017-09-26T15:47:25.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx使用"><a href="#nginx使用" class="headerlink" title="nginx使用"></a>nginx使用</h2><ul>
<li>安装<ul>
<li><code>yum install nginx</code> 安装<ul>
<li>默认可执行文件路径<code>/usr/sbin/nginx</code>(已加入到系统服务); 配置文件路径<code>/etc/nginx/nginx.conf</code></li>
</ul>
</li>
<li>程序包解压安装</li>
</ul>
</li>
<li>启动<ul>
<li><code>systemctl start nginx</code> 启动</li>
<li>进入到<code>nginx</code>执行文件目录，运行<code>sudo ./nginx</code></li>
</ul>
</li>
<li>停止<ul>
<li><code>systemctl stop nginx</code><ul>
<li>有时候启动失败可能是端口占用，<code>listen</code>对应的端口必须是空闲状态</li>
</ul>
</li>
<li><code>sudo ./nginx -s stop</code></li>
</ul>
</li>
<li>相关命令<ul>
<li><code>ps -ef | grep nginx</code> 查看nginx安装位置(nginx的配置文件.conf在此目录下)</li>
<li><code>sudo find / -name nginx.conf</code> 查看配置文件位置</li>
<li><code>/usr/sbin/nginx -t</code> 检查配置文件的配置是否合法(也会返回配置文件位置)</li>
</ul>
</li>
</ul>
<h2 id="nginx配置-nginx-conf"><a href="#nginx配置-nginx-conf" class="headerlink" title="nginx配置(nginx.conf)"></a>nginx配置(nginx.conf)</h2><ul>
<li>文件默认是只读的，需要root权限编辑。<code>sudo vim nginx.conf</code></li>
<li><p>配置如下</p>
  <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">   server &#123;</div><div class="line">       <span class="comment"># 监听的端口，注意要在服务器后台开启80端口外网访问权限</span></div><div class="line">       listen   80;</div><div class="line">       <span class="comment"># 服务器的地址              </span></div><div class="line">       server_name www.aezo.cn;</div><div class="line"></div><div class="line">       <span class="comment"># 当直接访问www.aezo.cn时, 重定向到http://www.aezo.cn/hello(地址栏url会发生改变)</span></div><div class="line">	location = / &#123;</div><div class="line">		rewrite / http://<span class="variable">$server_name</span>/hello <span class="built_in">break</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment"># 当直接访问www.aezo.cn下的任何地址时，都会转发到http://127.0.0.1:8080下对应的地址(内部重定向，地址栏url不改变)。如http://www.aezo.cn/admin等，会转发到http://127.0.0.1:8080/admin</span></div><div class="line">       <span class="comment"># location后的地址可正则</span></div><div class="line">       location / &#123;</div><div class="line">		proxy_set_header X-Forward-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">		proxy_set_header Host <span class="variable">$http_host</span>;</div><div class="line">		proxy_redirect off;</div><div class="line">		<span class="keyword">if</span> (!-f <span class="variable">$request_filename</span>) &#123;</div><div class="line">               <span class="comment"># 不能包含/等uri地址, 如果匹配到上面的uri则转向http://127.0.0.1:8080/xxxUri</span></div><div class="line">			proxy_pass http://127.0.0.1:8080;</div><div class="line">			<span class="built_in">break</span>;</div><div class="line">		&#125;</div><div class="line">       &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">   <span class="comment"># 开启第二个站点监听</span></div><div class="line">   server &#123;</div><div class="line">       listen 80;</div><div class="line">       server_name hello.aezo.cn;</div><div class="line"></div><div class="line">       location = / &#123;</div><div class="line">           <span class="comment">#判断是否为手机移动端</span></div><div class="line">           <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">'(iPhone|ipod|iPad|Android|Windows Phone|Mobile|Nokia)'</span>) &#123;</div><div class="line">               rewrite . http://<span class="variable">$server_name</span>/wap <span class="built_in">break</span>;</div><div class="line">           &#125;</div><div class="line">           rewrite . http://<span class="variable">$server_name</span>/pc <span class="built_in">break</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       location / &#123;</div><div class="line">           proxy_pass http://127.0.0.1:8090;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;nginx使用&quot;&gt;&lt;a href=&quot;#nginx使用&quot; class=&quot;headerlink&quot; title=&quot;nginx使用&quot;&gt;&lt;/a&gt;nginx使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yum install nginx&lt;/code&gt; 安装
    
    </summary>
    
      <category term="arch" scheme="http://blog.aezo.cn/categories/arch/"/>
    
    
      <category term="nginx" scheme="http://blog.aezo.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>CentOS服务器使用指导</title>
    <link href="http://blog.aezo.cn/2017/01/10/linux/centos-server-guide/"/>
    <id>http://blog.aezo.cn/2017/01/10/linux/centos-server-guide/</id>
    <published>2017-01-10T05:19:00.000Z</published>
    <updated>2017-07-23T05:14:23.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul>
<li><code>yum install vsftpd</code> 安装软件vsftpd，一路y下去</li>
<li><code>yum search vsftpd</code> 查找软件vsftpd源</li>
<li>Centos 7使用firewalld代替了原来的iptables</li>
<li>云服务器一般有进站出站规则，端口开发除了系统的防火墙也要考虑进出站规则</li>
<li><strong>如果服务器磁盘未挂载，最好先挂载后再进行软件安装</strong></li>
</ul>
<h2 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h2><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><h4 id="下载jdk文件"><a href="#下载jdk文件" class="headerlink" title="下载jdk文件"></a>下载jdk文件</h4><blockquote>
<p>默认登录时候在 root 目录，直接下载和解压，软件包和解压目录都默认在 root 目录，可以切换到 hoom 目录进行下载</p>
</blockquote>
<ol>
<li>下载rpm格式<ul>
<li>获取rpm链接（下载到本地后上传到服务器）： oracle -&gt; Downloads -&gt; Java SE -&gt; Java Archive -&gt; Java SE 7 -&gt; Java SE Development Kit 7u80 -&gt; Accept License Agreement -&gt; jdk-7u80-linux-x64.rpm</li>
<li>下载jdk，运行命令：<code>wget http://download.oracle.com/otn/java/jdk/7u80-b15/jdk-7u80-linux-x64.rpm</code>(这个链接会下载成html格式，<strong>不行</strong>)</li>
<li><code>rmp -ivh jdk-7u80-linux-x64.rpm</code> 安装rpm文件</li>
</ul>
</li>
<li>下载tar格式（推荐）<ul>
<li>下载tar文件 <code>wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz</code></li>
<li>解压tar <code>tar -zxvf jdk-7u79-linux-x64.tar.gz</code><blockquote>
<p>网上有很多深坑，如果报 gzip: stdin: not in gzip format 错请查看：<a href="http://www.cnblogs.com/gmq-sh/p/5380078.html" target="_blank" rel="external">http://www.cnblogs.com/gmq-sh/p/5380078.html</a></p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><ul>
<li><code>vi /etc/profile</code> 使用vi打开profile文件</li>
<li><p>在末尾输入并保存（注意JAVA_HOME需要按照实际路径）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/root/jdk1.7.0_79</div><div class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin</div></pre></td></tr></table></figure>
<blockquote>
<p><code>vi 文件名</code>打开某个文件进行编辑</p>
<ul>
<li>点击键盘<code>insert</code>，进入vi编辑模式，开始编辑；</li>
<li>点击<code>esc</code>退出编辑模式，进入到vi命令行模式；</li>
<li>输入<code>:x</code>/<code>ZZ</code>将刚刚修改的文件进行保存，退出编辑页面，回到初始命令行</li>
<li><code>Ctrl+z</code> 退出 vi 编辑器</li>
</ul>
</blockquote>
</li>
<li><p>运行命令 <code>. /etc/profile</code> 使profile立即生效(注意 . 和 / 之间有空格)</p>
</li>
<li><code>java -version</code> 打印版本号</li>
</ul>
<h3 id="安装vsftpd-1"><a href="#安装vsftpd-1" class="headerlink" title="安装vsftpd ^1"></a>安装vsftpd <a href="[vsftpd](http://www.cnblogs.com/hhuai/archive/2011/02/12/1952647.html)">^1</a></h3><blockquote>
<p>ftp/sftp是协议，vsftpd是ftp服务器(只支持ftp协议)<br><code>yum install ftp</code>安装后可执行ftp命令，此时ftp相当于一个客户端，和window下的xftp类似</p>
</blockquote>
<ol>
<li>安装<code>yum install vsftpd</code></li>
<li><p>修改默认配置文件<code>vim /etc/vsftpd/vsftpd.conf</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#不允许匿名登录(NO)</div><div class="line">anonymous_enable=NO</div><div class="line">#禁止匿名用户上传</div><div class="line">anon_upload_enable=NO</div><div class="line"></div><div class="line">#禁止用户登出自己的FTP主目录(YES表示禁止登出主目录，NO表示不做限制)</div><div class="line">chroot_list_enable=YES</div><div class="line">#如果chroot_list_enable=YES，那么凡是加在文件chroot_list中的用户都是受限止的用户，即不可浏览其主目录的上级目录</div><div class="line">chroot_list_file=/etc/vsftpd/chroot_list</div><div class="line"></div><div class="line">#设定20端口进行通信，对外默认是21端口。防火墙要开放20、21端口</div><div class="line">#connect_from_port_20=YES</div><div class="line">#监听端口</div><div class="line">#listen_port=2121</div><div class="line"></div><div class="line">##加在最后</div><div class="line">#开启pam模式，/etc/vsftpd/ftpusers中为禁止登录的用户 [^2]</div><div class="line">pam_service_name=vsftpd</div><div class="line">#对vsftpd有用，否则因home目录权限为root权限而无法登录</div><div class="line">allow_writeable_chroot=YES</div><div class="line">#开启pasv模式，否则有些客户端登录会有问题，同时在防火墙中必须开启设定的端口，防火墙要开放30000-30999的端口</div><div class="line">#pasv_enable=YES</div><div class="line">pasv_min_port=30000</div><div class="line">pasv_max_port=30999</div><div class="line">#限定可登录用户列表</div><div class="line">userlist_enable=YES</div><div class="line">userlist_file=/etc/vsftpd/user_list</div><div class="line">#表示默认所有用户都不能登录，只有列表中用户才可以；如果userlist_deny=YES，则user_list中的用户就不允许登录ftp服务器</div><div class="line">userlist_deny=NO</div></pre></td></tr></table></figure>
</li>
<li><p>设置用户</p>
<ul>
<li>法一(应用程序内部使用推荐)：设置vsftpd服务的宿主用户 <code>useradd ftpadmin -d /home/ftproot -s /sbin/nologin</code><ul>
<li><code>passwd ftpadmin</code> 给ftpadmin设置密码</li>
<li>默认的vsftpd的服务宿主用户是root，但是这不符合安全性的需要。这里建立名字为ftpadmin的用户，用他来作为支持vsftpd的服务宿主用户。由于该用户仅用来支持vsftpd服务用，因此没有许可他登陆系统的必要，并设定他为不能登陆系统的用户（-s /sbin/nologin）。并设置ftpadmin的家目录为/home/ftproot(做为ftp服务器的根目录)</li>
<li>将ftpadmin加到/etc/vsftpd/user_list中</li>
<li>将ftpadmin加到/etc/vsftpd/chroot_list中</li>
<li>文件/home/ftproot的所有者是ftpadmin，设置权限为755，包含子目录<ul>
<li><code>chown -R ftpadmin /home/ftproot</code></li>
<li><code>chmod -R 755 /home/ftproot</code></li>
</ul>
</li>
</ul>
</li>
<li>法二：设置vsftpd虚拟宿主用户 <code>useradd aezo -s /sbin/nologin</code><ul>
<li><code>-d /home/nowhere</code> 使用-d参数指定用户的主目录，用户主目录并不是必须存在的。如果不设置会在<code>home</code>目录下建一个aezo的文件夹</li>
<li><code>guest_username=aezo</code> 指定虚拟用户的宿主用户</li>
<li><code>virtual_use_local_privs=YES</code> 设定虚拟用户的权限符合他们的宿主用户</li>
<li><code>user_config_dir=/etc/vsftpd/vconf</code> 设定虚拟用户个人vsftp的配置文件存放路径</li>
</ul>
</li>
</ul>
</li>
<li>启动服务<code>systemctl start vsftpd</code></li>
<li>命令行ftp可以登录，但是xftp可以登录确无法获取目录列表，IE浏览器访问<code>ftp://192.168.1.1</code>失败。谷歌浏览器正常访问并使用，或者ftp客户端登录</li>
</ol>
<h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><ol>
<li>查看是否安装git/查看git是否安装成功：<code>git --version</code><ul>
<li><code>-bash: git: command not found</code> 表示尚未安装</li>
</ul>
</li>
<li>下载安装：<code>yum install git</code></li>
</ol>
<h3 id="htop安装"><a href="#htop安装" class="headerlink" title="htop安装"></a>htop安装</h3><ol>
<li>htop是比top功能更多的进程管理工具</li>
<li><code>yum install htop</code> 安装</li>
<li><code>htop</code>查看进程信息(命令行上显示的界面可直接鼠标点击操作)</li>
<li>小技巧<ul>
<li>点击Tree/Sorted可切换视图</li>
<li>选中一行，按下键可查看更多进程</li>
<li>Nice：指的是nice值，这样就可以提高/降低对应进程的优先级</li>
</ul>
</li>
</ol>
<hr>
<p>参考文章</p>
<p>[^2]: <a href="http://www.cnblogs.com/GaZeon/p/5393853.html" target="_blank" rel="external">ftp 530 Permission denied</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yum install vsftpd&lt;/code&gt; 安装软件vsftpd，一路y下去&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="CentOS" scheme="http://blog.aezo.cn/tags/CentOS/"/>
    
      <category term="server" scheme="http://blog.aezo.cn/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>maven</title>
    <link href="http://blog.aezo.cn/2016/12/29/arch/maven/"/>
    <id>http://blog.aezo.cn/2016/12/29/arch/maven/</id>
    <published>2016-12-29T02:18:00.000Z</published>
    <updated>2017-09-29T04:51:04.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="maven简介"><a href="#maven简介" class="headerlink" title="maven简介"></a>maven简介</h2><h2 id="maven实战"><a href="#maven实战" class="headerlink" title="maven实战"></a>maven实战</h2><h3 id="maven镜像修改"><a href="#maven镜像修改" class="headerlink" title="maven镜像修改"></a>maven镜像修改</h3><pre><code>- 在~/.m2目录下的settings.xml文件中，（如果该文件不存在，则需要从maven/conf目录下拷贝一份），找到&lt;mirrors&gt;标签，添加如下子标签

    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>          </div><div class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><h3 id="maven父子项目"><a href="#maven父子项目" class="headerlink" title="maven父子项目"></a>maven父子项目</h3><pre><code>- parents主要配置如下：`pom.xml`

    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>smtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 打包类型必须为pom --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>smtools<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>smtools<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">module</span>&gt;</span>utils<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">module</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--依赖形式一：父项目的依赖会被子项目自动继承--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--依赖形式二：该节点下的依赖关系只是为了统一版本号，不会被子项目自动继承，除非子项目主动引用--&gt;</span></div><div class="line"><span class="comment">&lt;!--好处是子项目可以不用写版本号 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>

- child

    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--声明父项目坐标--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>smtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- &lt;relativePath/&gt;的默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 建议写上，否则仅打包子项目的时候会出错 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--如果父项目使用了dependencyManagement, 如果此处添加的因子在其中则不用写版本号--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--依赖于此项目的其他模块:此时idea的Dependencies可看到相应的依赖关系--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--project.version表示当前项目(此pom文件所在的模块/项目)的版本--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>

- 子项目打包：进入到子项目目录，运行`mvn package`(注意要指明`relativePath`)
</code></pre><h3 id="maven项目依赖本地jar包"><a href="#maven项目依赖本地jar包" class="headerlink" title="maven项目依赖本地jar包"></a>maven项目依赖本地jar包</h3><ul>
<li>法一：将项目安装到本地maven库：<code>mvn install</code><strong>(推荐)</strong><ul>
<li>如果有pom.xml建议安装到本地再进行引用，(下面两种方式)否则编译的时候不会报错，但是运行时这些本地jar依赖就找不到(如：<code>nested exception is java.lang.NoClassDefFoundError</code>)</li>
<li>有些install时则运行单元测试时候会报错，导致安装/打包失败。可尝试跳过测试进行安装(<code>mvn install -DskipTests</code>)。如：阿里云SMS服务aliyun-java-sdk-core:3.2.3就是如此</li>
</ul>
</li>
<li><p>法二：依赖写法(只能一个jar一个jar的添加)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--groupId等是从jar包的META-INF中获得; 其中scope必须加; $&#123;basedir&#125;为maven内置参数--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/lib/smtools-utils-0.0.1-SNAPSHOT.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>法三：在<code>build-plugins</code>节点加以下插件(可获取到目录下所有jar)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">        &lt;source&gt;1.8&lt;/source&gt;</div><div class="line">        &lt;target&gt;1.8&lt;/target&gt;</div><div class="line">        &lt;encoding&gt;UTF-8&lt;/encoding&gt;</div><div class="line">        --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">extdirs</span>&gt;</span>src/main/resources/lib<span class="tag">&lt;/<span class="name">extdirs</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装和打包"><a href="#安装和打包" class="headerlink" title="安装和打包"></a>安装和打包</h2><ul>
<li>安装：<code>mvn install</code><ul>
<li>执行安装命令后，会自动将项目打包后放到maven本地的home目录(.m2)。之后其他项目可进行引用(按照常规方式引用)</li>
</ul>
</li>
<li>打包命令：<code>mvn package</code></li>
<li><p>跳过测试进行打包：<code>mvn install -DskipTests</code> / <code>mvn package -DskipTests</code>.</p>
<ul>
<li><p>方式二:</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在idea中使用<code>Terminal</code>进行项目打包(<code>mvn package</code>)需要注意环境变量的java版本. 版本过低容易报错如：<code>maven Unsupported major.minor version 52.0</code>. 修改版本后可进行重启idea. (修改idea配置中的maven编译版本不能影响命令行)</p>
</li>
<li>mvn编译是根据pom.xml配置来的. 而idea的编译/语法校验等, 是根据Libraries中的jar包来的. <strong>idea默认会根据pom.xml中的依赖找到对应的jar(.m2路径下)并应用到Libraries中(只会加本地maven库中的).</strong> 如果手动加入了一些jar包, 有可能出现本地可正常编译, maven却编译打包失败, 具体参考上述”maven项目依赖本地jar包”.</li>
</ul>
<h2 id="maven语法"><a href="#maven语法" class="headerlink" title="maven语法"></a>maven语法</h2><h3 id="maven项目基本结构"><a href="#maven项目基本结构" class="headerlink" title="maven项目基本结构"></a>maven项目基本结构</h3><pre><code>- pom.xml

    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minions<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 打包类型可以是jar、war、pom等 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>minions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Delegated the code to all minions<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>

- maven文件结构

    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- src</div><div class="line">	- main</div><div class="line">		- java</div><div class="line">			- xxx</div><div class="line">		- resources</div><div class="line">		- WEB-INFO</div><div class="line">			- web.xml</div><div class="line">	- test</div></pre></td></tr></table></figure>
</code></pre><h3 id="标签介绍"><a href="#标签介绍" class="headerlink" title="标签介绍"></a>标签介绍</h3><ul>
<li><code>scope</code>：取值有compile、runtime、test、provided、system和import。<ul>
<li>compile：这是依赖项的默认作用范围，即当没有指定依赖项的scope时默认使用compile。compile范围内的依赖项在所有情况下都是有效的，包括运行、测试和编译时。</li>
<li>cruntime：表示该依赖项只有在运行时才是需要的，在编译的时候不需要。这种类型的依赖项将在运行和test的类路径下可以访问。</li>
<li>ctest：表示该依赖项只对测试时有用，包括测试代码的编译和运行，对于正常的项目运行是没有影响的。</li>
<li>cprovided：表示该依赖项将由JDK或者运行容器在运行时提供，也就是说由Maven提供的该依赖项我们只有在编译和测试时才会用到，而在运行时将由JDK或者运行容器提供。</li>
<li>csystem：当scope为system时，表示该依赖项是我们自己提供的，不需要Maven到仓库里面去找。指定scope为system需要与另一个属性元素systemPath一起使用，它表示该依赖项在当前系统的位置，使用的是绝对路径。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;maven简介&quot;&gt;&lt;a href=&quot;#maven简介&quot; class=&quot;headerlink&quot; title=&quot;maven简介&quot;&gt;&lt;/a&gt;maven简介&lt;/h2&gt;&lt;h2 id=&quot;maven实战&quot;&gt;&lt;a href=&quot;#maven实战&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="arch" scheme="http://blog.aezo.cn/categories/arch/"/>
    
      <category term="tools" scheme="http://blog.aezo.cn/categories/arch/tools/"/>
    
    
      <category term="maven" scheme="http://blog.aezo.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>derby</title>
    <link href="http://blog.aezo.cn/2016/12/11/db/derby/"/>
    <id>http://blog.aezo.cn/2016/12/11/db/derby/</id>
    <published>2016-12-11T13:13:00.000Z</published>
    <updated>2017-07-23T05:13:34.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol>
<li>Apache Derby是一个完全用java编写的数据库，非常小巧，核心部分derby.jar只有2M，所以既可以做为单独的数据库服务器使用，也可以内嵌在应用程序中使用。</li>
<li>Derby数据库有两种运行模式<ul>
<li>内嵌模式：Derby数据库与应用程序共享同一个JVM，通常由应用程序负责启动和停止，对除启动它的应用程序外的其它应用程序不可见，即其它应用程序不可访问它。如ofbiz自带的数据库即为derby</li>
<li>网络模式：Derby数据库独占一个JVM，做为服务器上的一个独立进程运行。在这种模式下，允许有多个应用程序来访问同一个Derby数据库</li>
</ul>
</li>
<li>官方网址：<a href="http://db.apache.org/derby/" target="_blank" rel="external">http://db.apache.org/derby/</a>。目前最新版本为<code>10.13.1.1</code>(需要jdk1.8)</li>
</ol>
<h2 id="安装与运行"><a href="#安装与运行" class="headerlink" title="安装与运行"></a>安装与运行</h2><ol>
<li>下载压缩包到本地解压即可，如根目录为：<code>D:\java\db-derby-10.13.1.1-bin</code></li>
<li>设置<code>DERBY_HOME</code>：<code>set DERBY_HOME=D:\java\db-derby-10.13.1.1-bin</code></li>
<li>运行<code>setEmbeddedCP.bat</code>设置<code>CLASSPATH</code>：<code>D:\derby\db-derby-10.X.Y.0-bin\bin&gt;setEmbeddedCP.bat</code></li>
<li>运行<code>ij.bat</code>查看ij版本：<code>D:\derby\db-derby-10.X.Y.0-bin\bin&gt;ij.bat</code>（退出ij：<code>ij&gt; quit;</code>）</li>
<li>启动derby服务：<code>D:\derby\db-derby-10.X.Y.0-bin\bin&gt;startNetworkServer.bat</code>（默认使用端口1527）</li>
</ol>
<h2 id="基本sql举例"><a href="#基本sql举例" class="headerlink" title="基本sql举例"></a>基本sql举例</h2><blockquote>
<p>文档：%DERBY_HOME%/docs/html/getstart/index.html 中 Creating a Derby database and running SQL statements</p>
</blockquote>
<ol>
<li>运行<code>ij.bat</code></li>
<li>创建数据库：<code>connect &#39;jdbc:derby:mytest;create=true;user=root;password=root&#39;;</code><ul>
<li><code>create=true</code>表示当数据库mytest不存在时自动创建一个。（此时会看到bin目录下多一个mytest文件夹，里面即为数据文件）</li>
<li><code>user=root;password=root</code>表示创建数据库后，登录该数据库的用户名密码。derby的用户名密码是在创建数据库的时候设置的。如果不填则不需用户名也可登录</li>
</ul>
</li>
<li>创建表：<code>create table mytable (id int primary key, name varchar(12));</code></li>
<li>新增数据：<code>insert into mytable values (10,&#39;ten&#39;),(20,&#39;twenty&#39;),(30,&#39;thirty&#39;);</code></li>
<li>查询数据：<code>select * from mytable where id=20;</code></li>
</ol>
<h2 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h2><ol>
<li>使用客户端时，需要的jar包为：<code>%DERBY_HOME%/lib/derbyclient.jar</code></li>
<li>迷你型客户端：<code>sqleonardo</code> 纯java编写，并开源。<a href="/data/download/sqleonardo.zip">客户端和源码</a></li>
<li>增强版：<code>squirrel-sql-3.7.1-standard.jar</code> <a href="http://www.squirrelsql.org/#installation" target="_blank" rel="external">官网下载</a>，<a href="http://www.jb51.net/database/467890.html" target="_blank" rel="external">jb51</a><ul>
<li>driver使用上述jar包</li>
<li>url：<code>jdbc:derby://127.0.0.1:1527/mytest</code></li>
</ul>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Apache Derby是一个完全用java编写的数据库，非常小巧，核心部分derby.jar只有2M，所以既可以做为单独的数据
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="db" scheme="http://blog.aezo.cn/tags/db/"/>
    
      <category term="apache" scheme="http://blog.aezo.cn/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu</title>
    <link href="http://blog.aezo.cn/2016/11/20/linux/ubuntu/"/>
    <id>http://blog.aezo.cn/2016/11/20/linux/ubuntu/</id>
    <published>2016-11-20T05:16:00.000Z</published>
    <updated>2017-07-23T05:14:31.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu介绍"><a href="#Ubuntu介绍" class="headerlink" title="Ubuntu介绍"></a>Ubuntu介绍</h2><ol>
<li><code>Ubuntu</code>（乌班图）是一个以桌面应用为主的<code>Linux</code>操作系统，是比较流行的一款linux桌面系统，还有如：<code>Ubuntu</code>是属于<code>Debian</code>系列、<code>CentOS</code>则是属于<code>Redhat</code>系列</li>
<li>Ubuntu下载地址：<a href="http://releases.ubuntu.com/" target="_blank" rel="external">http://releases.ubuntu.com/</a></li>
<li>本文以<code>Ubuntu 16.04.1 LTS</code>为例记录U盘、硬盘安装方法(windows安装类似)</li>
</ol>
<h2 id="Bios、分区、MBR"><a href="#Bios、分区、MBR" class="headerlink" title="Bios、分区、MBR"></a>Bios、分区、MBR</h2><ol>
<li>设置电脑U盘启动<ul>
<li>我在电脑启动时按F12即可进入Bios界面（进入Bios的快捷键一般为ESC/F1/F11/F12等，可以网上查询电脑型号对应的启动Bios快捷键）</li>
<li>找到<code>Boot</code>选项(或者<code>启动选项</code>等字眼)，调整<code>USB</code>相关的选项到顶部(即优先U盘或者移动硬盘启动)</li>
</ul>
</li>
<li>电脑分区 <a href="[https://zhidao.baidu.com/question/512380327.html](https://zhidao.baidu.com/question/512380327.html)">^1</a><ul>
<li>windows进入分区界面：右键我的电脑 -&gt; 管理 -&gt; 存储 -&gt; 磁盘管理<ul>
<li>扩展卷：将未使用的磁盘扩展到当前卷</li>
<li>压缩卷：将当前卷未使用的空间压缩一定大小为未使用磁盘</li>
</ul>
</li>
<li>硬盘分区一般只能有4个主分区，其他都为逻辑分区，打开磁盘管理，根据图示，一般可从做到右获取到分区的表达方式<ul>
<li><code>(hd0, 1)</code> 表示第一块硬盘第二主分区; <code>(hd1, 4)</code> 表示第二块硬盘的第一逻辑分区(如移动硬盘，不论硬盘是否达到了4个主分区，逻辑分区都是从4开始计算)</li>
</ul>
</li>
<li>linux上对磁盘和分区的命名<ul>
<li><code>hda</code> 一般是指IDE接口的硬盘，hda一般指第一块硬盘，类似的有hdb,hdc等</li>
<li><code>sda</code> 一般是指SATA接口的硬盘，sda一般指第一块硬盘，类似的有sdb,sdc等</li>
<li>现在的内核都会把硬盘，移动硬盘，U盘之类的识别为sdX的形式</li>
<li>分区同上，4个主分区，其他为逻辑分区。但是linux上<code>sda1</code>才表示为第一主分区，以此类推</li>
</ul>
</li>
</ul>
</li>
<li><code>MBR</code>: Master Boot Record. 即主引导记录，常被叫做引导程序 <a href="[http://www.2cto.com/os/201202/120564.html](http://www.2cto.com/os/201202/120564.html)">^2</a><ul>
<li>操作系统启动过程中有 一个很重要的引导程序——MBR。MBR是由三段组成的其中最重要的两段：是由446个字节组成的boot locader（引导加载器），和64个字节的分区表。在MBR的446字节也就是boot locader这段程序对于引导操作系统很重要。Linux中有两种boot locader可选，一种是LILO,一种就是GRUB。LILO现在已不用了。现在主要是使用GRUB来引导</li>
<li>GRUB是两段式的引导，第一阶段称为stage1,是存放在MBR中，主要来引导第二阶段stage2 这段主要放在/boot/grub/中的执行程序，主要是grub.conf这个文件</li>
</ul>
</li>
<li>文件系统<ul>
<li><code>NTFS</code> 为windows专用文件，具有良好的加密性，由于<code>FAT</code>、<code>FAT32</code>(linux可以失败)</li>
<li><code>EXT4</code> 为Linux系统下的日志文件系统，是ext2、ext3的后续版本</li>
</ul>
</li>
</ol>
<h2 id="Ubuntu安装"><a href="#Ubuntu安装" class="headerlink" title="Ubuntu安装"></a>Ubuntu安装</h2><p>Ubuntu安装方式分为两种：物理安装和虚拟安装。</p>
<ul>
<li>物理安装：LiveCD、U盘、硬盘(包括移动硬盘)</li>
<li>虚拟安装：WUBI、虚拟机。缺点：需要依赖于主系统，如windows</li>
</ul>
<h3 id="U盘安装-3"><a href="#U盘安装-3" class="headerlink" title="U盘安装 ^3"></a>U盘安装 <a href="[http://www.linuxidc.com/Linux/2014-10/108402.htm](http://www.linuxidc.com/Linux/2014-10/108402.htm)">^3</a></h3><ol>
<li>首先下载好ubuntu64位镜像文件<code>ubuntu-16.04.1-desktop-amd64.iso</code>（进入<a href="http://releases.ubuntu.com/16.04/" target="_blank" rel="external">http://releases.ubuntu.com/16.04/</a>，找到<code>64-bit PC (AMD64) desktop image</code>）</li>
<li>MD5校验：防止下载文件损坏（找到上述网址中的<code>MD5SUMS</code>文件，即可看到<code>17643c29e3c4609818f26becf76d29a3 *ubuntu-16.04.1-desktop-amd64.iso</code>）</li>
<li>下载安装<code>UltraISO</code>，无需注册可以一直试用</li>
<li>打开<code>UltraISO</code> -&gt; 文件 -&gt; 打开 -&gt; 选择ubuntu的iso镜像文件 -&gt; 启动 -&gt; 写入硬盘映像(硬盘驱动器选择U盘，写入方式USB-HDD+) -&gt; 写入(2分钟左右)。此时U盘已经刻录好系统</li>
<li>将硬盘腾出一个未使用的空间，大小自己定义</li>
<li>Bios启动 -&gt; 进入到刻录的U盘系统 -&gt; <code>Install Ubuntu</code>（或者选择使用而不安装，进入之后还是可以安装） -&gt; 点击桌面的<code>安装Ubuntu 16.04.1 LTS</code>进行安装 -&gt; 前面一直下一步，到安装类型选择“其他选项”（可以自己创建调整分区）</li>
<li>选择“空闲”的磁盘，双击进行分区，主要分3个区<code>/</code>、<code>swap</code>、<code>/home</code>（还有其他分区方案）<ul>
<li><code>/</code>：根据磁盘大小，我500G的磁盘 / 设置成200G。主分区，文件类型为EXT4，挂载点<code>/</code></li>
<li><code>swap</code>：大小&lt;2G。逻辑分区，文件类型为交换空间，挂载点无</li>
<li><code>/home</code>：大小为剩余磁盘。逻辑分区，文件类型为EXT4，挂载点<code>/home</code></li>
</ul>
</li>
<li>安装启动引导的设备：选择<code>/</code>分区，如果有<code>/boot</code>分区则选择<code>/boot</code>分区</li>
<li>一路下一步即可安装完成，重新启动即可。</li>
</ol>
<h3 id="硬盘安装-4"><a href="#硬盘安装-4" class="headerlink" title="硬盘安装 ^4"></a>硬盘安装 <a href="[http://v.youku.com/v_show/id_XMzEwODg2Njk2.html?f=16157628&amp;from=y1.2-3.2](http://v.youku.com/v_show/id_XMzEwODg2Njk2.html?f=16157628&amp;from=y1.2-3.2)">^4</a></h3><ol>
<li><p>下载<code>EasyBCD</code> -&gt; 安装后打开 -&gt; 添加新条目 -&gt; NeoGrub -&gt; 安装 -&gt; 配置 -&gt; 在打开的配置文件（C:/NST/menu.lst）中写入如下代码。其中ro只读，splash显示启动画面；reboot重启；halt关机；<a href="[http://www.njliaohua.com/lhd_01ng13y9qv7k6x46aj4e_11.html](http://www.njliaohua.com/lhd_01ng13y9qv7k6x46aj4e_11.html)">^6</a> (hd0,0) 一般会是表示C盘，实际按照上述知识自行配置</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">title Install Ubuntu</div><div class="line">root (hd0,0)</div><div class="line">kernel (hd0,0)/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-16.04.1-desktop-amd64.iso ro splash  locale=zh_CN.UTF-8</div><div class="line">initrd (hd0,0)/initrd.lz</div><div class="line">title reboot</div><div class="line">reboot</div><div class="line">title halt</div><div class="line">halt</div></pre></td></tr></table></figure>
</li>
<li><p>将<code>ubuntu-16.04.1-desktop-amd64.iso</code>中casper文件夹下的initrd.lz和vmlinuz.efi复制到C盘根目录，并将镜像也复制进去。</p>
</li>
<li>重启电脑，启动界面选择<code>NeoGrub</code></li>
<li>如果成功则会进入到buntu的桌面，首先<code>Ctrl+Alt+T</code>打开终端打开终端，运行<code>sudo umount -l /isodevice</code>去掉挂载的镜像文件</li>
<li>安装U盘安装进行后续操作</li>
</ol>
<h3 id="移动硬盘安装-7"><a href="#移动硬盘安装-7" class="headerlink" title="移动硬盘安装 ^7"></a>移动硬盘安装 <a href="[http://forum.ubuntu.org.cn/viewtopic.php?p=149124#149124](http://forum.ubuntu.org.cn/viewtopic.php?p=149124#149124)">^7</a></h3><p>实况记录</p>
<ol>
<li>可用U盘中刻录的系统进行移动硬盘安装</li>
<li>移动硬盘如果已经分区了，则最后留出前面一段装Ubuntu系统，防止启动时引导不成功，</li>
<li>如第一段500G未分配，第二段1500G为NTFS文件系统，且电脑只有一块内置硬盘，分区按照上述分区<ul>
<li>分好区后，<code>/</code>显示为<code>/dev/sdb2</code>；<code>swap</code>显示为<code>/dev/sdb5</code>；<code>/home</code>显示为<code>/dev/sdb6</code></li>
<li>于是将安装启动引导的设备选择为<code>/dev/sdb2</code>。如果选择内置硬盘，则标识通过Grub来启动Ubuntu或者windows，当拔掉移动硬盘可以windows无法启动。选择<code>/dev/sdb2</code>则需要按照通过EasyBCD等程序进行引导启动Ubuntu</li>
<li>此时使用电脑<code>compac 14</code>启动无法直接进入Ubuntu系统，需要按<code>F9</code>选择启动项(已经在Bios中设置了启动优先级也无效)<ul>
<li>选择Efi启动可以（Efi -&gt; ubuntu -&gt; grubx64.efi）</li>
<li>此时启动项中还会多出一个ubuntu(TS…..)，直接选择即可启动</li>
<li>选择移动硬盘无法启动，按照文章 <a href="[http://forum.ubuntu.org.cn/viewtopic.php?p=149124#149124](http://forum.ubuntu.org.cn/viewtopic.php?p=149124#149124)">^7</a> 可以解决此问题，但是仍然需要按<code>ESC -&gt; F9</code>进行选择 (结合文章 <a href="[http://www.educity.cn/linux.1589874.html](http://www.educity.cn/linux.1589874.html)">^8</a> )。测试时必须将<code>grldr</code>放在<code>NTFS</code>那个分区，<code>menu.lst</code>可放在<code>NTFS</code>分区或者<code>sdb2</code>即根分区</li>
</ul>
</li>
<li>按照文章 <a href="[http://forum.ubuntu.org.cn/viewtopic.php?p=149124#149124](http://forum.ubuntu.org.cn/viewtopic.php?p=149124#149124)">^7</a> <code>三、为移动使用做准备</code> 操作失败，且附加中的<code>grldr</code>文件不适用，可下载此文件 <a href="http://download.csdn.net/detail/hcx25909/5464025" target="_blank" rel="external">http://download.csdn.net/detail/hcx25909/5464025</a></li>
</ul>
</li>
<li><p>(2017-02-16已解决，见下文) 使用电脑<code>Tinkpad E425</code>都未安装成功，U盘安装卡在logo页面；硬盘安装则报错<code>Error 13 invalid or unsupported executable format</code>；对于已经安装好的移动硬盘也是无法启动，于是利用U盘镜像进入到<code>Grub</code>命令行(也连接了移动硬盘)，运行一下命令仍然卡在命令行启动的最后一步。其中进入命令行后可输入<code>root (hd</code>，按<code>Tab</code>键进行提示磁盘</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root (hd1,1)</div><div class="line">kernel (hd1,1)/vmlinuz root=/dev/sdb2 ro splash</div><div class="line">initrd (hd1,1)/initrd.img</div><div class="line">boot</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>2017-02-16解决ThinkPad E425在安装Ubuntu卡在安装界面的问题 [^9]<ul>
<li>原因：主板BIOS设置中设置为双显卡切换的模式的时候，会出现这个问题</li>
<li>解决方案：开机长按F1，进入BIOS设置。在config-&gt;Display-&gt;Graphics Device 设置显卡的模式为集成显卡 Integrated Graphics</li>
</ul>
</li>
<li>2017-04-24解决ubuntu启动长时间黑屏问题<ul>
<li>自己的笔记本是thinkpad e425，双显卡，装ubuntu一直卡在启动页面上，后来在bios中关闭了独显，所以成功将ubuntu装上<br>之后，开机时候直至显示用户登陆的页面时，屏幕都是黑屏</li>
<li>安装 v86d 和 hwinfo，然后查看显卡支持的分辨率<ul>
<li><code>sudo apt-get install v86d hwinfo</code></li>
<li><code>sudo hwinfo --framebuffer</code></li>
</ul>
</li>
<li>编辑<code>/etc/default/grub</code>，添加<code>GRUB_GFXPAYLOAD_LINUX=1024×768x24</code></li>
<li>启用framebuffer：<code>echo FRAMEBUFFER=y | sudo tee /etc/initramfs-tools/conf.d/splash</code></li>
<li>更新设置<ul>
<li><code>sudo update-grub</code></li>
<li><code>sudo update-grub2</code></li>
<li><code>sudo update-initramfs -u</code></li>
</ul>
</li>
<li>重启</li>
</ul>
</li>
</ol>
<hr>
<p>参考文章</p>
<p>[^9]: <a href="http://blog.csdn.net/u014466412/article/details/53666122" target="_blank" rel="external">ThinkPad E425在安装Ubuntu卡在安装界面</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ubuntu介绍&quot;&gt;&lt;a href=&quot;#Ubuntu介绍&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu介绍&quot;&gt;&lt;/a&gt;Ubuntu介绍&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Ubuntu&lt;/code&gt;（乌班图）是一个以桌面应用为主的&lt;code
    
    </summary>
    
      <category term="linux" scheme="http://blog.aezo.cn/categories/linux/"/>
    
    
      <category term="system" scheme="http://blog.aezo.cn/tags/system/"/>
    
      <category term="install" scheme="http://blog.aezo.cn/tags/install/"/>
    
      <category term="disk" scheme="http://blog.aezo.cn/tags/disk/"/>
    
      <category term="bois" scheme="http://blog.aezo.cn/tags/bois/"/>
    
  </entry>
  
  <entry>
    <title>gitlab</title>
    <link href="http://blog.aezo.cn/2016/11/20/extend/gitlab/"/>
    <id>http://blog.aezo.cn/2016/11/20/extend/gitlab/</id>
    <published>2016-11-20T02:39:00.000Z</published>
    <updated>2017-07-17T13:08:56.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gitlab介绍"><a href="#gitlab介绍" class="headerlink" title="gitlab介绍"></a>gitlab介绍</h2><p><a href="https://docs.gitlab.com/omnibus/README.html" target="_blank" rel="external">gitlab官方文档</a>。如<a href="https://about.gitlab.com/downloads/#centos7" target="_blank" rel="external">centos7安装</a></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>重新启动：<code>sudo gitlab-ctl restart</code></li>
<li>重新配置：<code>sudo gitlab-ctl reconfigure</code>（运行中的项目，重新配置后，数据也不会丢失）</li>
</ul>
<h2 id="问题集锦"><a href="#问题集锦" class="headerlink" title="问题集锦"></a>问题集锦</h2><ul>
<li>访问项目首页(如：<a href="http://114.55.888.888/)，结果页面不显示，地址栏的地址变成" target="_blank" rel="external">http://114.55.888.888/)，结果页面不显示，地址栏的地址变成</a> <a href="http://gitlab/users/sign_in" target="_blank" rel="external">http://gitlab/users/sign_in</a><ul>
<li>尝试方法：首先确保<code>/etc/gitlab/gitlab.rb</code>中的设置了<code>external_url</code>（如：<code>external_url &quot;http://www.example.com&quot;</code>），如果设置了，运行命令重新配置（<code>sudo gitlab-ctl reconfigure</code>，无需重启）。</li>
</ul>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;gitlab介绍&quot;&gt;&lt;a href=&quot;#gitlab介绍&quot; class=&quot;headerlink&quot; title=&quot;gitlab介绍&quot;&gt;&lt;/a&gt;gitlab介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/omnibus/READM
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="git" scheme="http://blog.aezo.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>wiki</title>
    <link href="http://blog.aezo.cn/2016/10/27/extend/wiki/"/>
    <id>http://blog.aezo.cn/2016/10/27/extend/wiki/</id>
    <published>2016-10-27T13:36:00.000Z</published>
    <updated>2017-07-17T13:08:56.655Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文地址：<a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="external">https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md</a> <strong>branch:</strong> <code>2e467c3</code></p>
</blockquote>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#语言无关">语言无关</a><ul>
<li><a href="#ide">IDE</a></li>
<li><a href="#mysql">MySQL</a></li>
<li><a href="#nosql">NoSQL</a></li>
<li><a href="#postgresql">PostgreSQL</a></li>
<li><a href="#web">Web</a></li>
<li><a href="#web服务器">WEB服务器</a></li>
<li><a href="#其它">其它</a></li>
<li><a href="#函数式概念">函数式概念</a></li>
<li><a href="#分布式系统">分布式系统</a></li>
<li><a href="#在线教育">在线教育</a></li>
<li><a href="#大数据">大数据</a></li>
<li><a href="#操作系统">操作系统</a></li>
<li><a href="#数据库">数据库</a></li>
<li><a href="#智能系统">智能系统</a></li>
<li><a href="#正则表达式">正则表达式</a></li>
<li><a href="#版本控制">版本控制</a></li>
<li><a href="#程序员杂谈">程序员杂谈</a></li>
<li><a href="#管理和监控">管理和监控</a></li>
<li><a href="#编程艺术">编程艺术</a></li>
<li><a href="#编译原理">编译原理</a></li>
<li><a href="#编辑器">编辑器</a></li>
<li><a href="#计算机图形学">计算机图形学</a></li>
<li><a href="#设计模式">设计模式</a></li>
<li><a href="#软件开发方法">软件开发方法</a></li>
<li><a href="#项目相关">项目相关</a></li>
</ul>
</li>
<li><a href="#语言相关">语言相关</a><ul>
<li><a href="#android">Android</a></li>
<li><a href="#awk">AWK</a></li>
<li><a href="#c">C</a></li>
<li><a href="#c-sharp">C#</a></li>
<li><a href="#c-1">C++</a></li>
<li><a href="#coffeescript">CoffeeScript</a></li>
<li><a href="#dart">Dart</a></li>
<li><a href="#elasticsearch">Elasticsearch</a></li>
<li><a href="#elixir">Elixir</a></li>
<li><a href="#erlang">Erlang</a></li>
<li><a href="#fortran">Fortran</a></li>
<li><a href="#golang">Golang</a></li>
<li><a href="#haskell">Haskell</a></li>
<li><a href="#html--css">HTML / CSS</a></li>
<li><a href="#http">HTTP</a></li>
<li><a href="#ios">iOS</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#javascript">JavaScript</a></li>
<li><a href="#latex">LaTeX</a></li>
<li><a href="#lisp">LISP</a></li>
<li><a href="#lua">Lua</a></li>
<li><a href="#markdown">Markdown</a></li>
<li><a href="#nodejs">Node.js</a></li>
<li><a href="#perl">Perl</a></li>
<li><a href="#php">PHP</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#r">R</a></li>
<li><a href="#restructuredtext">reStructuredText</a></li>
<li><a href="#ruby">Ruby</a></li>
<li><a href="#rust">Rust</a></li>
<li><a href="#scala">Scala</a></li>
<li><a href="#scheme">Scheme</a></li>
<li><a href="#shell">Shell</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#vim">Vim</a></li>
<li><a href="#visual-prolog">Visual Prolog</a></li>
</ul>
</li>
</ul>
<h2 id="语言无关"><a href="#语言无关" class="headerlink" title="语言无关"></a>语言无关</h2><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ul>
<li><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a></li>
</ul>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul>
<li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="external">21分钟MySQL入门教程</a></li>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external">MySQL索引背后的数据结构及算法原理</a></li>
</ul>
<h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><ul>
<li><a href="http://disquebook.com" target="_blank" rel="external">Disque 使用教程</a></li>
<li><a href="http://neo4j.tw" target="_blank" rel="external">Neo4j .rb 中文資源</a></li>
<li><a href="http://docs.neo4j.org.cn" target="_blank" rel="external">Neo4j 简体中文手册 v1.8</a></li>
<li><a href="http://redisdoc.com" target="_blank" rel="external">Redis 命令参考</a></li>
<li><a href="http://redisbook.com" target="_blank" rel="external">Redis 设计与实现</a></li>
<li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md" target="_blank" rel="external">The Little MongoDB Book</a></li>
<li><a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md" target="_blank" rel="external">The Little Redis Book</a></li>
<li><a href="https://github.com/huangz1990/annotated_redis_source" target="_blank" rel="external">带有详细注释的 Redis 2.6 代码</a></li>
<li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="external">带有详细注释的 Redis 3.0 代码</a></li>
</ul>
<h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><ul>
<li><a href="http://works.jinbuguo.com/postgresql/menu823/index.html" target="_blank" rel="external">PostgreSQL 8.2.3 中文文档</a></li>
<li><a href="http://www.postgres.cn/docs/9.3/index.html" target="_blank" rel="external">PostgreSQL 9.3.1 中文文档</a></li>
</ul>
<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><ul>
<li><a href="https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details" target="_blank" rel="external">3 Web Designs in 3 Weeks</a></li>
<li><a href="https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools" target="_blank" rel="external">Chrome 开发者工具中文手册</a></li>
<li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="external">Chrome扩展开发文档</a></li>
<li><a href="https://github.com/phodal/growth-ebook" target="_blank" rel="external">Growth: 全栈增长工程师指南</a></li>
<li><a href="http://www.gruntjs.net" target="_blank" rel="external">Grunt中文文档</a></li>
<li><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="external">Gulp 入门指南</a></li>
<li><a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="external">gulp中文文档</a></li>
<li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="external">HTTP 接口设计指北</a></li>
<li><a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1" target="_blank" rel="external">HTTP/2.0 中文翻译</a></li>
<li><a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="external">http2讲解</a></li>
<li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external">JSON风格指南</a></li>
<li><a href="http://man.lupaworld.com/content/network/wireshark/index.html" target="_blank" rel="external">Wireshark用户手册</a></li>
<li><a href="https://community.emc.com/thread/194901" target="_blank" rel="external">一站式学习Wireshark</a></li>
<li><a href="http://www.20thingsilearned.com/zh-CN/home" target="_blank" rel="external">关于浏览器和网络的 20 项须知</a></li>
<li><a href="http://coderlmn.github.io/code-standards/" target="_blank" rel="external">前端代码规范 及 最佳实践</a></li>
<li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="external">前端开发体系建设日记</a></li>
<li><a href="https://github.com/hacke2/hacke2.github.io/issues/1" target="_blank" rel="external">前端资源分享（一）</a></li>
<li><a href="https://github.com/hacke2/hacke2.github.io/issues/3" target="_blank" rel="external">前端资源分享（二）</a></li>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
<li><a href="http://jinlong.github.io/2013/08/29/devtoolsecrets/" target="_blank" rel="external">浏览器开发工具的秘密</a></li>
<li><a href="https://github.com/AlloyTeam/Mars" target="_blank" rel="external">移动Web前端知识库</a></li>
<li><a href="https://github.com/hoosin/mobile-web-favorites" target="_blank" rel="external">移动前端开发收藏夹</a></li>
</ul>
<h3 id="WEB服务器"><a href="#WEB服务器" class="headerlink" title="WEB服务器"></a>WEB服务器</h3><ul>
<li><a href="http://works.jinbuguo.com/apache/menu22/index.html" target="_blank" rel="external">Apache 中文手册</a></li>
<li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="external">Nginx开发从入门到精通</a> (淘宝团队出品)</li>
<li><a href="http://www.ttlsa.com/nginx/nginx-stu-pdf/" target="_blank" rel="external">Nginx教程从入门到精通</a> (PDF版本，运维生存时间出品)</li>
</ul>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul>
<li><a href="https://softwaredownload.gitbooks.io/openwrt-fanqiang/content/" target="_blank" rel="external">OpenWrt智能、自动、透明翻墙路由器教程</a></li>
<li><a href="https://community.emc.com/docs/DOC-16067" target="_blank" rel="external">SAN 管理入门系列</a></li>
<li><a href="http://sketchcn.com/sketch-chinese-user-manual.html#introduce" target="_blank" rel="external">Sketch 中文手册</a></li>
<li><a href="http://ifeve.com/perfbook/" target="_blank" rel="external">深入理解并行编程</a></li>
</ul>
<h3 id="函数式概念"><a href="#函数式概念" class="headerlink" title="函数式概念"></a>函数式概念</h3><ul>
<li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="external">傻瓜函数编程</a></li>
</ul>
<h3 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h3><ul>
<li><a href="http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf" target="_blank" rel="external">走向分布式</a> (PDF)</li>
</ul>
<h3 id="在线教育"><a href="#在线教育" class="headerlink" title="在线教育"></a>在线教育</h3><ul>
<li><a href="http://edu.51cto.com" target="_blank" rel="external">51CTO学院</a></li>
<li><a href="https://www.codecademy.com/?locale_code=zh" target="_blank" rel="external">Codecademy</a></li>
<li><a href="https://www.codeschool.com" target="_blank" rel="external">CodeSchool</a></li>
<li><a href="https://www.coursera.org/courses?orderby=upcoming&amp;lngs=zh" target="_blank" rel="external">Coursera</a></li>
<li><a href="https://learnxinyminutes.com" target="_blank" rel="external">Learn X in Y minutes</a> (数十种语言快速入门教程)</li>
<li><a href="https://www.shiyanlou.com" target="_blank" rel="external">shiyanlou</a></li>
<li><a href="https://teamtreehouse.com" target="_blank" rel="external">TeamTreeHouse</a></li>
<li><a href="https://www.udacity.com" target="_blank" rel="external">Udacity</a></li>
<li><a href="https://www.xuetangx.com" target="_blank" rel="external">xuetangX</a></li>
<li><a href="http://www.imooc.com/course/list" target="_blank" rel="external">慕课网</a> (丰富的移动端开发、php开发、web前端、html5教程以及css3视频教程等课程资源)</li>
<li><a href="http://www.jikexueyuan.com" target="_blank" rel="external">极客学院</a></li>
<li><a href="http://www.jisuanke.com" target="_blank" rel="external">计蒜客</a></li>
</ul>
<h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><ul>
<li><a href="https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/" target="_blank" rel="external">Spark 编程指南简体中文版</a></li>
<li><a href="https://code.csdn.net/CODE_Translation/spark_matei_phd" target="_blank" rel="external">大型集群上的快速和通用数据处理架构</a></li>
<li><a href="https://github.com/Flowerowl/Big-Data-Resources" target="_blank" rel="external">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li>
<li><a href="https://github.com/linyiqun/DataMiningAlgorithm" target="_blank" rel="external">数据挖掘中经典的算法实现和详细的注释</a></li>
<li><a href="http://dataminingguide.books.yourtion.com" target="_blank" rel="external">面向程序员的数据挖掘指南</a></li>
</ul>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li><a href="http://man.chinaunix.net/linux/debian/reference/reference.zh-cn.html" target="_blank" rel="external">Debian 参考手册 </a></li>
<li><a href="https://github.com/yeasy/docker_practice" target="_blank" rel="external">Docker —— 从入门到实践</a></li>
<li><a href="https://github.com/widuu/chinese_docker" target="_blank" rel="external">Docker中文指南</a></li>
<li><a href="http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1" target="_blank" rel="external">Docker入门实战</a></li>
<li><a href="http://www.freebsd.org/doc/zh_CN.UTF-8/books/handbook/" target="_blank" rel="external">FreeBSD 使用手册</a></li>
<li><a href="http://freeradius.akagi201.org" target="_blank" rel="external">FreeRADIUS新手入门</a></li>
<li><a href="https://tinylab.gitbooks.io/linux-doc/content/zh-cn/" target="_blank" rel="external">Linux Documentation (中文版)</a></li>
<li><a href="http://happypeter.github.io/LGCB/book/" target="_blank" rel="external">Linux Guide for Complete Beginners</a></li>
<li><a href="http://works.jinbuguo.com/lfs/lfs62/index.html" target="_blank" rel="external">Linux 构建指南</a></li>
<li><a href="http://sourceforge.net/projects/elpi/" target="_blank" rel="external">Linux 系统高级编程</a></li>
<li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="external">Linux工具快速教程</a></li>
<li><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="external">Mac 开发配置手册</a></li>
<li><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="external">Operating Systems: Three Easy Pieces</a></li>
<li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="external">The Linux Command Line</a> (中英文版)</li>
<li><a href="http://wiki.ubuntu.org.cn/UbuntuManual" target="_blank" rel="external">Ubuntu 参考手册 </a></li>
<li><a href="https://www.gitbook.com/book/objectkuan/ucore-docs/details" target="_blank" rel="external">uCore Lab: Operating System Course in Tsinghua University</a></li>
<li><a href="http://cb.vu/unixtoolbox_zh_CN.xhtml" target="_blank" rel="external">UNIX TOOLBOX</a></li>
<li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="external">命令行的艺术</a></li>
<li><a href="https://tinylab.gitbooks.io/elinux/content/zh/" target="_blank" rel="external">嵌入式 Linux 知识库 (eLinux.org 中文版)</a></li>
<li><a href="http://i.linuxtoy.org/docs/guide/index.html" target="_blank" rel="external">开源世界旅行手册</a></li>
<li><a href="http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html" target="_blank" rel="external">深入分析Linux内核源码</a></li>
<li><a href="https://github.com/tobegit3hub/understand_linux_process" target="_blank" rel="external">理解Linux进程</a></li>
<li><a href="http://vbird.dic.ksu.edu.tw/linux_basic/linux_basic.php" target="_blank" rel="external">鸟哥的 Linux 私房菜 基础学习篇</a></li>
<li><a href="http://vbird.dic.ksu.edu.tw/linux_server/" target="_blank" rel="external">鸟哥的 Linux 私房菜 服务器架设篇</a></li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li><a href="http://redisbook.com" target="_blank" rel="external">Redis 设计与实现</a></li>
<li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn" target="_blank" rel="external">The Little MongoDB Book 中文版</a></li>
</ul>
<h3 id="智能系统"><a href="#智能系统" class="headerlink" title="智能系统"></a>智能系统</h3><ul>
<li><a href="https://github.com/phodal/designiot" target="_blank" rel="external">一步步搭建物联网系统</a></li>
</ul>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
</ul>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">Git - 简易指南</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="external">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li>
<li><a href="http://gitbook.liuhui998.com" target="_blank" rel="external">Git Community Book 中文版</a></li>
<li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="external">git-flow 备忘清单</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="external">Git magic</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="external">Git Magic</a></li>
<li><a href="http://gitref.justjavac.com" target="_blank" rel="external">Git 参考手册</a></li>
<li><a href="https://github.com/waylau/github-help" target="_blank" rel="external">Github帮助文档</a></li>
<li><a href="https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/" target="_blank" rel="external">GitHub秘籍</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a> （本文由 <a href="http://weibo.com/liaoxuefeng" target="_blank" rel="external">@廖雪峰</a> 创作，如果觉得本教程对您有帮助，可以去 <a href="https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437" target="_blank" rel="external">iTunes</a> 购买）</li>
<li><a href="https://github.com/gotgit/gotgithub" target="_blank" rel="external">Got GitHub</a></li>
<li><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="external">GotGitHub</a></li>
<li><a href="http://bucunzai.net/hginit/" target="_blank" rel="external">HgInit (中文版)</a></li>
<li><a href="https://www.mercurial-scm.org/wiki/ChineseTutorial" target="_blank" rel="external">Mercurial 使用教程</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Pro Git</a></li>
<li><a href="https://www.gitbook.com/book/0532/progit/details" target="_blank" rel="external">Pro Git 中文版</a> (整理在gitbook上)</li>
<li><a href="http://svnbook.red-bean.com/nightly/zh/index.html" target="_blank" rel="external">svn 手册</a></li>
<li><a href="http://pcottle.github.io/learnGitBranching/" target="_blank" rel="external">学习 Git 分支</a> (点击右下角按钮可切换至简体及正体中文)</li>
<li><a href="http://igit.linuxtoy.org/index.html" target="_blank" rel="external">沉浸式学 Git</a></li>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">猴子都能懂的GIT入门</a></li>
</ul>
<h3 id="程序员杂谈"><a href="#程序员杂谈" class="headerlink" title="程序员杂谈"></a>程序员杂谈</h3><ul>
<li><a href="http://www.kancloud.cn/kancloud/a-programmer-prepares" target="_blank" rel="external">程序员的自我修养</a></li>
</ul>
<h3 id="管理和监控"><a href="#管理和监控" class="headerlink" title="管理和监控"></a>管理和监控</h3><ul>
<li><a href="https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details" target="_blank" rel="external">ElasticSearch 权威指南</a></li>
<li><a href="http://es.xiaoleilu.com" target="_blank" rel="external">Elasticsearch 权威指南（中文版）</a></li>
<li><a href="http://kibana.logstash.es" target="_blank" rel="external">ELKstack 中文指南</a></li>
<li><a href="https://github.com/chenryn/logstash-best-practice-cn" target="_blank" rel="external">Logstash 最佳实践</a></li>
<li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="external">Mastering Elasticsearch(中文版)</a></li>
<li><a href="http://bbs.konotes.org/workdoc/puppet-27/" target="_blank" rel="external">Puppet 2.7 Cookbook 中文版</a></li>
</ul>
<h3 id="编程艺术"><a href="#编程艺术" class="headerlink" title="编程艺术"></a>编程艺术</h3><ul>
<li><a href="http://read.douban.com/ebook/4972883/" target="_blank" rel="external">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)</li>
<li><a href="http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print" target="_blank" rel="external">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-by-July" target="_blank" rel="external">程序员编程艺术</a></li>
<li><a href="http://www.kancloud.cn/kancloud/intro-to-prog/52592" target="_blank" rel="external">编程入门指南</a></li>
</ul>
<h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><ul>
<li><a href="https://github.com/DeathKing/Learning-SICP" target="_blank" rel="external">《计算机程序的结构和解释》公开课 翻译项目</a></li>
</ul>
<h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ul>
<li><a href="http://exvim.github.io/docs-zh/intro/" target="_blank" rel="external">exvim–vim 改良成IDE项目</a></li>
<li><a href="https://github.com/vimcn/vimcdoc" target="_blank" rel="external">Vim中文文档</a></li>
<li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="external">所需即所获：像 IDE 一样使用 vim</a></li>
<li><a href="http://learnvimscriptthehardway.onefloweroneworld.com" target="_blank" rel="external">笨方法学Vimscript 中译本</a></li>
</ul>
<h3 id="计算机图形学"><a href="#计算机图形学" class="headerlink" title="计算机图形学"></a>计算机图形学</h3><ul>
<li><a href="https://github.com/zilongshanren/opengl-tutorials" target="_blank" rel="external">OpenGL 教程</a></li>
</ul>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul>
<li><a href="http://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="external">史上最全设计模式导学目录</a></li>
<li><a href="https://github.com/me115/design_patterns" target="_blank" rel="external">图说设计模式</a></li>
</ul>
<h3 id="软件开发方法"><a href="#软件开发方法" class="headerlink" title="软件开发方法"></a>软件开发方法</h3><ul>
<li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="external">傻瓜函数编程</a> (《Functional Programming For The Rest of Us》中文版)</li>
<li><a href="http://www.infoq.com/cn/minibooks/scrum-xp-from-the-trenches" target="_blank" rel="external">硝烟中的 Scrum 和 XP</a></li>
</ul>
<h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><ul>
<li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external">GNU make 指南</a></li>
<li><a href="https://github.com/waylau/Gradle-2-User-Guide" target="_blank" rel="external">Gradle 2 用户指南</a></li>
<li><a href="http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2" target="_blank" rel="external">Gradle 中文使用文档</a></li>
<li><a href="http://local.joelonsoftware.com/wiki/Chinese_(Simplified" target="_blank" rel="external">Joel谈软件</a>)</li>
<li><a href="https://github.com/fool2fish/selenium-doc" target="_blank" rel="external">selenium 中文文档</a></li>
<li><a href="http://www.ituring.com.cn/book/1143" target="_blank" rel="external">开源软件架构</a></li>
<li><a href="http://article.yeeyan.org/view/2251/94882" target="_blank" rel="external">持续集成（第二版）</a> (译言网)</li>
<li><a href="http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81" target="_blank" rel="external">約耳談軟體(Joel on Software)</a></li>
<li><a href="https://github.com/ecomfe/spec" target="_blank" rel="external">编码规范</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-ap/" target="_blank" rel="external">让开发自动化系列专栏</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-cq/" target="_blank" rel="external">追求代码质量</a></li>
</ul>
<h2 id="语言相关"><a href="#语言相关" class="headerlink" title="语言相关"></a>语言相关</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul>
<li><a href="http://www.apkbus.com/design/index.html" target="_blank" rel="external">Android Design(中文版)</a></li>
<li><a href="https://github.com/CharonChui/AndroidNote" target="_blank" rel="external">Android Note(开发过程中积累的知识点)</a></li>
<li><a href="http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">Android6.0新特性详解</a></li>
<li><a href="http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android学习之路</a></li>
<li><a href="https://github.com/bboyfeiyu/android-tech-frontier" target="_blank" rel="external">Android开发技术前线(android-tech-frontier)</a></li>
<li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Google Android官方培训课程中文版</a></li>
<li>Google Material Design 正體中文版 (<a href="https://wcc723.gitbooks.io/google_design_translate/content/style-icons.html" target="_blank" rel="external">译本一</a> <a href="https://github.com/1sters/material_design_zh" target="_blank" rel="external">译本二</a>)</li>
<li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external">Material Design 中文版</a></li>
<li><a href="https://github.com/FX-Max/Point-of-Android" target="_blank" rel="external">Point-of-Android</a> Android 一些重要知识点解析整理</li>
</ul>
<h3 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h3><ul>
<li><a href="http://awk.readthedocs.org/en/latest/index.html" target="_blank" rel="external">awk中文指南</a></li>
<li><a href="https://github.com/wuzhouhui/awk" target="_blank" rel="external">awk程序设计语言</a></li>
</ul>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><ul>
<li><a href="http://c-faq-chn.sourceforge.net/ccfaq/ccfaq.html" target="_blank" rel="external">C 语言常见问题集</a></li>
<li><a href="http://doc.lellansin.com" target="_blank" rel="external">C/C++ 学习教程</a></li>
<li><a href="http://docs.linuxtone.org/ebooks/C&amp;CPP/c/" target="_blank" rel="external">Linux C 编程一站式学习</a></li>
<li><a href="https://github.com/limingth/NCCL" target="_blank" rel="external">新概念 C 语言教程</a></li>
</ul>
<h3 id="C-Sharp"><a href="#C-Sharp" class="headerlink" title="C Sharp"></a>C Sharp</h3><ul>
<li><a href="http://book.douban.com/subject/24827879/" target="_blank" rel="external">精通C#(第6版) </a></li>
</ul>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><ul>
<li><a href="https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md" target="_blank" rel="external">100个gcc小技巧</a></li>
<li><a href="https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md" target="_blank" rel="external">100个gdb小技巧</a></li>
<li><a href="https://tinylab.gitbooks.io/cbook/content/" target="_blank" rel="external">C 语言编程透视</a></li>
<li><a href="https://github.com/andycai/cprimer" target="_blank" rel="external">C/C++ Primer</a> - @andycai</li>
<li><a href="http://www.sunistudio.com/cppfaq/" target="_blank" rel="external">C++ FAQ LITE(中文版)</a></li>
<li><a href="https://github.com/Mooophy/Cpp-Primer" target="_blank" rel="external">C++ Primer 5th Answers</a></li>
<li><a href="https://github.com/wuye9036/CppTemplateTutorial" target="_blank" rel="external">C++ Template 进阶指南</a></li>
<li><a href="http://www.prglab.com/cms/" target="_blank" rel="external">C++ 基础教程</a></li>
<li><a href="https://chenxiaowei.gitbooks.io/cpp_concurrency_in_action/content/" target="_blank" rel="external">C++ 并发编程(基于C++11)</a></li>
<li><a href="https://github.com/forhappy/Cplusplus-Concurrency-In-Practice" target="_blank" rel="external">C++ 并发编程指南</a></li>
<li><a href="https://github.com/leeyiw/cgdb-manual-in-chinese" target="_blank" rel="external">CGDB中文手册</a></li>
<li><a href="http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf" target="_blank" rel="external">Cmake 实践</a> (PDF版)</li>
<li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external">GNU make 指南</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="external">Google C++ 风格指南</a></li>
<li><a href="http://www.kuqin.com/qtdocument/tutorial.html" target="_blank" rel="external">QT 教程</a></li>
<li><a href="https://github.com/anjuke/zguide-cn" target="_blank" rel="external">ZMQ 指南</a></li>
<li><a href="http://www.ituring.com.cn/book/1203" target="_blank" rel="external">像计算机科学家一样思考（C++版)</a> (《How To Think Like a Computer Scientist: C++ Version》中文版)</li>
<li><a href="http://www.nowamagic.net/librarys/books/contents/c" target="_blank" rel="external">简单易懂的C魔法</a></li>
<li><a href="http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf" target="_blank" rel="external">跟我一起写Makefile(PDF)</a> (PDF)</li>
</ul>
<h3 id="CoffeeScript"><a href="#CoffeeScript" class="headerlink" title="CoffeeScript"></a>CoffeeScript</h3><ul>
<li><a href="http://coffee-script.org" target="_blank" rel="external">CoffeeScript 中文</a></li>
<li><a href="https://github.com/elrrrrrrr/coffeescript-style-guide/blob/master/README-ZH.md" target="_blank" rel="external">CoffeeScript 编程风格指南</a></li>
</ul>
<h3 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h3><ul>
<li><a href="http://dart.lidian.info/wiki/Language_Tour" target="_blank" rel="external">Dart 语言导览</a></li>
</ul>
<h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><ul>
<li><a href="https://github.com/looly/elasticsearch-definitive-guide-cn" target="_blank" rel="external">Elasticsearch 权威指南</a> （《Elasticsearch the definitive guide》中文版）</li>
<li><a href="http://kibana.logstash.es" target="_blank" rel="external">ELKstack 中文指南</a></li>
<li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="external">Mastering Elasticsearch(中文版)</a></li>
</ul>
<h3 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h3><ul>
<li><a href="https://github.com/Ljzn/ElixrGettingStartedChinese" target="_blank" rel="external">Elixir Getting Started 中文翻译</a></li>
<li><a href="https://elixirschool.com/cn/" target="_blank" rel="external">Elixir 编程语言教程</a> (Elixir School)</li>
<li><a href="https://github.com/Ljzn/MetaProgrammingInElixirChinese" target="_blank" rel="external">Elixir元编程与DSL 中文翻译</a></li>
<li><a href="https://mydearxym.gitbooks.io/phoenix-doc-in-chinese/content/" target="_blank" rel="external">Phoenix 框架中文文档</a></li>
</ul>
<h3 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h3><ul>
<li><a href="https://github.com/liancheng/cpie-cn" target="_blank" rel="external">Erlang 并发编程</a> (《Concurrent Programming in Erlang (Part I)》中文版)</li>
</ul>
<h3 id="Fortran"><a href="#Fortran" class="headerlink" title="Fortran"></a>Fortran</h3><ul>
<li><a href="http://micro.ustc.edu.cn/Fortran/ZJDing/" target="_blank" rel="external">Fortran77和90/95编程入门</a></li>
</ul>
<h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><ul>
<li><a href="http://www.hellogcc.org/effective_go.html" target="_blank" rel="external">Effective Go</a></li>
<li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="external">Go Web 编程</a></li>
<li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="external">Go 入门指南</a> (《The Way to Go》中文版)</li>
<li><a href="https://github.com/golang-china/golangdoc.translations" target="_blank" rel="external">Go 官方文档翻译</a></li>
<li><a href="http://go-tour-zh.appsp0t.com" target="_blank" rel="external">Go 指南</a> (《A Tour of Go》中文版)</li>
<li><a href="https://github.com/songleo/the-little-go-book_ZH_CN" target="_blank" rel="external">Go 简易教程</a> (《<a href="https://github.com/karlseguin/the-little-go-book" target="_blank" rel="external">The Little Go Book</a>》中文版)</li>
<li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="external">Go 编程基础</a></li>
<li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example" target="_blank" rel="external">Go 语言标准库</a></li>
<li><a href="https://github.com/hyper-carrot/go_command_tutorial" target="_blank" rel="external">Go命令教程</a></li>
<li><a href="https://github.com/astaxie/Go-in-Action" target="_blank" rel="external">Go实战开发</a></li>
<li><a href="https://github.com/achun/Go-Blog-In-Action" target="_blank" rel="external">Go语言博客实践</a></li>
<li><a href="http://blog.csdn.net/dc_726/article/details/46565241" target="_blank" rel="external">Java程序员的Golang入门指南</a></li>
<li><a href="https://github.com/astaxie/NPWG_zh" target="_blank" rel="external">Network programming with Go 中文翻译版本</a></li>
<li><a href="http://gorevel.cn/docs/manual/index.html" target="_blank" rel="external">Revel 框架手册</a></li>
<li><a href="http://mikespook.com/learning-go/" target="_blank" rel="external">学习Go语言</a></li>
</ul>
<h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><ul>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-pg/" target="_blank" rel="external">实战 Groovy 系列</a></li>
</ul>
<h3 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h3><ul>
<li><a href="http://learnyoua.haskell.sg" target="_blank" rel="external">Haskell 趣学指南</a></li>
<li><a href="http://cnhaskell.com" target="_blank" rel="external">Real World Haskell 中文版</a></li>
</ul>
<h3 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML / CSS"></a>HTML / CSS</h3><ul>
<li><a href="https://github.com/waylau/css3-tutorial" target="_blank" rel="external">CSS3 Tutorial 《CSS3 教程》</a></li>
<li><a href="http://css.doyoe.com" target="_blank" rel="external">CSS参考手册</a></li>
<li><a href="http://yanxyz.github.io/emmet-docs/" target="_blank" rel="external">Emmet 文档</a></li>
<li><a href="http://www.w3school.com.cn/html5/" target="_blank" rel="external">HTML5 教程</a></li>
<li><a href="http://codeguide.bootcss.com" target="_blank" rel="external">HTML和CSS编码规范</a></li>
<li><a href="http://sass-guidelin.es/zh/" target="_blank" rel="external">Sass Guidelines 中文</a></li>
<li><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="external">前端代码规范</a> (腾讯 AlloyTeam 团队)</li>
<li><a href="http://zh.learnlayout.com" target="_blank" rel="external">学习CSS布局</a></li>
<li><a href="https://github.com/chadluo/CSS-Guidelines/blob/master/README.md" target="_blank" rel="external">通用 CSS 笔记、建议与指导</a></li>
</ul>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><ul>
<li><a href="http://nilsun.github.io/apple-watch/" target="_blank" rel="external">Apple Watch开发初探</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/" target="_blank" rel="external">Google Objective-C Style Guide 中文版</a></li>
<li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html" target="_blank" rel="external">iOS7人机界面指南</a></li>
<li><a href="https://github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="external">iOS开发60分钟入门</a></li>
<li><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="external">iPhone 6 屏幕揭秘</a></li>
<li><a href="https://github.com/jkyin/Subtitle" target="_blank" rel="external">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li>
</ul>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul>
<li><a href="https://github.com/waylau/activiti-5.x-user-guide" target="_blank" rel="external">Activiti 5.x 用户指南</a></li>
<li><a href="https://github.com/waylau/apache-mina-2.x-user-guide" target="_blank" rel="external">Apache MINA 2 用户指南</a></li>
<li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="external">Apache Shiro 用户指南</a></li>
<li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="external">Google Java编程风格指南</a></li>
<li><a href="https://github.com/waylau/h2-database-doc" target="_blank" rel="external">H2 Database 教程</a></li>
<li><a href="https://github.com/waylau/servlet-3.1-specification" target="_blank" rel="external">Java Servlet 3.1 规范</a></li>
<li><a href="https://github.com/waylau/java-code-conventions" target="_blank" rel="external">Java 编码规范</a></li>
<li><a href="https://github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="external">Jersey 2.x 用户指南</a></li>
<li><a href="https://github.com/waylau/jsse-reference-guide" target="_blank" rel="external">JSSE 参考指南</a></li>
<li><a href="http://mybatis.github.io/mybatis-3/zh/index.html" target="_blank" rel="external">MyBatis中文文档</a></li>
<li><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="external">Netty 4.x 用户指南</a></li>
<li><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="external">Netty 实战(精髓)</a></li>
<li><a href="https://github.com/waylau/rest-in-action" target="_blank" rel="external">REST 实战</a></li>
<li><a href="https://github.com/qibaoguang/Spring-Boot-Reference-Guide" target="_blank" rel="external">Spring Boot参考指南</a> (翻译中)</li>
<li><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="external">Spring Framework 4.x参考文档</a></li>
<li><a href="https://github.com/waylau/RestDemo" target="_blank" rel="external">用jersey构建REST服务</a></li>
</ul>
<h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><ul>
<li><a href="https://github.com/adamlu/javascript-style-guide" target="_blank" rel="external">Airbnb JavaScript 规范</a></li>
<li>AngularJS<ul>
<li><a href="https://github.com/peiransun/angularjs-cn" target="_blank" rel="external">AngularJS中译本</a></li>
<li><a href="https://github.com/zensh/AngularjsTutorial_cn" target="_blank" rel="external">AngularJS入门教程</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="external">AngularJS最佳实践和风格指南</a></li>
<li><a href="http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/" target="_blank" rel="external">在Windows环境下用Yeoman构建AngularJS项目</a></li>
<li><a href="https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="external">构建自己的AngularJS</a></li>
</ul>
</li>
<li>backbone.js<ul>
<li><a href="http://www.css88.com/doc/backbone/" target="_blank" rel="external">backbone.js中文文档</a></li>
<li><a href="http://www.the5fire.com/backbone-js-tutorials-pdf-download.html" target="_blank" rel="external">backbone.js入门教程</a> (PDF)</li>
<li><a href="https://github.com/the5fire/backbonejs-learning-note" target="_blank" rel="external">Backbone.js入门教程第二版</a></li>
<li><a href="http://feliving.github.io/developing-backbone-applications" target="_blank" rel="external">Developing Backbone.js Applications(中文版)</a></li>
</ul>
</li>
<li><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="external">Chrome扩展及应用开发</a></li>
<li>CoffeeScript<ul>
<li><a href="https://github.com/geekplux/coffeescript-style-guide" target="_blank" rel="external">CoffeeScript 编码风格指南</a></li>
</ul>
</li>
<li>D3.js<ul>
<li><a href="http://www.ourd3js.com/wordpress/?cat=2" target="_blank" rel="external">D3.js 入门系列</a> (还有进阶、高级等系列)</li>
<li><a href="https://github.com/mbostock/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C" target="_blank" rel="external">官方API文档</a></li>
<li><a href="http://blog.csdn.net/zhang__tianxu/article/category/1623437" target="_blank" rel="external">张天旭的D3教程</a></li>
<li><a href="http://www.cnblogs.com/winleisure/tag/D3.js/" target="_blank" rel="external">楚狂人的D3教程</a></li>
</ul>
</li>
<li><a href="http://es6.ruanyifeng.com" target="_blank" rel="external">ECMAScript 6 入门</a> (作者：阮一峰)</li>
<li>ExtJS<ul>
<li><a href="http://extjs-doc-cn.github.io/ext4api/" target="_blank" rel="external">Ext4.1.0 中文文档</a></li>
</ul>
</li>
<li><a href="http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html" target="_blank" rel="external">Google JavaScript 代码风格指南</a></li>
<li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external">Google JSON 风格指南</a></li>
<li>impress.js<ul>
<li><a href="https://github.com/kokdemo/impress.js-tutorial-in-Chinese" target="_blank" rel="external">impress.js的中文教程</a></li>
</ul>
</li>
<li><a href="http://liubin.github.io/promises-book/" target="_blank" rel="external">JavaScript Promise迷你书</a></li>
<li><a href="http://typeof.net/s/jsmech/" target="_blank" rel="external">Javascript 原理</a></li>
<li><a href="http://javascript.ruanyifeng.com" target="_blank" rel="external">JavaScript 标准参考教程（alpha）</a></li>
<li><a href="https://github.com/jayli/javascript-patterns" target="_blank" rel="external">《JavaScript 模式》</a> “JavaScript patterns”中译本</li>
<li><a href="https://github.com/justjavac/12-javascript-quirks" target="_blank" rel="external">javascript 的 12 个怪癖</a></li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">JavaScript 秘密花园</a></li>
<li><a href="http://icodeit.org/jsccp/" target="_blank" rel="external">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</li>
<li><a href="http://pij.robinqu.me" target="_blank" rel="external">Javascript编程指南</a> (<a href="https://github.com/RobinQu/Programing-In-Javascript" target="_blank" rel="external">源码</a>)</li>
<li>jQuery<ul>
<li><a href="http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="external">How to write jQuery plugin</a></li>
<li><a href="http://www.nowamagic.net/librarys/books/contents/jquery" target="_blank" rel="external">简单易懂的JQuery魔法</a></li>
</ul>
</li>
<li>Meteor<ul>
<li><a href="http://zh.discovermeteor.com" target="_blank" rel="external">Discover Meteor</a></li>
</ul>
</li>
<li>Node.js<ul>
<li><a href="http://expressjs.jser.us" target="_blank" rel="external">express.js 中文文档</a></li>
<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="external">Express框架</a></li>
<li><a href="https://github.com/guo-yu/koa-guide" target="_blank" rel="external">koa 中文文档</a></li>
<li><a href="https://www.npmjs.com/package/learnyounode-zh-cn" target="_blank" rel="external">Learn You The Node.js For Much Win! (中文版)</a></li>
<li><a href="http://i5ting.github.io/node-debug-tutorial/" target="_blank" rel="external">Node debug 三法三例</a></li>
<li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="external">Node.js 包教不包会</a></li>
<li><a href="https://github.com/nodejs-tw/nodejs-wiki-book" target="_blank" rel="external">Nodejs Wiki Book</a> (繁体中文)</li>
<li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="external">nodejs中文文档</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node入门</a></li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a></li>
<li><a href="https://github.com/nswbmw/N-blog" target="_blank" rel="external">使用 Express + MongoDB 搭建多人博客</a></li>
</ul>
</li>
<li>React.js<ul>
<li><a href="https://github.com/theJian/build-a-hn-front-page" target="_blank" rel="external">Learn React &amp; Webpack by building the Hacker News front page</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/react-native/" target="_blank" rel="external">React Native 中文文档(含最新Android内容)</a></li>
<li><a href="https://github.com/fakefish/react-webpack-cookbook" target="_blank" rel="external">React webpack-cookbook</a></li>
<li><a href="http://fraserxu.me/intro-to-react/" target="_blank" rel="external">React 入门教程</a></li>
<li><a href="http://reactjs.cn" target="_blank" rel="external">React.js 中文文档</a></li>
</ul>
</li>
<li>underscore.js<ul>
<li><a href="http://learningcn.com/underscore/" target="_blank" rel="external">Underscore.js中文文档</a></li>
</ul>
</li>
<li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You-Dont-Know-JS</a> (深入JavaScript语言核心机制的系列图书)</li>
<li>Zepto.js<ul>
<li><a href="http://mweb.baidu.com/zeptoapi/" target="_blank" rel="external">Zepto.js 中文文档</a></li>
</ul>
</li>
<li><a href="http://justjavac.com/named-function-expressions-demystified.html" target="_blank" rel="external">命名函数表达式探秘</a>  (注:原文由<a href="http://www.cn-cuckoo.com" target="_blank" rel="external">为之漫笔</a> 翻译，原始地址无法打开，所以此处地址为我博客上的备份)</li>
<li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="external">学用 JavaScript 设计模式</a> (开源中国)</li>
<li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">深入理解JavaScript系列</a></li>
</ul>
<h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><ul>
<li><a href="http://www.dralpha.com/zh/tech/tech.htm" target="_blank" rel="external">LaTeX 笔记</a></li>
<li><a href="http://ctan.org/pkg/lshort-zh-cn" target="_blank" rel="external">一份不太简短的 LaTeX2ε 介绍</a></li>
<li><a href="https://github.com/49951331/graduate-project-102pj/blob/master/docs/latex123.pdf" target="_blank" rel="external">大家來學 LaTeX</a> (PDF)</li>
</ul>
<h3 id="LISP"><a href="#LISP" class="headerlink" title="LISP"></a>LISP</h3><ul>
<li><a href="http://acl.readthedocs.org/en/latest/" target="_blank" rel="external">ANSI Common Lisp 中文翻译版</a></li>
<li><a href="http://www.ituring.com.cn/minibook/862" target="_blank" rel="external">Common Lisp 高级编程技术</a> (《On Lisp》中文版)</li>
</ul>
<h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><ul>
<li><a href="http://www.w3cschool.cc/manual/lua53doc/contents.html" target="_blank" rel="external">Lua 5.3 参考手册</a></li>
</ul>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul>
<li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="external">Markdown 快速入门</a></li>
<li><a href="http://www.jianshu.com/p/7bd23251da0a" target="_blank" rel="external">Markdown 简明教程</a></li>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 语法说明</a></li>
<li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">献给写作者的 Markdown 新手指南</a></li>
</ul>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node 入门</a></li>
<li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="external">The NodeJS 中文文档</a>（社区翻译）</li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a> 阿里出品，很好的入门资料</li>
</ul>
<h3 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h3><ul>
<li><a href="https://github.com/fayland/chinese-perl-book" target="_blank" rel="external">Master Perl Today</a></li>
<li><a href="https://github.com/horus/modern_perl_book" target="_blank" rel="external">《Modern Perl》中文版</a></li>
<li><a href="http://www.cbi.pku.edu.cn/chinese/documents/perl/index.htm" target="_blank" rel="external">Perl 5 教程</a></li>
<li><a href="http://www.yiibai.com/perl" target="_blank" rel="external">Perl 教程</a></li>
</ul>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul>
<li><a href="http://wulijun.github.io/php-the-right-way/" target="_blank" rel="external">PHP 之道</a></li>
<li><a href="http://php.net/manual/zh/" target="_blank" rel="external">PHP5中文手册</a></li>
<li><a href="http://www.walu.cc/phpbook/preface.md" target="_blank" rel="external">PHP扩展开发及内核应用</a></li>
<li><a href="https://wusuopu.gitbooks.io/symfony2_tutorial/content" target="_blank" rel="external">Symfony2 实例教程</a></li>
<li><a href="http://www.php-internals.com/book/" target="_blank" rel="external">深入理解 PHP 内核</a></li>
</ul>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul>
<li><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="external">Django book 2.0</a></li>
<li><a href="http://docspy3zh.readthedocs.org/en/latest/" target="_blank" rel="external">Python 3 文档(简体中文) 3.2.2 documentation</a></li>
<li><a href="http://www.pythondoc.com" target="_blank" rel="external">Python 中文学习大本营</a></li>
<li><a href="https://github.com/jiechic/diveintopython3" target="_blank" rel="external">深入 Python 3</a></li>
<li><a href="http://old.sebug.net/paper/books/LearnPythonTheHardWay/" target="_blank" rel="external">笨办法学 Python</a></li>
</ul>
<h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><ul>
<li><a href="http://cran.r-project.org/doc/contrib/Liu-FAQ.pdf" target="_blank" rel="external">153分钟学会 R</a> (PDF)</li>
<li><a href="http://www.biosino.org/R/R-doc/files/R4beg_cn_2.0.pdf" target="_blank" rel="external">《R for beginners》中文版</a> (PDF)</li>
<li><a href="http://cran.r-project.org/doc/contrib/Ding-R-intro_cn.pdf" target="_blank" rel="external">R 导论</a> (《An Introduction to R》中文版) (PDF)</li>
<li><a href="http://yanping.me/shiny-tutorial/" target="_blank" rel="external">用 R 构建 Shiny 应用程序</a> (《Building ‘Shiny’ Applications with R》中文版)</li>
<li><a href="http://cran.r-project.org/doc/contrib/Xu-Statistics_and_R.pdf" target="_blank" rel="external">统计学与 R 读书笔记</a> (PDF)</li>
</ul>
<h3 id="reStructuredText"><a href="#reStructuredText" class="headerlink" title="reStructuredText"></a>reStructuredText</h3><ul>
<li><a href="http://www.pythondoc.com/sphinx/rest.html" target="_blank" rel="external">reStructuredText 入门</a></li>
<li><a href="http://jwch.sdut.edu.cn/book/rst.html" target="_blank" rel="external">reStructuredText 简明教程</a></li>
</ul>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><ul>
<li><a href="https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">Rails 风格指南</a></li>
<li><a href="http://railstutorial-china.org" target="_blank" rel="external">Ruby on Rails Tutorial 原书第 2 版</a></li>
<li><a href="https://ihower.tw/rails4/" target="_blank" rel="external">Ruby on Rails 实战圣经</a></li>
<li><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">Ruby 风格指南</a></li>
<li><a href="http://lrthw.github.io" target="_blank" rel="external">笨方法学 Ruby</a></li>
</ul>
<h3 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h3><ul>
<li><a href="https://github.com/KaiserY/rust-book-chinese" target="_blank" rel="external">Rust 官方教程</a></li>
<li><a href="https://github.com/photino/rust-notes" target="_blank" rel="external">Rust 语言学习笔记</a></li>
<li><a href="https://github.com/rustcc/RustPrimer" target="_blank" rel="external">RustPrimer</a></li>
<li><a href="https://github.com/rustcc/rust-by-example/" target="_blank" rel="external">通过例子学习 Rust</a></li>
</ul>
<h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul>
<li><a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="external">Effective Scala</a></li>
<li><a href="https://www.gitbook.com/book/windor/beginners-guide-to-scala/details" target="_blank" rel="external">Scala 初学者指南</a> (The Neophyte’s Guide to Scala)</li>
<li><a href="http://twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="external">Scala 课堂</a> (Twitter的Scala中文教程)</li>
</ul>
<h3 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h3><ul>
<li><a href="http://deathking.github.io/yast-cn/" target="_blank" rel="external">Scheme 入门教程</a> (《Yet Another Scheme Tutorial》中文版)</li>
</ul>
<h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><ul>
<li><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80" target="_blank" rel="external">Shell 编程基础</a></li>
<li><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="external">Shell 脚本编程30分钟入门</a></li>
<li><a href="http://billie66.github.io/TLCL/book/zh" target="_blank" rel="external">The Linux Command Line 中文版</a></li>
</ul>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul>
<li><a href="https://www.gitbook.com/book/numbbbbb/-the-swift-programming-language-/details" target="_blank" rel="external">《The Swift Programming Language》中文版</a></li>
</ul>
<h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><ul>
<li><a href="http://man.chinaunix.net/newsoft/vi/doc/help.html" target="_blank" rel="external">Vim Manual(中文版)</a></li>
<li><a href="http://www.study-area.org/tips/vim/index.html" target="_blank" rel="external">大家來學 VIM</a></li>
</ul>
<h3 id="Visual-Prolog"><a href="#Visual-Prolog" class="headerlink" title="Visual Prolog"></a>Visual Prolog</h3><ul>
<li><a href="http://wiki.visual-prolog.com/index.php?title=A_Beginners_Guide_to_Visual_Prolog_in_Chinese" target="_blank" rel="external">Visual Prolog 7初学指南</a></li>
<li><a href="http://wiki.visual-prolog.com/index.php?title=Visual_Prolog_for_Tyros_in_Chinese" target="_blank" rel="external">Visual Prolog 7边练边学</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md&quot; target=&quot;_blank&quot; rel=&quot;e
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
      <category term="tools" scheme="http://blog.aezo.cn/categories/extend/tools/"/>
    
    
      <category term="wiki" scheme="http://blog.aezo.cn/tags/wiki/"/>
    
      <category term="book" scheme="http://blog.aezo.cn/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>oracleDBA</title>
    <link href="http://blog.aezo.cn/2016/10/12/db/oracle-dba/"/>
    <id>http://blog.aezo.cn/2016/10/12/db/oracle-dba/</id>
    <published>2016-10-12T13:06:00.000Z</published>
    <updated>2017-09-20T13:49:49.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>注：本文中 aezo/aezo 一般指用户名/密码，local_orcl指配置的本地数据库服务名，remote_orcl指配置的远程数据库服务名。以11g为例</p>
</blockquote>
<h3 id="oracle相关名词和原理"><a href="#oracle相关名词和原理" class="headerlink" title="oracle相关名词和原理"></a>oracle相关名词和原理</h3><ol>
<li>数据库名(DB_NAME)、实例名(INSTANCE_NAME)、以及操作系统环境变量(ORACLE_SID) <a href="http://www.cnblogs.com/advocate/archive/2010/08/20/1804063.html" target="_blank" rel="external">^1</a><ul>
<li><code>DB_NAME</code>: 在每一个运行的oracle数据库中都有一个数据库名(如: orcl)，如果一个服务器程序中创建了两个数据库，则有两个数据库名。</li>
<li><code>INSTANCE_NAME</code>: 数据库实例名则用于和操作系统之间的联系，用于对外部连接时使用。在操作系统中要取得与数据库之间的交互，必须使用数据库实例名(如: orcl)。与数据库名不同，在数据安装或创建数据库之后，实例名可以被修改。例如，要和某一个数据库server连接，就必须知道其数据库实例名，只知道数据库名是没有用的。用户和实例相连接。</li>
<li><code>ORACLE_SID</code>: 有时候简称为SID。在实际中，对于数据库实例名的描述有时使用实例名(instance_name)参数，有时使用ORACLE_SID参数。这两个都是数据库实例名。instance_name参数是ORACLE数据库的参数，此参数可以在参数文件中查询到，而ORACLE_SID参数则是操作系统环境变量，用于和操作系统交互，也就是说在操作系统中要想得到实例名就必须使用ORACLE_SID。此参数与ORACLE_BASE、<code>ORACLE_HOME</code>等用法相同。在数据库安装之后，ORACLE_SID被用于定义数据库参数文件的名称。如：$ORACLE_BASE/admin/DB_NAME/pfile/init$ORACLE_SID.ora。</li>
</ul>
</li>
<li><code>SERVICE_NAME</code>：是网络服务名(如：local_orcl)，可以随意设置。相当于某个数据库实例的别名方便记忆和访问。<code>tnsnames.ora</code>文件中设置的名称（如：<code>local_orcl=(...)</code>），也是登录pl/sql是填写的Database。</li>
</ol>
<h2 id="oracle及pl-sql安装和使用"><a href="#oracle及pl-sql安装和使用" class="headerlink" title="oracle及pl/sql安装和使用"></a>oracle及pl/sql安装和使用</h2><ul>
<li>ORACLE_HOME为<code>D:/java/oracle/product/11.2.0/dbhome_1</code>，<code>%ORACLE_HOME%/bin</code>中为一些可执行程序（如：导入imp.exe、导出exp.exe）</li>
<li>这个只是服务器端才会使用的到</li>
</ul>
<h3 id="pl-sql安装"><a href="#pl-sql安装" class="headerlink" title="pl/sql安装"></a>pl/sql安装</h3><p>Oracle需要装client才能让第三方工具(如pl/sql)通过OCI(Oracle Call Interface)来连接，安装包可以去oracle官网下载Instant Client。</p>
<ul>
<li>将<code>instantclient_10_2</code>(oracle的客户端)，复制到oracle安装目录</li>
<li>安装<code>pl/sql developer</code></li>
<li>配置<code>pl/sql developer</code>首选项中连接项。设置oracle_home为instantclient_10_2的路径，oci为instantclient_10_2下的oci.dll</li>
<li>环境变量中设置<code>TNS_ADMIN=D:\java\oracle\product\instantclient_10_2</code>，并在path末尾加入<code>%TNS_ADMIN%;</code>(否则容易报<code>TNS-12541</code>)</li>
</ul>
<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><ol>
<li>Net Manager的使用<ul>
<li><code>本地-监听程序-LISTENER</code>中的主机要为计算机全名(如：ST-008)。对应文件<code>listener.ora</code></li>
<li><code>本地-服务命名</code>下的都为<code>网络服务名</code>。对应文件<code>tnsnames.ora</code></li>
</ul>
</li>
<li><p>文本操作</p>
<ul>
<li>使用sqlplus登录时，可直接修改<code>$ORACLE_HOME/NETWORK/ADMIN/tnsnames.ora</code></li>
<li>安装了pl/sql，可能需要修改tnsnames.ora的文件路径类似与<code>D:\java\oracle\product\instantclient_10_2\tnsnames.ora</code>。此时oracle自带的tnsnames.ora将会失效</li>
<li><p>配置实例：HOST/PORT分别为远程ip地址和端口，SERVICE_NAME为远程服务名，aezocn为远程服务名别名(本地服务名)</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">aezocn =</div><div class="line">  (DESCRIPTION =</div><div class="line">    (ADDRESS_LIST =</div><div class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.1)(PORT = 1521))</div><div class="line">    )</div><div class="line">    (CONNECT_DATA =</div><div class="line">      (SERVER = DEDICATED)</div><div class="line">      (SERVICE_NAME = orcl)</div><div class="line">    )</div><div class="line">  )</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="创建表空间-2"><a href="#创建表空间-2" class="headerlink" title="创建表空间 ^2"></a>创建表空间 <a href="http://blog.csdn.net/starnight_cbj/article/details/6792364" target="_blank" rel="external">^2</a></h2><p>oracle和mysql不同，此处的创建表空间相当于mysql的创建数据库。创建了表空间并没有创建数据库实例</p>
<ol>
<li>登录：<code>sqlplus / as sysdba</code></li>
<li>创建表空间：<code>create tablespace aezocn datafile &#39;d:/tablespace/aezo&#39; size 800m extent management local segment space management auto;</code> ，要先建好路径 d:/tablespace ，最终会在该目录下建一个 AEZO 的文件(表空间之后可以修改)<ul>
<li>删除表空间：<code>drop tablespace aezocn including contents and datafiles;</code></li>
</ul>
</li>
<li>创建用户：<code>create user aezo identified by aezo default tablespace aezocn;</code></li>
<li>授权<ul>
<li><code>grant create session to aezo;</code></li>
<li><code>grant unlimited tablespace to aezo;</code></li>
<li><code>grant dba to aezo;</code></li>
</ul>
</li>
</ol>
<h2 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h2><p><code>.dmp</code>适合大数据导出，<code>.sql</code>适合小数据导出(表中含有CLOB类型字段则不能导出)</p>
<h3 id="命令行-4"><a href="#命令行-4" class="headerlink" title="命令行 ^4"></a>命令行 <a href="http://blog.csdn.net/studyvcmfc/article/details/5679235" target="_blank" rel="external">^4</a></h3><blockquote>
<ul>
<li>输入 <code>imp/exp 用户名/密码</code> 可根据提示导入导出。<strong>直接cmd运行</strong>。</li>
<li>成功提示 <code>Export terminated successfully [with/without warnings]</code>；失败提示 <code>Export terminated unsuccessfully [with/without warnings]</code></li>
</ul>
</blockquote>
<ol>
<li><p>导出</p>
<ul>
<li><strong>用户模式</strong>：<code>exp system/manager file=d:/exp.dmp owner=scott</code> 导出scott用户的所有对象，前提是system有相关权限<ul>
<li><strong>远程导出</strong>：此时system/manager默认连接的是本地数据库。如果使用<code>exp system/manager@remote_orcl file=d:/exp.dmp owner=scott</code>(remote_orcl为在本地建立的远程数据库网络服务名)则可导出远程数据库的相关数据，下同。</li>
<li>加上 <code>compress=y</code> 表示压缩数据</li>
<li>加上 <code>rows=n</code> 表示不导出数据行，只导出结构</li>
</ul>
</li>
<li>表模式：<code>exp scott/tiger file=d:/exp.dmp tables=emp</code> 导出scott的emp表<ul>
<li>导出其他用户的表：<code>exp system/manager file=d:/exp.dmp tables=scott.emp, scott.dept</code> 导出scott的emp、dept表，用户system需要相关权限</li>
<li>导出部分表数据：<code>exp scott/tiger file=d:/exp.dmp tables=emp query=\&quot; where ename like &#39;%AR%&#39;\&quot;</code></li>
<li>常见错误(EXP-00011)：原因为11g默认创建一个表时不分配segment，只有在插入数据时才会产生。 <a href="http://www.cnblogs.com/yzy-lengzhu/archive/2013/03/11/2953500.html" target="_blank" rel="external">^3</a></li>
</ul>
</li>
<li>导出全部：<code>exp system/manager file=d:/exp.dmp full=y</code><ul>
<li>用户 system/manager 必须具有相关权限</li>
<li>导出的是整个数据库，包括所有的表空间</li>
</ul>
</li>
</ul>
</li>
<li><p>导入</p>
<ul>
<li><strong>用户模式</strong>：<code>imp system/manager file=d:/exp.dmp fromuser=scott touser=aezo ignore=y</code><ul>
<li><code>ignore=y</code>忽略创建错误</li>
<li>不少情况下要先将表彻底删除，然后导入</li>
</ul>
</li>
<li>表模式：<code>imp system/manager file=d:/exp.dmp fromuser=scott tables=emp, dept touser=aezo ignore=y</code><ul>
<li>将scott的表emp、dept导入到用户aezo</li>
<li>此处 file/fromuser/touser 都可以指定多个</li>
</ul>
</li>
<li>导入全部：<code>imp system/manager file=d:/exp.dmp full=y ignore=y</code><ul>
<li>用户 system/manager 必须具有相关权限</li>
<li>导入的是整个数据库，包括所有的表空间</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="pl-sql"><a href="#pl-sql" class="headerlink" title="pl/sql"></a>pl/sql</h3><ul>
<li>pl/sql提供dmp、sql(不支持CLOB类型字段)、pde(pl/sql提供)格式的数据导入导出</li>
<li>方法：<code>Tools - Export Tables/Import Tablse - 选择表导出</code></li>
<li>其中Executable路径为 <code>%ORACLE_HOME%/BIN/exp.exe</code> 和 <code>%ORACLE_HOME%/BIN/imp.exe</code> 如：<code>D:/java/oracle/product/11.2.0/dbhome_1/BIN/exp.exe</code></li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="操作相关"><a href="#操作相关" class="headerlink" title="操作相关"></a>操作相关</h3><ol>
<li>系统<ul>
<li><code>lsnrctl start</code> 启动监听程序(shell命令行运行)。<code>lsnrctl status</code> 查看服务状态</li>
<li><code>sqlplus /nolog</code> 以nolog身份登录，进入sql命令行</li>
<li><code>startup;</code> 正常启动（1启动实例，2打开控制文件，3打开数据文件）</li>
<li><code>shutdown immediate</code> 大多数情况下使用。迫使每个用户执行完当前SQL语句后断开连接<ul>
<li><code>shutdown;</code> 有用户连接就不关闭，直到所有用户断开连接</li>
</ul>
</li>
<li><code>exit;</code> 退出sqlplus</li>
</ul>
</li>
<li>管理员登录<ul>
<li>sqlplus本地登录：<code>sqlplus / as sysdba</code>，以sys登录。sys为系统管理员，拥有最高权限；system为本地管理员，次高权限</li>
<li>sqlplus远程登录：<code>sqlplus aezo/aezo@192.168.1.1:1521/orcl</code> (orcl为远程服务名)，失败可尝试如下命令：<ul>
<li><code>sqlplus /nolog</code></li>
<li><code>connect aezo/aezo@192.168.1.1:1521/orcl;</code>，或者使用配置好的服务名连接<code>conn aezo/aezo@remote_orcl</code></li>
</ul>
</li>
<li>pl/slq管理员登录：用户名密码留空，Connect as 选择 SYSDBA 则默认以sys登录。登录远程只需要在tnsnames.ora进行网络配置即可</li>
</ul>
</li>
<li>用户相关<ul>
<li>创建用户：<code>create user aezo identified by aezo;</code><ul>
<li>默认使用的表空间是<code>USERS</code>，使用<code>create user aezo identified by aezo default tablespace aezocn;</code>可设定默认表空间</li>
<li>删除用户：<code>drop user aezo cascade;</code></li>
</ul>
</li>
<li>修改用户密码：<code>alter user scott identified by tiger;</code></li>
<li>修改用户表空间：<code>alter user aezo default tablespace aezocn;</code></li>
<li>解锁用户：<code>alter user scott account unlock;</code> (新建数据库scott默认未解锁)</li>
<li>密码过期：(1) 重新设置密码即可<code>alter user aezo identified by aezo;</code> (2)设置永久不过期<code>alter profile default limit password_life_time unlimited;</code></li>
</ul>
</li>
<li><p>授权</p>
<ul>
<li><code>grant create session to aezo;</code> 授予aezo用户创建session的权限，即登陆权限</li>
<li><code>grant unlimited tablespace to aezo;</code> 授予aezo用户使用表空间的权限</li>
<li><code>grant dba to aezo;</code> 授予管理权限(有dba角色就有建表等权限)</li>
</ul>
</li>
<li><p>连接数</p>
<ul>
<li>查询数据库最大连接数：<code>select value from v$parameter where name = &#39;processes;&#39;</code>、<code>show parameter processes</code></li>
<li>查询数据库当前连接数：<code>select count(*) from v$session;</code></li>
<li>修改数据库最大连接数：<code>alter system set processes = 500 scope = spfile;</code> 需要重启数据库</li>
</ul>
</li>
</ol>
<h3 id="查询相关"><a href="#查询相关" class="headerlink" title="查询相关"></a>查询相关</h3><ol>
<li>系统<ul>
<li>查看服务是否启动：<code>tnsping local_orcl</code> cmd直接运行<ul>
<li>远程查看(cmd运行)：<code>tnsping 192.168.1.1:1521/orcl</code>、或者<code>tnsping remote_orcl</code>(其中remote_orcl已经在本地建立好了监听映射，如配置在tnsnames.ora)</li>
<li>如果能够ping通，则说明客户端能解析listener的机器名，而且lister也已经启动，但是并不能说明数据库已经打开，而且tsnping的过程与真正客户端连接的过程也不一致。但是如果不能用tnsping通，则肯定连接不到数据库</li>
</ul>
</li>
<li>查看表空间数据文件位置：<code>select file_name, tablespace_name from dba_data_files;</code></li>
</ul>
</li>
<li>用户相关查询<ul>
<li>查看当前用户默认表空间：<code>select username, default_tablespace from user_users;</code>(以dba登录则结果为SYS和SYSTEM)</li>
<li>查看当前用户角色：<code>select * from user_role_privs;</code></li>
<li>查看当前用户系统权限：<code>select * from user_sys_privs;</code></li>
<li>查看当前用户表级权限：<code>select * from user_tab_privs;</code></li>
<li>查看用户下所有表：<code>select * from user_tables;</code></li>
<li>DBA相关查询见数据库字典</li>
</ul>
</li>
<li>数据字典 <a href="http://blog.csdn.net/yitian20000/article/details/6256716" target="_blank" rel="external">^5</a><ul>
<li><code>user_</code>：记录用户对象的信息，如user_tables包含用户创建的所有表，user_views，user_constraints等</li>
<li><code>all_</code>：记录用户对象的信息及被授权访问的对象信息</li>
<li><code>DBA_</code>：记录数据库实例的所有对象的信息，如DBA_USERS包含数据库实例中所有用户的信息。DBA的信息包含USER和ALL的信息。大部分是视图</li>
<li><code>V$</code>：当前实例的动态视图，包含系统管理和优化使用的视图</li>
<li><code>GV_</code>：分布环境下所有实例的动态视图，包含系统管理和优化使用的视图，这里的GV表示 Global v$的意思</li>
</ul>
</li>
<li>基本数据字典<ul>
<li>常用<ul>
<li><code>DICT</code> 构成数据字典的所有表的信息</li>
<li><code>DBA_USERS</code> 所有的用户信息（oracle密码是加密的，忘记密码只能修改）</li>
<li><code>DBA_TABLES</code> 所有用户的所有表的信息</li>
<li><code>DBA_TABLESPACES</code> 记录系统表空间的基本信息；</li>
<li><code>DBA_DATA_FILES</code> 记录系统数据文件及表空间的基本信息；</li>
<li><code>DBA_FREE_SPACE</code> 记录系统表空间的剩余空间的信息；</li>
</ul>
</li>
<li>其他<ul>
<li><code>CAT</code> 当前用户可以访问的所有的基表</li>
<li><code>TAB</code> 当前用户创建的所有基表，视图，同义词等</li>
<li><code>DBA_VIEWS</code> 所有用户的所有视图信息</li>
<li><code>DBA_CONSTRAINTS</code> 所有用户的表约束信息</li>
<li><code>DBA_INDEXES</code> 所有用户索引的简要信息</li>
<li><code>DBA_IND_COLUMNS</code> 所有用户索引的列信息</li>
<li><code>DBA_TRIGGERS</code> 所有用户触发器信息</li>
<li><code>DBA_SOURCE</code> 所有用户存储过程源代码信息</li>
<li><code>DBA_PROCEDUS</code> 所有用户存储过程</li>
<li><code>DBA_SEGMENTS</code> 所有用户段（表，索引，Cluster）使用空间信息</li>
<li><code>DBA_TAB_COLUMNS</code> 所有用户的表的列（字段）信息</li>
<li><code>DBA_SYNONYMS</code> 所有用户同义词信息</li>
<li><code>DBA_SEQUENCES</code> 所有用户序列信息</li>
<li><code>DBA_EXTENTS</code> 所有用户段的扩展段信息</li>
<li><code>DBA_OBJECTS</code> 所有用户对象的基本信息（包括素引，表，视图，序列等）</li>
</ul>
</li>
</ul>
</li>
<li>数据库组件相关的数据字典(<code>v$</code>代表视图)<ul>
<li>数据库：<ul>
<li><code>V$DATABASE</code> 同义词V_$DATABASE，记录系统的运行情况</li>
</ul>
</li>
<li>控制文件：<ul>
<li><code>V$CONTROLFILE</code> 记录系统控制文件的路径信息</li>
<li><code>v$parameter</code> 记录系统各参数的基本信息</li>
<li><code>V$CONTROLFILE_RECORD_SECTION</code> 记录系统控制运行的基本信息</li>
</ul>
</li>
<li>数据文件：<ul>
<li><code>V$DATAFILE</code> 记录来自控制文件的数据文件信息</li>
<li><code>V$FILESTAT</code> 记录数据文件读写的基本信息</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><ol>
<li><p>常用技巧</p>
<ul>
<li>常看日志文件目录 <code>show parameter background_dump_dest</code></li>
<li>在ORACLE 11g 以及ORACLE 12c中，告警日志文件的位置有了变化。主要是因为引入了ADR(Automatic Diagnostic Repository:一个存放数据库诊断日志、跟踪文件的目录)，关于ADR对应的目录位置可以通过查看v$diag_info系统视图。<code>select * from v$diag_info;</code></li>
<li><code>alert_orcl.log</code> 该目录下的日志文件</li>
<li>在日志文件目录列举文件：<code>ll -rt *.trc</code><ul>
<li><code>*.trc</code>：Sql Trace Collection file，<code>*.trm</code>：Trace map (.trm) file.Trace files(.trc) are sometimes accompanied by corresponding trace map (.trm) files, which contain structural information about trace files and are used for searching and navigation.（<strong>主要看*.trc文件</strong>）</li>
<li>如：<code>dbcloud_cjq0_22515.trc</code> dbcloud为实例名，cjq0_22515为自动生成的索引</li>
</ul>
</li>
</ul>
</li>
<li><p>表空间数据文件丢失，删除表空间报错ORA-02449、ORA-01115 <a href="[强制删除表空间](http://blog.chinaunix.net/uid-11570547-id-59108.html)">^6</a></p>
<ul>
<li>oracle数据文件(datafile)被误删除后，只能把该数据文件offline后drop掉</li>
<li><code>sqlplus / as sysdba</code></li>
<li><code>shutdown abort</code> 强制关闭oracle</li>
<li><code>startup mount</code> 启动挂载</li>
<li><code>alter database datafile &#39;/home/oracle/xxx&#39; offline drop;</code> 从数据库删除该表空间的数据文件<ul>
<li><code>select file_name, tablespace_name from dba_data_files;</code> 查看表空间数据文件位置</li>
</ul>
</li>
<li><code>alter database open;</code></li>
<li><code>drop tablespace 表空间名</code></li>
</ul>
</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>- 数据库安装包：[oracle](http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html)
- oracle静默安装, 关闭客户端后再次以oracle用户登录无法运行sql命名, 需要执行`source ~/.bash_profile`
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;注：本文中 aezo/aezo 一般指用户名/密码，local_orcl指配置的本地数据库服务名，remote_o
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="oracle" scheme="http://blog.aezo.cn/tags/oracle/"/>
    
      <category term="dba" scheme="http://blog.aezo.cn/tags/dba/"/>
    
  </entry>
  
</feed>
