<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SmalleBlog | AEZOCN</title>
  <subtitle>Better Code,Better Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.aezo.cn/"/>
  <updated>2018-04-14T09:37:42.183Z</updated>
  <id>http://blog.aezo.cn/</id>
  
  <author>
    <name>Smalle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VPN搭建</title>
    <link href="http://blog.aezo.cn/2018/04/04/extend/vpn/"/>
    <id>http://blog.aezo.cn/2018/04/04/extend/vpn/</id>
    <published>2018-04-04T02:34:00.000Z</published>
    <updated>2018-04-14T09:37:42.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="centos7安装vpn"><a href="#centos7安装vpn" class="headerlink" title="centos7安装vpn"></a>centos7安装vpn</h2><ul>
<li><code>modprobe ppp-compress-18 &amp;&amp; echo MPPE is ok</code> 验证内核是否加载了MPPE模块</li>
<li><code>sudo yum -y install ppp pptpd iptables</code> 安装ppp、pptpd、iptables(安装前确保添加了epel源)</li>
<li><p><code>vi /etc/ppp/options.pptpd</code> 配置PPP和PPTP的配置文件。查找<code>ms-dns</code>，添加两行</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Google DNS</span></div><div class="line">ms-dns 8.8.8.8</div><div class="line">ms-dns 8.8.4.4</div><div class="line"><span class="comment"># 或者使用 Aliyun DNS</span></div><div class="line"><span class="comment"># ms-dns 223.5.5.5</span></div><div class="line"><span class="comment"># ms-dns 223.6.6.6</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>vi /etc/ppp/chap-secrets</code> 配置登录用户/协议/密码/ip地址段</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">username1    pptpd    passwd1    *</div><div class="line">username2    pptpd    passwd2    *</div></pre></td></tr></table></figure>
</li>
<li><p><code>vi /etc/pptpd.conf</code> 配置pptpd。localip是服务端的虚拟地址, remoteip是客户端的虚拟地址。只要不和本机IP不冲突即可</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localip 192.168.0.2-20</div><div class="line">remoteip 192.168.0.200-250</div></pre></td></tr></table></figure>
</li>
<li><p><code>vi /etc/sysctl.conf</code> 改为<code>net.ipv4.ip_forward = 1</code></p>
</li>
<li><code>sysctl -p</code> 使sysctl配置生效</li>
<li><code>systemctl start pptpd</code> 启动pptpd服务</li>
<li><p>配置iptables防火墙放行和转发规则</p>
<ul>
<li><code>sudo iptables -L -n</code> 查看 iptables 过滤规则</li>
<li><p>清空防火墙配置</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo iptables -P INPUT ACCEPT     <span class="comment"># 改成 ACCEPT 标示接收一切请求</span></div><div class="line">sudo iptables -F                     <span class="comment"># 清空默认所有规则</span></div><div class="line">sudo iptables -X                     <span class="comment"># 清空自定义所有规则</span></div><div class="line">sudo iptables -Z                     <span class="comment"># 计数器置0</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置规则</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">sudo iptables -A INPUT -p gre -j ACCEPT</div><div class="line"><span class="comment"># 放行 PPTP 服务的1723 端口 (服务器后台安全组策略需要开发1723的入站规则)</span></div><div class="line">sudo iptables -A INPUT -p tcp -m tcp --dport 1723 -j ACCEPT</div><div class="line">sudo iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line"><span class="comment"># 阿里云是双网卡，内网eth0 + 外网eth1，所以此出为eth1</span></div><div class="line">sudo iptables -A FORWARD -s 192.168.0.0/24 -o eth1 -j ACCEPT</div><div class="line">sudo iptables -A FORWARD -d 192.168.0.0/24 -i eth1 -j ACCEPT</div><div class="line">sudo iptables -I FORWARD -p tcp --syn -i ppp+ -j TCPMSS --<span class="built_in">set</span>-mss 1356</div><div class="line">sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE</div><div class="line"><span class="comment"># 开启几个常用端口，其他端口同理</span></div><div class="line">sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT</div></pre></td></tr></table></figure>
</li>
<li><p>启动iptables</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo service iptables save</div><div class="line">sudo systemctl start iptables</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>设置随系统启动(<code>chkconfig --level 3 pptpd on</code>)</p>
<ul>
<li><code>sudo systemctl enable pptpd</code></li>
<li><code>sudo systemctl enable iptables</code></li>
</ul>
</li>
<li>windows连接VPN<ul>
<li>VPN类型 <code>PPTP</code></li>
<li>勾选允许使用 <code>Microsoft CHAP 版本 2 （MS-CHAP v2）（M）</code></li>
</ul>
</li>
</ul>
<hr>
<p>参考文章</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;centos7安装vpn&quot;&gt;&lt;a href=&quot;#centos7安装vpn&quot; class=&quot;headerlink&quot; title=&quot;centos7安装vpn&quot;&gt;&lt;/a&gt;centos7安装vpn&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;modprobe ppp-compr
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="linux" scheme="http://blog.aezo.cn/tags/linux/"/>
    
      <category term="vpn" scheme="http://blog.aezo.cn/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>Lucene</title>
    <link href="http://blog.aezo.cn/2018/03/13/bigdata/lucene/"/>
    <id>http://blog.aezo.cn/2018/03/13/bigdata/lucene/</id>
    <published>2018-03-13T12:31:00.000Z</published>
    <updated>2018-03-25T11:01:21.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><code>Lucene</code>是一个基于java开发的全文搜索框架。本文基于<code>lucene-4.9.1</code>(文档/API在解压文件的/lucene-4.9.1/docs目录)</li>
<li>倒排索引：根据属性的值来查找记录。这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引(invertedindex)</li>
<li><p>lucene提供的服务实际包含两部分：一入一出。所谓入是写入，即将你提供的源（本质是字符串）写入索引或者将其从索引中删除；所谓出是读出，即向用户提供全文搜索服务，让用户可以通过关键词定位源</p>
<ul>
<li>写入流程：源字符串首先经过analyzer分词处理。将源中需要的信息加入Document的各个Field中，并把需要索引的Field索引起来，把需要存储的Field存储起来。将索引写入存储器(内存或磁盘)</li>
<li>读出流程：用户提供搜索关键词，经过analyzer处理。对处理后的关键词搜索索引找出对应的Document。用户根据需要从找到的Document中提取需要的Field</li>
</ul>
</li>
<li><p>企业海量数据搜索服务器架构</p>
</li>
</ul>
<p><img src="/data/images/bigdata/solr-arch.png" alt="企业海量数据搜索服务器架构"></p>
<h2 id="本地文件内容搜索实践"><a href="#本地文件内容搜索实践" class="headerlink" title="本地文件内容搜索实践"></a>本地文件内容搜索实践</h2><blockquote>
<p>具体参考 <code>smjava/lucene</code></p>
</blockquote>
<ul>
<li>相关jar包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">lucene-core-4.9.1.jar <span class="comment"># 核心包</span></div><div class="line">lucene-queries-4.9.1.jar <span class="comment"># 检索</span></div><div class="line">lucene-queryparser-4.9.1.jar </div><div class="line">lucene-analyzers-common-4.9.1.jar <span class="comment"># 分词器</span></div><div class="line">lucene-highlighter-4.9.1.jar <span class="comment"># 高亮</span></div></pre></td></tr></table></figure>
<ul>
<li>写索引</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 会生成下列索引文件</span></div><div class="line">_0.cfe</div><div class="line">_0.cfs</div><div class="line">_0.si</div><div class="line">segments.gen</div><div class="line">segments_1</div><div class="line">write.lock</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String indexDir = System.getProperty(<span class="string">"user.dir"</span>) + <span class="string">"/demo_index"</span>; <span class="comment">// 存放索引的文件夹</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String dataDir = System.getProperty(<span class="string">"user.dir"</span>) + <span class="string">"/qq"</span>; <span class="comment">// 数据文件夹</span></div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writerIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 将索引保存到硬盘中</span></div><div class="line">        Directory dir = FSDirectory.open(<span class="keyword">new</span> File(indexDir));</div><div class="line">        <span class="comment">// Directory directory = new RAMDirectory(); // 将索引保存到内存中</span></div><div class="line"></div><div class="line">        <span class="comment">// 默认分词器(只支持英文，中文需要中文分词器，如：IKAnalyzer2012_FF.jar)</span></div><div class="line">        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_4_9);</div><div class="line">        IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(Version.LUCENE_4_9, analyzer);</div><div class="line">        config.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND); <span class="comment">// 增量添加索引(之前的索引数据不会覆盖)</span></div><div class="line"></div><div class="line">        <span class="comment">// 索引生成器</span></div><div class="line">        IndexWriter writer = <span class="keyword">new</span> IndexWriter(dir, config);</div><div class="line"></div><div class="line">        File fileData = <span class="keyword">new</span> File(dataDir);</div><div class="line">        <span class="comment">// 列出目录下所有文件</span></div><div class="line">        Collection&lt;File&gt; files = FileUtils.listFiles(fileData, TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE);</div><div class="line">        <span class="keyword">for</span>(File  f : files) &#123;</div><div class="line">            <span class="comment">// 文档</span></div><div class="line">            Document doc = <span class="keyword">new</span> Document();</div><div class="line">            <span class="comment">// 字段</span></div><div class="line">            doc.add(<span class="keyword">new</span> StringField(<span class="string">"fileName"</span>, f.getAbsolutePath(), Field.Store.YES)); <span class="comment">// 文件名</span></div><div class="line">            doc.add(<span class="keyword">new</span> TextField(<span class="string">"content"</span>, FileUtils.readFileToString(f), Field.Store.YES)); <span class="comment">// 文件内容</span></div><div class="line">            doc.add(<span class="keyword">new</span> LongField(<span class="string">"lastModify"</span>, f.lastModified(), Field.Store.YES)); <span class="comment">// 上次修改时间</span></div><div class="line"></div><div class="line">            writer.addDocument(doc);</div><div class="line">        &#125;</div><div class="line">        writer.close();</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>检索</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Directory dir = FSDirectory.open(<span class="keyword">new</span> File(WriterIndex.indexDir));</div><div class="line">        IndexReader reader = DirectoryReader.open(dir);</div><div class="line">        IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</div><div class="line"></div><div class="line">        StandardAnalyzer standardAnalyzer = <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_4_9);</div><div class="line">        QueryParser qp = <span class="keyword">new</span> QueryParser(Version.LUCENE_4_9, <span class="string">"content"</span>, standardAnalyzer);</div><div class="line">        Query query = qp.parse(<span class="string">"sitemap"</span>);</div><div class="line">        TopDocs search = searcher.search(query, <span class="number">10</span>); <span class="comment">// 获取前10个文档</span></div><div class="line"></div><div class="line">        ScoreDoc[] scoreDocs = search.scoreDocs;</div><div class="line">        <span class="keyword">for</span>(ScoreDoc sc : scoreDocs) &#123;</div><div class="line">            <span class="keyword">int</span> docId = sc.doc;</div><div class="line">            Document document = reader.document(docId);</div><div class="line">            System.out.println(document.get(<span class="string">"fileName"</span>));</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="solr企业级搜索服务器"><a href="#solr企业级搜索服务器" class="headerlink" title="solr企业级搜索服务器"></a>solr企业级搜索服务器</h2><p>详细参考《solr》</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lucene&lt;/code&gt;是一个基于java开发的全文搜索框架。本文基于&lt;code&gt;lucene-4.9.1&lt;/co
    
    </summary>
    
      <category term="bigdata" scheme="http://blog.aezo.cn/categories/bigdata/"/>
    
    
      <category term="lucene" scheme="http://blog.aezo.cn/tags/lucene/"/>
    
      <category term="solr" scheme="http://blog.aezo.cn/tags/solr/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop</title>
    <link href="http://blog.aezo.cn/2018/03/13/bigdata/hadoop/"/>
    <id>http://blog.aezo.cn/2018/03/13/bigdata/hadoop/</id>
    <published>2018-03-13T12:31:00.000Z</published>
    <updated>2018-04-06T03:35:55.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><code>Hadoop</code>作者<code>Doug cutting</code>，名字来源于Doug Cutting儿子的玩具大象</li>
<li>特点<ul>
<li>分布式存储系统<code>HDFS</code>(Hadoop Distributed File System)</li>
<li>分布式计算框架<code>MapReduce</code></li>
</ul>
</li>
<li>网址<ul>
<li><a href="http://hadoop.apache.org/" target="_blank" rel="external">官网</a></li>
<li><a href="http://hadoop.apache.org/docs/r1.0.4/cn/index.html" target="_blank" rel="external">r1.0.4中文文档</a></li>
<li><a href="http://hadoop.apache.org/docs/r2.5.2/" target="_blank" rel="external">r2.5.2文档</a></li>
</ul>
</li>
<li>本文基于<code>hadoop-2.5.1</code><strong>(需要<code>jdk1.7</code>)</strong></li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Hadoop-2-x-HA-安装"><a href="#Hadoop-2-x-HA-安装" class="headerlink" title="Hadoop 2.x HA 安装"></a>Hadoop 2.x HA 安装</h3><blockquote>
<p>HA模式安装：<a href="http://hadoop.apache.org/docs/r2.5.2/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithQJM.html" target="_blank" rel="external">http://hadoop.apache.org/docs/r2.5.2/hadoop-project-dist/hadoop-hdfs/HDFSHighAvailabilityWithQJM.html</a></p>
</blockquote>
<ul>
<li>服务器配置</li>
</ul>
<table>
<thead>
<tr>
<th>服务器名</th>
<th>ip</th>
<th>NameNode</th>
<th>DataNode</th>
<th>Zookeeper</th>
<th>ZKFC</th>
<th>JN</th>
</tr>
</thead>
<tbody>
<tr>
<td>server1</td>
<td>192.168.6.131</td>
<td>Y</td>
<td></td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>server2</td>
<td>192.168.6.132</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
<tr>
<td>server3</td>
<td>192.168.6.133</td>
<td></td>
<td>Y</td>
<td>Y</td>
<td></td>
<td>Y</td>
</tr>
<tr>
<td>server4</td>
<td>192.168.6.134</td>
<td></td>
<td>Y</td>
<td></td>
<td></td>
<td>Y</td>
</tr>
</tbody>
</table>
<ul>
<li>安装并启动Zookeeper，参考《Zookeeper》</li>
<li><code>date</code> 检查4台机器的时间是否相差不大(30秒内)，并查看是否关闭防火墙</li>
<li><p>4台主机的<code>/etc/hosts</code>文件都需要包含一下内容</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">192.168.6.131	server1</div><div class="line">192.168.6.132	server2</div><div class="line">192.168.6.133	server3</div><div class="line">192.168.6.134	server4</div></pre></td></tr></table></figure>
</li>
<li><p>免密码登录：使server1可以免密码登录到其他3台服务器。启动hdfs的时候通过server1启动其他3台机器</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 未4台机器都生成ssh密钥和公钥文件(可通过xshell的快速命令发送到全部会话)</span></div><div class="line">ssh-keygen -t dsa -P <span class="string">''</span> -f ~/.ssh/id_dsa</div><div class="line"><span class="comment">## 将本机器公钥文件内容追加到认证文件中。此时可以通过命令如`ssh server1`无需密码即可登录本地机器，记得要`exit`退出会话</span></div><div class="line">cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</div><div class="line"><span class="comment">## 将server1和server2(NameNode)的公钥文件内容追加到其他3台机器的的认证文件中</span></div><div class="line"><span class="comment"># 在server1下执行复制server1的公钥到其他机器的/root目录</span></div><div class="line">scp ~/.ssh/id_dsa.pub root@server2:/root/</div><div class="line">scp ~/.ssh/id_dsa.pub root@server3:/root/</div><div class="line">scp ~/.ssh/id_dsa.pub root@server4:/root/</div><div class="line"><span class="comment"># 分别在其他3台服务器下运行公钥追加到认证文件命令(&gt;&gt;表示追加)</span></div><div class="line">cat ~/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</div><div class="line"><span class="comment"># 测试登录</span></div><div class="line">ssh server3</div><div class="line"><span class="comment"># server2公钥复制同理</span></div></pre></td></tr></table></figure>
</li>
<li><p>在server1上进行安装hadoop</p>
<ul>
<li><code>tar -zxvf hadoop-2.5.1_x64.tar.gz -C /opt/soft</code><ul>
<li>解压<code>hadoop-2.5.1_x64.tar.gz</code>(官方提供的是32位；32位的包可以运行在64位机器上，只是有警告；反之不行)</li>
</ul>
</li>
<li><code>cd /opt/soft/hadoop-2.5.1</code></li>
<li><code>vi etc/hadoop/hadoop-env.sh</code>修改<code>export JAVA_HOME=${JAVA_HOME}</code>的JAVA_HOME，如<code>export JAVA_HOME=/opt/soft/jdk1.7.0_80</code></li>
<li><p><code>vi etc/hadoop/core-site.xml</code> 进行如下配置。<a href="http://hadoop.apache.org/docs/r2.5.2/hadoop-project-dist/hadoop-common/core-default.xml" target="_blank" rel="external">配置项参考</a></p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--配置NameNode的dfs.nameservices--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://aezocn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Zookeeper集群 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>server1:2181,server2:2181,server3:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- fsimage文件会存放在此目录，默认是/tmp/hadoop-$&#123;user.name&#125;，而此目录重启会清空，容易造成fsimage丢失。会自动创建 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/data/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>vi etc/hadoop/hdfs-site.xml</code> 进行如下配置。<a href="http://hadoop.apache.org/docs/r2.5.2/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml" target="_blank" rel="external">配置项参考文档</a></p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 一个hdfs实例的唯一标识 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>aezocn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- NameNode标识(dfs.ha.namenodes.[dfs.nameservices])，多个用逗号分割 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.aezocn<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- rpc协议用于hdfs文件上传和读取 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.aezocn.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>server1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.aezocn.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>server2:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- http协议用于后台监控 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.aezocn.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>server1:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.aezocn.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>server2:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 指定3台JournalNode服务地址，jndir目录会自动新建，用于存放edits数据 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://server2:8485;server3:8485;server4:8485/jndir<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 为JournalNode存放edits数据文件的根目录(会在此目录创建jndir)，会自动创建 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/data/hadoop/journalnode<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 启用Zookeeper Failover Controller自动切换 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 帮助客户端查询一个活动的NameNode(Active)，固定为下面的类名 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.aezocn<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 对NameNode进行远程切换时，需要运行远程命令。下面为ssh相关配置 --&gt;</span>    </div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>sshfence<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/.ssh/id_dsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>vi etc/hadoop/slaves</code> 配置<code>DataNode</code>主机名</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server2</div><div class="line">server3</div><div class="line">server4</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>拷贝项目目录到其他3台机器，如：<code>scp -r /opt/soft/hadoop-2.5.1/ root@server2:/opt/soft/</code></p>
</li>
<li><p>配置环境变量</p>
<ul>
<li><p>配置4台机器的hadoop环境变量，<code>vi ~/.bash_profile</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/soft/hadoop-2.5.1</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/sbin</div></pre></td></tr></table></figure>
</li>
<li><p>如果几台机器的配置一致，可通过<code>scp ~/.bash_profile root@server2:/root/</code>进行server1拷贝到server2</p>
</li>
<li><code>source ~/.bash_profile</code> 使<code>.bash_profile</code>生效</li>
</ul>
</li>
<li><code>hadoop-daemon.sh start journalnode</code> 分别启动三台<code>JournalNode</code>(server2、server3、server4)。并查看日志是否有错<code>tail -200 /opt/soft/hadoop-2.5.1/logs/hadoop-root-journalnode-server2.log</code></li>
<li>初始化元数据<ul>
<li>格式化<code>server1(NameNode)</code>的hdfs：<code>hdfs namenode -format</code> 第一次运行格式化hdfx获得元数据(不报错则成功)。会创建上述<code>/opt/data/hadoop</code>文件夹，并在里面创建<code>fsimage</code></li>
<li>拷贝上述fsimage到另外一台<code>NameNode(server2)</code>：<code>scp -r /opt/data/hadoop root@server2:/opt/data/</code></li>
</ul>
</li>
<li>在某一台NameNode上初始化Zookeeper：<code>hdfs zkfc -formatZK</code></li>
<li>启动与停止<ul>
<li><strong><code>start-dfs.sh</code></strong> 在某一台NameNode上启动。<ul>
<li>此时server1会通过免密码登录启动其他机器上的hadoop服务(NN、DN、JN、ZKFC)</li>
<li>journalnode在上述启动过，此处不会重新启动</li>
<li>单独启动一个NameNode <code>hadoop-daemon.sh start namenode</code></li>
<li>单独启动一个DataNode <strong><code>hadoop-daemon.sh start datanode</code></strong></li>
</ul>
</li>
<li><strong><code>stop-dfs.sh</code></strong> 停止所有hadoop服务</li>
<li>所有的启动日志均在<code>logs</code>目录</li>
</ul>
</li>
<li>访问<code>http://192.168.6.131:50070</code>和<code>http://192.168.6.132:50070</code> 查看NameNode监控。会发现一个为active，一个为standby<ul>
<li>关闭active对应的NameNode服务，可发现standby对应的服务变为active，实现了NameNode接管。如server2无法切换为active，可查看对应ZKFC的日志 <code>tail -200 /opt/soft/hadoop-2.5.1/logs/hadoop-root-zkfc-server2.log</code>。常见无法切换错误<ul>
<li>提示<code>Unable to fence NameNode</code>，可检查是否可进行免密码登录</li>
<li>提示<code>ssh: bash: fuser: 未找到命令</code>，可在NameNode上安装 <code>yum -y install psmisc</code></li>
</ul>
</li>
<li>手动切换nn2为active：<code>hdfs haadmin -transitionToActive nn2</code>(在未开启自动切换模式下才可使用)</li>
</ul>
</li>
</ul>
<h3 id="单节点安装-不常用"><a href="#单节点安装-不常用" class="headerlink" title="单节点安装(不常用)"></a>单节点安装(不常用)</h3><blockquote>
<p>单节点：<a href="http://hadoop.apache.org/docs/r2.5.2/hadoop-project-dist/hadoop-common/SingleCluster.html" target="_blank" rel="external">http://hadoop.apache.org/docs/r2.5.2/hadoop-project-dist/hadoop-common/SingleCluster.html</a></p>
</blockquote>
<ul>
<li>服务器配置</li>
</ul>
<table>
<thead>
<tr>
<th>服务器名</th>
<th>ip</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>server1</td>
<td>192.168.6.131</td>
<td>NameNode</td>
</tr>
<tr>
<td>server2</td>
<td>192.168.6.132</td>
<td>SecondaryNameNode、DataNode</td>
</tr>
<tr>
<td>server3</td>
<td>192.168.6.133</td>
<td>DataNode</td>
</tr>
<tr>
<td>server4</td>
<td>192.168.6.134</td>
<td>DataNode</td>
</tr>
</tbody>
</table>
<ul>
<li>检查date、修改hosts、免密码登录(参考上述HA安装)</li>
<li><p>在server1上进行安装hadoop(参考上述HA安装)</p>
<ul>
<li><p><code>vi etc/hadoop/core-site.xml</code> 进行如下配置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--配置NameNode的主机名和数据传输端口(文件上传下载)--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://server1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/data/hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>vi etc/hadoop/hdfs-site.xml</code> 进行如下配置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置SecondaryNameNode的Http相关端口 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>server2:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.https-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>server2:50091<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>vi etc/hadoop/slaves</code> 配置<code>DataNode</code>主机名</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server2</div><div class="line">server3</div><div class="line">server4</div></pre></td></tr></table></figure>
</li>
<li><p><code>vi etc/hadoop/masters</code> 配置<code>SecondaryNameNode</code>主机名(默认无此文件。HA模式下无SecondaryNameNode，因此无效此步骤)</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server2</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>拷贝项目目录到其他3台机器并配置hadoop环境变量(参考上述HA安装)</p>
</li>
<li>在<code>server1(NameNode)</code>上运行<ul>
<li><code>hdfs namenode -format</code> 在<code>server1(NameNode)</code>上运行</li>
<li><code>start-dfs.sh</code> 在<code>server1(NameNode)</code>上执行</li>
<li><code>stop-dfs.sh</code> 停止所有hadoop服务</li>
</ul>
</li>
<li>访问<code>http://192.168.6.131:50070</code> 查看NameNode监控、<code>http://192.168.6.132:50090</code> 查看SecondaryNameNode监控</li>
</ul>
<h2 id="HDFS概念"><a href="#HDFS概念" class="headerlink" title="HDFS概念"></a>HDFS概念</h2><ul>
<li>HDFS优缺点<ul>
<li>优点：高容错性(自动保存副本，自动恢复)、适合批处理、适合大数据(TB/PB)处理、可构建在廉价机器上</li>
<li>缺点：占用内存大、修改文件成本过高</li>
</ul>
</li>
<li>数据块/数据存储单元(Block)<ul>
<li>文件被切分成固定大小的数据块,数据块默认大小为128MB(Hadoop 1.x默认为64M)。若文件大小不到128MB，则单独存成一个Block</li>
<li>一个文件存储方式：按大小被切分成若干个Block，存储到不同节点上。默认情况下每个Block都有三个副本</li>
<li>Block大小和副本数通过Client端上传文件时设置，文件上传成功后副本数可以变更，Block Size不可变更</li>
</ul>
</li>
<li><code>NameNode</code>(NN)<ul>
<li>NameNode主要功能<ul>
<li>接受客户端的读写服务</li>
<li>保存<code>metadate</code>(元数据)信息<ul>
<li>元数据信息包括<strong><code>fsimage</code>和<code>edits</code></strong></li>
<li>以上两个文件主要记录了文件包含哪些Block，Block保存在哪个DataNode(由DataNode启动时上报)</li>
</ul>
</li>
</ul>
</li>
<li>NameNode的metadate信息说明<ul>
<li>NameNode的metadate信息在启动后会加载到内存</li>
<li>metadata存储到磁盘文件名为<code>fsimage</code>(format格式化的时候产生)</li>
<li>Block的位置信息不会保存到fsimage(NN将block位置存放到内存中)</li>
<li><code>edits</code>记录对metadata的操作日志(客户端读写日志)，会自动合并到fsimage中</li>
</ul>
</li>
</ul>
</li>
<li><code>SecondaryNameNode</code>(SNN)<ul>
<li>它不是NN的备份，也不是HA，它的主要工作是帮助NN合并edits日志，减少NN启动时间。</li>
<li>SNN执行合并时机：根据配置文件设置的时间间隔<code>fs.checkpoint.period</code>默认3600秒；根据配置文件设置edits日志大小 <code>fs.checkpoint.size</code>规定edits文件的最大值默认是64MB</li>
</ul>
</li>
<li><code>DataNode</code>(DN)<ul>
<li>存储数据(Block)</li>
<li>启动DN线程的时候会向NN汇报block信息(NN将block位置存放到内存中)</li>
<li>通过向NN发送心跳保持与其联系（3秒一次），如果NN 10分钟没有收到DN的心跳，则认为其已经lost，并copy其上的block到其它DN</li>
</ul>
</li>
</ul>
<h2 id="Hadoop-2-x-概念及架构"><a href="#Hadoop-2-x-概念及架构" class="headerlink" title="Hadoop 2.x 概念及架构"></a>Hadoop 2.x 概念及架构</h2><ul>
<li>Hadoop 2.x由HDFS、MapReduce和YARN三个分支构成<ul>
<li>HDFS：NN Federation、 HA</li>
<li>MapReduce：运行在YARN上的MR</li>
<li>YARN：资源管理系统</li>
</ul>
</li>
<li>解决HDFS 1.0中单点故障和内存受限问题<ul>
<li>解决单点故障<ul>
<li>HDFS HA：通过多个主备NameNode解决</li>
<li>如果主NameNode发生故障，则切换到备NameNode上(备NameNode会同步主NameNode元数据)</li>
<li>所有DataNode同时向两个NameNode汇报数据块信息</li>
</ul>
</li>
<li>解决内存受限问题<ul>
<li>HDFS Federation(联邦)</li>
<li>水平扩展，支持多个NameNode</li>
<li>每个NameNode分管一部分目录</li>
<li>所有NameNode共享所有DataNode存储资</li>
</ul>
</li>
</ul>
</li>
<li>基于Zookeeper自动切换方案(也可手动切换)<ul>
<li><code>Zookeeper Failover Controller</code>(ZKFC) 监控NameNode健康状态，并向Zookeeper注册NameNode。NameNode挂掉后，ZKFC为NameNode竞争锁，获得ZKFC锁的NameNode变为active</li>
</ul>
</li>
<li><p>HA架构图</p>
<p>  <img src="/data/images/bigdata/hadoop-ha.png" alt="HA架构图"></p>
<ul>
<li><code>NameNode</code>分为<code>Active</code>(主)和<code>Standby</code>(备)。主备切换的条件是两天NN的元数据一致</li>
<li><code>NameNode(Active)</code>会将<code>edits</code>文件保存到<code>JournalNode</code>中(服务数&gt;=2)。<code>NameNode(Standby)</code>会同步<code>JournalNode</code>中的<code>edits</code>数据。初始化时，将其中一台进行<code>fsimage</code>格式化，然后将此<code>fsimage</code>复制到其他机器。确保元数据(fsimage + edits)一致</li>
<li>所有DataNode启动时同时向两个NameNode汇报数据块信息</li>
<li><code>Zookeeper Failover Controller</code>和<code>NameNode</code>是一一对应。作用：通过远程命令控制<code>NameNode</code>切换；对<code>NameNode</code>做健康检查，并汇报给<code>Zookeeper</code></li>
</ul>
</li>
<li><p>Federation架构图</p>
<p>  <img src="/data/images/bigdata/hadoop-federation.gif" alt="Federation架构图"></p>
<ul>
<li>通过多个namenode/namespace把元数据的存储和管理分散到多个节点中，使到namenode/namespace可以通过增加机器来进行水平扩展。多个namenode相会独立</li>
<li>能把单个namenode的负载分散到多个节点中，在HDFS数据规模较大的时候不会也降低HDFS的性能。可以通过多个namespace来隔离不同类型的应用，把不同类型应用的HDFS元数据的存储和管理分派到不同的namenode中</li>
</ul>
</li>
</ul>
<h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><ul>
<li>Map-reduce的思想就是”分而治之”</li>
<li>主要分为<code>Map</code>和<code>Reduce</code>两个阶段，也可细分为<code>Split</code>、<code>Map</code>、<code>Shuffler(sort、copy、merge)</code>、<code>Reduce</code>几个阶段</li>
<li>split大小：<code>max(min.split,min(max.split, block))</code> 其中默认min.split=10M，max.split=100M，block=128M</li>
<li><p>MapReduce架构图</p>
<p>  <img src="/data/images/bigdata/hadoop-mp.png" alt="MapReduce架构图"></p>
</li>
</ul>
<hr>
<p>参考文章</p>
<ul>
<li><a href="http://www.cnblogs.com/tgzhu/category/868038.html" target="_blank" rel="external">hdfs-HA原理及安装</a></li>
<li><a href="http://ambari.apache.org/" target="_blank" rel="external">Hadoop集群Web管理工具ambari</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Hadoop&lt;/code&gt;作者&lt;code&gt;Doug cutting&lt;/code&gt;，名字来源于Doug Cutting
    
    </summary>
    
      <category term="bigdata" scheme="http://blog.aezo.cn/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://blog.aezo.cn/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Solr</title>
    <link href="http://blog.aezo.cn/2018/03/13/bigdata/solr/"/>
    <id>http://blog.aezo.cn/2018/03/13/bigdata/solr/</id>
    <published>2018-03-13T12:31:00.000Z</published>
    <updated>2018-03-28T12:32:28.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><code>Solr</code>它是一种开放源码的、基于 Lucene Java 的搜索服务器，易于加入到 Web 应用程序中。<ul>
<li>基于开放接口（XML和HTTP）的标准进行索引创建和查询<strong>(基于Lucene通过HTTP请求进行数据索引管理)</strong></li>
<li>可伸缩性－能够有效地复制到另外一个Solr搜索服务器</li>
<li>附带了一个基于HTTP管理界面</li>
</ul>
</li>
<li>Solr与Lucene 并不是竞争对立关系，恰恰相反Solr 依存于Lucene，因为Solr底层的核心技术是使用Lucene 来实现的。Lucene专注于搜索底层的建设，而Solr专注于企业应用</li>
<li>Solr内嵌Jetty和ZooKeeper。<code>SolrCloud</code> 模式是基于ZooKeeper的，会自动启动ZooKeeper服务。</li>
<li><a href="https://lucene.apache.org/solr/" target="_blank" rel="external">官网：https://lucene.apache.org/solr/</a></li>
<li><a href="https://lucene.apache.org/solr/guide/7_2/solr-tutorial.html" target="_blank" rel="external">官方教程</a>、<a href="http://mirror.bit.edu.cn/apache/lucene/solr/ref-guide/apache-solr-ref-guide-7.2.pdf" target="_blank" rel="external">solr-7.2-pdf</a></li>
<li><a href="http://archive.apache.org/dist/lucene/solr/" target="_blank" rel="external">各版本下载地址</a><strong>(本文基于<code>solr-7.2.0</code>进行说明，需要jdk1.8及以上)</strong></li>
</ul>
<h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul>
<li><code>collection</code>/<code>core</code> 均指以不同的数据结构来对数据进行索引(索引库、集合)</li>
<li><code>schema</code>为一个xml配置文件，主要用于配置字段和字段类型，动态字段等。（如某个字段可忽略大小写也可在其中配置）</li>
</ul>
<h2 id="安装及使用-1"><a href="#安装及使用-1" class="headerlink" title="安装及使用 ^1"></a>安装及使用 <a href="[solr-tutorial](https://lucene.apache.org/solr/guide/7_2/solr-tutorial.html)">^1</a></h2><h3 id="下载解压说明"><a href="#下载解压说明" class="headerlink" title="下载解压说明"></a>下载解压说明</h3><ul>
<li>下载tar包解压 <code>tar -zxvf solr-7.2.1.tgz -C /opt/soft</code>，目录说明</li>
<li><code>example</code> 几个solr的实例</li>
<li><code>server</code> solr的核心应用程序<ul>
<li><code>solr-webapp</code>为solr提供的控制面板</li>
<li><code>resources</code> 日志配置</li>
<li><code>solr/configsets</code> 全局配置文件(有<code>_default</code>和<code>sample_techproducts_configs</code>两种)。<code>SolrCloud</code>模式启动后选择此其中一种模式（应该在启动前对此目录下文件进行配置），普通模式启动需要复制其中的配置文件到相应实例目录<ul>
<li><code>sample_techproducts_configs/conf/managed-schema</code> 配置(添加)字段、字段类型、动态字段等信息</li>
<li><code>sample_techproducts_configs/conf/solrconfig.xml</code> 配置sorl相关服务，如classpath配置、增加导入db数据访问端点等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="启动停止服务"><a href="#启动停止服务" class="headerlink" title="启动停止服务"></a>启动停止服务</h3><ul>
<li>配置IK中文分析器/DB数据导入需要在启动前配置好</li>
<li>初始化solr集合<ul>
<li>以<code>SolrCloud</code>模式启动<strong><code>./bin/solr start -e cloud</code></strong>(因权限可强制启动<strong><code>./bin/solr start -e cloud -force</code></strong>)<ul>
<li>启动时会询问相关配置，<code>[]</code>中即为默认配置(默认启动2个solr节点，分别为8983、7574)。其他使用默认；<strong>solr配置项使用<code>sample_techproducts_configs</code></strong>，集合名称也可再此时配置</li>
<li>SolrCloud模式创建的集合instanceDir在<code>/example/cloud/node1/solr/aezocn_shard1_replica_n1</code>等目录下创建</li>
</ul>
</li>
<li>普通默认启动 <code>./bin/solr start</code><ul>
<li>此时需要添加Core。需要先在<code>/server/solr</code>创建对应的instanDir，并将<code>/server/solr/configsets/_default/conf</code>目录下所有文件拷贝到instanDir目录下</li>
</ul>
</li>
</ul>
</li>
<li>访问<code>http://localhost:8983/solr</code>即可看到solr的管理面板</li>
<li>停止服务<ul>
<li><strong><code>./bin/solr stop -all</code></strong> 停止全部solr</li>
<li><code>./bin/solr stop -p 8983</code> 停止8983端口的solr</li>
</ul>
</li>
<li><strong>重启服务</strong><br>  <code>./bin/solr start -c -p 8983 -s example/cloud/node1/solr -force</code> 启动node1，其中<code>-s</code>后面接<code>solr.home</code>(此时会启动一个内嵌的ZooKeeper服务)<br>  <code>./bin/solr start -c -p 7574 -s example/cloud/node2/solr -z localhost:9983 -force</code> 启动node2，其中<code>-z localhost:9983</code>为连接ZooKeeper的配置</li>
</ul>
<h3 id="配置IK中文分析器"><a href="#配置IK中文分析器" class="headerlink" title="配置IK中文分析器"></a>配置IK中文分析器</h3><ul>
<li><strong>需要在启动前配置好，<code>SolrCloud</code>模式启动为例</strong></li>
<li><a href="https://download.csdn.net/download/oldinaction/10306498" target="_blank" rel="external">资源下载</a></li>
<li><code>ik-analyzer-solr5-5.x.jar</code>和<code>solr-analyzer-ik-5.1.0.jar</code>复制到<code>/server/solr-webapp/webapp/WEB-INF/lib</code>目录下</li>
<li>在<code>/server/solr-webapp/webapp/WEB-INF</code>下创建<code>classes</code>目录</li>
<li><p>将<code>IKAnalyzer.cfg.xml</code>(如下)、<code>stopword.dic</code>(分割词，如”的”等。每行一个)、<code>ext.dic</code>(每行一个，可为空文件)复制到<code>classes</code>目录下</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;</span>  </div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_dict"</span>&gt;</span>ext.dic;<span class="tag">&lt;/<span class="name">entry</span>&gt;</span> </div><div class="line">    </div><div class="line">    <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_stopwords"</span>&gt;</span>stopword.dic;<span class="tag">&lt;/<span class="name">entry</span>&gt;</span> </div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>编辑<code>server/solr/configsets/sample_techproducts_configs/conf/managed-schema</code>在<code>&lt;/schema&gt;</code>前加如下代码</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_ik"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKAnalyzer"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 示例（此时非必须）。添加一个字段desc，类型为text_ik。只有创建类似这种字段才能进行中文分词 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"desc"</span> <span class="attr">type</span>=<span class="string">"text_ik"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span> <span class="attr">multiValued</span>=<span class="string">"false"</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="同步db数据-3"><a href="#同步db数据-3" class="headerlink" title="同步db数据 ^3"></a>同步db数据 <a href="[Data-Import-Handler](https://lucene.apache.org/solr/guide/7_2/uploading-structured-data-store-data-with-the-data-import-handler.html)">^3</a></h3><ul>
<li>将以下jar包复制到<code>/server/solr-webapp/webapp/WEB-INF/lib</code>目录下<ul>
<li>solr-dataimporthandler-7.2.1.jar(在dist目录中)</li>
<li>solr-dataimporthandler-extras-7.2.1.jar</li>
<li>mysql-connector-java-5.1.43.jar</li>
</ul>
</li>
<li><p>在配置文件<code>server/solr/configsets/sample_techproducts_configs/conf/solrconfig.xml</code>末尾加入如下代码(基于<code>SolrCloud</code>模式的<code>sample_techproducts_configs</code>配置)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">requestHandler</span> <span class="attr">name</span>=<span class="string">"/dataimport"</span> <span class="attr">class</span>=<span class="string">"org.apache.solr.handler.dataimport.DataImportHandler"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">lst</span> <span class="attr">name</span>=<span class="string">"defaults"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">str</span> <span class="attr">name</span>=<span class="string">"config"</span>&gt;</span>data-config.xml<span class="tag">&lt;/<span class="name">str</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">lst</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">requestHandler</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>新增配置文件<code>server/solr/configsets/sample_techproducts_configs/conf/data-config.xml</code></p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dataConfig</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"JdbcDataSource"</span></span></div><div class="line">            <span class="attr">driver</span>=<span class="string">"com.mysql.jdbc.Driver"</span></div><div class="line">            <span class="attr">url</span>=<span class="string">"jdbc:mysql://192.168.6.1:3306/test"</span></div><div class="line">            <span class="attr">user</span>=<span class="string">"root"</span></div><div class="line">            <span class="attr">password</span>=<span class="string">"root"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">document</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 此处可以有多个entity，entity也可以嵌套。dataimporter.request.id为控制面板中Dataimport-Custom Parameters的传入参数 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- deltaQuery/deltaImportQuery为增量更新的sql --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entity</span> <span class="attr">name</span>=<span class="string">"test_solr"</span> </span></div><div class="line">            <span class="attr">pk</span>=<span class="string">"id"</span></div><div class="line">            <span class="attr">transformer</span>=<span class="string">"DateFormatTransformer"</span></div><div class="line">            <span class="attr">query</span>=<span class="string">"SELECT id, `name`, `desc`, update_time FROM test_solr WHERE id &gt;= $&#123;dataimporter.request.id&#125;"</span></div><div class="line">            <span class="attr">deltaQuery</span>=<span class="string">"select id from test_solr where update_time &gt; '$&#123;dih.last_index_time&#125;'"</span></div><div class="line">            <span class="attr">deltaImportQuery</span>=<span class="string">"SELECT id, `name`, `desc`, update_time FROM test_solr where id='$&#123;dih.delta.id&#125;'"</span>&gt;</div><div class="line">            <span class="comment">&lt;!-- column为数据库字段，name为managed_schema里配置的字段 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">column</span>=<span class="string">'update_time'</span> <span class="attr">name</span>=<span class="string">"last_modified"</span> <span class="attr">dateTimeFormat</span>=<span class="string">'yyyy-MM-dd HH:mm:ss'</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">entity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">document</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dataConfig</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>可能会连接数据库失败，可在控制面板的<code>Logging</code>中查看日志。常见如：<code>&quot;Host &#39;192.168.6.131&#39; is not allowed to connect to this MySQL server&quot;</code></li>
</ul>
</li>
<li>编辑<code>server/solr/configsets/sample_techproducts_configs/conf/managed-schema</code>在<code>&lt;/schema&gt;</code>中加入<code>&lt;field name=&quot;desc&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;false&quot; /&gt;</code>来进行中文存储（在可在控制面板中进行添加）</li>
<li>加载配置文件，参考下文【solr相关命令】</li>
<li>控制面板中进行数据导入，参考下文【控制面板-collection】<ul>
<li><code>Command=full-import</code>；<code>Entity=test_solr</code>；<code>Dataimport-Custom Parameters</code>传入<code>id=1</code>表示导入所有id&gt;1的数据</li>
<li>增量更新主要看<code>update_time</code>字段值是否比<code>dataimport.properties</code>中<code>last_index_time</code>的值大。此时最好去掉<code>clean</code>的勾选，否则全导入后<code>update_time</code>未变更的记录将被删除</li>
<li>或者访问<code>http://192.168.6.131:8983/solr/aezocn/dataimport?command=delta-import</code>进行数据导入</li>
</ul>
</li>
<li>查询数据 <code>http://192.168.6.131:8983/solr/aezocn/select?q={!term f=desc}中国人</code></li>
</ul>
<h2 id="控制面板"><a href="#控制面板" class="headerlink" title="控制面板"></a>控制面板</h2><ul>
<li>访问<code>http://localhost:8983/solr/aezocn/browse</code>为查询前端界面(类似百度搜索)</li>
<li>点击cloud查看集合分片节点信息：collection(aezocn)分成两片(shard1、shard2)，且每片都对应两个节点(192.168.6.131:8983、192.168.6.131:7574)</li>
<li><code>Logging</code> 日志。如数据导入出错会在此处打印日志</li>
</ul>
<h3 id="collection-aezocn"><a href="#collection-aezocn" class="headerlink" title="collection(aezocn)"></a>collection(aezocn)</h3><ul>
<li><code>Dataimport</code> db数据同步<ul>
<li><code>Command</code>分为<code>full-import</code>(全导入)和<code>delta-import</code>(增量导入)</li>
</ul>
</li>
<li><code>Documents</code> post文档数据</li>
<li><code>Query</code> 检索<ul>
<li><code>common</code>-<code>q</code>输入检索词汇，支持<code>&quot;&quot;</code>、<code>+</code>、<code>-</code>等符号</li>
</ul>
</li>
<li><code>Schema</code> 字段配置，添加字段等</li>
</ul>
<h2 id="solr相关命令"><a href="#solr相关命令" class="headerlink" title="solr相关命令"></a>solr相关命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## **`SolrCloud`配置文件加载**</span></div><div class="line"><span class="comment"># `SolrCloud`模式下配置文件是基于`server/solr/configsets`中配置文件加载的。可以在`configsets`新建配置文件模版文件夹</span></div><div class="line"><span class="comment"># 如果在控制面板`Cloud`-`Tree`-`configs`中无名为aezocn的Configset则会自动新建一个。如果存在则会进行更新</span></div><div class="line">bin/solr zk upconfig -z localhost:9983 -n aezocn -d /opt/soft/solr-7.2.1/server/solr/configsets/sample_techproducts_configs</div><div class="line"><span class="comment"># 配置文件加载后需要刷新集合aezocn</span></div><div class="line">http://192.168.6.131:8983/solr/admin/collections?action=RELOAD&amp;name=aezocn</div><div class="line"></div><div class="line"><span class="comment">## 创建新集合</span></div><div class="line"><span class="comment"># 创建新集合名为movie，2个shades(`-s`)和2个replicas(`-rf`), 默认使用`_default`作为配置模板</span></div><div class="line">./bin/solr create -c movie -s 2 -rf 2</div><div class="line"></div><div class="line"><span class="comment">## 删除集合</span></div><div class="line">./bin/solr delete -c aezocn</div><div class="line"></div><div class="line"><span class="comment">## **清空数据**</span></div><div class="line"><span class="comment"># 删除`example/cloud`文件夹即可删除`SolrCloud`模式启动的集合</span></div><div class="line">rm -Rf example/cloud/</div><div class="line"></div><div class="line"><span class="comment">## 给集合添加字段</span></div><div class="line"><span class="comment"># 往movie集合中添加一个字段名为username、文本型、不可存放多个值、可检索查询 </span></div><div class="line">curl -X POST -H <span class="string">'Content-type:application/json'</span> --data-binary <span class="string">'&#123;"add-field": &#123;"name":"username", "type":"text_general", "multiValued":false, "stored":true&#125;&#125;'</span> http://localhost:8983/solr/movie/schema</div><div class="line"></div><div class="line"><span class="comment">## 添加文档数据，以自带exampledocs为例导入测试数据。往集合aezocn中post数据(也可在控制面板中post文档数据)</span></div><div class="line">./bin/post -c aezocn example/exampledocs/*</div></pre></td></tr></table></figure>
<h2 id="Client-APIs"><a href="#Client-APIs" class="headerlink" title="Client APIs"></a>Client APIs</h2><ul>
<li>基于<code>solrj</code>进行数据提交和查询 <a href="[Using-SolrJ](https://lucene.apache.org/solr/guide/7_2/using-solrj.html#using-solrj)">^2</a></li>
<li><a href="https://lucene.apache.org/solr/7_2_0//solr-solrj/" target="_blank" rel="external">Solrj API</a></li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.solr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>solr-solrj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<p>参考文章</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Solr&lt;/code&gt;它是一种开放源码的、基于 Lucene Java 的搜索服务器，易于加入到 Web 应用程序中
    
    </summary>
    
      <category term="bigdata" scheme="http://blog.aezo.cn/categories/bigdata/"/>
    
    
      <category term="lucene" scheme="http://blog.aezo.cn/tags/lucene/"/>
    
      <category term="solr" scheme="http://blog.aezo.cn/tags/solr/"/>
    
  </entry>
  
  <entry>
    <title>Java项目CPU及内存异常分析</title>
    <link href="http://blog.aezo.cn/2018/03/13/java/Java%E9%A1%B9%E7%9B%AECPU%E5%8F%8A%E5%86%85%E5%AD%98%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/"/>
    <id>http://blog.aezo.cn/2018/03/13/java/Java项目CPU及内存异常分析/</id>
    <published>2018-03-13T05:35:00.000Z</published>
    <updated>2018-04-16T02:18:59.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>java应用常见故障：<strong>高CPU占用</strong>、<strong>高内存占用</strong>、<strong>高I/O占用</strong>(包括磁盘I/O、网络I/O、数据库I/O等)</li>
<li>高CPU常见场景：死循环(如while导致的较多)、高内存导致<ul>
<li>高内存占用也会引起高CPU占用：内存溢出后，java的GC便会运行非常频繁，从而导致高CPU</li>
</ul>
</li>
<li>高内存常见场景：List集合数据量过大(常见从数据库获取大量数据，而没有进行分页获取) <a href="[线上应用故障排查之二：高内存占用](http://www.blogjava.net/hankchen/archive/2012/05/09/377736.html)">^2</a><ul>
<li><code>java.lang.OutOfMemoryError: PermGen space</code>，原因可能为<ul>
<li>程序启动需要加载大量的第三方jar包。例如：在一个Tomcat下部署了太多的应用</li>
</ul>
</li>
<li><code>java.lang.OutOfMemoryError: Java heap space</code>，原因可能为<ul>
<li>Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整。</li>
<li>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）</li>
</ul>
</li>
<li>在Java虚拟机中，内存分为三个代<ul>
<li>新生代New：新建的对象都存放这里</li>
<li>老生代Old：存放从新生代New中迁移过来的生命周期较久的对象。新生代New和老生代Old共同组成了堆内存</li>
<li>永久代Perm：是非堆内存的组成部分。主要存放加载的Class类级对象如class本身，method，field等等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="相关命令介绍"><a href="#相关命令介绍" class="headerlink" title="相关命令介绍"></a>相关命令介绍</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 1.查看linux运行状态(htop工具显示更强大)：如8核则CPU可能达到800%</span></div><div class="line"><span class="comment"># Windows可以使用ProcessExplorer.exe查看进程和线程信息</span></div><div class="line">top</div><div class="line"></div><div class="line"><span class="comment">## 2.显示某进程的线程列表。pid：进程id;</span></div><div class="line"><span class="comment"># 结果说明：（1）第一行为统计（2）%CPU为此线程CPU占用率（3）TIME为线程运行时间（4）%MEM为内存占用率</span></div><div class="line">ps -mp &lt;pid&gt; -o THREAD,tid,time,rss,size,%mem</div><div class="line"></div><div class="line"><span class="comment">## 3.Java的jstack命令：打印线程的堆栈信息</span></div><div class="line"><span class="comment"># pid：进程id; tid线程id; -A 30表示显示30行; `printf "%x\n" &lt;tid&gt;`获取线程ID的16进制格式</span></div><div class="line"><span class="comment"># 如"OFBiz-JobQueue-0"为线程名，prio=10为优先级，tid为线程id，RUNNABLE为运行中</span></div><div class="line"><span class="comment"># "OFBiz-JobQueue-0" prio=10 tid=0x00007f2c60007800 nid=0x96d runnable [0x00007f2cfe187000]</span></div><div class="line"><span class="comment">#    java.lang.Thread.State: RUNNABLE</span></div><div class="line"><span class="comment">#       at java.net.SocketInputStream.socketRead0(Native Method)</span></div><div class="line"><span class="comment">#       ......</span></div><div class="line">jstack &lt;pid&gt; | grep `<span class="built_in">printf</span> <span class="string">"%x\n"</span> &lt;tid&gt;` -A 30</div><div class="line"><span class="comment"># 获取thread dump到文件</span></div><div class="line">jstack &lt;pid&gt; &gt; jstack.out</div><div class="line"></div><div class="line"><span class="comment">## 4.Java的jmap命令：显示一个进程下具体线程的内存占用情况</span></div><div class="line"><span class="comment"># 可以查看当前Java进程创建的活跃对象数目和占用内存大小（此处按照大小查询前100个对象）；或者保存到文件（jmap -histo:live &lt;pid&gt; &gt; /home/jmap.out）</span></div><div class="line">jmap -histo:live &lt;pid&gt; | head -n 100</div><div class="line"><span class="comment"># 获取heap dump，方便用专门的内存分析工具（例如：MAT）来分析</span></div><div class="line"><span class="comment"># （1）jmap命令获取：执行时JVM是暂停服务的，所以对线上的运行会产生影响（生成文件大小和程序占用内存差不多；2G大概暂停10秒钟）</span></div><div class="line">jmap -dump:live,format=b,file=/home/dump.hprof &lt;pid&gt;</div><div class="line"><span class="comment"># （2）项目启动添加参数获取(不能实时获取)</span></div><div class="line">-XX:+HeapDumpOnOutOfMemoryError <span class="comment"># 出现 OOME 时生成堆 dump:</span></div><div class="line">-XX:HeapDumpPath=/home/jvmlogs/ <span class="comment"># 生成堆文件地址</span></div></pre></td></tr></table></figure>
<h2 id="MAT工具使用"><a href="#MAT工具使用" class="headerlink" title="MAT工具使用"></a>MAT工具使用</h2><ul>
<li><p>MAT(Memory Analyzer Tool)：根据分析dump文件从而分析堆内存使用情况，<a href="http://www.eclipse.org/mat/downloads.php" target="_blank" rel="external">下载</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/moonandstar08/p/5625164.html" target="_blank" rel="external">https://www.cnblogs.com/moonandstar08/p/5625164.html</a></p>
</li>
<li><a href="http://blog.csdn.net/aaa2832/article/details/19419679" target="_blank" rel="external">http://blog.csdn.net/aaa2832/article/details/19419679</a></li>
</ul>
<h2 id="OFBiz项目案例分析"><a href="#OFBiz项目案例分析" class="headerlink" title="OFBiz项目案例分析"></a>OFBiz项目案例分析</h2><blockquote>
<p>案例介绍：此问题主要是ofbiz在清理历史任务时，任务数据过大导致内存溢出，从而CPU飙升，最终服务器时常宕机。</p>
</blockquote>
<ul>
<li><code>htop</code>查看情况如下</li>
</ul>
<p>可以看到其中PID=2273的进程CPU占用到达710%(服务器为8核)，内存占用22%(服务器为16G*0.22=3.52G，jvm参数设置的内存大小为3G)，其中线程运行时间达到5h29m。以上数据说明程序运行存在问题</p>
<p><img src="/data/images/java/ofbiz-cpu.png" alt="htop"></p>
<ul>
<li><code>ps -mp 2273 -o THREAD,tid,time,rss,size,%mem</code> 查看此进程下线程运行情况：实际中发现有7个进程占用CPU均达到几十分钟，且CPU和内存占用均非常高。(其中2个是ofbiz拉取历史任务进行清理的进程，5个为GC进行垃圾回收的进程)</li>
<li><code>jstack 2273 | grep</code>printf “%x\n” 2413<code>-A 40</code> 查看2273进程下2413线程的堆栈信息如下(或者输出到文件进行查看)</li>
</ul>
<p>可以看到线程有以下调用信息<code>org.ofbiz.service.job.PurgeJob.exec(PurgeJob.java:55)</code>，如是可以去查看PurgeJob的源码。(当然应该多次查看此线程的堆栈，查看一次可能存在偶发性)</p>
<p><img src="/data/images/java/ofbiz-purgejob-jstack.png" alt="jstack"></p>
<ul>
<li>ofbiz的PurgeJob相关源码。详细可参考《OFBiz服务和任务机制》</li>
</ul>
<p>ofbiz任务机制有如下逻辑：当拉取任务线程为获取到需要执行的任务时，则进行历史任务数据(JobSandbox等表数据)清理工作，即获取当前时间4天(默认的purge-job-days)前完成或者取消的任务数据进行删除。</p>
<p>而此处是根据ofbiz实体引擎查询的历史数据放到一个EntityListIterator中进行遍历(查看源码可知本质并没有分页获取数据，而是将所有查询的数据放到ResultSet进行遍历)</p>
<p>由于本项目前期并没有太多的关注任务调用周期，从而导致大量任务堆积，并且不能及时清理。一定数量后，再次触发任务数据清理时就会从数据库获取大量数据到内存，从而内存移除，GC频繁清理，CPU飙升，服务器宕机。</p>
<p><img src="/data/images/java/ofbiz-purgejob-src.png" alt="ofbiz-purgejob-src"></p>
<ul>
<li><p>MAT分析：从服务器下载dump文件使用MAT进行分析，发现也可发现上述情况</p>
</li>
<li><p>解决方案</p>
</li>
</ul>
<p>由于个人觉得ofbiz任务机制不太好用，决定不去清理历史数据，而是手动定时清理(或绕过ofbiz定时去清理)。因此可以修改<code>/framework/service/config/serviceengine.xml</code>中<code>purge-job-days</code>的值。重新启动服务器(之前占用的内存无法及时清除，必须重启服务器)和项目一切正常</p>
<hr>
<p>参考文章</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;java应用常见故障：&lt;strong&gt;高CPU占用&lt;/strong&gt;、&lt;strong&gt;高内存占用&lt;/strong&gt;、&lt;stron
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="ofbiz" scheme="http://blog.aezo.cn/tags/ofbiz/"/>
    
      <category term="CPU" scheme="http://blog.aezo.cn/tags/CPU/"/>
    
      <category term="内存" scheme="http://blog.aezo.cn/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="运维" scheme="http://blog.aezo.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>lvs</title>
    <link href="http://blog.aezo.cn/2018/03/04/arch/lvs/"/>
    <id>http://blog.aezo.cn/2018/03/04/arch/lvs/</id>
    <published>2018-03-04T09:45:00.000Z</published>
    <updated>2018-03-14T03:02:17.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><code>LVS</code>是<code>Linux Virtual Server</code>的简称，也就是Linux虚拟服务器</li>
<li>负载均衡解决方案主要分为硬件层面和软件层面<ul>
<li>硬件如：F5等(一台一般15万)</li>
<li><strong>软件可分为第四层和第七层协议</strong><ul>
<li>第四层如：<code>lvs</code>(只能操作ip和端口，在操作系统内核中)</li>
<li>第七层(应用层：http/ajp/https)如：<code>nginx</code>、<code>httpd</code>(apache)、<code>haproxy</code></li>
</ul>
</li>
</ul>
</li>
<li>Lvs的组成包括 <code>ipvs</code> 和 <code>ipvsadm</code><ul>
<li>ipvs(ip virtual server)：一段代码工作在内核空间，叫ipvs，是真正生效实现调度的代码(所有的linux都有此功能)</li>
<li>ipvsadm：另外一段是工作在用户空间，叫ipvsadm，负责为ipvs内核框架编写规则，定义谁是集群服务，而谁是后端真实的服务器(Real Server)。安装<code>yum install ipvsadm -y</code></li>
</ul>
</li>
<li>lvs默认是用的<code>wlc</code>调度算法：会根据后端 RS 的连接数来决定把请求分发给谁，比如 RS1 连接数比 RS2 连接数少，那么请求就优先发给 RS1。并考虑权重</li>
<li>相关术语<ul>
<li><code>DS</code>：Director Server。指的是前端负载均衡器节点</li>
<li><code>RS</code>：Real Server。后端真实的工作服务器</li>
<li><code>VIP</code>：向外部直接面向用户请求，作为用户请求的目标的IP地址</li>
<li><code>DIP</code>：Director Server IP，主要用于和内部主机通讯的IP地址</li>
<li><code>RIP</code>：Real Server IP，后端服务器的IP地址</li>
<li><code>CIP</code>：Client IP，访问客户端的IP地址</li>
</ul>
</li>
</ul>
<h2 id="LVS的DR模式原理-1"><a href="#LVS的DR模式原理-1" class="headerlink" title="LVS的DR模式原理 ^1"></a>LVS的DR模式原理 <a href="[使用LVS实现负载均衡原理及安装配置详解](https://www.cnblogs.com/liwei0526vip/p/6370103.html)">^1</a></h2><p><img src="/data/images/arch/lvs-nat.png" alt="LVS/NAT"></p>
<ol>
<li>当用户请求到达Director Server，此时请求的数据报文会先到内核空间的PREROUTING链。 此时报文的源IP为CIP，目标IP为VIP </li>
<li>PREROUTING检查发现数据包的目标IP是本机，将数据包送至INPUT链</li>
<li>IPVS比对数据包请求的服务是否为集群服务，若是，修改数据包的目标IP地址为后端服务器IP，然后将数据包发至POSTROUTING链。 此时报文的源IP为CIP，目标IP为RIP </li>
<li>POSTROUTING链通过选路，将数据包发送给Real Server</li>
<li>Real Server比对发现目标为自己的IP，开始构建响应报文发回给Director Server。 此时报文的源IP为RIP，目标IP为CIP </li>
<li>Director Server在响应客户端前，此时会将源IP地址修改为自己的VIP地址，然后响应给客户端。 此时报文的源IP为VIP，目标IP为CIP</li>
</ol>
<h2 id="LVS的DR模式实践"><a href="#LVS的DR模式实践" class="headerlink" title="LVS的DR模式实践"></a>LVS的DR模式实践</h2><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><ul>
<li>请求流程<ul>
<li>CIP-VIP的请求数据包发送到DS<strong>(所以此时DS必须绑定可访问的VIP)</strong>RIP-CIP的返回</li>
<li>CIP-RIP的请求数据包发送到RS(通过DS转发)<ul>
<li>RIP-CIP的响应数据包可从RS发送，但是客户端不会接受，因为CIP请求的是VIP。所有必须是RS响应VIP-CIP的数据包(相当于IP欺骗)</li>
</ul>
</li>
<li>VIP-CIP的响应数据包由RS返回到客户端<strong>(所以此时RS必须绑定隐藏的VIP)</strong></li>
</ul>
</li>
<li>上述流程中DS和RS都绑定的VIP，但是一个网络中不能有两台机器同时绑定一个IP。但是RS是隐藏的VIP，<strong>隐藏VIP的前提是：不对外广播和不对外响应</strong></li>
<li>通过修改以下内核参数来隐藏RS的VIP<ul>
<li><code>arp_ignore</code>：定义接收到ARP请求时的<strong>响应级别</strong><ul>
<li>0：只要在本地配置的有相应地址，就给予响应(默认)</li>
<li>1：仅在请求的目标MAC地址与请求的网络接口匹配时，才给予响应(mac地址和ip地址匹配时才响应；lvs设置此级别)</li>
</ul>
</li>
<li><code>arp_announce</code>：定义将自己地址向外<strong>通告级别</strong><ul>
<li>0：将本地任何接口上的任何地址向外通过(默认)</li>
<li>1：试图仅向目标网络通告与其网络匹配的地址</li>
<li>2：仅向与本地接口MAC地址匹配的网络进行通告(mac地址和ip地址匹配时才通告；lvs设置此级别)</li>
</ul>
</li>
</ul>
</li>
<li>步骤(可将以下步骤封装成脚本)<ul>
<li>对DS创建网络接口并绑定VIP</li>
<li>对所有RS隐藏VIP(进行网络配置)</li>
<li>对所有RS绑定VIP(必须先隐藏在进行绑定，因为绑定的一瞬间就会对外通告)</li>
<li>对所有RS修改其VIP路由</li>
<li>通过ipvsadm进行相关配置</li>
</ul>
</li>
<li><code>ip addr</code> 查看网络接口(其中<code>lo</code>不对外进行通信，<code>ens33</code>/<code>eth0</code>会对外通信)</li>
<li>所需服务器列表(需要在同一网段)<ul>
<li>Director节点：(ens33 192.168.6.134 vip ens33:0 192.168.6.120)</li>
<li>Real server1：(ens33 192.168.6.131 vip lo:0 192.168.6.120)</li>
<li>Real server2：(ens33 192.168.6.132 vip lo:0 192.168.6.120)</li>
</ul>
</li>
<li><strong>重启服务器后RS的配置都丢失？？？</strong></li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li>对DS(192.168.6.134)创建网络接口并绑定VIP：<code>ifconfig ens33:1 192.168.6.120</code></li>
<li><p>对RS(<code>192.168.6.131</code>、<code>192.168.6.132</code>)隐藏VIP</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 修改arp_ignore的值为1(proc目录为内核映射文件，修改此目录的文件就会修改内存数据)</span></div><div class="line"><span class="comment"># ens33为对应网卡接口名称(也可能为eth0等)</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/conf/ens33/arp_ignore</div><div class="line"><span class="built_in">echo</span> <span class="string">"1"</span> &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</div><div class="line"><span class="built_in">echo</span> <span class="string">"2"</span> &gt; /proc/sys/net/ipv4/conf/ens33/arp_announce</div><div class="line"><span class="built_in">echo</span> <span class="string">"2"</span> &gt; /proc/sys/net/ipv4/conf/all/arp_announce</div></pre></td></tr></table></figure>
</li>
<li><p>对所有RS绑定VIP：<code>ifconfig lo:1 192.168.6.120 netmask 255.255.255.255 broadcast 192.168.6.120</code>(所有RS命令一致)</p>
<ul>
<li>此处故意输入一个错误的子网掩码<code>255.255.255.255</code>，防止此ip对外通信</li>
<li>前后输入<code>ifconfig</code>进行查看对比</li>
</ul>
</li>
<li>对所有RS修改其VIP路由：<code>route add -host 192.168.6.120 lo:1</code>(所有RS命令一致)<ul>
<li>前后输入<code>route</code>进行查看对比</li>
</ul>
</li>
<li><p>通过ipvsadm进行相关配置</p>
<ul>
<li>在DS(192.168.6.134)上安装<code>yum install ipvsadm -y</code></li>
<li><p>在DS上进行如下配置</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -A：Add a virtual service; -t：tcp协议; -s rr：调度算法为wlc</span></div><div class="line">ipvsadm -A -t 192.168.6.120:80 -s wlc</div><div class="line"><span class="comment"># -a：Add a real server to a virtual service; -r：real server配置; -g：使用DR模式</span></div><div class="line">ipvsadm -a -t 192.168.6.120:80 -r 192.168.6.131 -g</div><div class="line">ipvsadm -a -t 192.168.6.120:80 -r 192.168.6.132 -g</div></pre></td></tr></table></figure>
</li>
<li><p>ipvsadm其他命令</p>
<ul>
<li><code>ipvsadm -ln</code> 查看lvs配置</li>
<li><code>ipvsadm -lnc</code> 查看lvs分发记录</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li>修改RS(<code>192.168.6.131</code>、<code>192.168.6.132</code>)的nginx安装目录下<code>html/50x.html</code>文件，分别加入<code>&lt;h1&gt;server1&lt;/h1&gt;</code>和<code>&lt;h1&gt;server2&lt;/h1&gt;</code>(前提是通过 <a href="http://192.168.6.131/50x.html" target="_blank" rel="external">http://192.168.6.131/50x.html</a> 可访问到对应的文件)</li>
<li>访问<code>http://192.168.6.120/50x.html</code>观察显示页面</li>
</ul>
<h2 id="LVS结合keepalive"><a href="#LVS结合keepalive" class="headerlink" title="LVS结合keepalive"></a>LVS结合keepalive</h2><ul>
<li><strong>LVS可以实现负载均衡，但是不能够进行健康检查</strong>，比如一个rs出现故障，LVS 仍然会把请求转发给故障的rs服务器，这样就会导致请求的无效性。<strong>keepalive 软件可以进行健康检查，而且能同时实现 LVS 的高可用性，解决 LVS 单点故障的问题</strong>。其实 keepalive 就是为 LVS 而生的。</li>
</ul>
<hr>
<p>参考文章</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LVS&lt;/code&gt;是&lt;code&gt;Linux Virtual Server&lt;/code&gt;的简称，也就是Linux虚拟
    
    </summary>
    
      <category term="arch" scheme="http://blog.aezo.cn/categories/arch/"/>
    
    
      <category term="LB" scheme="http://blog.aezo.cn/tags/LB/"/>
    
      <category term="HA" scheme="http://blog.aezo.cn/tags/HA/"/>
    
  </entry>
  
  <entry>
    <title>keepalived</title>
    <link href="http://blog.aezo.cn/2018/03/03/arch/keepalived/"/>
    <id>http://blog.aezo.cn/2018/03/03/arch/keepalived/</id>
    <published>2018-03-03T09:24:00.000Z</published>
    <updated>2018-03-31T11:23:35.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><a href="http://www.keepalived.org/" target="_blank" rel="external">Keepalived</a>是一个免费开源的，用C编写的类似于layer3, 4 &amp; 7交换机制软件，具备我们平时说的第3层、第4层和第7层交换机的功能。主要提供loadbalancing（负载均衡）和 high-availability（高可用）功能，负载均衡实现需要依赖Linux的虚拟服务内核模块（ipvs），而高可用是通过<code>VRRP</code>协议实现多台机器之间的故障转移服务</li>
</ul>
<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><ul>
<li><code>yum -y install keepalived</code></li>
<li>源码安装 <a href="[Keepalived安装与配置](http://blog.csdn.net/xyang81/article/details/52554398)">^1</a></li>
<li><code>systemctl start keepalived</code> 启动<strong>(需要关闭<code>SELinux</code>)</strong><ul>
<li>启动后自动绑定虚拟ip，通过<code>ip addr</code>可查看绑定的虚拟ip</li>
</ul>
</li>
</ul>
<h2 id="keepalived-conf配置说明"><a href="#keepalived-conf配置说明" class="headerlink" title="keepalived.conf配置说明"></a>keepalived.conf配置说明</h2><ul>
<li>文件位置 <code>/etc/keepalived/keepalived.conf</code></li>
<li>keepalived配置文件主要包含三块：全局定义块、VRRP实例定义块、虚拟服务器定义块（如果keepalived只用来做ha，虚拟服务器是可选的）</li>
<li>配置说明 <a href="[Keepalived安装与配置](http://blog.csdn.net/xyang81/article/details/52554398)">^1</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### 全局定义块</span></div><div class="line">global_defs &#123;</div><div class="line">    <span class="comment">## 邮件通知配置：用于服务有故障时发送邮件报警，可选项，不建议用。需要系统开启sendmail服务，建议用第三独立监控服务，如用nagios全面监控代替</span></div><div class="line">    notification_email &#123;</div><div class="line">        <span class="comment"># 一行一个收件人</span></div><div class="line">        email1@aezo.cn</div><div class="line">        email2@aezo.cn</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># 发件人</span></div><div class="line">    notification_email_from admin@aezo.cn</div><div class="line">    smtp_server XXX.smtp.com</div><div class="line">    <span class="comment"># 指定smtp连接超时时间</span></div><div class="line">    smtp_connect_timeout 30</div><div class="line"></div><div class="line">    <span class="comment"># lvs负载均衡器标识，在一个网络内，它的值应该是唯一的</span></div><div class="line">    lvs_id string</div><div class="line">    <span class="comment"># 用户标识本节点的名称，通常为hostname</span></div><div class="line">    router_id server1.aezocn</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">### VRRP实例定义块：同步vrrp级，用于确定失败切换（FailOver）包含的路由实例个数。即在有2个负载均衡器的场景，一旦某个负载均衡器失效，需要自动切换到另外一个负载均衡器的实例是哪</span></div><div class="line">vrrp_sync_group string &#123;</div><div class="line">    <span class="comment"># 至少要包含一个vrrp实例，vrrp实例名称必须和vrrp_instance定义的一致</span></div><div class="line">    group &#123;</div><div class="line">        VI_1</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># vrrp服务检测脚本：keepalived默认是通过检测keepalived进程是否存在判断服务器是否宕机。此时根据脚本判断是否杀死此服务器keepalived进程。参考《nginx》中【结合keepalived实现高可用】</span></div><div class="line">vrrp_script check_nginx.sh &#123;</div><div class="line">    <span class="comment">#检测nginx的脚本</span></div><div class="line">    script <span class="string">"/etc/keepalived/check_nginx.sh"</span></div><div class="line">    <span class="comment">#每2秒检测一次</span></div><div class="line">    interval 2</div><div class="line">    <span class="comment">#如果某一个nginx宕机 则权重减20                              </span></div><div class="line">    weight -20</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># vrrp实例名(VI_1)</span></div><div class="line">vrrp_instance VI_1 &#123;</div><div class="line">    <span class="comment"># 实例状态，只有MASTER（主）和BACKUP（备）两种状态，并且需要全部大写</span></div><div class="line">    <span class="comment"># 抢占模式下，其中MASTER为工作状态，BACKUP为备用状态。当MASTER所在的服务器失效时，BACKUP所在的服务会自动把它的状态由BACKUP切换到MASTER状态。当失效的MASTER所在的服务恢复时，BACKUP从MASTER恢复到BACKUP状态</span></div><div class="line">    state MASTER</div><div class="line">    <span class="comment"># 对外提供服务的网卡接口，即VIP绑定的网卡接口，如：eth0，eth1</span></div><div class="line">    interface eth0</div><div class="line">    <span class="comment"># 本机IP地址</span></div><div class="line">    mcast_src_ip 192.168.1.1</div><div class="line">    <span class="comment"># 虚拟路由的ID号，每个节点设置必须一样，可选择IP最后一段使用，相同的 VRID 为一个组，他将决定多播的 MAC 地址。同一实例下virtual_router_id必须相同（主从要一致）</span></div><div class="line">    virtual_router_id 51</div><div class="line">    <span class="comment"># 节点优先级，取值范围0～254，MASTER要比BACKUP高</span></div><div class="line">    priority 100</div><div class="line">    <span class="comment"># MASTER与BACKUP节点间同步检查的时间间隔，单位为秒</span></div><div class="line">    advert_int 1</div><div class="line">    <span class="comment"># 验证类型和验证密码</span></div><div class="line">    authentication &#123;</div><div class="line">        <span class="comment"># 类型主要有 PASS、AH 两种，通常使用PASS类型</span></div><div class="line">        auth_type PASS</div><div class="line">        <span class="comment"># 验证密码为明文，同一 vrrp 实例 MASTER 与 BACKUP 使用相同的密码才能正常通信</span></div><div class="line">        auth_pass 1111</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># 虚拟IP地址池，可以有多个IP，每个IP占一行，不需要指定子网掩码。注意：这个IP必须与我们的设定的vip保持一致</span></div><div class="line">    <span class="comment"># 启动后自动给MASTER绑定虚拟ip(MASTER宕机后，则虚拟ip会绑定到BACKUP上)</span></div><div class="line">    virtual_ipaddress &#123;  <span class="comment"># Block limited to 20 IP addresses @IP</span></div><div class="line">        <span class="comment"># 此虚拟ip为web服务对外提供访问的ip</span></div><div class="line">        192.168.200.1</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"># 负载均衡器之间的监控接口,类似于 HA HeartBeat 的心跳线。但它的机制优于 Heartbeat，因为它没有"裂脑"这个问题，它是以优先级这个机制来规避这个麻烦的。在 DR 模式中，lvs_sync_daemon_inteface与服务接口interface使用同一个网络接口</span></div><div class="line">    lvs_sync_daemon_interface string </div><div class="line">    <span class="comment"># 配置后，有故障时激活邮件通知</span></div><div class="line">    smtp_alert</div><div class="line">    <span class="comment"># 禁止抢占服务。默认情况，当MASTER服务挂掉之后，BACKUP自动升级为MASTER并接替它的任务，当MASTER服务恢复后，升级为MASTER的BACKUP服务又自动降为BACKUP，把工作权交给原MASTER。当配置了nopreempt，MASTER从挂掉到恢复，不再将服务抢来</span></div><div class="line">    nopreempt</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">### 虚拟服务器定义块：定义一个虚拟服务器，这个ip是virtual_ipaddress中定义的其中一个</span></div><div class="line">virtual_server 192.168.200.1 8110 &#123;</div><div class="line">    <span class="comment">#　健康检查时间间隔，单位：秒</span></div><div class="line">    delay_loop 6</div><div class="line">    <span class="comment"># 负载均衡调度算法，互联网应用常用方式为wlc或rr。取值rr|wrr|lc|wlc|sh|dh|lblc </span></div><div class="line">    lb_algo rr</div><div class="line">    <span class="comment"># 负载均衡转发规则。包括DR、NAT、TUN，一般使用路由（DR）转发规则。</span></div><div class="line">    lb_kind DR</div><div class="line">    <span class="comment"># http服务会话保持时间，单位：秒</span></div><div class="line">    persistence_timeout 50</div><div class="line">    <span class="comment"># 转发协议，分为TCP和UDP两种</span></div><div class="line">    protocol TCP</div><div class="line">    <span class="comment"># 真实服务器IP和端口，可以定义多个</span></div><div class="line">    real_server 192.168.200.3 1358 &#123;</div><div class="line">        <span class="comment"># 负载权重，值越大，转发的优先级越高</span></div><div class="line">        weight 1</div><div class="line">        <span class="comment"># 服务停止后执行的脚本</span></div><div class="line">        notify_down /path/script.sh</div><div class="line">        <span class="comment"># 服务有效性检测：HTTP_GET|SSL_CHECK</span></div><div class="line">        HTTP_GET &#123;</div><div class="line">            url &#123;</div><div class="line">                path /testurl1/test.jsp</div><div class="line">                digest 640205b7b0fc66c1ea91c463fac6334d</div><div class="line">            &#125;</div><div class="line">            <span class="comment"># 服务连接端口</span></div><div class="line">            connect_port 80</div><div class="line">            <span class="comment"># 服务连接超时时长，单位：秒</span></div><div class="line">            connect_timeout 3</div><div class="line">            <span class="comment"># 服务连接失败重试次数</span></div><div class="line">            nb_get_retry 3</div><div class="line">            <span class="comment"># 重试连接间隔，单位：秒</span></div><div class="line">            delay_before_retry 3</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="相关应用"><a href="#相关应用" class="headerlink" title="相关应用"></a>相关应用</h2><h3 id="nginx-keepalived实现高可用"><a href="#nginx-keepalived实现高可用" class="headerlink" title="nginx + keepalived实现高可用"></a>nginx + keepalived实现高可用</h3><p>参考<code>《nginx》</code>的<code>【结合keepalived实现高可用】</code>章节</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>mysql + keepalived</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.keepalived.org/&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
      <category term="arch" scheme="http://blog.aezo.cn/categories/arch/"/>
    
    
      <category term="keepalived" scheme="http://blog.aezo.cn/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>memcached缓存数据库</title>
    <link href="http://blog.aezo.cn/2018/03/03/db/memcached/"/>
    <id>http://blog.aezo.cn/2018/03/03/db/memcached/</id>
    <published>2018-03-03T06:32:00.000Z</published>
    <updated>2018-03-04T12:14:45.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><a href="http://www.runoob.com/memcached/memcached-tutorial.html" target="_blank" rel="external">菜鸟教程</a></li>
<li>memcached集群需要多台服务器时间一致(30s以内)</li>
</ul>
<h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><ul>
<li><code>yum –y install memcached</code> 安装</li>
<li><code>systemctl start memcached</code> 启动(默认端口11211)</li>
<li><p>测试存值取值</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">telnet localhost 11211</div><div class="line"><span class="comment"># 设置变量abc的长度为5</span></div><div class="line"><span class="built_in">set</span> abc 0 0 5</div><div class="line"><span class="comment"># 设置abc的值为12345，长度必须和上面一致</span></div><div class="line">12345</div><div class="line"><span class="comment"># 获取abc的值</span></div><div class="line">get abc</div><div class="line"><span class="comment"># 退出</span></div><div class="line">quit</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="解决session一致性-session共享"><a href="#解决session一致性-session共享" class="headerlink" title="解决session一致性(session共享)"></a>解决session一致性(session共享)</h2><p>参考《nginx》的【反向代理和负载均衡】部分</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.runoob.com/memcached/memcached-tutorial.html
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="arch" scheme="http://blog.aezo.cn/tags/arch/"/>
    
  </entry>
  
  <entry>
    <title>OFBiz服务和任务机制</title>
    <link href="http://blog.aezo.cn/2018/02/24/java/ofbiz/OFBiz%E6%9C%8D%E5%8A%A1%E5%92%8C%E4%BB%BB%E5%8A%A1%E6%9C%BA%E5%88%B6/"/>
    <id>http://blog.aezo.cn/2018/02/24/java/ofbiz/OFBiz服务和任务机制/</id>
    <published>2018-02-24T08:27:00.000Z</published>
    <updated>2018-04-16T10:44:03.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><ul>
<li><code>org.ofbiz.service.job.JobPoller</code> 加载时会启动一个自动拉取任务的线程(从数据拉取任务放到执行器池中)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 线程池执行器(调度线程执行，BlockingQueue中必须存放线程对象)</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor executor = createThreadPoolExecutor();</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JobPoller instance = <span class="keyword">new</span> JobPoller();</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="comment">// 初始化线程池执行器</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title">createThreadPoolExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ThreadPool threadPool = ServiceConfigUtil.getServiceEngine(ServiceConfigUtil.engine).getThreadPool();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(</div><div class="line">            threadPool.getMinThreads(), threadPool.getMaxThreads(), threadPool.getTtl(), TimeUnit.MILLISECONDS,</div><div class="line">            <span class="comment">// 将所有的Job(继承了Runnable)放到LinkedBlockingQueue中</span></div><div class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(threadPool.getJobs()), </div><div class="line">            <span class="comment">// 线程实例化工厂</span></div><div class="line">            <span class="keyword">new</span> JobInvokerThreadFactory(), </div><div class="line">            <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</div><div class="line">    &#125; <span class="keyword">catch</span> (GenericConfigException e) &#123;</div><div class="line">       <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JobInvokerThreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable runnable)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(runnable, <span class="string">"OFBiz-JobQueue-"</span> + created.getAndIncrement());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 自动执行任务的线程</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Thread jobManagerPollerThread;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">JobPoller</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (pollEnabled()) &#123;</div><div class="line">        jobManagerPollerThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> JobManagerPoller(), <span class="string">"OFBiz-JobPoller"</span>);</div><div class="line">        jobManagerPollerThread.setDaemon(<span class="keyword">false</span>);</div><div class="line">        jobManagerPollerThread.start();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        jobManagerPollerThread = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    ServiceConfigUtil.registerServiceConfigListener(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>org.ofbiz.service.job.GenericServiceJob</code> 任务执行(线程调度器会进行调度)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> <span class="keyword">throws</span> InvalidJobException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (currentState != State.QUEUED) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidJobException(<span class="string">"Illegal state change"</span>);</div><div class="line">    &#125;</div><div class="line">    currentState = State.RUNNING;</div><div class="line">    <span class="comment">// 持久化的任务(JobSandbox)通过此方法初始化(修改任务状态)</span></div><div class="line">    init();</div><div class="line">    Throwable thrown = <span class="keyword">null</span>;</div><div class="line">    Map&lt;String, Object&gt; result = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        LocalDispatcher dispatcher = dctx.getDispatcher();</div><div class="line">        <span class="comment">// 执行任务</span></div><div class="line">        result = dispatcher.runSync(getServiceName(), getContext());</div><div class="line">        </div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (thrown == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 任务执行成功</span></div><div class="line">        finish(result);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 任务执行失败</span></div><div class="line">        failed(thrown);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="UML分析"><a href="#UML分析" class="headerlink" title="UML分析"></a>UML分析</h2><embed width="1000" height="800" src="/data/pdf/OFBiz-Service-Job.pdf" internalinstanceid="7">

<h2 id="实战经验"><a href="#实战经验" class="headerlink" title="实战经验"></a>实战经验</h2><h3 id="服务并发"><a href="#服务并发" class="headerlink" title="服务并发"></a>服务并发</h3><ul>
<li>主要参数<ul>
<li><code>semaphore</code>: <code>none</code>(默认，并发调用服务)、<code>wait</code>(阻塞)、<code>fail</code>(报错)</li>
<li><code>semaphore-sleep</code> 服务阻塞时间(默认500毫秒, semaphore=”wait”时才有)</li>
<li><code>semaphore-wait-seconds</code> 服务等待时间(默认300秒, semaphore=”wait”时才有)</li>
</ul>
</li>
<li><code>semaphore=&quot;wait&quot;</code> 阻塞模式，实现方式<ul>
<li>每次运行此类型服务时需要先获取<strong>此服务</strong>的锁</li>
<li>获取锁的标志是可以往表<code>ServiceSemaphore</code>添加一条数据，源代码如下<ul>
<li><code>semaphore = delegator.makeValue(&quot;ServiceSemaphore&quot;, &quot;serviceName&quot;, model.name, &quot;lockedByInstanceId&quot;, JobManager.instanceId, &quot;lockThread&quot;, threadName, &quot;lockTime&quot;, lockTime);</code> (<code>org.ofbiz.service.semaphore.ServiceSemaphore</code>)</li>
</ul>
</li>
<li>每次获取锁前需要先判断<code>ServiceSemaphore</code>中是否已经有锁，如果有则阻塞</li>
<li>阻塞时进行线程sleep，然后循环判断获取锁</li>
<li>每次项目重启会清除<code>ServiceSemaphore</code>中<strong>此实例</strong>的锁，源代码如下<ul>
<li><code>delegator.removeByAnd(&quot;ServiceSemaphore&quot;, &quot;lockedByInstanceId&quot;, JobManager.instanceId);</code> (<code>org.ofbiz.service.ServiceDispatcher</code>)</li>
</ul>
</li>
</ul>
</li>
<li>详细流程参考UML图解</li>
</ul>
<h4 id="线上故障分析"><a href="#线上故障分析" class="headerlink" title="线上故障分析"></a>线上故障分析</h4><ul>
<li>故障情景<ul>
<li>线上开启了两个实例<code>yard</code>和<code>yardcrossing</code>，它们处于同一个服务池pool</li>
<li>服务池pool中需要定时运行服务<code>messageTimer</code>(此服务semaphore=”wait”)</li>
<li>某天下午(大概17:30左右)因某些原因重启数据库，此时重启了<code>yard</code>，但是未重启<code>yardcrossing</code></li>
<li>此后上述服务一直运行失败，报错<code>Service [messageTimer] with wait semaphore exceeded wait timeout</code></li>
</ul>
</li>
<li><p>故障排查</p>
<ul>
<li>查看此段时间<code>messageTimer</code>运行的<code>JobSandbox</code>记录和log日志</li>
<li><p>日志数据如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># log日志</span></div><div class="line">2018-04-12 17:33:51,038 |OFBiz-JobQueue-0     |ServiceDispatcher             |W| Exception thrown <span class="keyword">while</span> unlocking semaphore: </div><div class="line"></div><div class="line"><span class="comment"># 通过下列sql查询JobSandbox记录如下图(其中SERVICE_CRASHED可不用考虑，此状态在服务重启时才被置为损坏)</span></div><div class="line">select t.job_id, t.service_name, t.status_id, t.run_by_instance_id, t.start_date_time, t.finish_date_time, t.job_result</div><div class="line">from job_sandbox t </div><div class="line"><span class="built_in">where</span> t.service_name = <span class="string">'messageTimer'</span></div><div class="line">and t.start_date_time between <span class="string">'2018-04-12 17:20:00'</span> and <span class="string">'2018-04-13 12:00:00'</span></div><div class="line">order by t.start_date_time</div></pre></td></tr></table></figure>
<p><img src="/data/images/java/ofbiz-180416.png" alt="ofbiz-180416"></p>
</li>
<li><p>时间节点分析</p>
<ul>
<li><code>xx:xx:xx</code> jobId=2793652的服务开始加锁</li>
<li><code>17:33:41</code> (ofbiz1-yardcrossing:SERVICE_FINISHED start_date_time) jobId=2793652的服务开始运行</li>
<li><code>17:33:47</code> (ofbiz1-yardcrossing:SERVICE_FINISHED finish_date_time) jobId=2793652的服务运行成功，状态修改完成</li>
<li><code>17:33:51</code> (unlocking error) 解锁失败</li>
<li><code>17:48:56</code> (ofbiz1:SERVICE_FAILED) 运行失败，报错<code>Service [messageTimer] with wait semaphore exceeded wait timeout</code></li>
<li><code>17:48:59</code> (ofbiz1-yardcrossing:SERVICE_FAILED) 运行失败，报错<code>Service [messageTimer] with wait semaphore exceeded wait timeout</code></li>
<li>… 一直报上述错误</li>
</ul>
</li>
</ul>
</li>
<li>故障分析：运行<code>jobId=2793652</code>时服务获取锁，并运行成功，服务状态修改成功，但是在解锁时敲好数据库重启导致解锁失败。而数据库中保存的正好是<code>ofbiz1-yardcrossing</code>实例的锁，且重启服务器后并没有重启<code>ofbiz1-yardcrossing</code>实例(重启了<code>yard</code>实例，因此只清除了<code>yard</code>相关的锁)。当实例重新获取数据库连接时，数据库中一直有一个<code>messageTimer</code>服务的锁，因此两个实例永远获取不到锁，最终超时运行失败。(获取锁时仅根据服务判断数据库中是否有此服务的锁，具体参考UML流程图)</li>
<li>经验教训：重启数据库后，虽然实例会自动重新获取数据库连接，但是此时就会出现问题，因此重启数据库后应该重启所有的实例</li>
</ul>
<h3 id="服务历史数据清理"><a href="#服务历史数据清理" class="headerlink" title="服务历史数据清理"></a>服务历史数据清理</h3><ul>
<li>Job积累太多，导致清理服务历史数据时，占用内存过大，最后GC太频繁，CPU飙升，服务器宕机。具体参考《Java项目CPU及内存异常分析》</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;&gt;&lt;/a&gt;源码分析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.ofbiz.service.job.JobPoller&lt;/code&gt; 加载时会启动一个自动拉
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="ofbiz" scheme="http://blog.aezo.cn/tags/ofbiz/"/>
    
      <category term="job" scheme="http://blog.aezo.cn/tags/job/"/>
    
  </entry>
  
  <entry>
    <title>基于springboot和vue前后分离</title>
    <link href="http://blog.aezo.cn/2017/12/25/arch/springboot-vue/"/>
    <id>http://blog.aezo.cn/2017/12/25/arch/springboot-vue/</id>
    <published>2017-12-25T13:16:00.000Z</published>
    <updated>2017-12-27T14:15:57.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h2 id="跨域和session-token"><a href="#跨域和session-token" class="headerlink" title="跨域和session/token"></a>跨域和session/token</h2><h3 id="同源政策"><a href="#同源政策" class="headerlink" title="同源政策"></a>同源政策</h3><ul>
<li>网络协议、ip、端口三者都相同就是同一个域(同源)<ul>
<li>如<code>http://localhsot</code>和<code>http://localhsot:8080</code>之间进行数据交互就存在跨域问题</li>
</ul>
</li>
<li>浏览器”同源政策”限制(针对不同源情况) <a href="[浏览器同源政策及其规避方法](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)">^2</a><ul>
<li><code>Cookie、LocalStorage 和 IndexDB 无法读取</code></li>
<li><code>DOM 无法获得</code></li>
<li><code>AJAX 请求不能发送</code></li>
</ul>
</li>
<li><p>AJAX请求受到同源政策限制的解决办法</p>
<ul>
<li><p>架设服务器代理（浏览器请求同源服务器，再由后者请求外部服务）</p>
<ul>
<li><p>基于<code>nginx</code>做中转</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen   80;               </div><div class="line">    server_name localhost;</div><div class="line"></div><div class="line">    # 后端服务根端点</div><div class="line">    location /api/ &#123;</div><div class="line">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_set_header Host $http_host;</div><div class="line">        proxy_redirect off;</div><div class="line">        if (!-f $request_filename) &#123;</div><div class="line">            proxy_pass http://127.0.0.1:8080;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # 前端</div><div class="line">    location / &#123;</div><div class="line">        root   D:\demo\vue\dist;</div><div class="line">        index  index.html index.htm;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>JSONP</code>(只能发送GET请求)</p>
</li>
<li><code>WebSocket</code></li>
<li><code>CORS</code></li>
</ul>
</li>
</ul>
<h3 id="跨域资源共享-CORS-Cross-origin-resource-sharing-1"><a href="#跨域资源共享-CORS-Cross-origin-resource-sharing-1" class="headerlink" title="跨域资源共享(CORS, Cross-origin resource sharing) [^1]"></a>跨域资源共享(CORS, Cross-origin resource sharing) [^1]</h3><ul>
<li><strong><code>CORS</code>需要浏览器和服务器同时支持。</strong>目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。<strong>浏览器会自动完成CORS通信过程，开发只需配置服务器同源限制</strong></li>
<li>如果CORS通信过程中，响应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段，浏览器则认为无法请求，便会抛出异常被XHR的onerror捕获</li>
<li><code>Spring</code>对CORS的支持<a href="https://spring.io/blog/2015/06/08/cors-support-in-spring-framework" target="_blank" rel="external">https://spring.io/blog/2015/06/08/cors-support-in-spring-framework</a><ul>
<li>可在方法级别进行控制，使用注解<code>@CrossOrigin</code></li>
<li>全局CORS配置，声明一个<code>WebMvcConfigurer</code>的bean</li>
<li>基于<code>Filter</code>，声明一个<code>CorsFilter</code>的bean</li>
</ul>
</li>
</ul>
<h4 id="spring-security的cors配置-3"><a href="#spring-security的cors配置-3" class="headerlink" title="spring security的cors配置 [^3]"></a>spring security的cors配置 [^3]</h4><ul>
<li><p>开启cosr</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    http.csrf().disable(); <span class="comment">// 开启cors需要关闭csrf</span></div><div class="line">    http.cors();</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 配置cors</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function">CorsConfigurationSource <span class="title">corsConfigurationSource</span><span class="params">()</span> </span>&#123;</div><div class="line">    CorsConfiguration configuration = <span class="keyword">new</span> CorsConfiguration();</div><div class="line">    configuration.setAllowedOrigins(Arrays.asList(<span class="string">"*"</span>));</div><div class="line">    configuration.setAllowedMethods(Arrays.asList(<span class="string">"*"</span>));</div><div class="line">    configuration.setAllowedHeaders(Arrays.asList(<span class="string">"*"</span>));</div><div class="line">    configuration.setAllowCredentials(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</div><div class="line">    source.registerCorsConfiguration(<span class="string">"/**"</span>, configuration);</div><div class="line">    <span class="keyword">return</span> source;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>CSRF</code> 跨站请求伪造(Cross-Site Request Forgery). <a href="https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/csrf.html" target="_blank" rel="external">csrf</a></li>
</ul>
</li>
<li><p>spring-security登录只能接受<code>x-www-form-urlencoded</code>(简单键值对)类型的数据，<code>form-data</code>(表单类型，可以含有文件)类型的请求获取不到参数值</p>
</li>
<li><code>axios</code>实现<code>x-www-form-urlencoded</code>请求：参数应该写到<code>param</code>中。如果写在<code>data</code>中则不行，加<code>headers: {&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}</code>也不行</li>
</ul>
<hr>
<p>[^1]: <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a></p>
<p>[^3]: <a href="https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/cors.html" target="_blank" rel="external">spring security cors</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h2 id=&quot;跨域和session-token&quot;&gt;&lt;a href=&quot;#跨域和session-token&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="arch" scheme="http://blog.aezo.cn/categories/arch/"/>
    
    
      <category term="springboot" scheme="http://blog.aezo.cn/tags/springboot/"/>
    
      <category term="vue" scheme="http://blog.aezo.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>java基础</title>
    <link href="http://blog.aezo.cn/2017/12/12/java/java-base/"/>
    <id>http://blog.aezo.cn/2017/12/12/java/java-base/</id>
    <published>2017-12-12T02:07:00.000Z</published>
    <updated>2017-12-12T02:07:48.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><p>- </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h2&gt;&lt;h3 id=&quot;易错点&quot;&gt;&lt;a href=&quot;#易错点&quot; class=&quot;headerlink&quot; title=&quot;易错点&quot;&gt;&lt;/a&gt;易错点&lt;/h3&gt;&lt;p
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="javase" scheme="http://blog.aezo.cn/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu相关命令</title>
    <link href="http://blog.aezo.cn/2017/12/11/linux/ubuntu/"/>
    <id>http://blog.aezo.cn/2017/12/11/linux/ubuntu/</id>
    <published>2017-12-11T14:00:00.000Z</published>
    <updated>2017-12-12T13:05:03.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h2><ul>
<li>安装deb格式文件<ul>
<li><code>dpkg -i file.deb</code> deb是debian linus的安装格式，跟red hat的rpm非常相似 <a href="[Ubuntu下deb包的安装方法](http://blog.csdn.net/kevinhg/article/details/5934462)">^1</a></li>
</ul>
</li>
</ul>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul>
<li>显示/隐藏隐藏文件和文件夹：<code>Ctrl + H</code></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装程序&quot;&gt;&lt;a href=&quot;#安装程序&quot; class=&quot;headerlink&quot; title=&quot;安装程序&quot;&gt;&lt;/a&gt;安装程序&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装deb格式文件&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dpkg -i file.deb&lt;/code&gt; deb是debi
    
    </summary>
    
      <category term="linux" scheme="http://blog.aezo.cn/categories/linux/"/>
    
    
      <category term="shell" scheme="http://blog.aezo.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>OFBiz</title>
    <link href="http://blog.aezo.cn/2017/12/09/java/ofbiz/ofbiz/"/>
    <id>http://blog.aezo.cn/2017/12/09/java/ofbiz/ofbiz/</id>
    <published>2017-12-09T02:17:00.000Z</published>
    <updated>2018-04-16T09:55:33.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h2 id="安装编译启动"><a href="#安装编译启动" class="headerlink" title="安装编译启动"></a>安装编译启动</h2><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ul>
<li><p>设置hot-deploy下组件(component)编译顺序</p>
<ul>
<li><p><code>hot-deploy/build.xml</code></p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"OFBiz hot-deploy Build"</span> <span class="attr">default</span>=<span class="string">"build"</span> <span class="attr">basedir</span>=<span class="string">"."</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filelist</span> <span class="attr">id</span>=<span class="string">"hot-deploy-builds"</span> <span class="attr">dir</span>=<span class="string">"."</span></span></div><div class="line">        <span class="attr">files</span>=<span class="string">"ubase/build.xml,</span></div><div class="line">        aplcodecenter/build.xml"/&gt;</div><div class="line">    <span class="comment">&lt;!--运行build命令时--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"build"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">iterate</span> <span class="attr">target</span>=<span class="string">"jar"</span> <span class="attr">filelist</span>=<span class="string">"hot-deploy-builds"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--除去不需编译的组件--&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">        &lt;externalsubant target="jar"&gt;</div><div class="line">            &lt;filelist refid="hot-deploy-builds"/&gt;</div><div class="line">        &lt;/externalsubant&gt;</div><div class="line">        --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">externalsubant</span> <span class="attr">target</span>=<span class="string">"build"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filelist</span> <span class="attr">dir</span>=<span class="string">"."</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">file</span> <span class="attr">name</span>=<span class="string">"umetro/build.xml"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">filelist</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">externalsubant</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--运行clean命令时执行--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"clean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">iterate</span> <span class="attr">target</span>=<span class="string">"clean"</span> <span class="attr">filelist</span>=<span class="string">"hot-deploy-builds"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--除去不需clean的组件--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">externalsubant</span> <span class="attr">target</span>=<span class="string">"clean"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filelist</span> <span class="attr">dir</span>=<span class="string">"."</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">file</span> <span class="attr">name</span>=<span class="string">"umetro/build.xml"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">filelist</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">externalsubant</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
</li>
<li><p>设置hot-deloy下组件单独clean：在项目根目录下的<code>build.xml</code>中加入</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"_clean-hot-deploy"</span> <span class="attr">description</span>=<span class="string">"clean hot-deploy jar"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hotdeployant</span> <span class="attr">target</span>=<span class="string">"clean"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><ul>
<li>默认日志生成策略<ul>
<li>访问日志每天生成一个文件，堆场项目每天会生成一个大小为300M的文件</li>
<li>普通日志每天最多生成10个文件，每个文件大小为1M（超过文件数量会覆盖当天较早的日志）</li>
<li>错误日志每天最多生成3个文件，每个文件大小为1M</li>
</ul>
</li>
<li>日志生成策略配置：<code>framework/base/config/log4j2.xml</code></li>
<li>日志生成级别配置：<code>framework/base/config/debug.properties</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h2 id=&quot;安装编译启动&quot;&gt;&lt;a href=&quot;#安装编译启动&quot; class=&quot;headerlink&quot; title=&quot;安装编译启动&quot;&gt;&lt;/a&gt;安
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="ofbiz" scheme="http://blog.aezo.cn/tags/ofbiz/"/>
    
  </entry>
  
  <entry>
    <title>OFBiz模型图(UML)分析</title>
    <link href="http://blog.aezo.cn/2017/12/09/java/ofbiz/ofbiz-uml/"/>
    <id>http://blog.aezo.cn/2017/12/09/java/ofbiz/ofbiz-uml/</id>
    <published>2017-12-09T02:17:00.000Z</published>
    <updated>2018-04-16T10:43:35.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模型列表"><a href="#模型列表" class="headerlink" title="模型列表"></a>模型列表</h2><ul>
<li>webapp中类图</li>
<li>Event调用过程</li>
<li>Contorl处理过程</li>
<li>登录</li>
<li>校验登录 extensionCheckLogin</li>
<li>view渲染</li>
<li>screen渲染</li>
</ul>
<embed width="1000" height="800" src="/data/pdf/OFBiz-UML.pdf" internalinstanceid="7">

<h2 id="服务、任务机制模型图"><a href="#服务、任务机制模型图" class="headerlink" title="服务、任务机制模型图"></a>服务、任务机制模型图</h2><embed width="1000" height="800" src="/data/pdf/OFBiz-Service-Job.pdf" internalinstanceid="7">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模型列表&quot;&gt;&lt;a href=&quot;#模型列表&quot; class=&quot;headerlink&quot; title=&quot;模型列表&quot;&gt;&lt;/a&gt;模型列表&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;webapp中类图&lt;/li&gt;
&lt;li&gt;Event调用过程&lt;/li&gt;
&lt;li&gt;Contorl处理过程&lt;/li&gt;
&lt;
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="ofbiz" scheme="http://blog.aezo.cn/tags/ofbiz/"/>
    
      <category term="uml" scheme="http://blog.aezo.cn/tags/uml/"/>
    
      <category term="源码" scheme="http://blog.aezo.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>powerdesigner</title>
    <link href="http://blog.aezo.cn/2017/12/05/extend/powerdesigner/"/>
    <id>http://blog.aezo.cn/2017/12/05/extend/powerdesigner/</id>
    <published>2017-12-05T11:41:00.000Z</published>
    <updated>2018-03-25T10:54:10.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h2 id="使用-3"><a href="#使用-3" class="headerlink" title="使用 ^3"></a>使用 <a href="[PowerDesigner的使用安装和数据库创建](http://www.cnblogs.com/huangcong/archive/2010/06/14/1757957.html)">^3</a></h2><h3 id="工具箱介绍-Toolbox"><a href="#工具箱介绍-Toolbox" class="headerlink" title="工具箱介绍(Toolbox)"></a>工具箱介绍(Toolbox)</h3><ul>
<li>Standard<ul>
<li><code>Link/Traceablility Link</code> 可追溯的连接(可用来建立虚拟关联关系)，不会产生外键，显示为虚线箭头(箭头指向为父表)</li>
<li><code>Note</code> 备注</li>
</ul>
</li>
<li>Physical Diagram<ul>
<li><code>Table</code> 表</li>
<li><code>View</code> 视图</li>
<li><code>Reference</code> 外键关联，会产生外键</li>
</ul>
</li>
</ul>
<h3 id="表字段编辑"><a href="#表字段编辑" class="headerlink" title="表字段编辑"></a>表字段编辑</h3><ul>
<li>表信息字段说明：<code>Name</code> 显示的中文名、<code>Code</code> 表名、<code>Comment</code> 表说明</li>
<li>字段信息字段说明：<ul>
<li><code>Name</code> 显示的中文名(最终为该字段的说明)</li>
<li><code>Code</code> 字段名</li>
<li><code>Comment</code> 字段备注(不会生成到数据库中)</li>
<li><code>I</code>：自增序列</li>
<li><code>P</code>：PirmaryKey 主键</li>
<li><code>F</code>：ForeignKey 外键</li>
<li><code>M</code>：Mandatory 强制要求（不能为空）</li>
</ul>
</li>
<li>字段编辑时显示<code>Comment</code>字段<ul>
<li>表编辑视图 - Columns - Customize Columns and Filter - 勾选Comment的<code>D</code>栏</li>
</ul>
</li>
<li>显示自增列(mysql, 其他版本参考 <a href="[PowerDesigner中如何生成主键和自增列](https://www.cnblogs.com/ShaYeBlog/p/4067884.html)">^4</a>) <ul>
<li>表编辑视图 - Columns - Customize Columns and Filter - 勾选Identity的<code>D</code>栏</li>
</ul>
</li>
</ul>
<h3 id="显示设置"><a href="#显示设置" class="headerlink" title="显示设置"></a>显示设置</h3><ul>
<li>设置入口：右键 - Display Preference</li>
<li>设置表显示字体：Table - Format - Modify - Font - Symbol全选 - 调整字体</li>
<li>不显示<code>&lt;pk&gt;</code>标识：Table - Columns - 去掉Key indicator勾选</li>
</ul>
<h3 id="根据模型生成表结构"><a href="#根据模型生成表结构" class="headerlink" title="根据模型生成表结构"></a>根据模型生成表结构</h3><ul>
<li>配置数据源<ul>
<li>mysql数据源 <a href="[配置mysql数据源](http://blog.csdn.net/winy_lm/article/details/70598378)">^2</a>：下载32位mysql odbc安装 - （选择控制面板 - 所有控制面板项 - 管理工具 - 数据源ODBC - 添加mysql） - powerdisigner中的database - connet</li>
</ul>
</li>
<li>生成sql语句：database - Generate Database</li>
</ul>
<h3 id="数据字典-1"><a href="#数据字典-1" class="headerlink" title="数据字典 ^1"></a>数据字典 <a href="[数据字典生成](http://blog.csdn.net/nw_ningwang/article/details/77586602)">^1</a></h3><p>根据模型生成文档：html、word等</p>
<ul>
<li>常用显示<ul>
<li><code>Table</code> - <code>List of Table Columns</code> 每张表的所有字段</li>
</ul>
</li>
<li>右键编辑说明<ul>
<li><code>raise level</code> 提高级别(目录层级)</li>
<li><code>layout</code> 调整表格显示字段和字段占的宽度（如：List of Table Columns中默认显示Name和Code，可以修改此处增加显示Comment）</li>
</ul>
</li>
</ul>
<hr>
<p>参考文章</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h2 id=&quot;使用-3&quot;&gt;&lt;a href=&quot;#使用-3&quot; class=&quot;headerlink&quot; title=&quot;使用 ^3&quot;&gt;&lt;/a&gt;使用 &lt;a 
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="oracle" scheme="http://blog.aezo.cn/tags/oracle/"/>
    
      <category term="mysql" scheme="http://blog.aezo.cn/tags/mysql/"/>
    
      <category term="model" scheme="http://blog.aezo.cn/tags/model/"/>
    
  </entry>
  
  <entry>
    <title>MUI</title>
    <link href="http://blog.aezo.cn/2017/11/24/web/mui/"/>
    <id>http://blog.aezo.cn/2017/11/24/web/mui/</id>
    <published>2017-11-24T12:30:00.000Z</published>
    <updated>2017-12-24T09:48:49.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mui简介"><a href="#mui简介" class="headerlink" title="mui简介"></a>mui简介</h2><ul>
<li>MUI不依赖任何第三方JS库，原生UI(MUI以iOS平台UI为基础，补充部分Android平台特有的UI控件)，结合H5 plus可实现更解决原生的APP应用</li>
<li>APP开发类型：原生开发、H5开发、混合开发(Hybrid App：一部分功能用native构建，一部分功能用html5构建，比如AppCan、PhoneGap(Cordova)等)</li>
<li>官网：<a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="external">http://dev.dcloud.net.cn/mui/</a></li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li>js的<code>addEventListener()</code>方法只能监听某个特定元素上的事件(只能通过id获取元素，或者window对象等)</li>
<li><p>可以使用<code>.on()</code>方法实现批量元素的事件绑定</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mui(<span class="string">".mui-table-view"</span>).on(<span class="string">'tap'</span>, <span class="string">'.mui-table-view-cell'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//获取id</span></div><div class="line">	<span class="keyword">var</span> id = <span class="keyword">this</span>.getAttribute(<span class="string">"id"</span>);</div><div class="line">	<span class="comment">//传值给详情页面，通知加载新数据</span></div><div class="line">	mui.fire(detail,<span class="string">'getDetail'</span>,&#123;<span class="attr">id</span>:id&#125;);</div><div class="line">	<span class="comment">//打开新闻详情</span></div><div class="line">	mui.openWindow(&#123;</div><div class="line">		<span class="attr">id</span>:<span class="string">'detail'</span>,</div><div class="line">		<span class="attr">url</span>:<span class="string">'detail.html'</span></div><div class="line">	&#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><code>tap</code>为mui定义的点击时间</li>
<li><code>mui(&quot;.mui-table-view&quot;)</code>根据class获取对象，只能获取非动态加入的DOM</li>
<li>此处实际是监听<code>.mui-table-view</code>下的<code>.mui-table-view-cell</code>的点击事件</li>
</ul>
</li>
<li><code>&lt;a&gt;</code>标签点击无法跳转到href指定的连接，解决办法见下文</li>
</ul>
<h2 id="mui零散知识"><a href="#mui零散知识" class="headerlink" title="mui零散知识"></a>mui零散知识</h2><ul>
<li>H5底部导航跳转</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"mui-bar mui-bar-tab"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">data-href</span>=<span class="string">"index.html"</span> <span class="attr">class</span>=<span class="string">"mui-tab-item sm-href"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">data-href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"mui-tab-item sm-href"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-contact"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>活动<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">data-href</span>=<span class="string">"home.html"</span> <span class="attr">class</span>=<span class="string">"mui-tab-item sm-href mui-active"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-contact"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a标签点击跳转:解决mui的a标签href无法跳转</span></div><div class="line">bindSmHref(<span class="built_in">document</span>.getElementsByClassName(<span class="string">"sm-href"</span>));</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindSmHref</span>(<span class="params">pageTabs</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; pageTabs.length; i++) &#123;</div><div class="line">		pageTabs[i].addEventListener(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> href = <span class="keyword">this</span>.getAttribute(<span class="string">"data-href"</span>);</div><div class="line">			<span class="keyword">if</span>(href != <span class="literal">null</span> &amp;&amp; href != <span class="string">""</span>) &#123;</div><div class="line">				<span class="built_in">window</span>.location.href = href;</div><div class="line">			&#125;</div><div class="line">		&#125;, <span class="literal">false</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>popover弹框、scroll滚动<ul>
<li>popover参数二为锚点元素(<code>anchorElement</code>)，标识弹框是基于某个元素的。如果</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"popover"</span> <span class="attr">class</span>=<span class="string">"mui-popover"</span>&gt;</span><span class="comment">&lt;!--默认隐藏, dom在body下即可--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-scroll-wrapper"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-scroll"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding: 10px;"</span>&gt;</span><span class="comment">&lt;!--mui-scroll下是真实dom，需要里面元素有padding则需要调解此div--&gt;</span></div><div class="line">                这里是内容</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">mui, window, document, undefined</span>) </span>&#123;</div><div class="line">    mui.init();</div><div class="line"></div><div class="line">    <span class="comment">// 初始化滚动条</span></div><div class="line">    mui(<span class="string">'.mui-scroll-wrapper'</span>).scroll(&#123;&#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 当mybtn按钮被点击时，弹框显示隐藏切换</span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"mybtn"</span>).addEventListener(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        mui(<span class="string">"#popover"</span>).popover(<span class="string">"toggle"</span>, <span class="built_in">document</span>.getElementById(<span class="string">"popoverRef"</span>)); <span class="comment">// 如果弹框居中，则只需要参考popoverRef元素为居中</span></div><div class="line">    &#125;);</div><div class="line">&#125;)(mui, <span class="built_in">window</span>, <span class="built_in">document</span>, <span class="literal">undefined</span>);</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#popover</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">85%</span>;</div><div class="line">	<span class="comment">/*</span></div><div class="line">    display: block;</div><div class="line">    top: 0px;</div><div class="line">    left: 5%;</div><div class="line">    overflow: auto;</div><div class="line">	*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>图片上传，下列方法可解决mui示例中h5页面拍照无法上传问题(缺点：上传到后台无法记录文件类型，无文件后缀)<ul>
<li>利用canvas将图片转成base64并压缩 -&gt; 将base64的dataUrl转成Blob -&gt; 将Blob放入到FormData -&gt; xhr</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// =======</span></div><div class="line"><span class="comment">// 图片上传: 利用canvas将图片转成base64并压缩 -&gt; 将base64的dataUrl转成Blob -&gt; 将Blob放入到FormData -&gt; xhr</span></div><div class="line"><span class="comment">// =======</span></div><div class="line"><span class="comment">/*</span></div><div class="line">	var smImg = new SmUploadImg();</div><div class="line">	smImg.init(&#123;</div><div class="line">		inputs: document.getElementById(".sm-input__img"),</div><div class="line">		callback: function(base64, target) &#123;</div><div class="line">			// formData.append(target.id, this.dataUrltoBlob(base64));</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line"> */</div><div class="line">SmUploadImg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.sw = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.sh = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.tw = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.th = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.scale = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.maxWidth = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.maxHeight = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.maxSize = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.fileSize = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.fileDate = <span class="literal">null</span>;   </div><div class="line">    <span class="keyword">this</span>.fileType = <span class="string">''</span>;   </div><div class="line">    <span class="keyword">this</span>.fileName = <span class="string">''</span>;   </div><div class="line">    <span class="keyword">this</span>.inputs = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.canvas = <span class="literal">null</span>;   </div><div class="line">    <span class="keyword">this</span>.mime = &#123;&#125;;   </div><div class="line">    <span class="keyword">this</span>.type = <span class="string">''</span>;</div><div class="line">    <span class="keyword">this</span>.target = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.toastr = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.callback = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.loading = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**   </span></div><div class="line"> * @description 初始化对象</div><div class="line"> */</div><div class="line">SmUploadImg.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.maxWidth = options.maxWidth || <span class="number">800</span>;</div><div class="line">	<span class="keyword">this</span>.maxHeight = options.maxHeight || <span class="number">600</span>;</div><div class="line">	<span class="keyword">this</span>.maxSize = options.maxSize || <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 图最大大小(5M)</span></div><div class="line">	<span class="keyword">this</span>.inputs = options.inputs; <span class="comment">// 文件输入框(可多个)</span></div><div class="line">	<span class="keyword">this</span>.mime = &#123;</div><div class="line">		<span class="string">'png'</span>: <span class="string">'image/png'</span>,</div><div class="line">		<span class="string">'jpg'</span>: <span class="string">'image/jpeg'</span>,</div><div class="line">		<span class="string">'jpeg'</span>: <span class="string">'image/jpeg'</span>,</div><div class="line">		<span class="string">'bmp'</span>: <span class="string">'image/bmp'</span></div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 提示函数</span></div><div class="line">	<span class="keyword">this</span>.toastr = options.toastr || <span class="literal">null</span>;</div><div class="line">	<span class="comment">// 图片加载完后返回base64</span></div><div class="line">	<span class="keyword">this</span>.callback = options.callback || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">	<span class="comment">// 读取图片时调用</span></div><div class="line">	<span class="keyword">this</span>.loading = options.loading || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// console.log("loading...");</span></div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>._addEvent();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**   </span></div><div class="line"> * @description 将base64的dataUrl转换成Blob对象</div><div class="line"> */</div><div class="line">SmUploadImg.prototype.dataUrltoBlob = <span class="function"><span class="keyword">function</span>(<span class="params">dataurl</span>) </span>&#123;	</div><div class="line">    <span class="keyword">var</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</div><div class="line">        bstr = atob(arr[<span class="number">1</span>]), n = bstr.length, u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</div><div class="line">    <span class="keyword">while</span>(n--)&#123;</div><div class="line">        u8arr[n] = bstr.charCodeAt(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8arr], &#123;<span class="attr">type</span>:mime&#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 为新加入Dom的元素绑定事件</div><div class="line"> * @param &#123;Object&#125; inputs</div><div class="line"> */</div><div class="line">SmUploadImg.prototype.addInputs = <span class="function"><span class="keyword">function</span>(<span class="params">inputs</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>._addEvent(inputs);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**   </span></div><div class="line"> * @description 绑定事件   </div><div class="line"> * @param &#123;Object&#125; elm 元素   </div><div class="line"> * @param &#123;Function&#125; fn 绑定函数   </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">inputs</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">tmpSelectFile</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">		_this._handelSelectFile(ev);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(!inputs) </div><div class="line">		inputs = _this.inputs;</div><div class="line">	<span class="keyword">if</span>(inputs.length || inputs.length == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; inputs.length; i++) &#123;</div><div class="line">			inputs[i].addEventListener(<span class="string">'change'</span>, tmpSelectFile, <span class="literal">false</span>);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(inputs) &#123;</div><div class="line">		inputs.addEventListener(<span class="string">'change'</span>, tmpSelectFile, <span class="literal">false</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 绑定事件  </div><div class="line"> * @param &#123;Object&#125; elm 元素  </div><div class="line"> * @param &#123;Function&#125; fn 绑定函数  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._handelSelectFile = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> file = ev.target.files[<span class="number">0</span>];</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.type = file.type;</div><div class="line">	<span class="keyword">this</span>.target = ev.target;</div><div class="line"></div><div class="line">	<span class="comment">// 如果没有文件类型，则通过后缀名判断（解决微信及360浏览器无法获取图片类型问题）   </span></div><div class="line">	<span class="keyword">if</span>(!<span class="keyword">this</span>.type) &#123;</div><div class="line">		<span class="keyword">this</span>.type = <span class="keyword">this</span>.mime[file.name.match(<span class="regexp">/\.([^\.]+)$/i</span>)[<span class="number">1</span>]];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(!<span class="regexp">/image.(png|jpg|jpeg|bmp)/</span>.test(<span class="keyword">this</span>.type)) &#123;</div><div class="line">		<span class="keyword">var</span> msg = <span class="string">'不支持此文件类型'</span>;</div><div class="line">		<span class="keyword">this</span>.toastr ? <span class="keyword">this</span>.toastr(msg) : alert(msg);</div><div class="line">		<span class="keyword">this</span>.target.value = <span class="string">""</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(file.size &gt; <span class="keyword">this</span>.maxSize) &#123;</div><div class="line">		<span class="keyword">var</span> msg = <span class="string">'选择文件大于'</span> + <span class="keyword">this</span>.maxSize / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">'M，请重新选择'</span>;</div><div class="line">		<span class="keyword">this</span>.toastr ? <span class="keyword">this</span>.toastr(msg) : alert(msg);</div><div class="line">		<span class="keyword">this</span>.target.value = <span class="string">""</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.fileName = file.name;</div><div class="line">	<span class="keyword">this</span>.fileSize = file.size;</div><div class="line">	<span class="keyword">this</span>.fileType = <span class="keyword">this</span>.type;</div><div class="line">	<span class="keyword">this</span>.fileDate = file.lastModifiedDate;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>._readImage(file);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 读取图片文件  </div><div class="line"> * @param &#123;Object&#125; image 图片文件  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._readImage = <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">tmpCreateImage</span>(<span class="params">uri</span>) </span>&#123;</div><div class="line">		_this._createImage(uri);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.loading();</div><div class="line"></div><div class="line">	<span class="keyword">this</span>._getURI(file, tmpCreateImage);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 通过文件获得URI  </div><div class="line"> * @param &#123;Object&#125; file 文件  </div><div class="line"> * @param &#123;Function&#125; callback 回调函数，返回文件对应URI  </div><div class="line"> * return &#123;Bool&#125; 返回false  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._getURI = <span class="function"><span class="keyword">function</span>(<span class="params">file, callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">tmpLoad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// 头不带图片格式，需填写格式   </span></div><div class="line">		<span class="keyword">var</span> re = <span class="regexp">/^data:base64,/</span>;</div><div class="line">		<span class="keyword">var</span> ret = <span class="keyword">this</span>.result + <span class="string">''</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(re.test(ret))</div><div class="line">			ret = ret.replace(re, <span class="string">'data:'</span> + _this.mime[_this.fileType] + <span class="string">';base64,'</span>);</div><div class="line"></div><div class="line">		callback &amp;&amp; callback(ret, <span class="keyword">this</span>.target);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	reader.onload = tmpLoad;</div><div class="line"></div><div class="line">	reader.readAsDataURL(file);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 创建图片  </div><div class="line"> * @param &#123;Object&#125; image 图片文件  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._createImage = <span class="function"><span class="keyword">function</span>(<span class="params">uri</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">tmpLoad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		_this._drawImage(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	img.onload = tmpLoad;</div><div class="line"></div><div class="line">	img.src = uri;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 创建Canvas将图片画至其中，并获得压缩后的文件  </div><div class="line"> * @param &#123;Object&#125; img 图片文件  </div><div class="line"> * @param &#123;Number&#125; width 图片最大宽度  </div><div class="line"> * @param &#123;Number&#125; height 图片最大高度  </div><div class="line"> * @param &#123;Function&#125; callback 回调函数，参数为图片base64编码  </div><div class="line"> * return &#123;Object&#125; 返回压缩后的图片  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._drawImage = <span class="function"><span class="keyword">function</span>(<span class="params">img, callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.sw = img.width;</div><div class="line">	<span class="keyword">this</span>.sh = img.height;</div><div class="line">	<span class="keyword">this</span>.tw = img.width;</div><div class="line">	<span class="keyword">this</span>.th = img.height;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.scale = (<span class="keyword">this</span>.tw / <span class="keyword">this</span>.th).toFixed(<span class="number">2</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.sw &gt; <span class="keyword">this</span>.maxWidth) &#123;</div><div class="line">		<span class="keyword">this</span>.sw = <span class="keyword">this</span>.maxWidth;</div><div class="line">		<span class="keyword">this</span>.sh = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.sw / <span class="keyword">this</span>.scale);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.sh &gt; <span class="keyword">this</span>.maxHeight) &#123;</div><div class="line">		<span class="keyword">this</span>.sh = <span class="keyword">this</span>.maxHeight;</div><div class="line">		<span class="keyword">this</span>.sw = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.sh * <span class="keyword">this</span>.scale);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</div><div class="line">	<span class="keyword">var</span> ctx = <span class="keyword">this</span>.canvas.getContext(<span class="string">'2d'</span>);</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.canvas.width = <span class="keyword">this</span>.sw;</div><div class="line">	<span class="keyword">this</span>.canvas.height = <span class="keyword">this</span>.sh;</div><div class="line"></div><div class="line">	ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, img.width, img.height, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.sw, <span class="keyword">this</span>.sh);</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.callback(<span class="keyword">this</span>.canvas.toDataURL(<span class="keyword">this</span>.type), <span class="keyword">this</span>.target);</div><div class="line"></div><div class="line">	ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.tw, <span class="keyword">this</span>.th);</div><div class="line">	<span class="keyword">this</span>.canvas.width = <span class="number">0</span>;</div><div class="line">	<span class="keyword">this</span>.canvas.height = <span class="number">0</span>;</div><div class="line">	<span class="keyword">this</span>.canvas = <span class="literal">null</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mui简介&quot;&gt;&lt;a href=&quot;#mui简介&quot; class=&quot;headerlink&quot; title=&quot;mui简介&quot;&gt;&lt;/a&gt;mui简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MUI不依赖任何第三方JS库，原生UI(MUI以iOS平台UI为基础，补充部分Android平台特有的U
    
    </summary>
    
      <category term="web" scheme="http://blog.aezo.cn/categories/web/"/>
    
    
      <category term="UI" scheme="http://blog.aezo.cn/tags/UI/"/>
    
      <category term="H5" scheme="http://blog.aezo.cn/tags/H5/"/>
    
      <category term="App" scheme="http://blog.aezo.cn/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>thymeleaf</title>
    <link href="http://blog.aezo.cn/2017/10/22/lang/thymeleaf/"/>
    <id>http://blog.aezo.cn/2017/10/22/lang/thymeleaf/</id>
    <published>2017-10-22T03:41:00.000Z</published>
    <updated>2018-03-25T10:52:23.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h2 id="上下文数据获取"><a href="#上下文数据获取" class="headerlink" title="上下文数据获取"></a>上下文数据获取</h2><ul>
<li>常用上下文获取</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 获取url参数 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#httpServletRequest.getParameter('roleCode')&#125;"</span>&gt;</span>这里的文字会被替换<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 定义变量并取值 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:with</span>=<span class="string">"curPage=$&#123;#httpServletRequest.getParameter('page')&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前页码：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;curPage&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 被|包裹的变量会转换后和字符串进行拼接。@&#123;...&#125;为链接表达式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">th:href</span>=<span class="string">"@&#123;|/user/$&#123;user.id&#125;|&#125;"</span>&gt;</span>链接地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>内置对象</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 获取集合myList大小，lists为内置对象 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#lists.size(myList)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 日期格式化，dates为内置对象 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(curDate, 'yyyy-MM-dd HH:mm:ss')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 数字格式化，保留两位小数位 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#numbers.formatDecimal(money, 0, 2)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>dates</code>：日期格式化内置对象，具体方法可以参照java.util.Date</li>
<li><code>calendars</code>：类似于#dates，但是是java.util.Calendar类的方法</li>
<li><code>numbers</code>： 数字格式化</li>
<li><code>strings</code>：字符串格式化，具体方法可以参照java.lang.String，如startsWith、contains等</li>
<li><code>objects</code>：参照java.lang.Object</li>
<li><code>bools</code>：判断boolean类型的工具</li>
<li><code>arrays</code>：数组操作的工具</li>
<li><code>lists</code>：列表操作的工具，参照java.util.List</li>
<li><code>sets</code>：Set操作工具，参照java.util.Set</li>
<li><code>maps</code>：Map操作工具，参照java.util.Map</li>
<li><code>aggregates</code>：操作数组或集合的工具</li>
<li><code>messages</code>：操作消息的工具</li>
<li><p>上述变量设值如下</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"index"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model, HttpServletRequest request)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; myList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        myList.add(<span class="string">"smalle"</span>);</div><div class="line">        myList.add(<span class="string">"18"</span>);</div><div class="line"></div><div class="line">        model.addAttribute(<span class="string">"myList"</span>, myList);</div><div class="line">        model.addAttribute(<span class="string">"curDate"</span>, <span class="keyword">new</span> Date());</div><div class="line">        model.addAttribute(<span class="string">"money"</span>, Math.random()*<span class="number">100</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>js/css取值</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> size = [[$&#123;list.size()&#125;]];</div><div class="line">    <span class="built_in">console</span>.info(size);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">th:inline</span>=<span class="string">"css"</span>&gt;</span><span class="undefined"></span></div><div class="line">.[[$&#123;classname&#125;]] &#123;</div><div class="line">    text-align: [[$&#123;align&#125;]];</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- gt lt eq ne ge le &gt; &lt; == != --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">th:if</span>=<span class="string">"$&#123;#httpServletRequest.getParameter('roleCode')&#125; eq 'ADMIN'"</span> </span></div><div class="line">    <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"bannerType"</span> <span class="attr">value</span>=<span class="string">"IndexBanner"</span>/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 逻辑控制 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user.name&#125; == 'smalle' and $&#123;user.age&#125; == 18"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 循环 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user:$&#123;users&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.male&#125;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">"1"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">"2"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--其他情况--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>未知<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 判断循环下标。th:block是一个空标签不会影响样式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:each</span>=<span class="string">"item,iterStat:$&#123;list&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th:block</span> <span class="attr">th:if</span>=<span class="string">"$&#123;iterStat.index le 1&#125;"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--显示集合前两个元素--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;item&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">th:block</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><ul>
<li>layout.hmtl(如路径为：templates/includes/layout.hmtl)</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="comment">&lt;!-- thymeleaf模板必须引用xmlns:th --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></div><div class="line">    <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/web/thymeleaf/layout"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>AEZO.CN<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>引用</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></div><div class="line">    <span class="attr">xmlns:layout</span>=<span class="string">"http://www.ultraq.net.nz/web/thymeleaf/layout"</span></div><div class="line">    <span class="attr">layout:decorator</span>=<span class="string">"includes/layout"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout:fragment</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">    hello</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h2 id=&quot;上下文数据获取&quot;&gt;&lt;a href=&quot;#上下文数据获取&quot; class=&quot;headerlink&quot; title=&quot;上下文数据获取&quot;&gt;&lt;/
    
    </summary>
    
      <category term="lang" scheme="http://blog.aezo.cn/categories/lang/"/>
    
    
      <category term="java" scheme="http://blog.aezo.cn/tags/java/"/>
    
      <category term="thymeleaf" scheme="http://blog.aezo.cn/tags/thymeleaf/"/>
    
      <category term="springboot" scheme="http://blog.aezo.cn/tags/springboot/"/>
    
      <category term="template" scheme="http://blog.aezo.cn/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>spring-security</title>
    <link href="http://blog.aezo.cn/2017/10/22/java/spring-security/"/>
    <id>http://blog.aezo.cn/2017/10/22/java/spring-security/</id>
    <published>2017-10-22T03:15:00.000Z</published>
    <updated>2017-12-27T12:59:31.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>官网：<a href="http://projects.spring.io/spring-security/" target="_blank" rel="external">http://projects.spring.io/spring-security/</a></li>
<li>文档：<a href="https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/" target="_blank" rel="external">V4.2.3</a></li>
<li>引入spring security后便有了session机制</li>
</ul>
<h3 id="spring-security实现方法-1"><a href="#spring-security实现方法-1" class="headerlink" title="spring security实现方法 [^1]"></a>spring security实现方法 [^1]</h3><ul>
<li>总共有四种用法，从简到深为<ul>
<li>不用数据库，全部数据写在配置文件，这个也是官方文档里面的demo</li>
<li>使用数据库，根据spring security默认实现代码设计数据库，也就是说数据库已经固定了，这种方法不灵活，而且那个数据库设计得很简陋，实用性差</li>
<li>spring security和Acegi不同，它不能修改默认filter了，但支持插入filter，所以根据这个，我们可以插入自己的filter来灵活使用<strong>（可基于此数据库结构进行自定义参数认证）</strong></li>
<li>暴力手段，修改源码，前面说的修改默认filter只是修改配置文件以替换filter而已，这种是直接改了里面的源码，但是这种不符合OO设计原则，而且不实际，不可用</li>
</ul>
</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>spring-security登录只能接受<code>x-www-form-urlencoded</code>(简单键值对)类型的数据，<code>form-data</code>(表单类型，可以含有文件)类型的请求获取不到参数值</li>
<li><code>axios</code>实现<code>x-www-form-urlencoded</code>请求：参数应该写到<code>param</code>中。如果写在<code>data</code>中则不行，加<code>headers: {&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}</code>也不行</li>
</ul>
<h2 id="springboot整合"><a href="#springboot整合" class="headerlink" title="springboot整合"></a>springboot整合</h2><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring-Security --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p>SpringSecurityConfig 访问权限规则设置</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        auth.inMemoryAuthentication()</div><div class="line">            .withUser(<span class="string">"admin"</span>).password(<span class="string">"admin"</span>).roles(<span class="string">"ADMIN"</span>) <span class="comment">// 在内存中定义用户名密码为admin/admin, 角色为ADMIN的用户(用于登录和权限判断)</span></div><div class="line">            .and()</div><div class="line">            .withUser(<span class="string">"user"</span>).password(<span class="string">"user"</span>).roles(<span class="string">"USER"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义权限规则</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        http.headers().frameOptions().disable(); <span class="comment">// 解决spring boot项目中出现不能加载iframe</span></div><div class="line">        http.csrf().disable() <span class="comment">// 关闭打开的csrf(跨站请求伪造)保护</span></div><div class="line">            .authorizeRequests()</div><div class="line">                .antMatchers(<span class="string">"/manage/"</span>, <span class="string">"/manage/home"</span>, <span class="string">"/manage/about"</span>, <span class="string">"/manage/404"</span>, <span class="string">"/manage/403"</span>, <span class="string">"/thymeleaf/**"</span>).permitAll() <span class="comment">// 这些端点不进行权限验证</span></div><div class="line">                .antMatchers(<span class="string">"/resources/**"</span>).permitAll() <span class="comment">// idea的resources/static目录下的文件夹对应一个端点，相当于可以访问resources/static/resources/下所有文件（还有一些默认的端点：/css/**、/js/**、/images/**、/webjars/**、/**/favicon.ico）</span></div><div class="line">                .antMatchers(<span class="string">"/manage/**"</span>).hasAnyRole(<span class="string">"ADMIN"</span>) <span class="comment">// 需要有ADMIN角色才可访问/admin</span></div><div class="line">                .antMatchers(<span class="string">"/user/**"</span>).hasAnyRole(<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>) <span class="comment">// 有USER/ADMIN角色均可</span></div><div class="line">                .anyRequest().authenticated() <span class="comment">// (除上述忽略请求)所有的请求都需要权限认证</span></div><div class="line">                .and()</div><div class="line">            .formLogin()</div><div class="line">                .loginPage(<span class="string">"/manage/login"</span>).permitAll() <span class="comment">// 登录界面(Get)和登录处理方法(Post。具体逻辑不需要写，并且会自动生成此端点的control). 登录成功后，如果从登录界面登录则跳到项目主页(http://localhost:9526)，如果从其他页面跳转到登录页面进行登录则成功后跳转到原始页面</span></div><div class="line">                .and()</div><div class="line">            .logout().permitAll() <span class="comment">// 默认访问/logout(Get)即可登出</span></div><div class="line">                .and()</div><div class="line">            .exceptionHandling().accessDeniedHandler(accessDeniedHandler);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>AccessDeniedHandler访问受限拦截</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(MyAccessDeniedHandler.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></div><div class="line">                    HttpServletResponse httpServletResponse,</div><div class="line">                    AccessDeniedException e) <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line"></div><div class="line">        Authentication auth = SecurityContextHolder.getContext().getAuthentication();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (auth != <span class="keyword">null</span>) &#123;</div><div class="line">            logger.info(<span class="string">"用户 '"</span> + auth.getName() + <span class="string">"' 试图访问受保护的 URL: "</span> + httpServletRequest.getRequestURI());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"auth = "</span> + auth);</div><div class="line">        httpServletResponse.sendRedirect(<span class="string">"/manage/403"</span>); <span class="comment">// 跳转到403页面</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="示例扩展"><a href="#示例扩展" class="headerlink" title="示例扩展"></a>示例扩展</h3><ul>
<li>此示例使用数据库用户名/密码(或扩展验证)进行用户登录验证，并且对登录成功做处理，资源权限控制</li>
<li><p>SpringSecurityConfig 访问权限规则设置</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled=<span class="keyword">true</span>) <span class="comment">// 开启方法级别权限控制</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CustomAuthenticationProvider authProvider; <span class="comment">// 提供认证算法(判断是否登录成功)(1)</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AuthenticationDetailsSource&lt;HttpServletRequest, WebAuthenticationDetails&gt; authenticationDetailsSource; <span class="comment">// 认证信息</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler authenticationSuccessHandler; <span class="comment">// 用于处理登录成功(2)</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AuthenticationFailureHandler authenticationFailureHandler; <span class="comment">// 用于处理登录失败(2)</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler; <span class="comment">// 用于处理无权访问 (3)</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        auth.authenticationProvider(authProvider);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义权限规则</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        http.headers().frameOptions().disable(); <span class="comment">// 解决spring boot项目中出现不能加载iframe</span></div><div class="line">        http.csrf().disable() <span class="comment">// 关闭打开的csrf(跨站请求伪造)保护</span></div><div class="line">            .authorizeRequests()</div><div class="line">                .antMatchers(<span class="string">"/manage/"</span>, <span class="string">"/manage/home"</span>, <span class="string">"/manage/about"</span>, <span class="string">"/manage/404"</span>, <span class="string">"/manage/403"</span>, <span class="string">"/thymeleaf/**"</span>).permitAll() <span class="comment">// 这些端点不进行权限验证</span></div><div class="line">                .antMatchers(<span class="string">"/resources/**"</span>).permitAll() <span class="comment">// idea的resources/static目录下的文件夹对应一个端点，相当于可以访问resources/static/resources/下所有文件（还有一些默认的端点：/css/**、/js/**、/images/**、/webjars/**、/**/favicon.ico）</span></div><div class="line">                .antMatchers(<span class="string">"/manage/**"</span>).hasAnyRole(<span class="string">"ADMIN"</span>) <span class="comment">// 需要有ADMIN角色才可访问/admin（有先后顺序，前面先定义的优先级高，因此比antMatchers("/**").hasAnyRole("USER", "ADMIN")优先级高）</span></div><div class="line">                .antMatchers(<span class="string">"/**"</span>).hasAnyRole(<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>) <span class="comment">// 有USER/ADMIN角色均可</span></div><div class="line">                .anyRequest().authenticated() <span class="comment">// (除上述忽略请求)所有的请求都需要权限认证</span></div><div class="line">                .and()</div><div class="line">            .formLogin()</div><div class="line">                .loginPage(<span class="string">"/manage/login"</span>).permitAll() <span class="comment">// 登录界面(Get)</span></div><div class="line">                .loginProcessingUrl(<span class="string">"/manage/login"</span>) <span class="comment">// 或者通配符/**/login拦截对"/manage/login"和"/login"等的POST请求(登录请求。具体逻辑不需要写，并且会自动生成此端点的control，否则和loginPage一致)</span></div><div class="line">                .successHandler(authenticationSuccessHandler) <span class="comment">// 此处定义登录成功处理方法</span></div><div class="line">                .failureHandler(authenticationFailureHandler)</div><div class="line">                .authenticationDetailsSource(authenticationDetailsSource)</div><div class="line">                .and()</div><div class="line">            .logout().logoutUrl(<span class="string">"/manage/logout"</span>).logoutSuccessUrl(<span class="string">"/manage/login"</span>).permitAll() <span class="comment">// 访问"/manage/logout"登出，登出成功后跳转到"/manage/login"</span></div><div class="line">                .and()</div><div class="line">            .exceptionHandling().accessDeniedHandler(accessDeniedHandler);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 密码加密器 (4)</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 加密混淆器</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SaltSource <span class="title">saltSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomSaltSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 混淆器实现</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSaltSource</span> <span class="keyword">implements</span> <span class="title">SaltSource</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getSalt</span><span class="params">(UserDetails userDetails)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"aezocn"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义登录认证字段(spring security默认基于username/password完成)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomWebAuthenticationDetails</span> <span class="keyword">extends</span> <span class="title">WebAuthenticationDetails</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String wxCode; <span class="comment">// 此处为微信公众号使用微信code进行认证，也可扩展邮箱/手机号等</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomWebAuthenticationDetails</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(request);</div><div class="line">        wxCode = request.getParameter(<span class="string">"wxCode"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWxCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> wxCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        sb.append(<span class="keyword">super</span>.toString()).append(<span class="string">"; wxCode: "</span>).append(<span class="keyword">this</span>.getWxCode());</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将自定义登录认证字段加入到认证数据源</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationDetailsSource</span> <span class="keyword">implements</span> <span class="title">AuthenticationDetailsSource</span>&lt;<span class="title">HttpServletRequest</span>, <span class="title">WebAuthenticationDetails</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> WebAuthenticationDetails <span class="title">buildDetails</span><span class="params">(HttpServletRequest context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomWebAuthenticationDetails(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>根据用户唯一字段(如username、wxCode)获取用户信息</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomUserDetailsService</span><span class="params">(UserDao userDao)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 根据自定义登录认证字段获取用户信息。此处简化微信公众号认证(原本需要先拿到openid)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByWxCode</span><span class="params">(String wxCode)</span></span></div><div class="line">            <span class="keyword">throws</span> UsernameNotFoundException &#123;</div><div class="line">        <span class="keyword">if</span>(wxCode == <span class="keyword">null</span> || <span class="string">""</span>.equals(wxCode)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"invalid wxCode "</span> + wxCode);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        User user = userDao.findByWxCode(wxCode);</div><div class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"Could not find user, user wxCode "</span> + wxCode);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomUserDetails(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 默认根据username(唯一)获取用户信息</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span></span></div><div class="line">            <span class="keyword">throws</span> UsernameNotFoundException &#123;</div><div class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span> || <span class="string">""</span>.equals(username)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"invalid username "</span> + username);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        User user = userDao.findByUsername(username);</div><div class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"Could not find user "</span> + username);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomUserDetails(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 自定义用户认证Model</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetails</span> <span class="keyword">extends</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">CustomUserDetails</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">            <span class="comment">// 初始化父类，需要父类有User(User user)&#123;...&#125;的构造方法</span></div><div class="line">            <span class="keyword">super</span>(user);</div><div class="line"></div><div class="line">            <span class="comment">// 或者在此处初始化</span></div><div class="line">            <span class="comment">// this.setUsername(user.getUsername());</span></div><div class="line">            <span class="comment">// this.setPassword(user.getPassword());</span></div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</div><div class="line">            <span class="keyword">return</span> AuthorityUtils.createAuthorityList(<span class="string">"ROLE_"</span> + <span class="keyword">this</span>.getRoleCode()); <span class="comment">// 组成如：ROLE_ADMIN/ROLE_USER，在资源权限定义时写法如：hasRole('ADMIN')。createAuthorityList接受一个数组，说明支持一个用户拥有多个角色</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5639683223516504866L</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>(1) 基于自定义登录认证字段，提供登录算法(返回认证对象Authentication)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CustomUserDetailsService customUserDetailsService;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomAuthenticationProvider</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(<span class="keyword">final</span> Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">        CustomWebAuthenticationDetails details = (CustomWebAuthenticationDetails) authentication.getDetails();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> String wxCode = details.getWxCode();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> String username = authentication.getName();</div><div class="line">        <span class="keyword">final</span> String password = authentication.getCredentials().toString();</div><div class="line"></div><div class="line">        UserDetails userDetails = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(username) &amp;&amp; !StringUtils.isEmpty(password)) &#123;</div><div class="line">            userDetails = customUserDetailsService.loadUserByUsername(username);</div><div class="line">                </div><div class="line">            <span class="comment">// 验证密码</span></div><div class="line">            <span class="keyword">if</span>(userDetails == <span class="keyword">null</span> || userDetails.getPassword() == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"invalid password"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!passwordEncoder.matches(password, userDetails.getPassword())) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"wrong password"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!StringUtils.isEmpty(wxCode)) &#123;</div><div class="line">            userDetails = customUserDetailsService.loadUserByWxCode(wxCode);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"invalid params: username,password and wxCode are invalid"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(userDetails != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 授权</span></div><div class="line">            <span class="keyword">final</span> List&lt;GrantedAuthority&gt; grantedAuths = (List&lt;GrantedAuthority&gt;) userDetails.getAuthorities();</div><div class="line">            <span class="keyword">final</span> Authentication auth = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(userDetails, password, grantedAuths);</div><div class="line">            <span class="keyword">return</span> auth;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; authentication)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> authentication.equals(UsernamePasswordAuthenticationToken.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上述抛出异常AuthenticationException会被下面的MyAuthenticationFailureHandler类捕获。提供的AuthenticationException有：<ul>
<li><code>UsernameNotFoundException</code> 用户找不到</li>
<li><code>BadCredentialsException</code> 无效的凭据</li>
<li><code>AccountStatusException</code> 用户状态异常它包含如下子类<ul>
<li><code>AccountExpiredException</code> 账户过期</li>
<li><code>LockedException</code> 账户锁定</li>
<li><code>DisabledException</code> 账户不可用</li>
<li><code>CredentialsExpiredException</code> 证书过期</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>(2)登录校验完成拦截：登录成功/失败处理</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFinishHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(LoginFinishHandler.class);</div><div class="line"></div><div class="line">    <span class="meta">@Component</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">            CustomWebAuthenticationDetails details = (CustomWebAuthenticationDetails) authentication.getDetails();</div><div class="line">            String wxCode = details.getWxCode();</div><div class="line"></div><div class="line">            HttpSession session = httpServletRequest.getSession();</div><div class="line">            User user = (User) authentication.getPrincipal();</div><div class="line">            session.setAttribute(<span class="string">"SESSION_USER_INFO"</span>, user);</div><div class="line"></div><div class="line">            logger.info(<span class="string">"&#123;&#125; 登录成功"</span>, user.getUsername());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Component</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationFailureHandler</span> <span class="keyword">extends</span> <span class="title">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">            logger.info(<span class="string">"登录失败："</span> + e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>(3)AccessDeniedHandler访问受限拦截同上例</p>
</li>
<li><p>(4)密码保存</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(16);</span></div><div class="line"><span class="comment">// 保存密码：$2a$16$YcrLwsfqGoKzkmAB9WwORulggKVCrpR7ZPfDCF4CsEoG0o75Nb3Xm</span></div><div class="line">String password = passwordEncoder.encode(<span class="string">"123456"</span>);</div><div class="line">assertTrue(encoder.matches(<span class="string">"123456"</span>, password));</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="在方法-资源-上加权限控制"><a href="#在方法-资源-上加权限控制" class="headerlink" title="在方法(资源)上加权限控制"></a>在方法(资源)上加权限控制</h3><ul>
<li>需要权限配置类上加注解<code>@EnableGlobalMethodSecurity(prePostEnabled=true)</code>，标识开启方法级别prePostEnabled权限控制，还可以开启其他控制</li>
<li><p>使用</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Controller.java</span></div><div class="line"><span class="comment">// @PreAuthorize("hasRole('ADMIN')") // 可使用自定义注解@HasAdminRole进行封装(可组合更复杂的权限注解)</span></div><div class="line"><span class="meta">@HasAdminRole</span></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/adminRole"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">adminRole</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"/adminRole"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// HasAdminRole.java</span></div><div class="line"><span class="comment">// 自定义权限注解，被@HasAdminRole注解的方法需要有ADMIN角色</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('ADMIN')"</span>)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HasAdminRole &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>更多权限控制说明：<a href="https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/#jc-authentication" target="_blank" rel="external">https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/#jc-authentication</a></p>
</li>
</ul>
<h3 id="CSRF、CORS"><a href="#CSRF、CORS" class="headerlink" title="CSRF、CORS"></a>CSRF、CORS</h3><ul>
<li><code>CSRF</code> 跨站请求伪造(Cross-Site Request Forgery). <a href="https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/csrf.html" target="_blank" rel="external">csrf</a></li>
<li><p><code>CORS</code> 跨站资源共享(Cross Origin Resourse-Sharing).</p>
</li>
<li><p>开启cosr <a href="https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/cors.html" target="_blank" rel="external">cors</a></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    http.csrf().disable(); <span class="comment">// 开启cors需要关闭csrf</span></div><div class="line">    http.cors();</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 配置cors</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function">CorsConfigurationSource <span class="title">corsConfigurationSource</span><span class="params">()</span> </span>&#123;</div><div class="line">    CorsConfiguration configuration = <span class="keyword">new</span> CorsConfiguration();</div><div class="line">    configuration.setAllowedOrigins(Arrays.asList(<span class="string">"*"</span>));</div><div class="line">    configuration.setAllowedMethods(Arrays.asList(<span class="string">"*"</span>));</div><div class="line">    configuration.setAllowedHeaders(Arrays.asList(<span class="string">"*"</span>));</div><div class="line"></div><div class="line">    UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</div><div class="line">    source.registerCorsConfiguration(<span class="string">"/**"</span>, configuration);</div><div class="line">    <span class="keyword">return</span> source;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>[^1]: <a href="http://www.importnew.com/20612.html" target="_blank" rel="external">spring security的原理及教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;http://projects.spring.io/spring-security/&quot; target=&quot;
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="springboot" scheme="http://blog.aezo.cn/tags/springboot/"/>
    
      <category term="spring" scheme="http://blog.aezo.cn/tags/spring/"/>
    
      <category term="springsecurity" scheme="http://blog.aezo.cn/tags/springsecurity/"/>
    
  </entry>
  
  <entry>
    <title>h2数据库</title>
    <link href="http://blog.aezo.cn/2017/10/21/db/h2/"/>
    <id>http://blog.aezo.cn/2017/10/21/db/h2/</id>
    <published>2017-10-21T02:42:00.000Z</published>
    <updated>2018-04-11T10:28:30.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>h2简介 <a href="[h2介绍](http://412887952-qq-com.iteye.com/blog/2322756)">^1</a>：内存数据库（Embedded database或in-momery database）具有配置简单、启动速度快、尤其是其可测试性等优点，使其成为开发过程中非常有用的轻量级数据库。在spring中支持HSQL、H2和Derby三种数据库</li>
<li><a href="http://h2database.com/html/main.html" target="_blank" rel="external">官网：http://h2database.com/html/main.html</a>\</li>
</ul>
<h2 id="springboot整合"><a href="#springboot整合" class="headerlink" title="springboot整合"></a>springboot整合</h2><ul>
<li><p>添加依赖(jpa等省略)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.h2database&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;h2&lt;/artifactId&gt;</div><div class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>连接配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  datasource:</div><div class="line">    # 用户名密码会根据填写的生成(默认生成的用户名为sa, 密码为空)。url不写默认使用内存型数据库，数据库名为testdb</div><div class="line">    url: jdbc:h2:~/.h2/minions;AUTO_SERVER=true;</div><div class="line">    # 用户名密码会根据填写的生成(默认生成的用户名为sa, 密码为空).</div><div class="line">    # 如果已经生成了数据库文件(同时也生成了密码), 那么再修改此处用户名密码将无法连接数据库</div><div class="line">    username: sa</div><div class="line">    password: sa</div><div class="line">    driver-class-name: org.h2.Driver</div><div class="line"># h2 web console</div><div class="line"># 登录配置Generic H2 (Server)  jdbc:h2:~/.h2/minions;AUTO_SERVER=true;  sa/sa</div><div class="line"># 推荐使用IDEA的数据库工具</div><div class="line">#  h2:</div><div class="line">#    console:</div><div class="line">#      # 程序开启时就会启动h2 web consloe</div><div class="line">#      enabled: true</div><div class="line">#      # 访问路径: http://localhost:$&#123;server.port&#125;/h2-console</div><div class="line">#      path: /h2-console</div><div class="line">#      settings:</div><div class="line">#        # 运行远程访问h2 web consloe</div><div class="line">#        web-allow-others: true</div></pre></td></tr></table></figure>
</li>
<li><p>配置说明</p>
<ul>
<li><code>jdbc:h2:file:~/.h2/minions;</code>文件型存储(默认可省略file:). <code>jdbc:h2:minions;</code>则代表在当前目录(运行h2 jar的位置)生成数据库文件</li>
<li><code>jdbc:h2:mem:my_db_name;</code>内存型存储(在连接的瞬间即可创建数据库)，程序关掉则内存数据丢失</li>
<li><code>~</code> 这个符号代表的就是当前登录到操作系统的用户对应的用户目录. <code>minions</code>代表数据库名(会在~/.h2目录生成minions.mv.db文件)</li>
<li><code>AUTO_SERVER=true;</code>表示以TCP服务形式启动数据库. 否则项目启动(数据库启动)后, idea无法连接数据库(<code>AUTO_SERVER_PORT=9092;</code>可指明端口, 不指明会的话自动识别)</li>
</ul>
</li>
<li>IDEA数据库工具使用 <a href="[idea连接h2](https://stackoverflow.com/questions/31498682/spring-boot-intellij-embedded-database-headache)">^2</a><ul>
<li>Url: <code>jdbc:h2:~/.h2/minions;AUTO_SERVER=true;</code></li>
<li>Url类型：<code>Remote</code></li>
<li>用户名/密码：<code>sa/sa</code></li>
<li>其他都不需要填写(url处可能报红可忽略)</li>
</ul>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;h2简介 &lt;a href=&quot;[h2介绍](http://412887952-qq-com.iteye.com/blog/2322
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="db" scheme="http://blog.aezo.cn/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>行业概念</title>
    <link href="http://blog.aezo.cn/2017/10/12/others/business-conception/"/>
    <id>http://blog.aezo.cn/2017/10/12/others/business-conception/</id>
    <published>2017-10-12T03:22:00.000Z</published>
    <updated>2018-03-30T02:08:25.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><ul>
<li><code>ERP</code> 企业资源计划(Enterprise Resource Planning)</li>
<li><code>CRM</code> 客户关系管理(Customer Relationship Management)</li>
<li><code>BU</code> 业务单元(Business Units，公司的一个部门)，<code>Strategical Business Unit</code> 战略业务单元</li>
</ul>
<h2 id="物流"><a href="#物流" class="headerlink" title="物流"></a>物流</h2><ul>
<li><code>WMS</code> 仓库管理系统(Warehouse Management System)</li>
<li><code>MES</code> 制造执行系统(Manufacturing Execution System) <a href="[MES七大功能-MES解决方案](https://wenku.baidu.com/view/1627cd0a844769eae009edfe.html)">^1</a><ul>
<li>功能：库房管理、生产调度、制造过程管理、质量管理、设备工装管理、文档管理、物料批次跟踪</li>
</ul>
</li>
<li><code>FOB</code>、<code>CFR</code>、<code>CIF</code><ul>
<li>FOB(free on board)，船上交货</li>
<li>CFR(cost and freight)成本加运费，船上交货</li>
<li>CIF(cost, insurance and freight)成本加保险费加运费，船上交货</li>
</ul>
</li>
<li><code>FBA</code> 亚马逊代发货服务(Fulfillment by Amazon)</li>
</ul>
<h2 id="营销-运营"><a href="#营销-运营" class="headerlink" title="营销/运营"></a>营销/运营</h2><ul>
<li><code>MVP</code> 最小价值产品或最小可视化产品(Minimal Viable Product) <a href="[MVP是什么](https://www.zhihu.com/question/47489768?from=profile_question_card)">^2</a></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;通用&quot;&gt;&lt;a href=&quot;#通用&quot; class=&quot;headerlink&quot; title=&quot;通用&quot;&gt;&lt;/a&gt;通用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ERP&lt;/code&gt; 企业资源计划(Enterprise Resource Planning)&lt;/li&gt;
&lt;li&gt;&lt;
    
    </summary>
    
      <category term="others" scheme="http://blog.aezo.cn/categories/others/"/>
    
    
      <category term="business" scheme="http://blog.aezo.cn/tags/business/"/>
    
      <category term="conception" scheme="http://blog.aezo.cn/tags/conception/"/>
    
  </entry>
  
</feed>
