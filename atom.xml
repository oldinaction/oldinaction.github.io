<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SmalleBlog | AEZOCN</title>
  <subtitle>Better Code,Better Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.aezo.cn/"/>
  <updated>2018-03-04T08:28:58.268Z</updated>
  <id>http://blog.aezo.cn/</id>
  
  <author>
    <name>Smalle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>keepalived</title>
    <link href="http://blog.aezo.cn/2018/03/03/arch/keepalived/"/>
    <id>http://blog.aezo.cn/2018/03/03/arch/keepalived/</id>
    <published>2018-03-03T09:24:00.000Z</published>
    <updated>2018-03-04T08:28:58.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><a href="http://www.keepalived.org/" target="_blank" rel="external">Keepalived</a>是一个免费开源的，用C编写的类似于layer3, 4 &amp; 7交换机制软件，具备我们平时说的第3层、第4层和第7层交换机的功能。主要提供loadbalancing（负载均衡）和 high-availability（高可用）功能，负载均衡实现需要依赖Linux的虚拟服务内核模块（ipvs），而高可用是通过<code>VRRP</code>协议实现多台机器之间的故障转移服务</li>
</ul>
<h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><ul>
<li><code>yum -y install keepalived</code></li>
<li>源码安装 <a href="[Keepalived安装与配置](http://blog.csdn.net/xyang81/article/details/52554398)">^1</a></li>
<li><code>systemctl start keepalived</code> 启动<strong>(需要关闭<code>SELinux</code>)</strong><ul>
<li>启动后自动绑定虚拟ip，通过<code>ip addr</code>可查看绑定的虚拟ip</li>
</ul>
</li>
</ul>
<h2 id="keepalived-conf配置说明"><a href="#keepalived-conf配置说明" class="headerlink" title="keepalived.conf配置说明"></a>keepalived.conf配置说明</h2><ul>
<li>文件位置 <code>/etc/keepalived/keepalived.conf</code></li>
<li>keepalived配置文件主要包含三块：全局定义块、VRRP实例定义块、虚拟服务器定义块（如果keepalived只用来做ha，虚拟服务器是可选的）</li>
<li>配置说明 <a href="[Keepalived安装与配置](http://blog.csdn.net/xyang81/article/details/52554398)">^1</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### 全局定义块</span></div><div class="line">global_defs &#123;</div><div class="line">    <span class="comment">## 邮件通知配置：用于服务有故障时发送邮件报警，可选项，不建议用。需要系统开启sendmail服务，建议用第三独立监控服务，如用nagios全面监控代替</span></div><div class="line">    notification_email &#123;</div><div class="line">        <span class="comment"># 一行一个收件人</span></div><div class="line">        email1@aezo.cn</div><div class="line">        email2@aezo.cn</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># 发件人</span></div><div class="line">    notification_email_from admin@aezo.cn</div><div class="line">    smtp_server XXX.smtp.com</div><div class="line">    <span class="comment"># 指定smtp连接超时时间</span></div><div class="line">    smtp_connect_timeout 30</div><div class="line"></div><div class="line">    <span class="comment"># lvs负载均衡器标识，在一个网络内，它的值应该是唯一的</span></div><div class="line">    lvs_id string</div><div class="line">    <span class="comment"># 用户标识本节点的名称，通常为hostname</span></div><div class="line">    router_id server1.aezocn</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">### VRRP实例定义块：同步vrrp级，用于确定失败切换（FailOver）包含的路由实例个数。即在有2个负载均衡器的场景，一旦某个负载均衡器失效，需要自动切换到另外一个负载均衡器的实例是哪</span></div><div class="line">vrrp_sync_group string &#123;</div><div class="line">    <span class="comment"># 至少要包含一个vrrp实例，vrrp实例名称必须和vrrp_instance定义的一致</span></div><div class="line">    group &#123;</div><div class="line">        VI_1</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># vrrp服务检测脚本：keepalived默认是通过检测keepalived进程是否存在判断服务器是否宕机。此时根据脚本判断是否杀死此服务器keepalived进程。参考《nginx》中【结合keepalived实现高可用】</span></div><div class="line">vrrp_script check_nginx.sh &#123;</div><div class="line">    <span class="comment">#检测nginx的脚本</span></div><div class="line">    script <span class="string">"/etc/keepalived/check_nginx.sh.sh"</span></div><div class="line">    <span class="comment">#每2秒检测一次</span></div><div class="line">    interval 2</div><div class="line">    <span class="comment">#如果某一个nginx宕机 则权重减20                              </span></div><div class="line">    weight -20</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment"># vrrp实例名(VI_1)</span></div><div class="line">vrrp_instance VI_1 &#123;</div><div class="line">    <span class="comment"># 实例状态，只有MASTER（主）和BACKUP（备）两种状态，并且需要全部大写</span></div><div class="line">    <span class="comment"># 抢占模式下，其中MASTER为工作状态，BACKUP为备用状态。当MASTER所在的服务器失效时，BACKUP所在的服务会自动把它的状态由BACKUP切换到MASTER状态。当失效的MASTER所在的服务恢复时，BACKUP从MASTER恢复到BACKUP状态</span></div><div class="line">    state MASTER</div><div class="line">    <span class="comment"># 对外提供服务的网卡接口，即VIP绑定的网卡接口，如：eth0，eth1</span></div><div class="line">    interface eth0</div><div class="line">    <span class="comment"># 本机IP地址</span></div><div class="line">    mcast_src_ip 192.168.1.1</div><div class="line">    <span class="comment"># 虚拟路由的ID号，每个节点设置必须一样，可选择IP最后一段使用，相同的 VRID 为一个组，他将决定多播的 MAC 地址。同一实例下virtual_router_id必须相同（主从要一致）</span></div><div class="line">    virtual_router_id 51</div><div class="line">    <span class="comment"># 节点优先级，取值范围0～254，MASTER要比BACKUP高</span></div><div class="line">    priority 100</div><div class="line">    <span class="comment"># MASTER与BACKUP节点间同步检查的时间间隔，单位为秒</span></div><div class="line">    advert_int 1</div><div class="line">    <span class="comment"># 验证类型和验证密码</span></div><div class="line">    authentication &#123;</div><div class="line">        <span class="comment"># 类型主要有 PASS、AH 两种，通常使用PASS类型</span></div><div class="line">        auth_type PASS</div><div class="line">        <span class="comment"># 验证密码为明文，同一 vrrp 实例 MASTER 与 BACKUP 使用相同的密码才能正常通信</span></div><div class="line">        auth_pass 1111</div><div class="line">    &#125;</div><div class="line">    <span class="comment"># 虚拟IP地址池，可以有多个IP，每个IP占一行，不需要指定子网掩码。注意：这个IP必须与我们的设定的vip保持一致</span></div><div class="line">    <span class="comment"># 启动后自动给MASTER绑定虚拟ip(MASTER宕机后，则虚拟ip会绑定到BACKUP上)</span></div><div class="line">    virtual_ipaddress &#123;  <span class="comment"># Block limited to 20 IP addresses @IP</span></div><div class="line">        <span class="comment"># 此虚拟ip为web服务对外提供访问的ip</span></div><div class="line">        192.168.200.1</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment"># 负载均衡器之间的监控接口,类似于 HA HeartBeat 的心跳线。但它的机制优于 Heartbeat，因为它没有"裂脑"这个问题，它是以优先级这个机制来规避这个麻烦的。在 DR 模式中，lvs_sync_daemon_inteface与服务接口interface使用同一个网络接口</span></div><div class="line">    lvs_sync_daemon_interface string </div><div class="line">    <span class="comment"># 配置后，有故障时激活邮件通知</span></div><div class="line">    smtp_alert</div><div class="line">    <span class="comment"># 禁止抢占服务。默认情况，当MASTER服务挂掉之后，BACKUP自动升级为MASTER并接替它的任务，当MASTER服务恢复后，升级为MASTER的BACKUP服务又自动降为BACKUP，把工作权交给原MASTER。当配置了nopreempt，MASTER从挂掉到恢复，不再将服务抢来</span></div><div class="line">    nopreempt</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">### 虚拟服务器定义块：定义一个虚拟服务器，这个ip是virtual_ipaddress中定义的其中一个</span></div><div class="line">virtual_server 192.168.200.1 8110 &#123;</div><div class="line">    <span class="comment">#　健康检查时间间隔，单位：秒</span></div><div class="line">    delay_loop 6</div><div class="line">    <span class="comment"># 负载均衡调度算法，互联网应用常用方式为wlc或rr。取值rr|wrr|lc|wlc|sh|dh|lblc </span></div><div class="line">    lb_algo rr</div><div class="line">    <span class="comment"># 负载均衡转发规则。包括DR、NAT、TUN，一般使用路由（DR）转发规则。</span></div><div class="line">    lb_kind DR</div><div class="line">    <span class="comment"># http服务会话保持时间，单位：秒</span></div><div class="line">    persistence_timeout 50</div><div class="line">    <span class="comment"># 转发协议，分为TCP和UDP两种</span></div><div class="line">    protocol TCP</div><div class="line">    <span class="comment"># 真实服务器IP和端口，可以定义多个</span></div><div class="line">    real_server 192.168.200.3 1358 &#123;</div><div class="line">        <span class="comment"># 负载权重，值越大，转发的优先级越高</span></div><div class="line">        weight 1</div><div class="line">        <span class="comment"># 服务停止后执行的脚本</span></div><div class="line">        notify_down /path/script.sh</div><div class="line">        <span class="comment"># 服务有效性检测：HTTP_GET|SSL_CHECK</span></div><div class="line">        HTTP_GET &#123;</div><div class="line">            url &#123;</div><div class="line">                path /testurl1/test.jsp</div><div class="line">                digest 640205b7b0fc66c1ea91c463fac6334d</div><div class="line">            &#125;</div><div class="line">            <span class="comment"># 服务连接端口</span></div><div class="line">            connect_port 80</div><div class="line">            <span class="comment"># 服务连接超时时长，单位：秒</span></div><div class="line">            connect_timeout 3</div><div class="line">            <span class="comment"># 服务连接失败重试次数</span></div><div class="line">            nb_get_retry 3</div><div class="line">            <span class="comment"># 重试连接间隔，单位：秒</span></div><div class="line">            delay_before_retry 3</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="相关应用"><a href="#相关应用" class="headerlink" title="相关应用"></a>相关应用</h2><h3 id="nginx-keepalived实现高可用"><a href="#nginx-keepalived实现高可用" class="headerlink" title="nginx + keepalived实现高可用"></a>nginx + keepalived实现高可用</h3><p>参考<code>《nginx》</code>的<code>【结合keepalived实现高可用】</code>章节</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>mysql + keepalived</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.keepalived.org/&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
      <category term="arch" scheme="http://blog.aezo.cn/categories/arch/"/>
    
    
      <category term="keepalived" scheme="http://blog.aezo.cn/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>memcached缓存数据库</title>
    <link href="http://blog.aezo.cn/2018/03/03/db/memcached/"/>
    <id>http://blog.aezo.cn/2018/03/03/db/memcached/</id>
    <published>2018-03-03T06:32:00.000Z</published>
    <updated>2018-03-03T07:22:23.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><a href="http://www.runoob.com/memcached/memcached-tutorial.html" target="_blank" rel="external">菜鸟教程</a></li>
</ul>
<h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><ul>
<li><code>yum –y install memcached</code> 安装</li>
<li><code>systemctl start memcached</code> 启动(默认端口11211)</li>
<li><p>测试存值取值</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">telnet localhost 11211</div><div class="line"><span class="comment"># 设置变量abc的长度为5</span></div><div class="line"><span class="built_in">set</span> abc 0 0 5</div><div class="line"><span class="comment"># 设置abc的值为12345，长度必须和上面一致</span></div><div class="line">12345</div><div class="line"><span class="comment"># 获取abc的值</span></div><div class="line">get abc</div><div class="line"><span class="comment"># 退出</span></div><div class="line">quit</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="解决session一致性-session共享"><a href="#解决session一致性-session共享" class="headerlink" title="解决session一致性(session共享)"></a>解决session一致性(session共享)</h2><p>参考《nginx》的【反向代理和负载均衡】部分</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.runoob.com/memcached/memcached-tutorial.html
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="arch" scheme="http://blog.aezo.cn/tags/arch/"/>
    
  </entry>
  
  <entry>
    <title>ofbiz任务(定时/异步)</title>
    <link href="http://blog.aezo.cn/2018/02/24/java/ofbiz/ofbiz-job/"/>
    <id>http://blog.aezo.cn/2018/02/24/java/ofbiz/ofbiz-job/</id>
    <published>2018-02-24T08:27:00.000Z</published>
    <updated>2018-02-24T08:31:34.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><ul>
<li><code>org.ofbiz.service.job.JobPoller</code> 加载时会启动一个自动执行任务的线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JobPoller instance = <span class="keyword">new</span> JobPoller();</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="comment">// 自动执行任务线程</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Thread jobManagerPollerThread;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">JobPoller</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (pollEnabled()) &#123;</div><div class="line">        jobManagerPollerThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> JobManagerPoller(), <span class="string">"OFBiz-JobPoller"</span>);</div><div class="line">        jobManagerPollerThread.setDaemon(<span class="keyword">false</span>);</div><div class="line">        jobManagerPollerThread.start();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        jobManagerPollerThread = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    ServiceConfigUtil.registerServiceConfigListener(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;&gt;&lt;/a&gt;源码分析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.ofbiz.service.job.JobPoller&lt;/code&gt; 加载时会启动一个自动执
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="ofbiz" scheme="http://blog.aezo.cn/tags/ofbiz/"/>
    
      <category term="async" scheme="http://blog.aezo.cn/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>基于springboot和vue前后分离</title>
    <link href="http://blog.aezo.cn/2017/12/25/arch/springboot-vue/"/>
    <id>http://blog.aezo.cn/2017/12/25/arch/springboot-vue/</id>
    <published>2017-12-25T13:16:00.000Z</published>
    <updated>2017-12-27T14:15:57.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h2 id="跨域和session-token"><a href="#跨域和session-token" class="headerlink" title="跨域和session/token"></a>跨域和session/token</h2><h3 id="同源政策"><a href="#同源政策" class="headerlink" title="同源政策"></a>同源政策</h3><ul>
<li>网络协议、ip、端口三者都相同就是同一个域(同源)<ul>
<li>如<code>http://localhsot</code>和<code>http://localhsot:8080</code>之间进行数据交互就存在跨域问题</li>
</ul>
</li>
<li>浏览器”同源政策”限制(针对不同源情况) <a href="[浏览器同源政策及其规避方法](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)">^2</a><ul>
<li><code>Cookie、LocalStorage 和 IndexDB 无法读取</code></li>
<li><code>DOM 无法获得</code></li>
<li><code>AJAX 请求不能发送</code></li>
</ul>
</li>
<li><p>AJAX请求受到同源政策限制的解决办法</p>
<ul>
<li><p>架设服务器代理（浏览器请求同源服务器，再由后者请求外部服务）</p>
<ul>
<li><p>基于<code>nginx</code>做中转</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen   80;               </div><div class="line">    server_name localhost;</div><div class="line"></div><div class="line">    # 后端服务根端点</div><div class="line">    location /api/ &#123;</div><div class="line">        proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_set_header Host $http_host;</div><div class="line">        proxy_redirect off;</div><div class="line">        if (!-f $request_filename) &#123;</div><div class="line">            proxy_pass http://127.0.0.1:8080;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # 前端</div><div class="line">    location / &#123;</div><div class="line">        root   D:\demo\vue\dist;</div><div class="line">        index  index.html index.htm;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>JSONP</code>(只能发送GET请求)</p>
</li>
<li><code>WebSocket</code></li>
<li><code>CORS</code></li>
</ul>
</li>
</ul>
<h3 id="跨域资源共享-CORS-Cross-origin-resource-sharing-1"><a href="#跨域资源共享-CORS-Cross-origin-resource-sharing-1" class="headerlink" title="跨域资源共享(CORS, Cross-origin resource sharing) [^1]"></a>跨域资源共享(CORS, Cross-origin resource sharing) [^1]</h3><ul>
<li><strong><code>CORS</code>需要浏览器和服务器同时支持。</strong>目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。<strong>浏览器会自动完成CORS通信过程，开发只需配置服务器同源限制</strong></li>
<li>如果CORS通信过程中，响应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段，浏览器则认为无法请求，便会抛出异常被XHR的onerror捕获</li>
<li><code>Spring</code>对CORS的支持<a href="https://spring.io/blog/2015/06/08/cors-support-in-spring-framework" target="_blank" rel="external">https://spring.io/blog/2015/06/08/cors-support-in-spring-framework</a><ul>
<li>可在方法级别进行控制，使用注解<code>@CrossOrigin</code></li>
<li>全局CORS配置，声明一个<code>WebMvcConfigurer</code>的bean</li>
<li>基于<code>Filter</code>，声明一个<code>CorsFilter</code>的bean</li>
</ul>
</li>
</ul>
<h4 id="spring-security的cors配置-3"><a href="#spring-security的cors配置-3" class="headerlink" title="spring security的cors配置 [^3]"></a>spring security的cors配置 [^3]</h4><ul>
<li><p>开启cosr</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    http.csrf().disable(); <span class="comment">// 开启cors需要关闭csrf</span></div><div class="line">    http.cors();</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 配置cors</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function">CorsConfigurationSource <span class="title">corsConfigurationSource</span><span class="params">()</span> </span>&#123;</div><div class="line">    CorsConfiguration configuration = <span class="keyword">new</span> CorsConfiguration();</div><div class="line">    configuration.setAllowedOrigins(Arrays.asList(<span class="string">"*"</span>));</div><div class="line">    configuration.setAllowedMethods(Arrays.asList(<span class="string">"*"</span>));</div><div class="line">    configuration.setAllowedHeaders(Arrays.asList(<span class="string">"*"</span>));</div><div class="line">    configuration.setAllowCredentials(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</div><div class="line">    source.registerCorsConfiguration(<span class="string">"/**"</span>, configuration);</div><div class="line">    <span class="keyword">return</span> source;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>CSRF</code> 跨站请求伪造(Cross-Site Request Forgery). <a href="https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/csrf.html" target="_blank" rel="external">csrf</a></li>
</ul>
</li>
<li><p>spring-security登录只能接受<code>x-www-form-urlencoded</code>(简单键值对)类型的数据，<code>form-data</code>(表单类型，可以含有文件)类型的请求获取不到参数值</p>
</li>
<li><code>axios</code>实现<code>x-www-form-urlencoded</code>请求：参数应该写到<code>param</code>中。如果写在<code>data</code>中则不行，加<code>headers: {&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}</code>也不行</li>
</ul>
<hr>
<p>[^1]: <a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a></p>
<p>[^3]: <a href="https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/cors.html" target="_blank" rel="external">spring security cors</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h2 id=&quot;跨域和session-token&quot;&gt;&lt;a href=&quot;#跨域和session-token&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="arch" scheme="http://blog.aezo.cn/categories/arch/"/>
    
    
      <category term="springboot" scheme="http://blog.aezo.cn/tags/springboot/"/>
    
      <category term="vue" scheme="http://blog.aezo.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>java基础</title>
    <link href="http://blog.aezo.cn/2017/12/12/java/java-base/"/>
    <id>http://blog.aezo.cn/2017/12/12/java/java-base/</id>
    <published>2017-12-12T02:07:00.000Z</published>
    <updated>2017-12-12T02:07:48.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><p>- </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h2&gt;&lt;h3 id=&quot;易错点&quot;&gt;&lt;a href=&quot;#易错点&quot; class=&quot;headerlink&quot; title=&quot;易错点&quot;&gt;&lt;/a&gt;易错点&lt;/h3&gt;&lt;p
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="javase" scheme="http://blog.aezo.cn/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu相关命令</title>
    <link href="http://blog.aezo.cn/2017/12/11/linux/ubuntu/"/>
    <id>http://blog.aezo.cn/2017/12/11/linux/ubuntu/</id>
    <published>2017-12-11T14:00:00.000Z</published>
    <updated>2017-12-12T13:05:03.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h2><ul>
<li>安装deb格式文件<ul>
<li><code>dpkg -i file.deb</code> deb是debian linus的安装格式，跟red hat的rpm非常相似 <a href="[Ubuntu下deb包的安装方法](http://blog.csdn.net/kevinhg/article/details/5934462)">^1</a></li>
</ul>
</li>
</ul>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul>
<li>显示/隐藏隐藏文件和文件夹：<code>Ctrl + H</code></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装程序&quot;&gt;&lt;a href=&quot;#安装程序&quot; class=&quot;headerlink&quot; title=&quot;安装程序&quot;&gt;&lt;/a&gt;安装程序&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装deb格式文件&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dpkg -i file.deb&lt;/code&gt; deb是debi
    
    </summary>
    
      <category term="linux" scheme="http://blog.aezo.cn/categories/linux/"/>
    
    
      <category term="shell" scheme="http://blog.aezo.cn/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>ofbiz模型图(UML)分析</title>
    <link href="http://blog.aezo.cn/2017/12/09/java/ofbiz/ofbiz-uml/"/>
    <id>http://blog.aezo.cn/2017/12/09/java/ofbiz/ofbiz-uml/</id>
    <published>2017-12-09T02:17:00.000Z</published>
    <updated>2017-12-09T02:50:59.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模型列表"><a href="#模型列表" class="headerlink" title="模型列表"></a>模型列表</h2><ul>
<li>webapp中类图</li>
<li>Event调用过程</li>
<li>Contorl处理过程</li>
<li>登录</li>
<li>校验登录 extensionCheckLogin</li>
<li>view渲染</li>
<li>screen渲染</li>
</ul>
<embed width="1000" height="800" src="/data/images/2017/09/OFBiz-UML.pdf" internalinstanceid="7">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模型列表&quot;&gt;&lt;a href=&quot;#模型列表&quot; class=&quot;headerlink&quot; title=&quot;模型列表&quot;&gt;&lt;/a&gt;模型列表&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;webapp中类图&lt;/li&gt;
&lt;li&gt;Event调用过程&lt;/li&gt;
&lt;li&gt;Contorl处理过程&lt;/li&gt;
&lt;
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="ofbiz" scheme="http://blog.aezo.cn/tags/ofbiz/"/>
    
      <category term="uml" scheme="http://blog.aezo.cn/tags/uml/"/>
    
      <category term="源码" scheme="http://blog.aezo.cn/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>ofbiz</title>
    <link href="http://blog.aezo.cn/2017/12/09/java/ofbiz/ofbiz/"/>
    <id>http://blog.aezo.cn/2017/12/09/java/ofbiz/ofbiz/</id>
    <published>2017-12-09T02:17:00.000Z</published>
    <updated>2017-12-13T02:30:30.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h2 id="安装编译启动"><a href="#安装编译启动" class="headerlink" title="安装编译启动"></a>安装编译启动</h2><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ul>
<li><p>设置hot-deploy下组件(component)编译顺序</p>
<ul>
<li><p><code>hot-deploy/build.xml</code></p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"OFBiz hot-deploy Build"</span> <span class="attr">default</span>=<span class="string">"build"</span> <span class="attr">basedir</span>=<span class="string">"."</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filelist</span> <span class="attr">id</span>=<span class="string">"hot-deploy-builds"</span> <span class="attr">dir</span>=<span class="string">"."</span></span></div><div class="line">        <span class="attr">files</span>=<span class="string">"ubase/build.xml,</span></div><div class="line">        aplcodecenter/build.xml"/&gt;</div><div class="line">    <span class="comment">&lt;!--运行build命令时--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"build"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">iterate</span> <span class="attr">target</span>=<span class="string">"jar"</span> <span class="attr">filelist</span>=<span class="string">"hot-deploy-builds"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--除去不需编译的组件--&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">        &lt;externalsubant target="jar"&gt;</div><div class="line">            &lt;filelist refid="hot-deploy-builds"/&gt;</div><div class="line">        &lt;/externalsubant&gt;</div><div class="line">        --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">externalsubant</span> <span class="attr">target</span>=<span class="string">"build"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filelist</span> <span class="attr">dir</span>=<span class="string">"."</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">file</span> <span class="attr">name</span>=<span class="string">"umetro/build.xml"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">filelist</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">externalsubant</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--运行clean命令时执行--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"clean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">iterate</span> <span class="attr">target</span>=<span class="string">"clean"</span> <span class="attr">filelist</span>=<span class="string">"hot-deploy-builds"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--除去不需clean的组件--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">externalsubant</span> <span class="attr">target</span>=<span class="string">"clean"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filelist</span> <span class="attr">dir</span>=<span class="string">"."</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">file</span> <span class="attr">name</span>=<span class="string">"umetro/build.xml"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">filelist</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">externalsubant</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
</li>
<li><p>设置hot-deloy下组件单独clean：在项目根目录下的<code>build.xml</code>中加入</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"_clean-hot-deploy"</span> <span class="attr">description</span>=<span class="string">"clean hot-deploy jar"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hotdeployant</span> <span class="attr">target</span>=<span class="string">"clean"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;h2 id=&quot;安装编译启动&quot;&gt;&lt;a href=&quot;#安装编译启动&quot; class=&quot;headerlink&quot; title=&quot;安装编译启动&quot;&gt;&lt;/a&gt;安
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="ofbiz" scheme="http://blog.aezo.cn/tags/ofbiz/"/>
    
  </entry>
  
  <entry>
    <title>MUI</title>
    <link href="http://blog.aezo.cn/2017/11/24/web/mui/"/>
    <id>http://blog.aezo.cn/2017/11/24/web/mui/</id>
    <published>2017-11-24T12:30:00.000Z</published>
    <updated>2017-12-24T09:48:49.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mui简介"><a href="#mui简介" class="headerlink" title="mui简介"></a>mui简介</h2><ul>
<li>MUI不依赖任何第三方JS库，原生UI(MUI以iOS平台UI为基础，补充部分Android平台特有的UI控件)，结合H5 plus可实现更解决原生的APP应用</li>
<li>APP开发类型：原生开发、H5开发、混合开发(Hybrid App：一部分功能用native构建，一部分功能用html5构建，比如AppCan、PhoneGap(Cordova)等)</li>
<li>官网：<a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="external">http://dev.dcloud.net.cn/mui/</a></li>
</ul>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li>js的<code>addEventListener()</code>方法只能监听某个特定元素上的事件(只能通过id获取元素，或者window对象等)</li>
<li><p>可以使用<code>.on()</code>方法实现批量元素的事件绑定</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mui(<span class="string">".mui-table-view"</span>).on(<span class="string">'tap'</span>, <span class="string">'.mui-table-view-cell'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//获取id</span></div><div class="line">	<span class="keyword">var</span> id = <span class="keyword">this</span>.getAttribute(<span class="string">"id"</span>);</div><div class="line">	<span class="comment">//传值给详情页面，通知加载新数据</span></div><div class="line">	mui.fire(detail,<span class="string">'getDetail'</span>,&#123;<span class="attr">id</span>:id&#125;);</div><div class="line">	<span class="comment">//打开新闻详情</span></div><div class="line">	mui.openWindow(&#123;</div><div class="line">		<span class="attr">id</span>:<span class="string">'detail'</span>,</div><div class="line">		<span class="attr">url</span>:<span class="string">'detail.html'</span></div><div class="line">	&#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><code>tap</code>为mui定义的点击时间</li>
<li><code>mui(&quot;.mui-table-view&quot;)</code>根据class获取对象，只能获取非动态加入的DOM</li>
<li>此处实际是监听<code>.mui-table-view</code>下的<code>.mui-table-view-cell</code>的点击事件</li>
</ul>
</li>
<li><code>&lt;a&gt;</code>标签点击无法跳转到href指定的连接，解决办法见下文</li>
</ul>
<h2 id="mui零散知识"><a href="#mui零散知识" class="headerlink" title="mui零散知识"></a>mui零散知识</h2><ul>
<li>H5底部导航跳转</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"mui-bar mui-bar-tab"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">data-href</span>=<span class="string">"index.html"</span> <span class="attr">class</span>=<span class="string">"mui-tab-item sm-href"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">data-href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"mui-tab-item sm-href"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-contact"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>活动<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">data-href</span>=<span class="string">"home.html"</span> <span class="attr">class</span>=<span class="string">"mui-tab-item sm-href mui-active"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-contact"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a标签点击跳转:解决mui的a标签href无法跳转</span></div><div class="line">bindSmHref(<span class="built_in">document</span>.getElementsByClassName(<span class="string">"sm-href"</span>));</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindSmHref</span>(<span class="params">pageTabs</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; pageTabs.length; i++) &#123;</div><div class="line">		pageTabs[i].addEventListener(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> href = <span class="keyword">this</span>.getAttribute(<span class="string">"data-href"</span>);</div><div class="line">			<span class="keyword">if</span>(href != <span class="literal">null</span> &amp;&amp; href != <span class="string">""</span>) &#123;</div><div class="line">				<span class="built_in">window</span>.location.href = href;</div><div class="line">			&#125;</div><div class="line">		&#125;, <span class="literal">false</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>popover弹框、scroll滚动<ul>
<li>popover参数二为锚点元素(<code>anchorElement</code>)，标识弹框是基于某个元素的。如果</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"popover"</span> <span class="attr">class</span>=<span class="string">"mui-popover"</span>&gt;</span><span class="comment">&lt;!--默认隐藏, dom在body下即可--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-scroll-wrapper"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-scroll"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding: 10px;"</span>&gt;</span><span class="comment">&lt;!--mui-scroll下是真实dom，需要里面元素有padding则需要调解此div--&gt;</span></div><div class="line">                这里是内容</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">mui, window, document, undefined</span>) </span>&#123;</div><div class="line">    mui.init();</div><div class="line"></div><div class="line">    <span class="comment">// 初始化滚动条</span></div><div class="line">    mui(<span class="string">'.mui-scroll-wrapper'</span>).scroll(&#123;&#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 当mybtn按钮被点击时，弹框显示隐藏切换</span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"mybtn"</span>).addEventListener(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        mui(<span class="string">"#popover"</span>).popover(<span class="string">"toggle"</span>, <span class="built_in">document</span>.getElementById(<span class="string">"popoverRef"</span>)); <span class="comment">// 如果弹框居中，则只需要参考popoverRef元素为居中</span></div><div class="line">    &#125;);</div><div class="line">&#125;)(mui, <span class="built_in">window</span>, <span class="built_in">document</span>, <span class="literal">undefined</span>);</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#popover</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">85%</span>;</div><div class="line">	<span class="comment">/*</span></div><div class="line">    display: block;</div><div class="line">    top: 0px;</div><div class="line">    left: 5%;</div><div class="line">    overflow: auto;</div><div class="line">	*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>图片上传，下列方法可解决mui示例中h5页面拍照无法上传问题(缺点：上传到后台无法记录文件类型，无文件后缀)<ul>
<li>利用canvas将图片转成base64并压缩 -&gt; 将base64的dataUrl转成Blob -&gt; 将Blob放入到FormData -&gt; xhr</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// =======</span></div><div class="line"><span class="comment">// 图片上传: 利用canvas将图片转成base64并压缩 -&gt; 将base64的dataUrl转成Blob -&gt; 将Blob放入到FormData -&gt; xhr</span></div><div class="line"><span class="comment">// =======</span></div><div class="line"><span class="comment">/*</span></div><div class="line">	var smImg = new SmUploadImg();</div><div class="line">	smImg.init(&#123;</div><div class="line">		inputs: document.getElementById(".sm-input__img"),</div><div class="line">		callback: function(base64, target) &#123;</div><div class="line">			// formData.append(target.id, this.dataUrltoBlob(base64));</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line"> */</div><div class="line">SmUploadImg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.sw = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.sh = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.tw = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.th = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.scale = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.maxWidth = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.maxHeight = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.maxSize = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.fileSize = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.fileDate = <span class="literal">null</span>;   </div><div class="line">    <span class="keyword">this</span>.fileType = <span class="string">''</span>;   </div><div class="line">    <span class="keyword">this</span>.fileName = <span class="string">''</span>;   </div><div class="line">    <span class="keyword">this</span>.inputs = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.canvas = <span class="literal">null</span>;   </div><div class="line">    <span class="keyword">this</span>.mime = &#123;&#125;;   </div><div class="line">    <span class="keyword">this</span>.type = <span class="string">''</span>;</div><div class="line">    <span class="keyword">this</span>.target = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.toastr = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.callback = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.loading = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**   </span></div><div class="line"> * @description 初始化对象</div><div class="line"> */</div><div class="line">SmUploadImg.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.maxWidth = options.maxWidth || <span class="number">800</span>;</div><div class="line">	<span class="keyword">this</span>.maxHeight = options.maxHeight || <span class="number">600</span>;</div><div class="line">	<span class="keyword">this</span>.maxSize = options.maxSize || <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 图最大大小(5M)</span></div><div class="line">	<span class="keyword">this</span>.inputs = options.inputs; <span class="comment">// 文件输入框(可多个)</span></div><div class="line">	<span class="keyword">this</span>.mime = &#123;</div><div class="line">		<span class="string">'png'</span>: <span class="string">'image/png'</span>,</div><div class="line">		<span class="string">'jpg'</span>: <span class="string">'image/jpeg'</span>,</div><div class="line">		<span class="string">'jpeg'</span>: <span class="string">'image/jpeg'</span>,</div><div class="line">		<span class="string">'bmp'</span>: <span class="string">'image/bmp'</span></div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 提示函数</span></div><div class="line">	<span class="keyword">this</span>.toastr = options.toastr || <span class="literal">null</span>;</div><div class="line">	<span class="comment">// 图片加载完后返回base64</span></div><div class="line">	<span class="keyword">this</span>.callback = options.callback || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">	<span class="comment">// 读取图片时调用</span></div><div class="line">	<span class="keyword">this</span>.loading = options.loading || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// console.log("loading...");</span></div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>._addEvent();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**   </span></div><div class="line"> * @description 将base64的dataUrl转换成Blob对象</div><div class="line"> */</div><div class="line">SmUploadImg.prototype.dataUrltoBlob = <span class="function"><span class="keyword">function</span>(<span class="params">dataurl</span>) </span>&#123;	</div><div class="line">    <span class="keyword">var</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</div><div class="line">        bstr = atob(arr[<span class="number">1</span>]), n = bstr.length, u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</div><div class="line">    <span class="keyword">while</span>(n--)&#123;</div><div class="line">        u8arr[n] = bstr.charCodeAt(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8arr], &#123;<span class="attr">type</span>:mime&#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 为新加入Dom的元素绑定事件</div><div class="line"> * @param &#123;Object&#125; inputs</div><div class="line"> */</div><div class="line">SmUploadImg.prototype.addInputs = <span class="function"><span class="keyword">function</span>(<span class="params">inputs</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>._addEvent(inputs);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**   </span></div><div class="line"> * @description 绑定事件   </div><div class="line"> * @param &#123;Object&#125; elm 元素   </div><div class="line"> * @param &#123;Function&#125; fn 绑定函数   </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">inputs</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">tmpSelectFile</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">		_this._handelSelectFile(ev);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(!inputs) </div><div class="line">		inputs = _this.inputs;</div><div class="line">	<span class="keyword">if</span>(inputs.length || inputs.length == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; inputs.length; i++) &#123;</div><div class="line">			inputs[i].addEventListener(<span class="string">'change'</span>, tmpSelectFile, <span class="literal">false</span>);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(inputs) &#123;</div><div class="line">		inputs.addEventListener(<span class="string">'change'</span>, tmpSelectFile, <span class="literal">false</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 绑定事件  </div><div class="line"> * @param &#123;Object&#125; elm 元素  </div><div class="line"> * @param &#123;Function&#125; fn 绑定函数  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._handelSelectFile = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> file = ev.target.files[<span class="number">0</span>];</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.type = file.type;</div><div class="line">	<span class="keyword">this</span>.target = ev.target;</div><div class="line"></div><div class="line">	<span class="comment">// 如果没有文件类型，则通过后缀名判断（解决微信及360浏览器无法获取图片类型问题）   </span></div><div class="line">	<span class="keyword">if</span>(!<span class="keyword">this</span>.type) &#123;</div><div class="line">		<span class="keyword">this</span>.type = <span class="keyword">this</span>.mime[file.name.match(<span class="regexp">/\.([^\.]+)$/i</span>)[<span class="number">1</span>]];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(!<span class="regexp">/image.(png|jpg|jpeg|bmp)/</span>.test(<span class="keyword">this</span>.type)) &#123;</div><div class="line">		<span class="keyword">var</span> msg = <span class="string">'不支持此文件类型'</span>;</div><div class="line">		<span class="keyword">this</span>.toastr ? <span class="keyword">this</span>.toastr(msg) : alert(msg);</div><div class="line">		<span class="keyword">this</span>.target.value = <span class="string">""</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(file.size &gt; <span class="keyword">this</span>.maxSize) &#123;</div><div class="line">		<span class="keyword">var</span> msg = <span class="string">'选择文件大于'</span> + <span class="keyword">this</span>.maxSize / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">'M，请重新选择'</span>;</div><div class="line">		<span class="keyword">this</span>.toastr ? <span class="keyword">this</span>.toastr(msg) : alert(msg);</div><div class="line">		<span class="keyword">this</span>.target.value = <span class="string">""</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.fileName = file.name;</div><div class="line">	<span class="keyword">this</span>.fileSize = file.size;</div><div class="line">	<span class="keyword">this</span>.fileType = <span class="keyword">this</span>.type;</div><div class="line">	<span class="keyword">this</span>.fileDate = file.lastModifiedDate;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>._readImage(file);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 读取图片文件  </div><div class="line"> * @param &#123;Object&#125; image 图片文件  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._readImage = <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">tmpCreateImage</span>(<span class="params">uri</span>) </span>&#123;</div><div class="line">		_this._createImage(uri);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.loading();</div><div class="line"></div><div class="line">	<span class="keyword">this</span>._getURI(file, tmpCreateImage);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 通过文件获得URI  </div><div class="line"> * @param &#123;Object&#125; file 文件  </div><div class="line"> * @param &#123;Function&#125; callback 回调函数，返回文件对应URI  </div><div class="line"> * return &#123;Bool&#125; 返回false  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._getURI = <span class="function"><span class="keyword">function</span>(<span class="params">file, callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">tmpLoad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// 头不带图片格式，需填写格式   </span></div><div class="line">		<span class="keyword">var</span> re = <span class="regexp">/^data:base64,/</span>;</div><div class="line">		<span class="keyword">var</span> ret = <span class="keyword">this</span>.result + <span class="string">''</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(re.test(ret))</div><div class="line">			ret = ret.replace(re, <span class="string">'data:'</span> + _this.mime[_this.fileType] + <span class="string">';base64,'</span>);</div><div class="line"></div><div class="line">		callback &amp;&amp; callback(ret, <span class="keyword">this</span>.target);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	reader.onload = tmpLoad;</div><div class="line"></div><div class="line">	reader.readAsDataURL(file);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 创建图片  </div><div class="line"> * @param &#123;Object&#125; image 图片文件  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._createImage = <span class="function"><span class="keyword">function</span>(<span class="params">uri</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">tmpLoad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		_this._drawImage(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	img.onload = tmpLoad;</div><div class="line"></div><div class="line">	img.src = uri;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 创建Canvas将图片画至其中，并获得压缩后的文件  </div><div class="line"> * @param &#123;Object&#125; img 图片文件  </div><div class="line"> * @param &#123;Number&#125; width 图片最大宽度  </div><div class="line"> * @param &#123;Number&#125; height 图片最大高度  </div><div class="line"> * @param &#123;Function&#125; callback 回调函数，参数为图片base64编码  </div><div class="line"> * return &#123;Object&#125; 返回压缩后的图片  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._drawImage = <span class="function"><span class="keyword">function</span>(<span class="params">img, callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.sw = img.width;</div><div class="line">	<span class="keyword">this</span>.sh = img.height;</div><div class="line">	<span class="keyword">this</span>.tw = img.width;</div><div class="line">	<span class="keyword">this</span>.th = img.height;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.scale = (<span class="keyword">this</span>.tw / <span class="keyword">this</span>.th).toFixed(<span class="number">2</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.sw &gt; <span class="keyword">this</span>.maxWidth) &#123;</div><div class="line">		<span class="keyword">this</span>.sw = <span class="keyword">this</span>.maxWidth;</div><div class="line">		<span class="keyword">this</span>.sh = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.sw / <span class="keyword">this</span>.scale);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.sh &gt; <span class="keyword">this</span>.maxHeight) &#123;</div><div class="line">		<span class="keyword">this</span>.sh = <span class="keyword">this</span>.maxHeight;</div><div class="line">		<span class="keyword">this</span>.sw = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.sh * <span class="keyword">this</span>.scale);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</div><div class="line">	<span class="keyword">var</span> ctx = <span class="keyword">this</span>.canvas.getContext(<span class="string">'2d'</span>);</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.canvas.width = <span class="keyword">this</span>.sw;</div><div class="line">	<span class="keyword">this</span>.canvas.height = <span class="keyword">this</span>.sh;</div><div class="line"></div><div class="line">	ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, img.width, img.height, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.sw, <span class="keyword">this</span>.sh);</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.callback(<span class="keyword">this</span>.canvas.toDataURL(<span class="keyword">this</span>.type), <span class="keyword">this</span>.target);</div><div class="line"></div><div class="line">	ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.tw, <span class="keyword">this</span>.th);</div><div class="line">	<span class="keyword">this</span>.canvas.width = <span class="number">0</span>;</div><div class="line">	<span class="keyword">this</span>.canvas.height = <span class="number">0</span>;</div><div class="line">	<span class="keyword">this</span>.canvas = <span class="literal">null</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mui简介&quot;&gt;&lt;a href=&quot;#mui简介&quot; class=&quot;headerlink&quot; title=&quot;mui简介&quot;&gt;&lt;/a&gt;mui简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MUI不依赖任何第三方JS库，原生UI(MUI以iOS平台UI为基础，补充部分Android平台特有的U
    
    </summary>
    
      <category term="web" scheme="http://blog.aezo.cn/categories/web/"/>
    
    
      <category term="UI" scheme="http://blog.aezo.cn/tags/UI/"/>
    
      <category term="H5" scheme="http://blog.aezo.cn/tags/H5/"/>
    
      <category term="App" scheme="http://blog.aezo.cn/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>spring-security</title>
    <link href="http://blog.aezo.cn/2017/10/22/java/spring-security/"/>
    <id>http://blog.aezo.cn/2017/10/22/java/spring-security/</id>
    <published>2017-10-22T03:15:00.000Z</published>
    <updated>2017-12-27T12:59:31.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>官网：<a href="http://projects.spring.io/spring-security/" target="_blank" rel="external">http://projects.spring.io/spring-security/</a></li>
<li>文档：<a href="https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/" target="_blank" rel="external">V4.2.3</a></li>
<li>引入spring security后便有了session机制</li>
</ul>
<h3 id="spring-security实现方法-1"><a href="#spring-security实现方法-1" class="headerlink" title="spring security实现方法 [^1]"></a>spring security实现方法 [^1]</h3><ul>
<li>总共有四种用法，从简到深为<ul>
<li>不用数据库，全部数据写在配置文件，这个也是官方文档里面的demo</li>
<li>使用数据库，根据spring security默认实现代码设计数据库，也就是说数据库已经固定了，这种方法不灵活，而且那个数据库设计得很简陋，实用性差</li>
<li>spring security和Acegi不同，它不能修改默认filter了，但支持插入filter，所以根据这个，我们可以插入自己的filter来灵活使用<strong>（可基于此数据库结构进行自定义参数认证）</strong></li>
<li>暴力手段，修改源码，前面说的修改默认filter只是修改配置文件以替换filter而已，这种是直接改了里面的源码，但是这种不符合OO设计原则，而且不实际，不可用</li>
</ul>
</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>spring-security登录只能接受<code>x-www-form-urlencoded</code>(简单键值对)类型的数据，<code>form-data</code>(表单类型，可以含有文件)类型的请求获取不到参数值</li>
<li><code>axios</code>实现<code>x-www-form-urlencoded</code>请求：参数应该写到<code>param</code>中。如果写在<code>data</code>中则不行，加<code>headers: {&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}</code>也不行</li>
</ul>
<h2 id="springboot整合"><a href="#springboot整合" class="headerlink" title="springboot整合"></a>springboot整合</h2><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring-Security --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p>SpringSecurityConfig 访问权限规则设置</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        auth.inMemoryAuthentication()</div><div class="line">            .withUser(<span class="string">"admin"</span>).password(<span class="string">"admin"</span>).roles(<span class="string">"ADMIN"</span>) <span class="comment">// 在内存中定义用户名密码为admin/admin, 角色为ADMIN的用户(用于登录和权限判断)</span></div><div class="line">            .and()</div><div class="line">            .withUser(<span class="string">"user"</span>).password(<span class="string">"user"</span>).roles(<span class="string">"USER"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义权限规则</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        http.headers().frameOptions().disable(); <span class="comment">// 解决spring boot项目中出现不能加载iframe</span></div><div class="line">        http.csrf().disable() <span class="comment">// 关闭打开的csrf(跨站请求伪造)保护</span></div><div class="line">            .authorizeRequests()</div><div class="line">                .antMatchers(<span class="string">"/manage/"</span>, <span class="string">"/manage/home"</span>, <span class="string">"/manage/about"</span>, <span class="string">"/manage/404"</span>, <span class="string">"/manage/403"</span>, <span class="string">"/thymeleaf/**"</span>).permitAll() <span class="comment">// 这些端点不进行权限验证</span></div><div class="line">                .antMatchers(<span class="string">"/resources/**"</span>).permitAll() <span class="comment">// idea的resources/static目录下的文件夹对应一个端点，相当于可以访问resources/static/resources/下所有文件（还有一些默认的端点：/css/**、/js/**、/images/**、/webjars/**、/**/favicon.ico）</span></div><div class="line">                .antMatchers(<span class="string">"/manage/**"</span>).hasAnyRole(<span class="string">"ADMIN"</span>) <span class="comment">// 需要有ADMIN角色才可访问/admin</span></div><div class="line">                .antMatchers(<span class="string">"/user/**"</span>).hasAnyRole(<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>) <span class="comment">// 有USER/ADMIN角色均可</span></div><div class="line">                .anyRequest().authenticated() <span class="comment">// (除上述忽略请求)所有的请求都需要权限认证</span></div><div class="line">                .and()</div><div class="line">            .formLogin()</div><div class="line">                .loginPage(<span class="string">"/manage/login"</span>).permitAll() <span class="comment">// 登录界面(Get)和登录处理方法(Post。具体逻辑不需要写，并且会自动生成此端点的control). 登录成功后，如果从登录界面登录则跳到项目主页(http://localhost:9526)，如果从其他页面跳转到登录页面进行登录则成功后跳转到原始页面</span></div><div class="line">                .and()</div><div class="line">            .logout().permitAll() <span class="comment">// 默认访问/logout(Get)即可登出</span></div><div class="line">                .and()</div><div class="line">            .exceptionHandling().accessDeniedHandler(accessDeniedHandler);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>AccessDeniedHandler访问受限拦截</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(MyAccessDeniedHandler.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></div><div class="line">                    HttpServletResponse httpServletResponse,</div><div class="line">                    AccessDeniedException e) <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line"></div><div class="line">        Authentication auth = SecurityContextHolder.getContext().getAuthentication();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (auth != <span class="keyword">null</span>) &#123;</div><div class="line">            logger.info(<span class="string">"用户 '"</span> + auth.getName() + <span class="string">"' 试图访问受保护的 URL: "</span> + httpServletRequest.getRequestURI());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"auth = "</span> + auth);</div><div class="line">        httpServletResponse.sendRedirect(<span class="string">"/manage/403"</span>); <span class="comment">// 跳转到403页面</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="示例扩展"><a href="#示例扩展" class="headerlink" title="示例扩展"></a>示例扩展</h3><ul>
<li>此示例使用数据库用户名/密码(或扩展验证)进行用户登录验证，并且对登录成功做处理，资源权限控制</li>
<li><p>SpringSecurityConfig 访问权限规则设置</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled=<span class="keyword">true</span>) <span class="comment">// 开启方法级别权限控制</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CustomAuthenticationProvider authProvider; <span class="comment">// 提供认证算法(判断是否登录成功)(1)</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AuthenticationDetailsSource&lt;HttpServletRequest, WebAuthenticationDetails&gt; authenticationDetailsSource; <span class="comment">// 认证信息</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler authenticationSuccessHandler; <span class="comment">// 用于处理登录成功(2)</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AuthenticationFailureHandler authenticationFailureHandler; <span class="comment">// 用于处理登录失败(2)</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler; <span class="comment">// 用于处理无权访问 (3)</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        auth.authenticationProvider(authProvider);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义权限规则</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        http.headers().frameOptions().disable(); <span class="comment">// 解决spring boot项目中出现不能加载iframe</span></div><div class="line">        http.csrf().disable() <span class="comment">// 关闭打开的csrf(跨站请求伪造)保护</span></div><div class="line">            .authorizeRequests()</div><div class="line">                .antMatchers(<span class="string">"/manage/"</span>, <span class="string">"/manage/home"</span>, <span class="string">"/manage/about"</span>, <span class="string">"/manage/404"</span>, <span class="string">"/manage/403"</span>, <span class="string">"/thymeleaf/**"</span>).permitAll() <span class="comment">// 这些端点不进行权限验证</span></div><div class="line">                .antMatchers(<span class="string">"/resources/**"</span>).permitAll() <span class="comment">// idea的resources/static目录下的文件夹对应一个端点，相当于可以访问resources/static/resources/下所有文件（还有一些默认的端点：/css/**、/js/**、/images/**、/webjars/**、/**/favicon.ico）</span></div><div class="line">                .antMatchers(<span class="string">"/manage/**"</span>).hasAnyRole(<span class="string">"ADMIN"</span>) <span class="comment">// 需要有ADMIN角色才可访问/admin（有先后顺序，前面先定义的优先级高，因此比antMatchers("/**").hasAnyRole("USER", "ADMIN")优先级高）</span></div><div class="line">                .antMatchers(<span class="string">"/**"</span>).hasAnyRole(<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>) <span class="comment">// 有USER/ADMIN角色均可</span></div><div class="line">                .anyRequest().authenticated() <span class="comment">// (除上述忽略请求)所有的请求都需要权限认证</span></div><div class="line">                .and()</div><div class="line">            .formLogin()</div><div class="line">                .loginPage(<span class="string">"/manage/login"</span>).permitAll() <span class="comment">// 登录界面(Get)</span></div><div class="line">                .loginProcessingUrl(<span class="string">"/manage/login"</span>) <span class="comment">// 或者通配符/**/login拦截对"/manage/login"和"/login"等的POST请求(登录请求。具体逻辑不需要写，并且会自动生成此端点的control，否则和loginPage一致)</span></div><div class="line">                .successHandler(authenticationSuccessHandler) <span class="comment">// 此处定义登录成功处理方法</span></div><div class="line">                .failureHandler(authenticationFailureHandler)</div><div class="line">                .authenticationDetailsSource(authenticationDetailsSource)</div><div class="line">                .and()</div><div class="line">            .logout().logoutUrl(<span class="string">"/manage/logout"</span>).logoutSuccessUrl(<span class="string">"/manage/login"</span>).permitAll() <span class="comment">// 访问"/manage/logout"登出，登出成功后跳转到"/manage/login"</span></div><div class="line">                .and()</div><div class="line">            .exceptionHandling().accessDeniedHandler(accessDeniedHandler);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 密码加密器 (4)</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 加密混淆器</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SaltSource <span class="title">saltSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomSaltSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 混淆器实现</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSaltSource</span> <span class="keyword">implements</span> <span class="title">SaltSource</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getSalt</span><span class="params">(UserDetails userDetails)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"aezocn"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义登录认证字段(spring security默认基于username/password完成)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomWebAuthenticationDetails</span> <span class="keyword">extends</span> <span class="title">WebAuthenticationDetails</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String wxCode; <span class="comment">// 此处为微信公众号使用微信code进行认证，也可扩展邮箱/手机号等</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomWebAuthenticationDetails</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(request);</div><div class="line">        wxCode = request.getParameter(<span class="string">"wxCode"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWxCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> wxCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        sb.append(<span class="keyword">super</span>.toString()).append(<span class="string">"; wxCode: "</span>).append(<span class="keyword">this</span>.getWxCode());</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将自定义登录认证字段加入到认证数据源</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationDetailsSource</span> <span class="keyword">implements</span> <span class="title">AuthenticationDetailsSource</span>&lt;<span class="title">HttpServletRequest</span>, <span class="title">WebAuthenticationDetails</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> WebAuthenticationDetails <span class="title">buildDetails</span><span class="params">(HttpServletRequest context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomWebAuthenticationDetails(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>根据用户唯一字段(如username、wxCode)获取用户信息</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomUserDetailsService</span><span class="params">(UserDao userDao)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 根据自定义登录认证字段获取用户信息。此处简化微信公众号认证(原本需要先拿到openid)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByWxCode</span><span class="params">(String wxCode)</span></span></div><div class="line">            <span class="keyword">throws</span> UsernameNotFoundException &#123;</div><div class="line">        <span class="keyword">if</span>(wxCode == <span class="keyword">null</span> || <span class="string">""</span>.equals(wxCode)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"invalid wxCode "</span> + wxCode);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        User user = userDao.findByWxCode(wxCode);</div><div class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"Could not find user, user wxCode "</span> + wxCode);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomUserDetails(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 默认根据username(唯一)获取用户信息</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span></span></div><div class="line">            <span class="keyword">throws</span> UsernameNotFoundException &#123;</div><div class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span> || <span class="string">""</span>.equals(username)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"invalid username "</span> + username);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        User user = userDao.findByUsername(username);</div><div class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"Could not find user "</span> + username);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomUserDetails(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 自定义用户认证Model</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetails</span> <span class="keyword">extends</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">CustomUserDetails</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">            <span class="comment">// 初始化父类，需要父类有User(User user)&#123;...&#125;的构造方法</span></div><div class="line">            <span class="keyword">super</span>(user);</div><div class="line"></div><div class="line">            <span class="comment">// 或者在此处初始化</span></div><div class="line">            <span class="comment">// this.setUsername(user.getUsername());</span></div><div class="line">            <span class="comment">// this.setPassword(user.getPassword());</span></div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</div><div class="line">            <span class="keyword">return</span> AuthorityUtils.createAuthorityList(<span class="string">"ROLE_"</span> + <span class="keyword">this</span>.getRoleCode()); <span class="comment">// 组成如：ROLE_ADMIN/ROLE_USER，在资源权限定义时写法如：hasRole('ADMIN')。createAuthorityList接受一个数组，说明支持一个用户拥有多个角色</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5639683223516504866L</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>(1) 基于自定义登录认证字段，提供登录算法(返回认证对象Authentication)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CustomUserDetailsService customUserDetailsService;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomAuthenticationProvider</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(<span class="keyword">final</span> Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">        CustomWebAuthenticationDetails details = (CustomWebAuthenticationDetails) authentication.getDetails();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> String wxCode = details.getWxCode();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> String username = authentication.getName();</div><div class="line">        <span class="keyword">final</span> String password = authentication.getCredentials().toString();</div><div class="line"></div><div class="line">        UserDetails userDetails = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(username) &amp;&amp; !StringUtils.isEmpty(password)) &#123;</div><div class="line">            userDetails = customUserDetailsService.loadUserByUsername(username);</div><div class="line">                </div><div class="line">            <span class="comment">// 验证密码</span></div><div class="line">            <span class="keyword">if</span>(userDetails == <span class="keyword">null</span> || userDetails.getPassword() == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"invalid password"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!passwordEncoder.matches(password, userDetails.getPassword())) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"wrong password"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!StringUtils.isEmpty(wxCode)) &#123;</div><div class="line">            userDetails = customUserDetailsService.loadUserByWxCode(wxCode);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"invalid params: username,password and wxCode are invalid"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(userDetails != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 授权</span></div><div class="line">            <span class="keyword">final</span> List&lt;GrantedAuthority&gt; grantedAuths = (List&lt;GrantedAuthority&gt;) userDetails.getAuthorities();</div><div class="line">            <span class="keyword">final</span> Authentication auth = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(userDetails, password, grantedAuths);</div><div class="line">            <span class="keyword">return</span> auth;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; authentication)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> authentication.equals(UsernamePasswordAuthenticationToken.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上述抛出异常AuthenticationException会被下面的MyAuthenticationFailureHandler类捕获。提供的AuthenticationException有：<ul>
<li><code>UsernameNotFoundException</code> 用户找不到</li>
<li><code>BadCredentialsException</code> 无效的凭据</li>
<li><code>AccountStatusException</code> 用户状态异常它包含如下子类<ul>
<li><code>AccountExpiredException</code> 账户过期</li>
<li><code>LockedException</code> 账户锁定</li>
<li><code>DisabledException</code> 账户不可用</li>
<li><code>CredentialsExpiredException</code> 证书过期</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>(2)登录校验完成拦截：登录成功/失败处理</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFinishHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(LoginFinishHandler.class);</div><div class="line"></div><div class="line">    <span class="meta">@Component</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">            CustomWebAuthenticationDetails details = (CustomWebAuthenticationDetails) authentication.getDetails();</div><div class="line">            String wxCode = details.getWxCode();</div><div class="line"></div><div class="line">            HttpSession session = httpServletRequest.getSession();</div><div class="line">            User user = (User) authentication.getPrincipal();</div><div class="line">            session.setAttribute(<span class="string">"SESSION_USER_INFO"</span>, user);</div><div class="line"></div><div class="line">            logger.info(<span class="string">"&#123;&#125; 登录成功"</span>, user.getUsername());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Component</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationFailureHandler</span> <span class="keyword">extends</span> <span class="title">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">            logger.info(<span class="string">"登录失败："</span> + e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>(3)AccessDeniedHandler访问受限拦截同上例</p>
</li>
<li><p>(4)密码保存</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(16);</span></div><div class="line"><span class="comment">// 保存密码：$2a$16$YcrLwsfqGoKzkmAB9WwORulggKVCrpR7ZPfDCF4CsEoG0o75Nb3Xm</span></div><div class="line">String password = passwordEncoder.encode(<span class="string">"123456"</span>);</div><div class="line">assertTrue(encoder.matches(<span class="string">"123456"</span>, password));</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="在方法-资源-上加权限控制"><a href="#在方法-资源-上加权限控制" class="headerlink" title="在方法(资源)上加权限控制"></a>在方法(资源)上加权限控制</h3><ul>
<li>需要权限配置类上加注解<code>@EnableGlobalMethodSecurity(prePostEnabled=true)</code>，标识开启方法级别prePostEnabled权限控制，还可以开启其他控制</li>
<li><p>使用</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Controller.java</span></div><div class="line"><span class="comment">// @PreAuthorize("hasRole('ADMIN')") // 可使用自定义注解@HasAdminRole进行封装(可组合更复杂的权限注解)</span></div><div class="line"><span class="meta">@HasAdminRole</span></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/adminRole"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">adminRole</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"/adminRole"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// HasAdminRole.java</span></div><div class="line"><span class="comment">// 自定义权限注解，被@HasAdminRole注解的方法需要有ADMIN角色</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('ADMIN')"</span>)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HasAdminRole &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>更多权限控制说明：<a href="https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/#jc-authentication" target="_blank" rel="external">https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/#jc-authentication</a></p>
</li>
</ul>
<h3 id="CSRF、CORS"><a href="#CSRF、CORS" class="headerlink" title="CSRF、CORS"></a>CSRF、CORS</h3><ul>
<li><code>CSRF</code> 跨站请求伪造(Cross-Site Request Forgery). <a href="https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/csrf.html" target="_blank" rel="external">csrf</a></li>
<li><p><code>CORS</code> 跨站资源共享(Cross Origin Resourse-Sharing).</p>
</li>
<li><p>开启cosr <a href="https://docs.spring.io/spring-security/site/docs/4.2.x/reference/html/cors.html" target="_blank" rel="external">cors</a></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    http.csrf().disable(); <span class="comment">// 开启cors需要关闭csrf</span></div><div class="line">    http.cors();</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 配置cors</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function">CorsConfigurationSource <span class="title">corsConfigurationSource</span><span class="params">()</span> </span>&#123;</div><div class="line">    CorsConfiguration configuration = <span class="keyword">new</span> CorsConfiguration();</div><div class="line">    configuration.setAllowedOrigins(Arrays.asList(<span class="string">"*"</span>));</div><div class="line">    configuration.setAllowedMethods(Arrays.asList(<span class="string">"*"</span>));</div><div class="line">    configuration.setAllowedHeaders(Arrays.asList(<span class="string">"*"</span>));</div><div class="line"></div><div class="line">    UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</div><div class="line">    source.registerCorsConfiguration(<span class="string">"/**"</span>, configuration);</div><div class="line">    <span class="keyword">return</span> source;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>[^1]: <a href="http://www.importnew.com/20612.html" target="_blank" rel="external">spring security的原理及教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&quot;http://projects.spring.io/spring-security/&quot; target=&quot;
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="springboot" scheme="http://blog.aezo.cn/tags/springboot/"/>
    
      <category term="spring" scheme="http://blog.aezo.cn/tags/spring/"/>
    
      <category term="springsecurity" scheme="http://blog.aezo.cn/tags/springsecurity/"/>
    
  </entry>
  
  <entry>
    <title>h2数据库</title>
    <link href="http://blog.aezo.cn/2017/10/21/db/h2/"/>
    <id>http://blog.aezo.cn/2017/10/21/db/h2/</id>
    <published>2017-10-21T02:42:00.000Z</published>
    <updated>2017-10-22T03:11:42.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>h2简介 <a href="[h2介绍](http://412887952-qq-com.iteye.com/blog/2322756)">^1</a>：内存数据库（Embedded database或in-momery database）具有配置简单、启动速度快、尤其是其可测试性等优点，使其成为开发过程中非常有用的轻量级数据库。在spring中支持HSQL、H2和Derby三种数据库</li>
<li><a href="http://h2database.com/html/main.html" target="_blank" rel="external">官网：http://h2database.com/html/main.html</a>\</li>
</ul>
<h2 id="springboot整合"><a href="#springboot整合" class="headerlink" title="springboot整合"></a>springboot整合</h2><ul>
<li><p>添加依赖(jpa等省略)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.h2database&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;h2&lt;/artifactId&gt;</div><div class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>连接配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">    datasource:</div><div class="line">    # 用户名密码会根据填写的生成(默认生成的用户名为sa, 密码为空)</div><div class="line">    url: jdbc:h2:~/.h2/minions;AUTO_SERVER=true;</div><div class="line">    # 用户名密码会根据填写的生成(默认生成的用户名为sa, 密码为空).</div><div class="line">    # 如果已经生成了数据库文件(同时也生成了密码), 那么再修改此处用户名密码将无法连接数据库</div><div class="line">    username: sa</div><div class="line">    password: sa</div><div class="line">    driver-class-name: org.h2.Driver</div><div class="line"># h2 web console</div><div class="line"># 登录配置Generic H2 (Server)  jdbc:h2:~/.h2/minions;AUTO_SERVER=true;  sa/sa</div><div class="line"># 推荐使用IDEA的数据库工具</div><div class="line">#  h2:</div><div class="line">#    console:</div><div class="line">#      # 程序开启时就会启动h2 web consloe</div><div class="line">#      enabled: true</div><div class="line">#      # 访问路径: http://localhost:$&#123;server.port&#125;/h2-console</div><div class="line">#      path: /h2-console</div><div class="line">#      settings:</div><div class="line">#        # 运行远程访问h2 web consloe</div><div class="line">#        web-allow-others: true</div></pre></td></tr></table></figure>
</li>
<li><p>配置说明</p>
<ul>
<li><code>jdbc:h2:file:~/.h2/minions;</code>文件型存储(默认可省略file:). <code>jdbc:h2:minions;</code>则代表在当前目录(运行h2 jar的位置)生成数据库文件</li>
<li><code>jdbc:h2:mem:my_db_name;</code>内存型存储(在连接的瞬间即可创建数据库)，程序关掉则内存数据丢失</li>
<li><code>~</code> 这个符号代表的就是当前登录到操作系统的用户对应的用户目录. <code>minions</code>代表数据库名(会在~/.h2目录生成minions.mv.db文件)</li>
<li><code>AUTO_SERVER=true;</code>表示以TCP服务形式启动数据库. 否则项目启动(数据库启动)后, idea无法连接数据库(<code>AUTO_SERVER_PORT=9092;</code>可指明端口, 不指明会的话自动识别)</li>
</ul>
</li>
<li>IDEA数据库工具使用 <a href="[idea连接h2](https://stackoverflow.com/questions/31498682/spring-boot-intellij-embedded-database-headache)">^2</a><ul>
<li>Url: <code>jdbc:h2:~/.h2/minions;AUTO_SERVER=true;</code></li>
<li>Url类型：<code>Remote</code></li>
<li>用户名/密码：<code>sa/sa</code></li>
<li>其他都不需要填写(url处可能报红可忽略)</li>
</ul>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;h2简介 &lt;a href=&quot;[h2介绍](http://412887952-qq-com.iteye.com/blog/2322
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="db" scheme="http://blog.aezo.cn/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>行业概念</title>
    <link href="http://blog.aezo.cn/2017/10/12/others/business-conception/"/>
    <id>http://blog.aezo.cn/2017/10/12/others/business-conception/</id>
    <published>2017-10-12T03:22:00.000Z</published>
    <updated>2017-10-12T03:22:17.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><ul>
<li><code>ERP</code> 企业资源计划(Enterprise Resource Planning)</li>
</ul>
<h2 id="物流"><a href="#物流" class="headerlink" title="物流"></a>物流</h2><ul>
<li><code>WMS</code> 仓库管理系统(Warehouse Management System)</li>
<li><code>MES</code> 制造执行系统(Manufacturing Execution System) <a href="[MES七大功能-MES解决方案](https://wenku.baidu.com/view/1627cd0a844769eae009edfe.html)">^1</a><ul>
<li>功能：库房管理、生产调度、制造过程管理、质量管理、设备工装管理、文档管理、物料批次跟踪</li>
</ul>
</li>
</ul>
<h2 id="营销-运营"><a href="#营销-运营" class="headerlink" title="营销/运营"></a>营销/运营</h2><ul>
<li><code>MVP</code> 最小价值产品或最小可视化产品(Minimal Viable Product) <a href="[MVP是什么](https://www.zhihu.com/question/47489768?from=profile_question_card)">^2</a></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;通用&quot;&gt;&lt;a href=&quot;#通用&quot; class=&quot;headerlink&quot; title=&quot;通用&quot;&gt;&lt;/a&gt;通用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ERP&lt;/code&gt; 企业资源计划(Enterprise Resource Planning)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="others" scheme="http://blog.aezo.cn/categories/others/"/>
    
    
      <category term="business" scheme="http://blog.aezo.cn/tags/business/"/>
    
      <category term="conception" scheme="http://blog.aezo.cn/tags/conception/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透</title>
    <link href="http://blog.aezo.cn/2017/10/09/extend/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>http://blog.aezo.cn/2017/10/09/extend/内网穿透/</id>
    <published>2017-10-09T12:18:00.000Z</published>
    <updated>2017-11-22T11:21:13.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>内网穿透，即NAT穿透，让外网用户可通过公网ip访问到内网服务。有时想要让其他人通过域名访问或者测试我们在本地搭建的 web 服务，但是由于本地机器没有公网 IP，无法将域名解析到本地的机器，通过内网穿透就可以实现这一功能</li>
<li>常见的内网穿透工具如ngrok(二级域名每次启动会变化)、花生壳(需要支付8元)、NATAPP(和ngrok类似，2-3天会更新二级域名)。当然本文不不会介绍这些xx.</li>
<li>本文介绍的内网穿透工具：frp。(内网穿透仍然需要一台公网IP的服务器，如阿里云服务器)</li>
</ul>
<h2 id="frp实现内网穿透"><a href="#frp实现内网穿透" class="headerlink" title="frp实现内网穿透"></a>frp实现内网穿透</h2><h3 id="frp介绍"><a href="#frp介绍" class="headerlink" title="frp介绍"></a>frp介绍</h3><ul>
<li>开源项目，支持<code>TCP</code>、<code>UDP</code>、<code>HTTP</code>、<code>HTTPS</code>，支持自定义域名绑定</li>
<li><a href="https://github.com/fatedier/frp" target="_blank" rel="external">github链接</a>、<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="external">中文文档</a></li>
</ul>
<h3 id="frp使用"><a href="#frp使用" class="headerlink" title="frp使用"></a>frp使用</h3><blockquote>
<ul>
<li>本文配合nginx使用(本文公网服务器不是主要用于内网穿透，且解析了多个域名，所以有些端口，如80被占用)</li>
<li>本文以微信公众号H5开发为例(微信H5开发需要绑定回调地址，此回调地址必须是备案的域名，因此本地开发比较麻烦故使用内网穿透解决)</li>
</ul>
</blockquote>
<ul>
<li>下载最新frp版本，本文使用<code>v0.13.0</code><ul>
<li>需要下载公网IP服务器(以下简称”服务器”)适用版(如<code>frp_0.13.0_linux_amd64.tar.gz</code>)和本地适用版(如<code>frp_0.13.0_windows_amd64.zip</code>)</li>
</ul>
</li>
<li><p>服务端</p>
<ul>
<li>解压后含有<code>frps.ini</code>(配置文件)、<code>frps</code>(可执行文件)</li>
<li><p>对<code>frps.ini</code>进行配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[common]</div><div class="line">bind_port = 7000</div><div class="line"># 使用泛域名*.frp.aezo.cn(需要将*.frp解析到此服务器)(不使用泛域名可忽略)</div><div class="line">subdomain_host = frp.aezo.cn</div><div class="line"># 访问本地服务需要映射公网ip的端口(所有的都走此端口)</div><div class="line">vhost_http_port = 7070</div><div class="line"></div><div class="line"># dashboard(后台可视化管理)访问地址和用户名密码</div><div class="line">dashboard_port = 7500</div><div class="line">dashboard_user = smalle</div><div class="line">dashboard_pwd = smalle</div></pre></td></tr></table></figure>
</li>
<li><p>后台运行frp服务端：<code>nohup sudo -b ./frps &gt; my.log 2&gt;&amp;1 &amp;</code></p>
</li>
<li>服务器将开放相应端口：<strong>7000、7070、7050(入)；7000(出)</strong></li>
<li><p>服务器nginx配置如下</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen  <span class="number">80</span>;</div><div class="line">	server_name test.aezo.cn;</div><div class="line"></div><div class="line">	location / &#123;</div><div class="line">    		proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</div><div class="line">    		proxy_set_header Host $http_host;</div><div class="line">    		proxy_redirect off;</div><div class="line">    		<span class="keyword">if</span> (!-f $request_filename) &#123;</div><div class="line">    			proxy_pass http:<span class="comment">//test.aezo.cn:7070;</span></div><div class="line">    			<span class="keyword">break</span>;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>需要将域名<code>test.aezo.cn</code>解析到此服务器(101.1.1.1)</p>
</li>
</ul>
</li>
<li><p>客户端</p>
<ul>
<li>解压后含有<code>frpc.ini</code>(配置文件)、<code>frpc</code>(可执行文件)</li>
<li><p>对<code>frpc.ini</code>进行配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[common]</div><div class="line"># 服务器公网ip</div><div class="line">server_addr = 101.1.1.1</div><div class="line">server_port = 7000</div><div class="line"></div><div class="line">[web]</div><div class="line">type = http</div><div class="line"># 访问本地服务的端口</div><div class="line">local_port = 80</div><div class="line">custom_domains = test.aezo.cn</div><div class="line"></div><div class="line"># 不使用泛域名可忽略</div><div class="line">[web01]</div><div class="line">type = http</div><div class="line">local_port = 80</div><div class="line"># 使用泛域名进行解析(映射到http://test.frp.aezo.cn)</div><div class="line">subdomain = test</div></pre></td></tr></table></figure>
</li>
<li><p>cmd运行<code>frpc -c ./frpc.ini</code>(可写成start.bat文件方便快速运行)</p>
</li>
<li>客户端也可配合使用nginx</li>
</ul>
</li>
<li>请求流程<ul>
<li>访问：<a href="http://test.aezo.cn，被nginx监听" target="_blank" rel="external">http://test.aezo.cn，被nginx监听</a></li>
<li>服务端nginx转向：<a href="http://test.aezo.cn:7070，被frp监听" target="_blank" rel="external">http://test.aezo.cn:7070，被frp监听</a></li>
<li>frp通过7000端口和frp客户端进行通信：<a href="http://127.0.0.1:80" target="_blank" rel="external">http://127.0.0.1:80</a></li>
</ul>
</li>
<li>微信h5开发：将<code>test.aezo.cn</code>绑定到对应的回调地址上即可</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;内网穿透，即NAT穿透，让外网用户可通过公网ip访问到内网服务。有时想要让其他人通过域名访问或者测试我们在本地搭建的 web 服
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="frp" scheme="http://blog.aezo.cn/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>oracle-function</title>
    <link href="http://blog.aezo.cn/2017/09/30/db/oracle-function/"/>
    <id>http://blog.aezo.cn/2017/09/30/db/oracle-function/</id>
    <published>2017-09-30T04:51:00.000Z</published>
    <updated>2018-02-27T08:56:58.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul>
<li><code>decode(被判断表达式, 值1, 转换成值01, 值2, 转换成值02, ..., 转换成默认值)</code> 只能判断=，不能判断like<ul>
<li><code>select decode(length(ys.ycross_x), 1, &#39;0&#39; || ys.ycross_x, ys.ycross_x) from ycross_storage ys</code> 如果ys.ycross_x的长度为1那就在前面加0，否则取本身</li>
<li><code>select sum(decode(shipcomp.company_num, &#39;CMA&#39;, 1, 0)) cma, sum(decode(shipcomp.company_num, &#39;MSK&#39;, 1, 0)) msk from ycross_in_out_regist yior ...(省略和shipcomp的关联)</code> 统计进出场记录中cma和msk的数量</li>
</ul>
</li>
<li><code>case when else end</code> 比decode强大<ul>
<li><code>case when t.name = &#39;admin&#39; then &#39;admin&#39; when t.name like &#39;admin%&#39; then &#39;admin_user&#39; else decode(t.role, &#39;admin&#39;, &#39;admin&#39;, &#39;admin_user&#39;) end</code></li>
<li><code>sum(case when yior.plan_classification_code = &#39;Empty_Temporary_Fall_Into_Play&#39; and yardparty.company_num = &#39;DW1&#39; then 1 end) as count_dw1</code></li>
</ul>
</li>
</ul>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ul>
<li><code>wm_concat</code> 行转列 (默认用”,”分割，select的其他字段需要是group by字段)<ul>
<li><code>select replace(wm_concat(name), &#39;,&#39;, &#39;|&#39;) from test;</code>替换分割符</li>
</ul>
</li>
</ul>
<h2 id="分析函数-1-3"><a href="#分析函数-1-3" class="headerlink" title="分析函数 ^1 ^3"></a>分析函数 <a href="[分析函数2](http://www.cnblogs.com/linjiqin/archive/2012/04/05/2433633.html)">^1</a> <a href="[分析函数3](http://www.cnblogs.com/linjiqin/archive/2012/04/06/2434806.html)">^3</a></h2><ul>
<li>分析函数和聚合函数的不同之处是什么：普通的聚合函数用group by分组，每个分组返回一个统计值，而分析函数采用partition by分组，并且每组每行都可以返回一个统计值</li>
<li>分析函数带有一个开窗函数<code>over()</code>，包含三个分析子句，形式如：<code>over(partition by xxx order by yyy rows between aaa and bbb)</code><ul>
<li>分组(partition by)</li>
<li>排序(order by)</li>
<li>窗口(rows)：窗口子句包含rows方式的窗口，range方式和滑动窗口</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 查询场存，并获取每个场存需要移动的次数和最早一次移动计划的id</span></div><div class="line"><span class="keyword">select</span> *</div><div class="line">  <span class="keyword">from</span> (<span class="keyword">select</span> ys.id</div><div class="line">               ,<span class="keyword">count</span>(yvmp.venue_move_plan_id) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> ys.id) <span class="keyword">as</span> total</div><div class="line">               ,<span class="keyword">first_value</span>(yvmp.venue_move_plan_id) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> yvmp.storage_id <span class="keyword">order</span> <span class="keyword">by</span> yvmp.input_tm <span class="keyword">ASC</span> <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">unbounded</span> <span class="keyword">following</span>) <span class="keyword">as</span> first_id</div><div class="line">          <span class="keyword">from</span> ycross_storage ys</div><div class="line">          <span class="keyword">left</span> <span class="keyword">join</span> yyard_venue_move_plan yvmp</div><div class="line">            <span class="keyword">on</span> yvmp.storage_id = ys.id</div><div class="line">           <span class="keyword">and</span> yvmp.yes_status = <span class="number">0</span>) t</div><div class="line"> <span class="keyword">group</span> <span class="keyword">by</span> t.id, t.total, t.first_id</div></pre></td></tr></table></figure>
<ul>
<li>grouping、rollup：<a href="http://blog.csdn.net/damenggege123/article/details/38794351" target="_blank" rel="external">http://blog.csdn.net/damenggege123/article/details/38794351</a></li>
<li>case when else end：<a href="https://www.cnblogs.com/luowz/p/5804639.html" target="_blank" rel="external">https://www.cnblogs.com/luowz/p/5804639.html</a></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h3 id="字符串分割函数"><a href="#字符串分割函数" class="headerlink" title="字符串分割函数"></a>字符串分割函数</h3><ul>
<li>创建字符串数组类型：<code>create or replace type sm_type_arr_str is table of varchar2 (60);</code> (一个数组，每个元素是varchar2 (60))</li>
<li><p>创建自定义函数<code>sm_split</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">create or replace function sm_split(p_str       in varchar2,</div><div class="line">                                p_delimiter in varchar2)</div><div class="line">  return sm_type_arr_str</div><div class="line">  pipelined is</div><div class="line">  j    int := 0;</div><div class="line">  i    int := 1;</div><div class="line">  len  int := 0;</div><div class="line">  len1 int := 0;</div><div class="line">  str  varchar2(4000);</div><div class="line">begin</div><div class="line">  len  := length(p_str);</div><div class="line">  len1 := length(p_delimiter);</div><div class="line"></div><div class="line">  while j &lt; len loop</div><div class="line">    j := instr(p_str, p_delimiter, i);</div><div class="line"></div><div class="line">    if j = 0 then</div><div class="line">      j   := len;</div><div class="line">      str := substr(p_str, i);</div><div class="line">      pipe row(str);</div><div class="line">      if i &gt;= len then</div><div class="line">        exit;</div><div class="line">      end if;</div><div class="line">    else</div><div class="line">      str := substr(p_str, i, j - i);</div><div class="line">      i   := j + len1;</div><div class="line">      pipe row(str);</div><div class="line">    end if;</div><div class="line">  end loop;</div><div class="line"></div><div class="line">  return;</div><div class="line">end sm_split;</div></pre></td></tr></table></figure>
</li>
<li><p>查询示例：<code>select * from table (cast (sm_split (&#39;aa,,bb,cc,,&#39;, &#39;,&#39;) as sm_type_arr_str));</code> 结果如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  COLUMN_VALUE</div><div class="line">1	aa</div><div class="line">2</div><div class="line">3	bb</div><div class="line">4	cc</div><div class="line">5</div></pre></td></tr></table></figure>
</li>
<li><p>示例二</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> t.*</div><div class="line">  <span class="keyword">from</span> test_table t</div><div class="line">  <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span></div><div class="line">          <span class="keyword">from</span> <span class="keyword">table</span>(<span class="keyword">cast</span>(sm_split(t.name, <span class="string">','</span>) <span class="keyword">as</span> sm_type_arr_str)) arr</div><div class="line">          <span class="keyword">where</span> <span class="keyword">trim</span>(arr.column_value) = <span class="string">'aa'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常用函数&quot;&gt;&lt;a href=&quot;#常用函数&quot; class=&quot;headerlink&quot; title=&quot;常用函数&quot;&gt;&lt;/a&gt;常用函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;decode(被判断表达式, 值1, 转换成值01, 值2, 转换成值02, ..., 转换成默认值
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="oracle" scheme="http://blog.aezo.cn/tags/oracle/"/>
    
      <category term="function" scheme="http://blog.aezo.cn/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>sql基础</title>
    <link href="http://blog.aezo.cn/2017/09/30/db/sql/"/>
    <id>http://blog.aezo.cn/2017/09/30/db/sql/</id>
    <published>2017-09-30T04:51:00.000Z</published>
    <updated>2018-02-27T02:47:23.755Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>未做特殊说明的语句都是基于Mysql的语法</p>
</blockquote>
<h2 id="数据库操作语言DML-Data-Manipulation-Language，即CRUD"><a href="#数据库操作语言DML-Data-Manipulation-Language，即CRUD" class="headerlink" title="数据库操作语言DML(Data Manipulation Language，即CRUD)"></a>数据库操作语言DML(Data Manipulation Language，即CRUD)</h2><blockquote>
<p>数据参考下文【数据库表信息】<br>先登录并选择数据库mysql -uroot -proot sqltest<br>先复制表emp、dept、salgrade，如：create table dept2 as select * from dept;</p>
</blockquote>
<h3 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h3><ul>
<li>按字段顺序一一插入值 <code>insert into dept2 values(50, &#39;game&#39;, &#39;bj&#39;);</code></li>
<li>指定部分字段的值 <code>insert into dept2(deptno, dname) values(60, &#39;game2&#39;);</code> 未指定的字段取默认值</li>
<li>根据从子查询的值插入 <code>insert into dept2 select * from dept;</code> 子查询拿出来的数据和表结构要一样</li>
<li>产生100w条数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 1	2018-02-27 10:45:16	64	7SNNAA85AH375N09Y5II	1</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_test <span class="keyword">as</span></div><div class="line">    <span class="keyword">select</span> </div><div class="line">        <span class="keyword">rownum</span> <span class="keyword">as</span> <span class="keyword">id</span>,</div><div class="line">        to_char(<span class="keyword">sysdate</span> + <span class="keyword">rownum</span> / <span class="number">24</span> / <span class="number">3600</span>, <span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) <span class="keyword">as</span> input_tm,</div><div class="line">        trunc(dbms_random.value(<span class="number">0</span>, <span class="number">100</span>)) <span class="keyword">as</span> random_no,</div><div class="line">        dbms_random.string(<span class="string">'x'</span>, <span class="number">20</span>) username,</div><div class="line">        <span class="number">1</span> <span class="keyword">as</span> is_valid</div><div class="line">    <span class="keyword">from</span> dual</div><div class="line">    <span class="keyword">connect</span> <span class="keyword">by</span> <span class="keyword">level</span> &lt;= <span class="number">1000000</span>;</div></pre></td></tr></table></figure>
<h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><ul>
<li><code>update emp2 set sal = sal*2, ename = concat(ename, &#39;_&#39;) where deptno = 10;</code> 把部门编号为10的工资提一倍，并在名称后面加下划线</li>
<li>Oracle通过pl/sql更新：<code>select * from table_or_view for update;</code> 开启更新模式，然后进行更新并提交</li>
</ul>
<h3 id="删除记录-表结构不会删除"><a href="#删除记录-表结构不会删除" class="headerlink" title="删除记录(表结构不会删除)"></a>删除记录(表结构不会删除)</h3><ul>
<li><code>delete from emp2;</code> 清空表emp2</li>
<li><code>delete from dept2 where deptno &lt; 25;</code> 删除deptno &lt; 25的条目</li>
</ul>
<h3 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h3><ul>
<li>Mysql和Oracle提交事物：<code>commit;</code>；Oracle的撤销操作：<code>rollback;</code></li>
<li>Oracle的transaction(事物)：<ul>
<li>一个transaction起始于一个dml(增删查改)语句</li>
<li>当执行撤销”rollback;”后，回到最原始状态，相当于此transaction结束；或当执行提交”commit;”后，此transaction结束（此时在撤销则不能回到原始状态）。</li>
<li>当执行一个ddl语句(如：创建表create table)或者一个dcl语句(如：设置权限grant)后，transaction也自动结束。</li>
</ul>
</li>
</ul>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="书写顺序"><a href="#书写顺序" class="headerlink" title="书写顺序"></a>书写顺序</h4><ul>
<li><strong>书写顺序和执行顺序都是按照<code>select-where-group by-having-order by</code>进行的</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt;select count(num) 	/*注释：组函数*/</div><div class="line">    -&gt;from emp			/*注释：此语句是不能执行的*/</div><div class="line">    -&gt;where sal &gt; 1000		/*注释：对数据进行过滤*/</div><div class="line">    -&gt;group by deptno		/*注释：对过滤后的数据进行分组*/</div><div class="line">    -&gt;having avg(sal) &gt; 2000	/*注释：对分组后的数据进行限制*/</div><div class="line">    -&gt;order by ename desc	/*注释：对结果进行排序*/</div><div class="line">    -&gt;limit 2,3			/*注释：从第3条数据开始，取3条数据*/</div><div class="line">    -&gt;;</div></pre></td></tr></table></figure>
<h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><h5 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h5><ul>
<li><code>select ename, sal*12 from emp;</code> 算年薪</li>
<li><p><code>select curdate() &#39;current date&#39;, 2*3 count;</code> 显示系统时间和数学计算</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+---------------------+---------------+-----+</div><div class="line">| now()               | current date  | 2*3 |</div><div class="line">+---------------------+---------------+-----+</div><div class="line">| 2015-10-25 13:21:29 | 2015-10-25    |   6 |</div><div class="line">+---------------------+---------------+-----+</div></pre></td></tr></table></figure>
<ul>
<li>oracle获取当前时间和数学计算：<code>select sysdate, 2*3 from dual;</code> (dual为oracle自带的虚表)<ul>
<li>别名中不能含有特殊字符（如：空格、下划线等）。如果需要含有，则应在别名上加单双引号；Oracle中下划线不需加引号，但是空格需要加引号</li>
</ul>
</li>
</ul>
</li>
<li>字符串连接函数<code>concat(字段1,字段2,或者字符串)</code><ul>
<li>字符串中有单引号时，使用反斜线转义或者用两个单引号表示一个单引号。如<code>select concat(dname,loc,&#39;A&#39;&#39;AA&#39;) from dept;或者select concat(dname,loc,&#39;A\&#39;AA&#39;) from dept;</code></li>
<li>Oracle中使用<code>||</code>连接字符串，如<code>select dname||loc from dept;</code>。使用两个单引号用来显示字符串中的单引号，如<code>select dname||&#39;A&#39;&#39;AA&#39; from dept;</code></li>
</ul>
</li>
<li><code>select distinct deptno, job from emp;</code> <code>distinct</code>去掉重复的条目(此时是去掉两个字段重复的组合)</li>
<li><code>select * from emp where job = &#39;clerk&#39; and sal between 1100 and 1500;</code> where过滤<ul>
<li>可以使用<code>=、&gt;、&lt;、&lt;&gt;</code>等判断大小，其中&lt;&gt;表示不等于，字符串是比较每个字母的ASCII码</li>
<li>使用<code>between and</code>相当于 <code>&gt;= and &lt;=</code></li>
</ul>
</li>
<li><code>select ename, sal, comm from emp where comm is not null;</code> 使用<code>is null</code>或者<code>is not null</code>找出有关空值的条目<ul>
<li><code>=、!=</code>默认是查询不为空的数据</li>
</ul>
</li>
<li><code>select ename, sal from emp where ename in(&#39;king&#39;, &#39;allen&#39;, &#39;abc&#39;);</code> 使用<code>in()</code>或者<code>not in()</code>表示相应字段的值是否在这些值里面的条目(本质是循环查询)</li>
<li><code>select ename from emp where ename like &#39;_a%&#39;;</code> like模糊查询<ul>
<li><code>_</code>代表任意一个字符，<code>%</code>代表任意个字符</li>
<li>‘%xxx’左like、’xxx%’右like、’%xxx%’两边like</li>
<li>如果字段中含有特殊字符，需要用反斜线转义，如：<code>like &#39;a\_%&#39;</code> 表示以<code>a_</code>开头的字符串</li>
<li>也可以修改转义字符，如：<code>select ename from emp where ename like &#39;_*_a%&#39; escape &#39;*&#39;;</code> 将转义字符设为<code>*</code></li>
</ul>
</li>
<li><code>select ename, sal, deptno from emp order by deptno asc, ename desc;</code> order by排序(显示按照deptno升序排序，如果deptno相同，再按照ename降序排序)<ul>
<li>默认是asc升序；desc代表降序</li>
<li>order by 语句对null字段的默认排序（可进行设置）<ul>
<li>Oracle 结论 <ul>
<li>order by colum asc 时，null默认被放在最后</li>
<li>order by colum desc 时，null默认被放在最前</li>
<li>nulls first 时，强制null放在最前，不为null的按声明顺序[asc|desc]进行排序</li>
<li>nulls last 时，强制null放在最后，不为null的按声明顺序[asc|desc]进行排序 </li>
</ul>
</li>
<li>MySql 结论<ul>
<li>order by colum asc 时，null默认被放在最前</li>
<li>order by colum desc 时，null默认被放在最后</li>
<li>ORDER BY IF(ISNULL(update_date),0,1) null被强制放在最前，不为null的按声明顺序[asc|desc]进行排序</li>
<li>ORDER BY IF(ISNULL(update_date),1,0) null被强制放在最后，不为null的按声明顺序[asc|desc]进行排序</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>select upper(dname) from dept;</code> <code>upper(字段)</code>和<code>lower(字段)</code>将相应字段转换成大小写</li>
<li><code>select substr(dname, 2, 3) from dept;</code> 截字符串，从第2个字符截取3个字符(包括第2个字符)</li>
<li><code>select ascii(&#39;A&#39;);</code>、<code>select char(65);</code> 字符和ascii码转换<ul>
<li>Oracle中相应的是：<code>select chr(65) from dual;</code> 和 <code>select ascii(&#39;A&#39;) from dual;</code></li>
</ul>
</li>
<li><p><code>select round(12.753), round(12.753, 1), round(12.753, -1);</code> round()四舍五入</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+---------------+------------------+-------------------+</div><div class="line">| round(12.753) | round(12.753, 1) | round(12.753, -1) |</div><div class="line">+---------------+------------------+-------------------+</div><div class="line">|            13 |             12.8 |                10 |</div><div class="line">+---------------+------------------+-------------------+</div></pre></td></tr></table></figure>
<ul>
<li>Oracle中为<code>select round(12.753) from dual;</code></li>
</ul>
</li>
<li><p><code>select format(sal, 4) from emp;</code> 格式化数据，format(数字,小数点位数)将数字转换成#,###,###,####的格式，以四舍五入的方式保留小数点位数</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+----------------+</div><div class="line">| format(sal, 4) |</div><div class="line">+----------------+</div><div class="line">| 800.0000       |</div><div class="line">| 1,600.0000     |</div><div class="line">| 1,250.0000     |</div><div class="line">| 2,975.0000     |</div><div class="line">+----------------+</div></pre></td></tr></table></figure>
<ul>
<li>在数字前面加上$、￥等字符则要为<code>select concat(&#39;￥&#39;, format(sal, 4)) from emp;</code></li>
<li>Oracle中可直接定义格式，如<code>select to_char(sal, &#39;$99,999.9999&#39;) from emp;和select to_char(sal, &#39;L00000.0000&#39;) from emp;</code> 这时L最终显示为￥。还可以转换日期，如：<code>select to_char(hiredate, &#39;YYYY-MM-DD HH24:MI:SS&#39;) from emp;</code> 其中HH24代表24小时制，不要24则为12小时</li>
</ul>
</li>
<li>select date_format(hiredate, ‘%Y-%m-%d %H:%i:%s’) from emp;    格式化日期，其中的说明符参考《MySQL 5.1参考手册》的12.5章 日期和时间函数，1980-12-17 00:00:00<ul>
<li>Oracle中要使用<code>select to_char(hiredate, &#39;YYYY-MM-DD HH24:MI:SS&#39;) from emp;</code> 其中HH24代表24小时制，不要24则为12小时</li>
</ul>
</li>
<li><code>select ename, hiredate from emp where hiredate &gt; &#39;1982-01-23 00:00:00&#39;;</code> 注意日期格式要和表中的一致(不要时分秒也可比较)<ul>
<li>Oracle中要使用<code>select ename, hiredate from emp where hiredate &gt; to_date(&#39;1982-01-23 00:00:00&#39;, &#39;YYYY-MM-DD HH24:MI:SS&#39;);</code>、<code>select ename, sal from emp where sal &gt; to_number(&#39;$2,500.00&#39;, &#39;$9,999,99&#39;);</code> 当然就本例子可直接比较，to_numbre只是将此字符串按照某种格式转换成数字，及将$2,500.00转换为2,500.00</li>
</ul>
</li>
<li><code>select ename, sal*12 + ifnull(comm, 0) from emp;</code> 空值转换<code>ifnull(exp1, exp2)</code>，如果exp1不为null,则取exp1的值，否则取exp2的值<ul>
<li>空值与任何值运算后都为空</li>
<li>Oracle中使用<code>nvl(exp1, exp2)</code>判断为空后设置默认值,即：<code>select ename, sal*12 + nvl(comm, 0) from cmp;</code></li>
</ul>
</li>
<li>显示指定行记录：<code>limit X, Y</code>（X表示索引为X的那条记录开始，选取Y条记录。索引默认从0开始）<ul>
<li><code>select ename from emp limit 2, 3;</code> 从第3条记录开始，显示3条记录</li>
</ul>
</li>
<li><p><code>select ename, sal from emp where sal &gt; 2500 order by sal desc limit 2, 3;</code> 按工资倒序排列，再从第3条记录开始，显示3条记录</p>
<ul>
<li><p>Oracle默认会在结果集上加一个隐藏字段rownum，指默认排序的第几行。rownum只能与小于或小于等于号连用，不与大于及单独与等于号连用。</p>
<ul>
<li><code>select ename, empno from emp where rownum &lt;= 5;</code> 只显示前5行</li>
<li><code>select ename from (select rownum, ename from emp where rownum &gt; 10);</code> Oracle非要用子查询才能显示rownum大于或等于某个数的条目</li>
<li><p>按工资倒序排列，再从第3条记录开始，显示3条记录</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename, sal <span class="keyword">from</span></div><div class="line">(</div><div class="line"><span class="keyword">select</span> ename, sal, <span class="keyword">rownum</span> r <span class="keyword">from</span></div><div class="line">(<span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; <span class="number">2500</span> <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>) </div><div class="line">)</div><div class="line"><span class="keyword">where</span> r &gt;= <span class="number">3</span> <span class="keyword">and</span> r &lt;= <span class="number">5</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="组函数"><a href="#组函数" class="headerlink" title="组函数"></a>组函数</h5><ul>
<li>组函数指输入多条记录，但是只有一条输出<ul>
<li><code>select max(sal) from emp;</code> 最大值</li>
<li><code>min(sal)</code> 最小值</li>
<li><code>avg(sal)</code> 平均值</li>
<li><code>sum(sal)</code> 求和</li>
<li><code>count(*)</code> 计算有多少条记录<ul>
<li>当count某个字段时，空值不会计算在内；而count(*)会把空值的字段计算在内</li>
</ul>
</li>
<li>组函数可以嵌套，但最多只能嵌套两层</li>
</ul>
</li>
<li>group by分组<ul>
<li><code>select deptno, avg(sal) from emp group by deptno;</code> 求每个部门的平均工资</li>
<li><code>select deptno, job, max(sal) from emp group by deptno, job;</code> 按照多个字段进行分组</li>
<li>出现在select列表中的字段，如果没有出现在组函数里面则必须出现在group by子句里面。如：<ul>
<li><code>select deptno, max(sal) from emp group by deptno;</code> 求每个部门的最高工资。此时是根据部门分组，所有每个部门都只有一条输出</li>
</ul>
</li>
</ul>
</li>
<li>having对group by 分组后的结果进行限制<ul>
<li><code>select deptno, avg(sal) from emp group by deptno having avg(sal) &gt; 2000;</code> 求部门平均工资大于2000的部门</li>
</ul>
</li>
</ul>
<h5 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h5><ul>
<li>交叉连接(cross join)，如：<code>select ename, dname from emp cross join dept;</code></li>
<li>等值连接，如：<code>select ename, dname from emp join dept on (emp.deptno = dept.deptno);</code></li>
<li><p>多表连接，如：</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select ename, dname, grade, e.deptno from emp e</div><div class="line">-&gt; join dept d on (e.deptno = d.deptno)</div><div class="line">-&gt; join salgrade s on (e.sal between s.losal and s.hisal)</div><div class="line">-&gt; where ename like '_l%';</div></pre></td></tr></table></figure>
<ul>
<li>*注意：此处deptno多个表含有此字段，所有e.deptno必须明确指明字段的表名，否则报错ERROR 1052</li>
<li><p>结果</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+-------+------------+-------+--------+</div><div class="line">| ename | dname      | grade | deptno |</div><div class="line">+-------+------------+-------+--------+</div><div class="line">| allen | sales      |     3 |     30 |</div><div class="line">| blake | sales      |     4 |     30 |</div><div class="line">| clark | accounting |     4 |     10 |</div><div class="line">+-------+------------+-------+--------+</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自连接，即为同一张表起不同的别名，然后把它当成两种表来用，如求每个人相应经理人的名字。此时没有king，因为king没有经理人，可采用外连接解决：<code>select e1.ename, e2.ename from emp e1 join emp e2 on (e1.mgr = e2.empno);</code></p>
</li>
<li>左、右、全外连接，left join、right join、full join。<ul>
<li>left join和left outer join都表示左外连接，如果两个表进行连接，且连接后左边一个表中的数据不能显示出来，此时可以使用左连接(此时的king)。如：<code>select e1.ename, e2.ename from emp e1 left join emp e2 on (e1.mgr = e2.empno);</code></li>
</ul>
</li>
<li><code>left join</code>(以左边表为主)、<code>right join</code>(以右边表为主)、<code>inner join</code>(只显示on条件成立的)、<code>full join</code>(显示所有数据)、<code>join</code>(默认是inner join)</li>
</ul>
<h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><ul>
<li>可以把子查询当成查询到的一张表</li>
<li>求出所有雇员中工资最高的那个人<ul>
<li>正确写法=&gt;<code>select ename, sal from emp where sal = (select max(sal) from emp);</code> 利用的子查询</li>
<li>错误写法=&gt;<code>select ename, max(sal) from emp;</code>因为max(sal)只有一行输出，但是可能有很多人的工资都是一样的最高，所以不匹配。此时Oracle会报错，但是Mysql可以显示，但是结果是错误的</li>
</ul>
</li>
<li>哪些人的工资位于所有人平均工资之上<code>select ename, sal from emp where sal &gt; (select avg(sal) from emp);</code></li>
<li>在from语句中的子查询需要起一个表的别名(Oracle可不写)，否则Mysql报ERROR 1248错误。子查询得到的表接在where语句中不需要别名，但如果把它当做一个值则需要加括号<ul>
<li>部门平均工资中最高的。此时不起别名(t)则报错，但是Oracle不会报错<code>select max(avg_sal) from (select deptno, avg(sal) &#39;avg_sal&#39; from emp group by deptno) t;</code></li>
</ul>
</li>
</ul>
<h5 id="子查询和表连接举例"><a href="#子查询和表连接举例" class="headerlink" title="子查询和表连接举例"></a>子查询和表连接举例</h5><ul>
<li><p>按照部门分组之后每个部门工资最高的那个人</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select ename, sal from emp</div><div class="line">    -&gt; join (select max(sal) 'max_sal', deptno from emp group by deptno) t	/*注释：将通过子查询得到的一张表命名为t*/</div><div class="line">    -&gt; on (emp.sal = t.max_sal and emp.deptno = t.deptno);</div></pre></td></tr></table></figure>
</li>
<li><p>求每个部门平均薪水的薪水等级</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select deptno, avg_sal, grade from</div><div class="line">    -&gt; (select deptno, avg(sal) 'avg_sal' from emp group by deptno) t</div><div class="line">    -&gt; join salgrade s on (t.avg_sal between s.losal and s.hisal);</div></pre></td></tr></table></figure>
<ul>
<li>其中deptno和avg_sal是从(select deptno, avg(sal) ‘avg_sal’ from emp group by deptno)中得到</li>
</ul>
</li>
<li><p>求每个部门平均的薪水等级（每个人的薪水等级的平均）</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select deptno, avg(grade) from</div><div class="line">    -&gt; (select deptno, grade from emp join salgrade s on (emp.sal between s.losal and s.hisal)) t group by deptno;</div></pre></td></tr></table></figure>
</li>
<li><p>求出那些人是经理人<code>select ename from emp where empno in(select distinct mgr from emp);</code></p>
</li>
<li>不准用组函数，求工资最高值(面试题) <code>select sal from emp where sal not in (select distinct e1.sal from emp e1 join emp e2 on (e1.sal &lt; e2.sal));</code></li>
<li><p>求平均工资最高的部门编号</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*正确写法*/</span></div><div class="line"><span class="keyword">select</span> deptno, avg_sal <span class="keyword">from</span></div><div class="line">(<span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="string">'avg_sal'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t1 <span class="comment">/*注释：虽然t1、t2都没有使用也要加别名*/</span></div><div class="line"><span class="keyword">where</span> avg_sal =</div><div class="line">(<span class="keyword">select</span> <span class="keyword">max</span>(avg_sal) <span class="keyword">from</span> (<span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="string">'avg_sal'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t2); <span class="comment">/*注释：此时要加括号，把这段话当成一个最大平均值*/</span></div><div class="line"></div><div class="line"><span class="comment">/*错误写法*/</span></div><div class="line"><span class="keyword">select</span> deptno, <span class="keyword">max</span>(avg_sal) <span class="keyword">from</span> (<span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="string">'avg_sal'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t;<span class="comment">/*如果三个部门的平均值一样，则deptno有多个值，而max(sal)只有一个值*/</span></div></pre></td></tr></table></figure>
</li>
<li><p>求平均工资最高的部门名称</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> dname <span class="keyword">from</span> dept <span class="keyword">where</span> deptno =</div><div class="line">(</div><div class="line">    <span class="keyword">select</span> deptno <span class="keyword">from</span></div><div class="line">        (<span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="string">'avg_sal'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t1 <span class="comment">/*注释：虽然t1、t2都没有使用也要加别名*/</span></div><div class="line">    <span class="keyword">where</span> avg_sal =</div><div class="line">        (<span class="keyword">select</span> <span class="keyword">max</span>(avg_sal) <span class="keyword">from</span> (<span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="string">'avg_sal'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t2)</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>求平均工资的等级最低的部门的部门名称</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> dname <span class="keyword">from</span> dept <span class="keyword">where</span> deptno =</div><div class="line">(<span class="keyword">select</span> deptno <span class="keyword">from</span> </div><div class="line">    (<span class="keyword">select</span> deptno, avg_sal, grade <span class="keyword">from</span></div><div class="line">        (<span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="string">'avg_sal'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t1</div><div class="line">        <span class="keyword">join</span> salgrade s</div><div class="line">        <span class="keyword">on</span> (t1.avg_sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal)</div><div class="line">    ) t2 </div><div class="line">    <span class="keyword">where</span> grade =</div><div class="line">    (<span class="keyword">select</span> <span class="keyword">min</span>(grade) <span class="keyword">from</span> </div><div class="line">        (<span class="keyword">select</span> deptno, avg_sal, grade <span class="keyword">from</span></div><div class="line">            (<span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="string">'avg_sal'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t1</div><div class="line">        <span class="keyword">join</span> salgrade s</div><div class="line">        <span class="keyword">on</span> (t1.avg_sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal)</div><div class="line">        ) t2 <span class="comment">/*注释：第二次用到t2这个"表"时，不能只写一个t2，要和前面一样将语句都写出来。但可以使用"视图"简化*/</span></div><div class="line">    )</div><div class="line">);</div></pre></td></tr></table></figure>
<ul>
<li><p>使用视图后：</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> v1 <span class="keyword">as</span> <span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="string">'avg_sal'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</div><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> v2 <span class="keyword">as</span></div><div class="line"><span class="keyword">select</span> deptno, avg_sal, grade <span class="keyword">from</span> v1</div><div class="line"><span class="keyword">join</span> salgrade s</div><div class="line"><span class="keyword">on</span> (v1.avg_sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal)</div><div class="line">;</div><div class="line"></div><div class="line"><span class="keyword">select</span> dname <span class="keyword">from</span> dept <span class="keyword">where</span> deptno =</div><div class="line">(<span class="keyword">select</span> deptno <span class="keyword">from</span> v2</div><div class="line">    <span class="keyword">where</span> grade =</div><div class="line">    (<span class="keyword">select</span> <span class="keyword">min</span>(grade) <span class="keyword">from</span> v2</div><div class="line">    )</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>比普通员工最高工资还要高的经理人名称</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> ename, sal <span class="keyword">from</span> emp</div><div class="line"><span class="keyword">where</span> empno <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> mgr <span class="keyword">from</span> emp <span class="keyword">where</span> mgr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>)</div><div class="line"><span class="keyword">and</span> sal &gt;</div><div class="line">(<span class="keyword">select</span> <span class="keyword">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">where</span> empno <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> mgr <span class="keyword">from</span> emp <span class="keyword">where</span> mgr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>将薪水大于1200的雇员按照部门进行分组，分组后的平均薪水必须大于1500，查询分组之内的平均工资并按照平均工资的倒序进行排列<br><code>select deptno, avg(sal) from emp where sal &gt; 1200 group by deptno having avg(sal) &gt; 1500 order by avg(sal) desc limit 1,2;</code></p>
</li>
</ul>
<h2 id="数据库模式定义语言DDL-Data-Definition-Language"><a href="#数据库模式定义语言DDL-Data-Definition-Language" class="headerlink" title="数据库模式定义语言DDL(Data Definition Language)"></a>数据库模式定义语言DDL(Data Definition Language)</h2><h3 id="创建和使用数据库"><a href="#创建和使用数据库" class="headerlink" title="创建和使用数据库"></a>创建和使用数据库</h3><ul>
<li><code>create database sqltest;/*创建数据库*/</code></li>
<li><code>use sqltest;/*使用数据库，之后在这个数据库上进行表的创建、展示等操作*/</code></li>
</ul>
<h3 id="数据库基本"><a href="#数据库基本" class="headerlink" title="数据库基本"></a>数据库基本</h3><ul>
<li>Mysql数据类型<ul>
<li><code>int</code>            整型，最大11个字节，相当于Oracle里的的number(X)</li>
<li><code>double</code>        浮点型，相当于Oracle里的的number(X, Y)</li>
<li><code>char</code>        定长字符串，同Oracle的char</li>
<li><code>varchar</code>     变长字符串，最大255字节，相当于Oracle里的的varchar2</li>
<li><code>datetime</code>    日期，相当于Oracle里的date</li>
<li><code>text</code>        文本型(存储可变长度的非Unicode数据，最大长度为2^31-1个字符，可存储textarea中的换行格式)</li>
<li><code>longtext</code>    长字符串类型，最大4G，相当于Oracle里的long</li>
</ul>
</li>
<li>Oracle数据结构<ul>
<li><code>char</code>        定长字符串；存取时效率高，空间可能会浪费</li>
<li><code>varchar2</code>    变长字符串,大小可达4Kb(4096个字节)；存取时效率高；varchar2支持世界所有的文字，varchar不支持</li>
<li><code>long</code>        变长字符串，大小可达到2G</li>
<li><code>number</code>        数字；number(5, 2)表示此数字有5位，其中小数含有2位</li>
<li><code>date</code>        日期(插入时，sysdate即表示系统当前时间；select时默认展示年月日，要想展示时分秒则需要to_char转换)</li>
<li>…还有很多，如用来存字节，可以把一张图片存在数据库（但是实际只是存图片存在硬盘，数据库中存图片路径）</li>
</ul>
</li>
<li>Mysql注释使用<code>/**/</code>，Oracle注释使用<code>/**/</code>或<code>--</code></li>
</ul>
<h3 id="创建、删除、复制表、更新"><a href="#创建、删除、复制表、更新" class="headerlink" title="创建、删除、复制表、更新"></a>创建、删除、复制表、更新</h3><ul>
<li>Mysql表相关约束constraint(起名不能为关键字)<ul>
<li>字段约束，加在字段的末尾加unique</li>
<li>表约束，加在所有字段末尾</li>
<li>约束类型：非空、唯一、主键、外键、check</li>
<li>主键约束：唯一且非空，主键字段可代表一条单独的记录</li>
<li>外键约束：外键约束是建立在两个字段上的，某一个字段(stu.class)会参考另一个字段(class.id)的值；且被参考的字段必须主键；当被参考的字段已经被参考了，那么则不能删除这条记录</li>
</ul>
</li>
<li><p>创建class班级表和stu学生表示例</p>
<ul>
<li><p>class班级表：创建stu表时需要先创建一个班级class的表</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">class</span></div><div class="line">(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</div><div class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span></div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>stu学生表</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu<span class="comment">/*由于使用了外键约束，故创建stu表时需要先创建一个班级class的表*/</span></div><div class="line">(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">6</span>) primary <span class="keyword">key</span> auto_increment,<span class="comment">/*主键约束(primary key);自动递增(auto_increment)*/</span></div><div class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,<span class="comment">/*非空约束,插数据时不能为null*/</span></div><div class="line">sex <span class="built_in">int</span>(<span class="number">1</span>),</div><div class="line">age <span class="built_in">int</span>(<span class="number">3</span>),</div><div class="line">sdate <span class="keyword">timestamp</span>,</div><div class="line">grade <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="number">1</span>,<span class="comment">/*年级默认为1*/</span></div><div class="line"><span class="keyword">class</span> <span class="built_in">int</span>(<span class="number">4</span>),</div><div class="line">email <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">unique</span>,<span class="comment">/*字段约束;唯一约束,两个NULL值不算重复*/</span></div><div class="line"><span class="keyword">constraint</span> stu_class_fk foreign <span class="keyword">key</span>(<span class="keyword">class</span>) <span class="keyword">references</span> <span class="keyword">class</span>(<span class="keyword">id</span>)<span class="comment">/*外键约束;表约束;可以省略constraint stu_class_fk即自己不命名此约束*/</span></div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="Oracle创建"><a href="#Oracle创建" class="headerlink" title="Oracle创建"></a>Oracle创建</h4><ul>
<li><p>创建班级表</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">class</span></div><div class="line">(</div><div class="line"><span class="keyword">id</span> <span class="built_in">number</span>(<span class="number">4</span>) primary <span class="keyword">key</span>,</div><div class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span></div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>创建学生表</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu</div><div class="line">(</div><div class="line"><span class="keyword">id</span> <span class="built_in">number</span>(<span class="number">6</span>) primary <span class="keyword">key</span>,<span class="comment">/*主键约束；也可加在表级上，如：constraint stu_id_pk primary key(id)*/</span></div><div class="line"><span class="keyword">name</span> varchar2(<span class="number">20</span>) <span class="keyword">constraint</span> stu_name_no <span class="keyword">not</span> <span class="literal">null</span>,<span class="comment">/*constraint给约束条件(非空)起名为stu_name_no；非空约束，插数据时不能为null*/</span></div><div class="line">sex <span class="built_in">number</span>(<span class="number">1</span>),</div><div class="line">age <span class="built_in">number</span>(<span class="number">3</span>),</div><div class="line">sdate <span class="built_in">date</span>,</div><div class="line">grade <span class="built_in">number</span>(<span class="number">2</span>) <span class="keyword">default</span> <span class="number">1</span>,</div><div class="line"><span class="keyword">class</span> <span class="built_in">number</span>(<span class="number">4</span>) <span class="keyword">references</span> <span class="keyword">class</span>(<span class="keyword">id</span>),<span class="comment">/*外键约束；也可加在表级上，如：constraint stu_class_fk foreign key(class) references class(id)*/</span></div><div class="line">email varchar2(<span class="number">50</span>),</div><div class="line"><span class="keyword">constraint</span> stu_name_email_uni <span class="keyword">unique</span>(email, <span class="keyword">name</span>)<span class="comment">/*表约束，此时表示email和name的组合不能重复*/</span></div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>Oracle的sequence序列：唯一的自动递增的一列数</p>
<ul>
<li><code>create sequence seq;</code> 创建一个序列</li>
<li><code>drop sequence seq;</code>  删除一个序列</li>
<li><code>select seq.nextval from dual;</code> 利用sequence中的nextval字段获取序列中的下一个数</li>
<li>示例：<br>  <code>create sequence seq_stu_id start with 1 increment by 1;</code> 产生一个从1开始每次递增1的序列<br>  <code>insert into stu values(seq_stu_id.nextval, &#39;name&#39;, 0, 18, sysdate, 1, 1, &#39;oldinaction@qq.com&#39;);</code> sysdate获取系统时间</li>
</ul>
</li>
</ul>
<h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><ul>
<li>删除表 <code>drop table table_name;</code> 如果存在外键约束，应该先删除含有外键约束的那个表，再删除被参考的那个表</li>
<li>清空表数据 <code>delete from table_name;</code></li>
</ul>
<h4 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h4><ul>
<li>复制表结构及数据到新表 <code>CREATE TABLE 新表 AS SELECT * FROM 旧表</code></li>
<li>只复制表结构到新表 <code>CREATE TABLE 新表 AS SELECT * FROM 旧表 WHERE 1=2</code></li>
<li>复制部分字段 <code>create table b as select row_id, name, age from a where 1&lt;&gt;1</code></li>
<li>复制旧表的数据到新表(假设两个表结构一样) <code>INSERT INTO 新表 SELECT * FROM 旧表</code></li>
<li>复制旧表的数据到新表(假设两个表结构不一样) <code>INSERT INTO 新表(字段1,字段2,.......) SELECT 字段1,字段2,...... FROM 旧表</code></li>
<li>创建临时表并复制数据 <code>create global temporary table ybase_tmptable_storage on commit delete rows as select * from ycross_storage where 1=2;</code> 其中<code>on commit delete rows</code>表示此临时表每次在事物提交的时候清空数据</li>
</ul>
<h4 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h4><ul>
<li><p><strong><code>update set from where</code></strong> 将一张表的数据同步到另外一张表</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Oracle</span></div><div class="line"><span class="keyword">update</span> a <span class="keyword">set</span> (a1, a2, a3) = (<span class="keyword">select</span> b1, b2, b3 <span class="keyword">from</span> b <span class="keyword">where</span> a.id = b.id) <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span>  <span class="keyword">from</span> b <span class="keyword">where</span> a.id = b.id)</div><div class="line"><span class="comment">-- Mysql</span></div><div class="line"><span class="keyword">update</span> a, b <span class="keyword">set</span> a1 = b1, a2 = b2, a3 = b3 <span class="keyword">where</span> a.id = b.id</div></pre></td></tr></table></figure>
<ul>
<li><p>实例</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> ycross_storage ys</div><div class="line"><span class="keyword">set</span> (ys.location_id, ys.ycross_x, ys.ycross_y, ys.box_type_id) =</div><div class="line">    (<span class="keyword">select</span> yls.location_id,</div><div class="line">            sc.ycrossx,</div><div class="line">            sc.ycrossy,</div><div class="line">            (<span class="keyword">select</span> ybts.id <span class="keyword">from</span> yyard_box_type_set ybts <span class="keyword">where</span> ybts.box_type = sc.relclcd) boxtypeid <span class="comment">--也可以不取别名</span></div><div class="line">        <span class="keyword">from</span> yyard_location_set yls, sql_ctninfo sc <span class="comment">-- sql_ctninfo为临时表</span></div><div class="line">        <span class="keyword">where</span> <span class="number">1</span> = <span class="number">1</span></div><div class="line">        <span class="keyword">and</span> yls.region_num = sc.regionnum</div><div class="line">        <span class="keyword">and</span> yls.set_num = sc.setnum</div><div class="line">        <span class="keyword">and</span> (<span class="keyword">select</span> ypc.company_num</div><div class="line">                <span class="keyword">from</span> ybase_party_company ypc</div><div class="line">                <span class="keyword">where</span> ypc.party_id = yls.yard_party_id) = (<span class="string">'dw'</span> || <span class="keyword">trim</span>(sc.yardin))</div><div class="line">        <span class="keyword">and</span> yls.yes_status = <span class="number">1</span></div><div class="line">        <span class="keyword">and</span> sc.isinvalid = <span class="number">1</span></div><div class="line">        <span class="keyword">and</span> ys.box_number = sc.ctnno</div><div class="line">        <span class="keyword">and</span> ys.yes_storage = <span class="number">1</span>) <span class="comment">-- 可以拿到update的表ycross_storage，且不能关联进去，否则容易出现一对多错误</span></div><div class="line"><span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> sql_ctninfo sc <span class="keyword">where</span> ys.box_number = sc.ctnno); <span class="comment">-- where只能拿到update的表(不能拿到form的)</span></div><div class="line"><span class="comment">-- 除了set(里面)限制了需要更新的范围，where(外面)也需要限制</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><ul>
<li>添加一个字段 <code>alter table stu add(addr varchar(100));</code></li>
<li>修改字段类型 <code>alter table stu modify addr varchar(150);</code><ul>
<li>修改之后的字段容量必须大于原有数据的大小</li>
</ul>
</li>
<li>修改字段名 <code>alter table stu change addr address varchar(50);</code></li>
<li>Oracle删除、添加表的约束条件<ul>
<li>删除外键约束 <code>alter table stu drop constraint stu_class_fk;</code></li>
<li>增加外键约束 <code>alter table stu add constraint stu_class_fk foreign key(class) references class(id);</code></li>
</ul>
</li>
</ul>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul>
<li>Oracle索引<ul>
<li>当给表加主键或者唯一约束时，Oracle会自动将此字段建立索引；给字段建立索引后，查询快读取慢</li>
<li><code>create index idx_stu_email on stu(email);</code> 建立索引idx_stu_email</li>
<li><code>drop index idx_stu_email;</code> 删除索引idx_stu_email</li>
</ul>
</li>
</ul>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul>
<li>视图创建：<code>create view 视图名 as 表(通过select子查询得到);</code></li>
<li><p>Mysql写法</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> v1 <span class="keyword">as</span> <span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="string">'avg_sal'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</div><div class="line"><span class="keyword">create</span> <span class="keyword">view</span> v2 <span class="keyword">as</span></div><div class="line"><span class="keyword">select</span> deptno, avg_sal, grade <span class="keyword">from</span> v1</div><div class="line"><span class="keyword">join</span> salgrade s</div><div class="line"><span class="keyword">on</span> (v1.avg_sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal)</div><div class="line">;</div></pre></td></tr></table></figure>
</li>
<li><p>Oracle写法</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">create</span> <span class="keyword">view</span> v$_view <span class="keyword">as</span></div><div class="line"><span class="keyword">select</span> deptno, avg_sal, grade <span class="keyword">from</span></div><div class="line">(<span class="keyword">select</span> deptno, <span class="keyword">avg</span>(sal) <span class="string">'avg_sal'</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t1</div><div class="line"><span class="keyword">join</span> salgrade s</div><div class="line"><span class="keyword">on</span> (t1.avg_sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal)</div><div class="line">;</div></pre></td></tr></table></figure>
</li>
<li><p>Mysql创建视图的select语句不能包含from子句中的子查询，可以创建两次视图。而Oracle可以包含子查询</p>
</li>
<li>视图就相当于一个子查询，建立视图可以简化查询、保护数据，但是增加维护难度</li>
<li>可以更新视图里面的数据，但是更新的是实际中的表的数据，故一般不这么做</li>
</ul>
<h3 id="Oracle数据字典"><a href="#Oracle数据字典" class="headerlink" title="Oracle数据字典"></a>Oracle数据字典</h3><ul>
<li>描述系统自带的数据字典表 <code>desc dictionary;</code></li>
<li><code>select * from dictionary;</code><ul>
<li><code>select table_name from user_tables;</code> 显示当前用户下有哪些表</li>
<li><code>select view_name from user_views;</code> 显示当前用户下有哪些视图</li>
<li><code>select constraint_name, table_name from user_constraints;</code> 显示当前用户下有哪些约束</li>
<li><code>select index_name from user_indexes;</code> 显示当前用户下有哪些索引</li>
</ul>
</li>
</ul>
<h3 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h3><ul>
<li>三范式<ul>
<li>第一范式：要有主键，列不可分。(如：如果要分别获取姓、名，则应该设计两个字段，而不应该设置为姓名一个字段当查询出来后再进行分割)</li>
<li>第二范式：不能存在部分依赖。即当一张表中有多个字段作为主键时，非主键的字段不能依赖于部分主键</li>
<li>第三范式：不能存在传递依赖。如：雇员表中描述雇员需要描述他所在部门，因此只需记录其部门编号即可，如果把部门相关的信息(部门名称、部门位置)加入到雇员表则存在传递依赖</li>
</ul>
</li>
<li>三范式强调的是表不存在冗余数据(同样的数据不存第二遍)</li>
<li>符合了三范式后会增加查询难度，要做表连接</li>
</ul>
<h3 id="设计表"><a href="#设计表" class="headerlink" title="设计表"></a>设计表</h3><ul>
<li>设计树状结构的存</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*创建表*/</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> article</div><div class="line">(</div><div class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</div><div class="line">cont <span class="built_in">text</span>,</div><div class="line">pid <span class="built_in">int</span>,<span class="comment">/*注释：表示父id*/</span></div><div class="line">isleaf <span class="built_in">int</span>(<span class="number">1</span>),<span class="comment">/*注释：0代表非叶子节点，1代表叶子节点*/</span></div><div class="line">alevel <span class="built_in">int</span>(<span class="number">2</span>)<span class="comment">/*注释：表示层级*/</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">/*插入数据*/</span></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> article <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'蚂蚁大战大象'</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> article <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'大象被打趴下了'</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> article <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'蚂蚁也不好过'</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> article <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'瞎说'</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> article <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'没有瞎说'</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> article <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">'怎么可能'</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> article <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">'怎么没有可能'</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> article <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">'可能性是很大的'</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> article <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">'大象进医院了'</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> article <span class="keyword">values</span>(<span class="number">10</span>,<span class="string">'护士是蚂蚁'</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="comment">/*显示*/</span></div><div class="line">蚂蚁大战大象</div><div class="line">  大象被打趴下了</div><div class="line">    蚂蚁也不好过</div><div class="line">    瞎说</div><div class="line">      没有瞎说</div><div class="line">    大象进医院了</div><div class="line">      护士是蚂蚁</div><div class="line">  怎么可能</div><div class="line">    怎么没有可能</div><div class="line">    可能性是很大的</div></pre></td></tr></table></figure>
<h2 id="数据库表信息"><a href="#数据库表信息" class="headerlink" title="数据库表信息"></a>数据库表信息</h2><ul>
<li><code>show databases;</code> 显示所有数据库</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+--------------------+</div><div class="line">| Database           |</div><div class="line">+--------------------+</div><div class="line">| information_schema |</div><div class="line">| sqltest            |</div><div class="line">+--------------------+</div></pre></td></tr></table></figure>
<blockquote>
<p>Oracle一个实例，就是一个数据库，所以没有对应的 show databases 语句。使用<code>select * from gv$instance;</code>查看所有实例</p>
</blockquote>
<ul>
<li><code>use sqltest</code> 选择数据库</li>
<li><code>show tables;</code> 显示该数据库的所有表</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+-------------------+</div><div class="line">| Tables_in_sqltest |</div><div class="line">+-------------------+</div><div class="line">| dept              |</div><div class="line">| emp               |</div><div class="line">| salgrade          |</div><div class="line">+-------------------+</div></pre></td></tr></table></figure>
<ul>
<li>雇员表<code>desc emp;</code>或者<code>describe emp;</code> 描述一张表的字段详情<ul>
<li>date只包含年月日，datetime、timestamp包含了完整的日期时间</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+----------+-------------+------+-----+---------+-------+</div><div class="line">| Field    | Type        | Null | Key | Default | Extra |</div><div class="line">+----------+-------------+------+-----+---------+-------+</div><div class="line">| empno    | int(4)      | NO   |     | NULL    |       |雇员编号</div><div class="line">| ename    | varchar(10) | YES  |     | NULL    |       |雇员姓名</div><div class="line">| job      | varchar(9)  | YES  |     | NULL    |       |工种</div><div class="line">| mgr      | int(4)      | YES  |     | NULL    |       |经理人编号</div><div class="line">| hiredate | timestamp   | YES  |     | NULL    |       |雇佣日期</div><div class="line">| sal      | double(7,2) | YES  |     | NULL    |       |工资</div><div class="line">| comm     | double(7,2) | YES  |     | NULL    |       |津贴</div><div class="line">| deptno   | int(2)      | YES  |     | NULL    |       |部门编号</div><div class="line">+----------+-------------+------+-----+---------+-------+</div></pre></td></tr></table></figure>
<ul>
<li>部门表<code>desc dept;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+--------+-------------+------+-----+---------+-------+</div><div class="line">| Field  | Type        | Null | Key | Default | Extra |</div><div class="line">+--------+-------------+------+-----+---------+-------+</div><div class="line">| deptno | int(2)      | NO   |     | NULL    |       |部门编号</div><div class="line">| dname  | varchar(14) | YES  |     | NULL    |       |部门名称</div><div class="line">| loc    | varchar(13) | YES  |     | NULL    |       |所在地</div><div class="line">+--------+-------------+------+-----+---------+-------+</div><div class="line">- 薪资表`desc salgrade;`</div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line">| Field | Type    | Null | Key | Default | Extra |</div><div class="line">+-------+---------+------+-----+---------+-------+</div><div class="line">| grade | int(2)  | YES  |     | NULL    |       |薪资级别</div><div class="line">| losal | int(11) | YES  |     | NULL    |       |最低薪资</div><div class="line">| hisal | int(11) | YES  |     | NULL    |       |最高薪资</div><div class="line">+-------+---------+------+-----+---------+-------+</div></pre></td></tr></table></figure>
<ul>
<li><p>sqltest中含有emp、dept、salgrade三张表，具体数据如下：</p>
<ul>
<li><p><code>select * from emp;</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">+-------+--------+-----------+------+---------------------+---------+---------+--------+</div><div class="line">| empno | ename  | job       | mgr  | hiredate            | sal     | comm    | deptno |</div><div class="line">+-------+--------+-----------+------+---------------------+---------+---------+--------+</div><div class="line">|  7369 | smith  | clerk     | 7902 | 1980-12-17 00:00:00 |  800.00 |    NULL |     20 |</div><div class="line">|  7499 | allen  | salesman  | 7698 | 1981-02-20 00:00:00 | 1600.00 |  300.00 |     30 |</div><div class="line">|  7521 | ward   | salesman  | 7698 | 1981-02-20 00:00:00 | 1250.00 |  500.00 |     30 |</div><div class="line">|  7566 | jones  | manager   | 7839 | 1981-02-04 00:00:00 | 2975.00 |    NULL |     20 |</div><div class="line">|  7654 | martin | salesman  | 7698 | 1981-09-28 00:00:00 | 1250.00 | 1400.00 |     30 |</div><div class="line">|  7698 | blake  | manager   | 7839 | 1981-05-01 00:00:00 | 2850.00 |    NULL |     30 |</div><div class="line">|  7782 | clark  | manager   | 7839 | 1981-06-09 00:00:00 | 2450.00 |    NULL |     10 |</div><div class="line">|  7788 | scott  | analyst   | 7566 | 1987-04-19 00:00:00 | 3000.00 |    NULL |     20 |</div><div class="line">|  7839 | king   | president | NULL | 1981-11-17 00:00:00 | 5000.00 |    NULL |     10 |</div><div class="line">|  7844 | turner | salesman  | 7698 | 1981-09-08 00:00:00 | 1500.00 |    0.00 |     30 |</div><div class="line">|  7876 | adams  | clerk     | 7788 | 1987-05-23 00:00:00 | 1100.00 |    NULL |     20 |</div><div class="line">|  7900 | james  | clerk     | 7698 | 1981-03-12 00:00:00 |  950.00 |    NULL |     30 |</div><div class="line">+-------+--------+-----------+------+---------------------+---------+---------+--------+</div></pre></td></tr></table></figure>
</li>
<li><p><code>select * from dept;</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+--------+------------+----------+</div><div class="line">| deptno | dname      | loc      |</div><div class="line">+--------+------------+----------+</div><div class="line">|     10 | accounting | new york |</div><div class="line">|     20 | research   | dallas   |</div><div class="line">|     30 | sales      | chicago  |</div><div class="line">|     40 | operations | boston   |</div><div class="line">+--------+------------+----------+</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>- `select * from salgrade;`

<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+-------+-------+-------+</div><div class="line">| grade | losal | hisal |</div><div class="line">+-------+-------+-------+</div><div class="line">|     1 |   700 |  1200 |</div><div class="line">|     2 |  1201 |  1400 |</div><div class="line">|     3 |  1401 |  2000 |</div><div class="line">|     4 |  2001 |  3000 |</div><div class="line">|     5 |  3001 |  9999 |</div><div class="line">+-------+-------+-------+</div></pre></td></tr></table></figure>
</code></pre><h2 id="Mysql连接JDBC"><a href="#Mysql连接JDBC" class="headerlink" title="Mysql连接JDBC"></a>Mysql连接JDBC</h2><ul>
<li>先在Mysql官网下载驱动JDBC(Mysql Drivers提供了很多语言的驱动)：mysql-connector-java-5.0.8</li>
<li>导包：在项目上右键-&gt;Build Path-&gt;Add External archives-&gt;mysql-connector-java-5.0.8-bin.jar</li>
<li><p>示例如下：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.aezo.mysql;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.sql.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionMySQL</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"jdbc:mysql://127.0.0.1:3306/test"</span>;<span class="comment">//或者jdbc:mysql://127.0.0.1:3306/test?user=用户名&amp;password=密码</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">"root"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">"root"</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line">        Statement stmt = <span class="keyword">null</span>;</div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 1. 实例化驱动，注册驱动(实例化时自动向DriverManager注册，不需显示调用DriverManager.registerDriver方法)</span></div><div class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">//或者new com.mysql.jdbc.Driver();</span></div><div class="line">            <span class="comment">// 2. 获取数据库的连接  </span></div><div class="line">            conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);  </div><div class="line">            <span class="comment">// 3. 获取表达式</span></div><div class="line">            stmt = conn.createStatement();  </div><div class="line">            <span class="comment">// 4. 执行 SQL </span></div><div class="line">            rs = stmt.executeQuery(<span class="string">"select * from user where id =1"</span>);</div><div class="line">            <span class="comment">// 5. 显示结果集里面的数据  </span></div><div class="line">            <span class="keyword">while</span>(rs.next()) &#123;  </div><div class="line">                System.out.println(rs.getInt(<span class="string">"id"</span>));  </div><div class="line">                System.out.println(rs.getString(<span class="string">"username"</span>));  </div><div class="line">                System.out.println(rs.getString(<span class="string">"password"</span>));  </div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            System.out.println(<span class="string">"驱动类没有找到！"</span>);</div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// 6. 释放资源   </span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span>(rs != <span class="keyword">null</span>) &#123;</div><div class="line">                    rs.close();</div><div class="line">                    rs = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(stmt != <span class="keyword">null</span>) &#123;</div><div class="line">                    stmt.close();</div><div class="line">                    stmt = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</div><div class="line">                    conn.close();</div><div class="line">                    conn = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;	</div><div class="line">        &#125; </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;未做特殊说明的语句都是基于Mysql的语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;数据库操作语言DML-Data-Manipulation-Language，即CRUD&quot;&gt;&lt;a href=&quot;#数据库操作语言DML-Data-Manip
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="oracle" scheme="http://blog.aezo.cn/tags/oracle/"/>
    
      <category term="mysql" scheme="http://blog.aezo.cn/tags/mysql/"/>
    
      <category term="sql" scheme="http://blog.aezo.cn/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>chrome</title>
    <link href="http://blog.aezo.cn/2017/09/13/extend/chrome/"/>
    <id>http://blog.aezo.cn/2017/09/13/extend/chrome/</id>
    <published>2017-09-13T04:56:00.000Z</published>
    <updated>2017-12-09T14:07:49.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="chrome插件收集"><a href="#chrome插件收集" class="headerlink" title="chrome插件收集"></a>chrome插件收集</h2><ul>
<li><code>Postman</code> Http请求客户端</li>
<li><code>JSONView</code> 将Http请求获取的json字符串格式化(可收缩)</li>
<li><code>Secure Shell</code> ssh客户端</li>
<li><code>Axure RP Extension for Chrome</code> Axure设计</li>
<li><code>Set Character Encoding</code> 解决chrome查看源码乱码问题</li>
<li><code>Vue.js devtools</code> Vue.js调试工具</li>
<li><code>AdBlock</code> 广告拦截</li>
<li><code>有道词典Chrome划词插件</code></li>
<li><code>印象笔记·剪藏</code></li>
<li><p><code>Infinity新标签页</code> 标签管理</p>
</li>
<li><p><code>Octo Mate</code> github单文件下载(也可右键github按钮raw另存为)</p>
</li>
</ul>
<h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><ul>
<li><code>ctrl + shift + i</code>/<code>F12</code> 打开开发者工具</li>
<li>主面板介绍<ul>
<li><code>Elements</code> html文件显示，Css样式调试</li>
<li><code>Console</code> js代码打印面板</li>
<li><code>Sources</code> 静态文件(html、css、js、images等)<ul>
<li><code>{}</code>/<code>Pretty Print</code>可对压缩文件进行格式化</li>
</ul>
</li>
<li><code>NetWork</code> 网络显示面板：记录所有请求加载(XHR/JS/CSS/Img等)<ul>
<li><code>Initiator</code> 可查看此执行此请求的运行栈(如：某按钮被点击 - 发起XHR请求)</li>
<li>点击某个请求可查看请求头(Headers)、响应结果等</li>
</ul>
</li>
<li><code>Application</code> 查看网址的Cookies、Storage等</li>
<li><code>更多按钮</code><ul>
<li><code>Search all files</code> 基于此url地址请求的所有静态文件进行查询。多用于js函数搜索</li>
</ul>
</li>
</ul>
</li>
<li>VM文件查看<ul>
<li>VM文件是V8引擎计算出的临时代码，VM文件出现情况，如：（1）直接在console控制台运行js代码 （2）使用eval函数计算js代码(如果一些函数通过eval定义)（3）js添加的<code>&lt;script&gt;</code>标签产生的</li>
<li>查看VM函数<ul>
<li><code>debugger</code> 相应代码。如某些函数通过eval定义，在调用此函数的地方debugger，运行到该行后，点击此行数就会出VM文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="chrome插件开发"><a href="#chrome插件开发" class="headerlink" title="chrome插件开发"></a>chrome插件开发</h2><ul>
<li>中文文档：<a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="external">http://open.chrome.360.cn/extension_dev/overview.html</a></li>
</ul>
<h3 id="helloword：改变网页背景颜色"><a href="#helloword：改变网页背景颜色" class="headerlink" title="helloword：改变网页背景颜色"></a>helloword：改变网页背景颜色</h3><ul>
<li>chrome官网例子getstarted，下载地址<code>https://developer.chrome.com/extensions/examples/tutorials/getstarted.zip</code></li>
<li><p>效果展示</p>
<p>  <img src="/data/images/2016/09/chrome-plugin-helloword.png" alt="chrome-plugin-helloword"></p>
</li>
<li><p><code>icon.png</code> 显示</p>
</li>
<li><p><code>manifest.json</code></p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line"></div><div class="line">    <span class="string">"name"</span>: <span class="string">"Getting started example"</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="string">"This extension allows the user to change the background color of the current page."</span>,</div><div class="line">    <span class="string">"version"</span>: <span class="string">"1.0"</span>,</div><div class="line"></div><div class="line">    <span class="string">"browser_action"</span>: &#123;</div><div class="line">        <span class="string">"default_icon"</span>: <span class="string">"icon.png"</span>,</div><div class="line">        <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"permissions"</span>: [</div><div class="line">        <span class="string">"activeTab"</span>,</div><div class="line">        <span class="string">"storage"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>popup.html</code></p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Getting Started Extension's Popup<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">    body &#123;</div><div class="line">        margin: 10px;</div><div class="line">        white-space: nowrap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    h1 &#123;</div><div class="line">        font-size: 15px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #container &#123;</div><div class="line">        align-items: center;</div><div class="line">        display: flex;</div><div class="line">        justify-content: space-between;</div><div class="line">    &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"popup.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Background Color Changer<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Choose a color<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">disabled</span> <span class="attr">hidden</span> <span class="attr">value</span>=<span class="string">''</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"white"</span>&gt;</span>White<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"pink"</span>&gt;</span>Pink<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"green"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"yellow"</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>popup.js</code></p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Get the current URL.</div><div class="line">*</div><div class="line">* @param &#123;function(string)&#125; callback called when the URL of the current tab</div><div class="line">*   is found.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentTabUrl</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="comment">// Query filter to be passed to chrome.tabs.query - see</span></div><div class="line">    <span class="comment">// https://developer.chrome.com/extensions/tabs#method-query</span></div><div class="line">    <span class="keyword">var</span> queryInfo = &#123;</div><div class="line">        <span class="attr">active</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">currentWindow</span>: <span class="literal">true</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    chrome.tabs.query(queryInfo, (tabs) =&gt; &#123;</div><div class="line">        <span class="comment">// chrome.tabs.query invokes the callback with a list of tabs that match the</span></div><div class="line">        <span class="comment">// query. When the popup is opened, there is certainly a window and at least</span></div><div class="line">        <span class="comment">// one tab, so we can safely assume that |tabs| is a non-empty array.</span></div><div class="line">        <span class="comment">// A window can only have one active tab at a time, so the array consists of</span></div><div class="line">        <span class="comment">// exactly one tab.</span></div><div class="line">        <span class="keyword">var</span> tab = tabs[<span class="number">0</span>];</div><div class="line"></div><div class="line">        <span class="comment">// A tab is a plain object that provides information about the tab.</span></div><div class="line">        <span class="comment">// See https://developer.chrome.com/extensions/tabs#type-Tab</span></div><div class="line">        <span class="keyword">var</span> url = tab.url;</div><div class="line"></div><div class="line">        <span class="comment">// tab.url is only available if the "activeTab" permission is declared.</span></div><div class="line">        <span class="comment">// If you want to see the URL of other tabs (e.g. after removing active:true</span></div><div class="line">        <span class="comment">// from |queryInfo|), then the "tabs" permission is required to see their</span></div><div class="line">        <span class="comment">// "url" properties.</span></div><div class="line">        <span class="built_in">console</span>.assert(<span class="keyword">typeof</span> url == <span class="string">'string'</span>, <span class="string">'tab.url should be a string'</span>);</div><div class="line"></div><div class="line">        callback(url);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// Most methods of the Chrome extension APIs are asynchronous. This means that</span></div><div class="line">    <span class="comment">// you CANNOT do something like this:</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// var url;</span></div><div class="line">    <span class="comment">// chrome.tabs.query(queryInfo, (tabs) =&gt; &#123;</span></div><div class="line">    <span class="comment">//   url = tabs[0].url;</span></div><div class="line">    <span class="comment">// &#125;);</span></div><div class="line">    <span class="comment">// alert(url); // Shows "undefined", because chrome.tabs.query is async.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Change the background color of the current page.</div><div class="line">    *</div><div class="line">    * @param &#123;string&#125; color The new background color.</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeBackgroundColor</span>(<span class="params">color</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> script = <span class="string">'document.body.style.backgroundColor="'</span> + color + <span class="string">'";'</span>;</div><div class="line">    <span class="comment">// See https://developer.chrome.com/extensions/tabs#method-executeScript.</span></div><div class="line">    <span class="comment">// chrome.tabs.executeScript allows us to programmatically inject JavaScript</span></div><div class="line">    <span class="comment">// into a page. Since we omit the optional first argument "tabId", the script</span></div><div class="line">    <span class="comment">// is inserted into the active tab of the current window, which serves as the</span></div><div class="line">    <span class="comment">// default.</span></div><div class="line">    chrome.tabs.executeScript(&#123;</div><div class="line">        <span class="attr">code</span>: script</div><div class="line">    &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Gets the saved background color for url.</div><div class="line">    *</div><div class="line">    * @param &#123;string&#125; url URL whose background color is to be retrieved.</div><div class="line">    * @param &#123;function(string)&#125; callback called with the saved background color for</div><div class="line">    *     the given url on success, or a falsy value if no color is retrieved.</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getSavedBackgroundColor</span>(<span class="params">url, callback</span>) </span>&#123;</div><div class="line">    <span class="comment">// See https://developer.chrome.com/apps/storage#type-StorageArea. We check</span></div><div class="line">    <span class="comment">// for chrome.runtime.lastError to ensure correctness even when the API call</span></div><div class="line">    <span class="comment">// fails.</span></div><div class="line">    chrome.storage.sync.get(url, (items) =&gt; &#123;</div><div class="line">        callback(chrome.runtime.lastError ? <span class="literal">null</span> : items[url]);</div><div class="line">    &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Sets the given background color for url.</div><div class="line">    *</div><div class="line">    * @param &#123;string&#125; url URL for which background color is to be saved.</div><div class="line">    * @param &#123;string&#125; color The background color to be saved.</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">saveBackgroundColor</span>(<span class="params">url, color</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> items = &#123;&#125;;</div><div class="line">    items[url] = color;</div><div class="line">    <span class="comment">// See https://developer.chrome.com/apps/storage#type-StorageArea. We omit the</span></div><div class="line">    <span class="comment">// optional callback since we don't need to perform any action once the</span></div><div class="line">    <span class="comment">// background color is saved.</span></div><div class="line">    chrome.storage.sync.set(items);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// This extension loads the saved background color for the current tab if one</span></div><div class="line">    <span class="comment">// exists. The user can select a new background color from the dropdown for the</span></div><div class="line">    <span class="comment">// current page, and it will be saved as part of the extension's isolated</span></div><div class="line">    <span class="comment">// storage. The chrome.storage API is used for this purpose. This is different</span></div><div class="line">    <span class="comment">// from the window.localStorage API, which is synchronous and stores data bound</span></div><div class="line">    <span class="comment">// to a document's origin. Also, using chrome.storage.sync instead of</span></div><div class="line">    <span class="comment">// chrome.storage.local allows the extension data to be synced across multiple</span></div><div class="line">    <span class="comment">// user devices.</span></div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</div><div class="line">    getCurrentTabUrl(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">var</span> dropdown = <span class="built_in">document</span>.getElementById(<span class="string">'dropdown'</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Load the saved background color for this page and modify the dropdown</span></div><div class="line">        <span class="comment">// value, if needed.</span></div><div class="line">        getSavedBackgroundColor(url, (savedColor) =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (savedColor) &#123;</div><div class="line">            changeBackgroundColor(savedColor);</div><div class="line">            dropdown.value = savedColor;</div><div class="line">        &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// Ensure the background color is changed and saved when the dropdown</span></div><div class="line">        <span class="comment">// selection changes.</span></div><div class="line">        dropdown.addEventListener(<span class="string">'change'</span>, () =&gt; &#123;</div><div class="line">        changeBackgroundColor(dropdown.value);</div><div class="line">        saveBackgroundColor(url, dropdown.value);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h3><ol>
<li>打包为crx文件发布<ul>
<li>在chrome安装目录运行 <code>chrome.exe --pack-extension=&quot;D:\chromeplugins\helloword&quot;</code><ul>
<li><code>helloword</code>为插件源码根目录</li>
<li>会生成<code>helloword.crx</code>(扩展文件)和<code>helloword.pem</code>(密钥)</li>
</ul>
</li>
</ul>
</li>
<li>上传zip到chrome：<a href="https://chrome.google.com/webstore/developer/dashboard" target="_blank" rel="external">https://chrome.google.com/webstore/developer/dashboard</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;chrome插件收集&quot;&gt;&lt;a href=&quot;#chrome插件收集&quot; class=&quot;headerlink&quot; title=&quot;chrome插件收集&quot;&gt;&lt;/a&gt;chrome插件收集&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Postman&lt;/code&gt; Http请求客户端&lt;/
    
    </summary>
    
      <category term="extend" scheme="http://blog.aezo.cn/categories/extend/"/>
    
    
      <category term="plugins" scheme="http://blog.aezo.cn/tags/plugins/"/>
    
      <category term="debug" scheme="http://blog.aezo.cn/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>db-procedure</title>
    <link href="http://blog.aezo.cn/2017/08/24/db/db-procedure/"/>
    <id>http://blog.aezo.cn/2017/08/24/db/db-procedure/</id>
    <published>2017-08-24T12:33:00.000Z</published>
    <updated>2018-01-09T06:08:55.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Mysql存储过程调试工具：<code>dbForge Studio for MySQL</code></li>
</ul>
<h2 id="Mysql存储过程示例"><a href="#Mysql存储过程示例" class="headerlink" title="Mysql存储过程示例"></a>Mysql存储过程示例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">CREATE DEFINER = 'root'@'localhost'</div><div class="line">PROCEDURE test.county(IN `in_provid` int, IN `in_urlid` int)</div><div class="line">BEGIN</div><div class="line">  DECLARE v_sql varchar(1000);</div><div class="line">  DECLARE c_cityid integer;</div><div class="line">  DECLARE c_cityname varchar(20);</div><div class="line">  DECLARE c_countyname varchar(20);</div><div class="line">  DECLARE c_cityid_tmp integer;</div><div class="line"></div><div class="line">  # 是否未找到数据标记(要在游标之前定义)</div><div class="line">  DECLARE done INT DEFAULT FALSE;</div><div class="line"></div><div class="line">  -- 定义第一个游标</div><div class="line">  DECLARE cur1 CURSOR FOR</div><div class="line">  SELECT</div><div class="line">    t.N_CITYID,</div><div class="line">    t.S_CITYNAME</div><div class="line">  FROM dict_city t</div><div class="line">  WHERE t.N_PROVID = in_provid;</div><div class="line"></div><div class="line">  # 临时表游标</div><div class="line">  DECLARE cur2 CURSOR FOR</div><div class="line">  SELECT</div><div class="line">    S_COUNTYNAME,</div><div class="line">    N_CITYID AS cityid</div><div class="line">  FROM tmp_table;</div><div class="line"></div><div class="line">  # 循环终止的标志，游标中如果没有数据就设置done为TRUE(停止遍历)</div><div class="line">  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;</div><div class="line"></div><div class="line">  # 创建临时表</div><div class="line">  DROP TABLE IF EXISTS tmp_table;</div><div class="line">  CREATE TEMPORARY TABLE IF NOT EXISTS tmp_table (</div><div class="line">    ID int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,</div><div class="line">    S_COUNTYNAME varchar(20),</div><div class="line">    N_CITYID int(10)</div><div class="line">  );</div><div class="line"></div><div class="line">  # mysql不能直接变量结果集, 此出场将结果集放到临时表中, 用于后面变量</div><div class="line">  OPEN cur1;</div><div class="line">  flag_loop: LOOP</div><div class="line">    # 取出每条记录并赋值给相关变量，注意顺序</div><div class="line">    # 变量的定义不要和你的select的列的键同名, 否则fetch into 会失败！</div><div class="line">    FETCH cur1 INTO c_cityid, c_cityname;</div><div class="line"></div><div class="line">    # FETCH之后, 如果没有数据则会运行SET done = TRUE</div><div class="line">    IF done THEN</div><div class="line">      # 跳出循环</div><div class="line">      LEAVE flag_loop;</div><div class="line">    END IF;</div><div class="line"></div><div class="line">    # 字符串截取，从第一位开始，截取2位</div><div class="line">    SET c_cityname = SUBSTRING(c_cityname, 1, 2);</div><div class="line"></div><div class="line">    # 动态sql执行后的结果记录集在MySQL中无法获取，因此需要转变思路将其放置到一个临时表中</div><div class="line">    # 动态sql需要使用CONCAT(a, b, c, ....)拼接</div><div class="line">    SET v_sql = CONCAT("insert into tmp_table(S_COUNTYNAME, N_CITYID) select t.`name`, ", c_cityid, " from sm_renthouse_url t where</div><div class="line">    t.pid in (select p.id from sm_renthouse_url p where p.pid = ", in_urlid, " and p.`name` like '%", c_cityname, "%')");</div><div class="line"></div><div class="line">    # 如果以@开头的变量可以不用通过declare语句事先声明</div><div class="line">    SET @v_sql = v_sql;</div><div class="line">    # 预处理需要执行的动态SQL，其中stmt是一个变量</div><div class="line">    PREPARE stmt FROM @v_sql;</div><div class="line">    # 执行SQL语句</div><div class="line">    EXECUTE stmt;</div><div class="line">    # 释放掉预处理段</div><div class="line">    DEALLOCATE PREPARE stmt;</div><div class="line">  END LOOP;</div><div class="line">  CLOSE cur1;</div><div class="line"></div><div class="line">  # 调试输出, 打印使用SELECT</div><div class="line">  SELECT</div><div class="line">    *</div><div class="line">  FROM tmp_table;</div><div class="line"></div><div class="line">  # 还原终止的标志, 用于第二个游标</div><div class="line">  SET done = FALSE;</div><div class="line"></div><div class="line">  OPEN cur2;</div><div class="line">  flag_loop: LOOP</div><div class="line">    FETCH cur2 INTO c_countyname, c_cityid_tmp;</div><div class="line">    IF done THEN</div><div class="line">      LEAVE flag_loop;</div><div class="line">    END IF;</div><div class="line"></div><div class="line">    INSERT INTO dict_county (S_COUNTYNAME, N_CITYID, S_STATE)</div><div class="line">      VALUES (c_countyname, c_cityid_tmp, '1');</div><div class="line"></div><div class="line">  END LOOP;</div><div class="line">  CLOSE cur2;</div><div class="line"></div><div class="line">  # 删除临时表</div><div class="line">  DROP TEMPORARY TABLE tmp_table;</div><div class="line">END</div></pre></td></tr></table></figure>
<h2 id="Oracle存储过程示例"><a href="#Oracle存储过程示例" class="headerlink" title="Oracle存储过程示例"></a>Oracle存储过程示例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 定义</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> p_up_user_role <span class="keyword">is</span></div><div class="line">  <span class="keyword">cursor</span> c <span class="keyword">is</span> </div><div class="line">    <span class="keyword">select</span> t.* <span class="keyword">from</span> User_Login t; <span class="comment">-- 游标</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">  <span class="keyword">delete</span> <span class="keyword">from</span> User_Login_Security_Group t <span class="keyword">where</span> t.group_id = <span class="string">'DW_DEPT_ADMIN'</span>;</div><div class="line">  <span class="comment">--for循环不需要声明变量，会自动将user_item声明为record变量</span></div><div class="line">  for user_item in c loop</div><div class="line">      <span class="keyword">insert</span> <span class="keyword">into</span> User_Login_Security_Group(User_Login_Id, <span class="keyword">Group_Id</span>, From_Date) </div><div class="line">            <span class="keyword">values</span>(user_item.user_login_id, <span class="string">'DW_DEPT_ADMIN'</span>, <span class="string">'2017-11-01 00:00:00.000000'</span>);</div><div class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line">  <span class="keyword">commit</span>;</div><div class="line"><span class="keyword">end</span>;</div><div class="line"></div><div class="line"><span class="comment">-- 运行</span></div><div class="line"><span class="keyword">call</span> p_up_user_role();</div><div class="line"></div><div class="line"><span class="comment">-- 删除</span></div><div class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> p_up_user_role;</div></pre></td></tr></table></figure>
<ul>
<li><p>示例二（动态游标、异常处理）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 创建错误日志表</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> yimp_errorlog</div><div class="line">(</div><div class="line">      <span class="keyword">id</span> <span class="built_in">number</span> primary <span class="keyword">key</span>,</div><div class="line">      errcode <span class="built_in">number</span>,</div><div class="line">      errmsg varchar2(<span class="number">1024</span>),</div><div class="line">      errdate <span class="built_in">date</span></div><div class="line">);</div><div class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> seq_errorlog_id <span class="keyword">start</span> <span class="keyword">with</span> <span class="number">1</span> <span class="keyword">increment</span> <span class="keyword">by</span> <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">-- 创建存储过程</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> p_up_storage <span class="keyword">is</span></div><div class="line">  <span class="keyword">TYPE</span> ref_cursor_type <span class="keyword">IS</span> <span class="keyword">REF</span> <span class="keyword">CURSOR</span>; <span class="comment">--定义一个游标类型</span></div><div class="line"></div><div class="line">  cursor c is</div><div class="line">    <span class="keyword">select</span> yls.*</div><div class="line">      <span class="keyword">from</span> yyard_location_set yls, ybase_party_company ypc</div><div class="line">    <span class="keyword">where</span> ypc.party_id = yls.yard_party_id</div><div class="line">      <span class="keyword">and</span> ypc.company_num = <span class="string">'DW1'</span> </div><div class="line">      <span class="keyword">and</span> yls.region_num <span class="keyword">in</span> (<span class="string">'Y0'</span>);</div><div class="line"></div><div class="line">  v_cur_storage ref_cursor_type; <span class="comment">-- 动态游标</span></div><div class="line">  v_storage     ycross_storage%ROWTYPE;</div><div class="line">  v_sql         varchar2(1000);</div><div class="line">  v_x           number := 1;</div><div class="line">  v_y           number := 1;</div><div class="line"></div><div class="line">  v_errcode number;</div><div class="line">  v_errmsg  varchar2(1024);</div><div class="line"><span class="keyword">begin</span></div><div class="line">  <span class="keyword">for</span> loc <span class="keyword">in</span> c <span class="keyword">loop</span></div><div class="line">    v_errmsg := <span class="string">'[code]p_up_storage==&gt;'</span> || loc.YARD_PARTY_ID || <span class="string">'-'</span> || loc.REGION_NUM || loc.SET_NUM;</div><div class="line">    <span class="comment">-- 更新此堆位下场存</span></div><div class="line">    v_x := 1;</div><div class="line">    v_y := 1;</div><div class="line">  </div><div class="line">    <span class="comment">--使用连接符拼接成一条完整SQL</span></div><div class="line">    v_sql := '<span class="keyword">select</span> * <span class="keyword">from</span> ycross_storage t <span class="keyword">where</span> t.yes_storage = <span class="number">1</span> <span class="keyword">and</span> t.location_id = <span class="string">' ||</span></div><div class="line">            loc.location_id;</div><div class="line">    --打开游标</div><div class="line">    open v_cur_storage for v_sql;</div><div class="line">  </div><div class="line">    loop</div><div class="line">      fetch v_cur_storage into v_storage;</div><div class="line">      exit when v_cur_storage%notfound;</div><div class="line">    </div><div class="line">      update ycross_storage t</div><div class="line">        set t.ycross_x = v_x, t.ycross_y = v_y</div><div class="line">      where t.id = v_storage.id;</div><div class="line"></div><div class="line">      if v_y &lt; 7 then</div><div class="line">        v_y := v_y + 1;</div><div class="line">      else</div><div class="line">        if v_x &lt; 30 then</div><div class="line">          v_x := v_x + 1;</div><div class="line">          v_y := 1;</div><div class="line">        else</div><div class="line">          RAISE_APPLICATION_ERROR(-20001, v_errmsg || '位置超出堆位结构<span class="string">'); -- 抛出异常</span></div><div class="line">        end if;</div><div class="line">      end if;</div><div class="line">    </div><div class="line">    end loop;</div><div class="line">  </div><div class="line">    close v_cur_storage;</div><div class="line">  </div><div class="line">  end loop;</div><div class="line"></div><div class="line">  commit;</div><div class="line">exception</div><div class="line">  -- 捕获异常</div><div class="line">  when others then</div><div class="line">    --WHEN excption_name THEN ...WHEN OTHERS THEN ...</div><div class="line">    rollback;</div><div class="line">    v_errcode := SQLCODE; --出错代码</div><div class="line">    v_errmsg  := v_errmsg || ', [msg]<span class="string">' || SQLERRM; --出错信息</span></div><div class="line">    insert into yimp_errorlog</div><div class="line">    values</div><div class="line">      (seq_errorlog_id.nextval, v_errcode, v_errmsg, sysdate);</div><div class="line">    commit;</div><div class="line">end;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul>
<li><code>RAISE_APPLICATION_ERROR</code> 抛出异常函数，该函数是将应用程序专有的错误从服务器端转达到客户端应用程序(其他机器上的SQLPLUS或者前台开发语言)</li>
<li><code>PROCEDURE RAISE_APPLICATION_ERROR( error_number_in IN NUMBER, error_msg_in IN VARCHAR2);</code><ul>
<li><code>error_number_in</code>: 自定义的错误码，容许从 -20000 到 -20999 之间，这样就不会与 ORACLE 的任何错误代码发生冲突。</li>
<li><code>error_msg_in</code>: 长度不能超过 2k，否则截取 2k</li>
</ul>
</li>
</ul>
<h2 id="oracle函数"><a href="#oracle函数" class="headerlink" title="oracle函数"></a>oracle函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">declare</span> </div><div class="line">  i <span class="built_in">integer</span>;</div><div class="line"><span class="keyword">begin</span></div><div class="line">  dbms_output.put_line(<span class="string">'hello world'</span>);</div><div class="line">  p_up_user_role();</div><div class="line"><span class="keyword">end</span>;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Mysql存储过程调试工具：&lt;code&gt;dbForge Studio for MySQL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="oracle" scheme="http://blog.aezo.cn/tags/oracle/"/>
    
      <category term="mysql" scheme="http://blog.aezo.cn/tags/mysql/"/>
    
      <category term="procedure" scheme="http://blog.aezo.cn/tags/procedure/"/>
    
  </entry>
  
  <entry>
    <title>Excel VBA</title>
    <link href="http://blog.aezo.cn/2017/08/20/lang/excel-vba/"/>
    <id>http://blog.aezo.cn/2017/08/20/lang/excel-vba/</id>
    <published>2017-08-20T12:03:00.000Z</published>
    <updated>2017-10-18T11:17:10.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><code>VBA</code>：Visual Basic for Applications是Visual Basic的一种宏语言</li>
<li><a href="https://msdn.microsoft.com/zh-cn/library/ee861528.aspx" target="_blank" rel="external">官方VBA文档</a>、<a href="https://support.office.com/zh-cn/excel" target="_blank" rel="external">官方Excel帮助</a>、<a href="https://docs.microsoft.com/zh-cn/dotnet/visual-basic/index" target="_blank" rel="external">官方VB文档</a></li>
<li><a href="http://www.yiibai.com/vba/vba_for_loop.html" target="_blank" rel="external">基础语法</a>、<a href="http://www.51zxw.net/list.aspx?cid=539" target="_blank" rel="external">51自学视频(后面几章收费)</a></li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li><p>不会写法的可以使用录制宏，然后进行代码查看</p>
</li>
<li><p><code>FormulaR1C1</code>是公式输入方法</p>
<ul>
<li>有中括号是相对于选定单元格的相对偏移量，”-“为向左或向上偏移，正数为右或下偏移。 无中括号为相对于选定单元格的绝对偏移量，没有负数。”R”和”C”对应行和列”</li>
<li>如：C1单元格为”=A1+B1”。Range(“C1”).FormulaR1C1 = “=RC[-2]+RC[-1]”</li>
<li>如：C1单元格为”=A2+E3” Range(“C1”).FormulaR1C1 = “=R[1]C[-2]+R[2]C[2]”</li>
</ul>
</li>
<li><code>Selection.AutoFill Destination:=fillRange, Type:=xlFillDefault</code> 自动填充<ul>
<li>此处<code>Selection</code>选中的Range即sourceRange(源)，根据sourceRange进行fillRange的填充。此时fillRange必须包含sourceRange。sourceRange中可以有公式等</li>
</ul>
</li>
<li><code>ActiveWindow.SmallScroll Down:=6</code>等是对窗口进行移动，不影响计算</li>
</ul>
<h2 id="宏界面配置"><a href="#宏界面配置" class="headerlink" title="宏界面配置"></a>宏界面配置</h2><ul>
<li>设置字体：工具-选项-编辑器格式-标准字体-Consolas (西方)</li>
<li>设置语法检测：工具-选项-编辑器-自动语法检测去勾选。防止编辑时弹框提示语法错误，运行时语法错误会提示</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="Delat-Ct法计算候选基因稳定性"><a href="#Delat-Ct法计算候选基因稳定性" class="headerlink" title="Delat Ct法计算候选基因稳定性"></a>Delat Ct法计算候选基因稳定性</h3><blockquote>
<p>此算法是临时帮朋友写的，可能与实际算法不符，仅供参考</p>
</blockquote>
<ul>
<li>简介：这是一种常见的算法，叫做Delat Ct法计算候选基因稳定性。最后得到的是每个基因的mean SD值，首先计算两个基因的ΔCt值，再计算其ΔCt值的方差，最后得到该基因与其余每个基因ΔCt值的方差的平均值。</li>
<li>excel表格数据如下：</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>beta-Actin</th>
<th>Tubulin-alpha</th>
<th>EF1A</th>
<th>GAPDH</th>
<th>Tubulin-beta</th>
<th>18S rRNA  </th>
</tr>
</thead>
<tbody>
<tr>
<td>卵子</td>
<td>23.82</td>
<td>23.82</td>
<td>23.93</td>
<td>25.48</td>
<td>25.76</td>
<td>17.67</td>
</tr>
<tr>
<td>受精后</td>
<td>22.47</td>
<td>23.94</td>
<td>22.51</td>
<td>23.31</td>
<td>23.91</td>
<td>13.74  </td>
</tr>
<tr>
<td>2cell</td>
<td>23.29</td>
<td>24.78</td>
<td>22.83</td>
<td>24.23</td>
<td>25.05</td>
<td>15.35</td>
</tr>
<tr>
<td>4cell</td>
<td>22.95</td>
<td>24.84</td>
<td>22.51</td>
<td>23.39</td>
<td>24.54</td>
<td>14.6</td>
</tr>
<tr>
<td>8cell</td>
<td>21.75</td>
<td>23.77</td>
<td>21.8</td>
<td>22.58</td>
<td>23.66</td>
<td>13.22</td>
</tr>
<tr>
<td>16cell</td>
<td>21.82</td>
<td>24.21</td>
<td>22.49</td>
<td>23.45</td>
<td>23.8</td>
<td>12.73</td>
</tr>
<tr>
<td>32cell</td>
<td>21.92</td>
<td>24.62</td>
<td>22.33</td>
<td>23.74</td>
<td>21.12</td>
<td>13.95</td>
</tr>
<tr>
<td>64cell</td>
<td>22.92</td>
<td>24.83</td>
<td>22.19</td>
<td>24.39</td>
<td>24.9</td>
<td>15.76</td>
</tr>
<tr>
<td>多cell</td>
<td>21.62</td>
<td>24.04</td>
<td>21.26</td>
<td>22.66</td>
<td>24.04</td>
<td>12.63</td>
</tr>
<tr>
<td>高囊胚1</td>
<td>23.06</td>
<td>25.08</td>
<td>23.08</td>
<td>24.45</td>
<td>25.09</td>
<td>15.17</td>
</tr>
<tr>
<td>高囊胚2</td>
<td>22.98</td>
<td>26.27</td>
<td>22.22</td>
<td>25.04</td>
<td>25.72</td>
<td>15.55</td>
</tr>
<tr>
<td>低囊胚</td>
<td>23</td>
<td>26.24</td>
<td>22.03</td>
<td>26.31</td>
<td>26.49</td>
<td>17.04</td>
</tr>
<tr>
<td>原肠胚前期</td>
<td>21.23</td>
<td>25.46</td>
<td>20</td>
<td>26.46</td>
<td>25.87</td>
<td>14.12</td>
</tr>
<tr>
<td>原肠胚中期</td>
<td>20.23</td>
<td>24.6</td>
<td>19.52</td>
<td>26.57</td>
<td>25.81</td>
<td>14.03</td>
</tr>
<tr>
<td>原肠胚后期</td>
<td>19.56</td>
<td>22.77</td>
<td>18.5</td>
<td>26.3</td>
<td>24.91</td>
<td>12.83</td>
</tr>
<tr>
<td>神经</td>
<td>19.46</td>
<td>23.87</td>
<td>17.66</td>
<td>26.82</td>
<td>24.58</td>
<td>15.86</td>
</tr>
<tr>
<td>肌节</td>
<td>18.03</td>
<td>22.7</td>
<td>16.48</td>
<td>23.35</td>
<td>23.79</td>
<td>12.86</td>
</tr>
<tr>
<td>器官形成期1</td>
<td>18.47</td>
<td>23.71</td>
<td>17.26</td>
<td>24.89</td>
<td>24.21</td>
<td>15.3</td>
</tr>
<tr>
<td>器官形成期2</td>
<td>18.65</td>
<td>23.6</td>
<td>17.83</td>
<td>23.94</td>
<td>23.74</td>
<td>15.92</td>
</tr>
<tr>
<td>器官形成期3</td>
<td>18.14</td>
<td>23.24</td>
<td>16.12</td>
<td>23.66</td>
<td>23.82</td>
<td>16</td>
</tr>
<tr>
<td>破膜</td>
<td>17.82</td>
<td>22.89</td>
<td>17.45</td>
<td>5.44</td>
<td>23.92</td>
<td>13.92</td>
</tr>
<tr>
<td>仔鱼</td>
<td>16.97</td>
<td>22.65</td>
<td>16.15</td>
<td>20.69</td>
<td>22.86</td>
<td>11.55</td>
</tr>
</tbody>
</table>
<ul>
<li><p>效果如下</p>
<p>  <img src="/data/images/2017/08/delacCt.png" alt="效果图"></p>
</li>
<li><p>VBA处理源码(效率可能较低)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Sub delacCt()</div><div class="line">&apos;</div><div class="line">&apos; Delac Ct算法计算基因mean SD 宏</div><div class="line">&apos;</div><div class="line">    Dim rows As Integer</div><div class="line">    Dim columns As Integer</div><div class="line">    Dim rangeItem1 As range</div><div class="line">    Dim rangeItem2 As range</div><div class="line">    Dim targetCellRange1 As range</div><div class="line">    Dim targetCellRange2 As range</div><div class="line">    Dim isStart As Boolean</div><div class="line"></div><div class="line">    &apos;dataCell为一个Range对象</div><div class="line">    Set myRange = Application.InputBox(prompt:=&quot;按住Shift选择数据所在区域（包含行标题不包含列标题）&quot;, Type:=8)</div><div class="line">    &apos;Set myRange = range(&quot;B1:D23&quot;)</div><div class="line"></div><div class="line">    &apos;获取此区域的总行数和总列数</div><div class="line">    rows = myRange.rows.count</div><div class="line">    columns = myRange.columns.count</div><div class="line"></div><div class="line">    &apos;循环其中两个基因</div><div class="line">    With myRange</div><div class="line">        For i = 1 To columns Step 1</div><div class="line">            &apos;每一行的方差</div><div class="line">            Dim total As Double</div><div class="line">            total = 0</div><div class="line"></div><div class="line">            For j = i + 1 To columns Step 1</div><div class="line">                &apos;此处.代表myRange(With中)</div><div class="line">                Set rangeItem1 = .columns(i)</div><div class="line">                Set rangeItem2 = .columns(j)</div><div class="line"></div><div class="line">                Dim cellRow As Integer</div><div class="line">                Dim cellColumn As Integer</div><div class="line">                cellRow = i * (rows + 3) + 1</div><div class="line">                cellColumn = (j - 2) * 4 + 2</div><div class="line"></div><div class="line">                &apos;目标单元格</div><div class="line">                Set targetCellRange1 = Worksheets(1).Cells(cellRow, cellColumn)</div><div class="line">                Set targetCellRange2 = Worksheets(1).Cells(cellRow, cellColumn + 1)</div><div class="line"></div><div class="line">                &apos;复制并粘贴其中某两个基因</div><div class="line">                Call geneCopy(rangeItem1, targetCellRange1)</div><div class="line">                Call geneCopy(rangeItem2, targetCellRange2)</div><div class="line"></div><div class="line">                &apos;计算方差</div><div class="line">                total = total + geneCalculate(range(targetCellRange1, targetCellRange1.Offset(rows - 1, 0)))</div><div class="line">            Next</div><div class="line"></div><div class="line">            &apos; 计算方差平均值</div><div class="line">            If i &lt; columns Then</div><div class="line">                &apos;MsgBox total / (columns - i)</div><div class="line">                Dim row As Integer</div><div class="line">                &apos;方差所在行</div><div class="line">                row = targetCellRange1.Offset(rows - 1, 0).row + 1</div><div class="line"></div><div class="line">                Worksheets(1).range(&quot;A&quot; &amp; row).Value = &quot;SD&quot;</div><div class="line">                Worksheets(1).range(&quot;A&quot; &amp; row + 1).Value = &quot;mean SD&quot;</div><div class="line">                Worksheets(1).range(&quot;B&quot; &amp; row + 1).Value = total / (columns - i)</div><div class="line">            End If</div><div class="line">        Next</div><div class="line">    End With</div><div class="line"></div><div class="line">    &apos;ActiveWorkbook.Save</div><div class="line">End Sub</div><div class="line"></div><div class="line">Private Sub geneCopy(rangeItem As range, targetCellRange As range)</div><div class="line">&apos;</div><div class="line">&apos; 复制并粘贴其中某两个基因</div><div class="line">&apos;</div><div class="line">    rangeItem.Select</div><div class="line">    Selection.Copy</div><div class="line"></div><div class="line">    targetCellRange.Select</div><div class="line">    ActiveSheet.Paste</div><div class="line">End Sub</div><div class="line"></div><div class="line">Private Function geneCalculate(targetRange1 As range) As Double</div><div class="line">&apos;</div><div class="line">&apos; 对两个基因进行计算</div><div class="line">&apos;</div><div class="line">    &apos;求差值</div><div class="line">    Call subValue(targetRange1)</div><div class="line"></div><div class="line">    &apos;求方差(targetRange1.Row是获取该单元格得在Sheet中是第几行)</div><div class="line">    geneCalculate = varianceValue(range(Worksheets(1).Cells(targetRange1.row + 1, targetRange1.Column + 2), _</div><div class="line">            Worksheets(1).Cells(targetRange1.row + targetRange1.rows.count - 1, targetRange1.Column + 2)))</div><div class="line"></div><div class="line">    &apos;MsgBox geneCalculate</div><div class="line">End Function</div><div class="line"></div><div class="line">Private Sub subValue(rangeItem1 As range)</div><div class="line">&apos;</div><div class="line">&apos; 求差值</div><div class="line">&apos;</div><div class="line">    Dim sourceRange As range</div><div class="line">    Dim fillRange As range</div><div class="line"></div><div class="line">    Set sourceRange = Worksheets(1).Cells(rangeItem1.row + 1, rangeItem1.Column + 2)</div><div class="line">    sourceRange.Select</div><div class="line">    ActiveCell.FormulaR1C1 = &quot;=RC[-2]-RC[-1]&quot;</div><div class="line"></div><div class="line">    Set fillRange = range(Worksheets(1).Cells(rangeItem1.row + 1, rangeItem1.Column + 2), _</div><div class="line">                            Worksheets(1).Cells(rangeItem1.row + rangeItem1.rows.count - 1, rangeItem1.Column + 2))</div><div class="line"></div><div class="line">    &apos;此处根据选中的sourceRange进行fillRange的填充，fillRange必须包含sourceRange</div><div class="line">    Selection.AutoFill Destination:=fillRange, Type:=xlFillDefault</div><div class="line">End Sub</div><div class="line"></div><div class="line">Private Function varianceValue(range As range) As Double</div><div class="line">&apos;</div><div class="line">&apos; 求方差</div><div class="line">&apos;</div><div class="line">    Dim targetCellRange As range</div><div class="line"></div><div class="line">    Set targetCellRange = Worksheets(1).Cells(range.row + range.rows.count, range.Column)</div><div class="line">    targetCellRange.Select</div><div class="line"></div><div class="line">    targetCellRange.FormulaR1C1 = &quot;=SQRT(VAR(R[-22]C[0]:R[-1]C[0]))&quot;</div><div class="line"></div><div class="line">    &apos;返回值</div><div class="line">    varianceValue = targetCellRange.Value</div><div class="line">End Function</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VBA&lt;/code&gt;：Visual Basic for Applications是Visual Basic的一种宏语
    
    </summary>
    
      <category term="lang" scheme="http://blog.aezo.cn/categories/lang/"/>
    
    
      <category term="excel" scheme="http://blog.aezo.cn/tags/excel/"/>
    
      <category term="vb" scheme="http://blog.aezo.cn/tags/vb/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud</title>
    <link href="http://blog.aezo.cn/2017/08/05/java/springcloud/"/>
    <id>http://blog.aezo.cn/2017/08/05/java/springcloud/</id>
    <published>2017-08-05T11:36:00.000Z</published>
    <updated>2017-08-05T11:36:36.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>架构演进<ol>
<li>单体架构：复杂度逐渐变高、部署速度慢、阻碍技术创新、无法按需伸缩</li>
<li>SOA <a href="[SOA和微服务架构的区别](https://www.zhihu.com/question/37808426)">^1</a></li>
<li>微服务</li>
</ol>
</li>
<li>微服务特点<ul>
<li>微服务可独立运行在自己的进程里</li>
<li>一系列独立运行的微服务构成整个系统</li>
<li>每个服务独立开发维护</li>
<li>微服务之间通过REST API或RPC等方式通信</li>
<li>优点：易于开发和维护，启动快，技术栈不受限制，按需伸缩，DevOps</li>
<li>挑战：运维要求较高，分布式的复杂性，接口调整成本高</li>
</ul>
</li>
<li>微服务设计原则：单一职责原则、服务自治原则、轻量级通信原则、接口明确原则</li>
<li>微服务开发框架：<code>Spring Cloud</code>、<code>Dubbo</code>、<code>Dropwizard</code>、<code>Consul</code>等</li>
<li>Spring Cloud是基于Spring Boot的用于快速构建分布式系统工具集</li>
<li>Spring Cloud特点：约定优于配置、开箱即用，快速启动、轻量级组件、组件丰富、选型中立</li>
<li>本文相关软件：JDK: 1.8，SpringCloud: Dalston.SR1</li>
</ul>
<h2 id="微服务构建"><a href="#微服务构建" class="headerlink" title="微服务构建"></a>微服务构建</h2><ul>
<li>服务提供者、服务消费者</li>
<li>服务消费者中通过restTemp调用服务提供者提供的服务<ul>
<li>如：<code>User user = this.restTemplate.getForObject(&quot;http://localhost:7900/simple/&quot; + id, User.class);</code></li>
</ul>
</li>
</ul>
<h2 id="Eureka服务发现"><a href="#Eureka服务发现" class="headerlink" title="Eureka服务发现"></a>Eureka服务发现</h2><ul>
<li><p>服务注册与发现</p>
<p>  <img src="/data/images/2017/07/服务注册与发现.png" alt="服务注册与发现"></p>
<ul>
<li>服务发现方式 <a href="[服务发现的可行方案以及实践案例](http://blog.daocloud.io/microservices-4/)">^2</a><ul>
<li>客户端发现：Eureka、Zk</li>
<li>服务端发现：Consul + nginx</li>
</ul>
</li>
<li>服务注册表是一个记录当前可用服务实例的网络信息的数据库，是服务发现机制的核心。服务注册表提供查询API和管理API，使用查询API获得可用的服务实例，使用管理API实现注册和注销</li>
</ul>
</li>
<li><p>简介：Eureka是<code>Netflix</code>开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。Spring Cloud将它集成在其子项目<code>spring-cloud-netflix</code>中，以实现Spring Cloud的服务发现功能</p>
</li>
<li><p>架构图</p>
<p>  <img src="/data/images/2017/07/eureka.png" alt="eureka"></p>
<ul>
<li>AWS概念：us-east-1c、us-east-1d等是zone，它们都属于us-east-1这个region</li>
<li>在应用启动后，将会向Eureka Server发送心跳（默认周期为30秒）。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个服务节点移除（默认90秒）</li>
<li>Eureka还提供了客户端缓存的机制，即使所有的Eureka Server都挂掉，客户端依然可以利用缓存中的信息消费其他服务的API</li>
</ul>
</li>
<li><p>eureka server</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- 用于注册中心访问账号认证，非必须 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在Application.java中加注解<code>@EnableEurekaServer</code></p>
</li>
<li><p>application.yml配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8761</span></div><div class="line"></div><div class="line"><span class="comment"># 引入了spring-boot-starter-security则会默认开启认证</span></div><div class="line"><span class="attr">security:</span></div><div class="line"><span class="attr">  basic:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">true</span> <span class="comment">#开启eureka后台登录认证</span></div><div class="line">  <span class="comment"># 不配置user，则默认的用户名为user，密码为自动生成(在控制台可查看)</span></div><div class="line"><span class="attr">  user:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">    password:</span> <span class="string">smalle</span></div><div class="line"></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  client:</span></div><div class="line">    <span class="comment"># eureka server默认也是一个eureka client.以下两行仅将此App当成eureka server，不当成eureka client(由于是单点测试)</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></div><div class="line">    <span class="comment"># 将eureka注册到哪个url</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://user:password@$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></div></pre></td></tr></table></figure>
</li>
<li><p>后台地址：<code>http://localhost:8761</code></p>
</li>
</ul>
</li>
<li><p>eureka client</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在Application.java中加注解<code>@EnableEurekaClient</code></p>
</li>
<li><p>application.yml配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eureka客户端配置</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://smalle:smalle@localhost:8761/eureka/</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line">    <span class="comment"># 启用ip访问eureka server(默认是使用主机名进行访问)</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></div><div class="line">    <span class="comment"># 实例id</span></div><div class="line"><span class="attr">    instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>示例请看源码</p>
<ul>
<li>示例中使用H2数据库，IDEA连接方式：path:<code>mem:testdb</code>, user:<code>sa</code>, password:空, url:<code>jdbc:h2:mem:testdb</code>, 使用<code>Embedded</code>或<code>In-memory</code>方式连接</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><ul>
<li><p>简介</p>
<ul>
<li>Ribbon是Netflix发布的云中间层服务开源项目，其主要功能是提供客户端侧负载均衡算法。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，Ribbon是一个客户端负载均衡器，我们可以在配置文件中列出Load Balancer后面所有的机器，Ribbon会自动基于某种规则（如简单轮询，随机连接等）去连接这些机器，我们也很容易使用Ribbon实现自定义的负载均衡算法。</li>
<li><p>Eureka与Ribbon连用</p>
<p>  <img src="/data/images/2017/07/eureka-ribbon.png" alt="eureka-ribbon"></p>
<ul>
<li>Ribbon工作时分为两步：第一步先选择 Eureka Server, 它优先选择在同一个Zone且负载较少的Server；第二步再根据用户指定的策略，在从Server取到的服务注册列表中选择一个地址。其中Ribbon提供了多种策略，例如轮询round robin、随机Random、根据响应时间加权等</li>
</ul>
</li>
</ul>
</li>
<li><p>基本使用</p>
<ul>
<li>引入依赖：group：<code>org.springframework.cloud</code>，artifact id：<code>spring-cloud-starter-ribbon</code><ul>
<li>如果引入了<code>spring-cloud-starter-eureka</code>中默认引入了，此时可无需再引入</li>
</ul>
</li>
<li><p>在restTemplate对应的Bean上注解<code>@LoadBalanced</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@LoadBalanced</span> <span class="comment">// 使用ribbon实现客户端负载均衡</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>备注：此时需要启动多个服务提供者进行测试，IDEA中：</p>
<ul>
<li>可以先启动一个后再将端口改掉再启动另外一个</li>
<li>(推荐) <code>Eidt Configurations</code>再配置一个Spring boot的启动项，配置时将<code>Spring Boot Settings</code> - <code>Override parameters</code>添加一个参数<code>server.port=8080</code></li>
</ul>
</li>
</ul>
</li>
<li><p>自定义负载均衡策略</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># robbin负载均衡策略优先级：配置文件策略 &gt; 代码级别策略 &gt; ribbon默认策略(com.netflix.loadbalancer.ZoneAvoidanceRule)</span></div><div class="line"><span class="attr">provider-user:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line">      <span class="comment"># 当访问服务provider-user时采用随机策略RandomRule，此时访问其他服务时仍然为默认策略ZoneAvoidanceRule；WeightedResponseTimeRule响应时间加权策略</span></div><div class="line"><span class="attr">      NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></div></pre></td></tr></table></figure>
</li>
<li><p>脱离Eureka的配置，此时仍然可以运行Eureka，但是不从eureka中获取服务地址，而是从配置文件中读取</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">stores:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line"><span class="attr">    listOfServers:</span> <span class="string">example.com,aezo.cn</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Feign声明式服务调用"><a href="#Feign声明式服务调用" class="headerlink" title="Feign声明式服务调用"></a>Feign声明式服务调用</h2><ul>
<li>简介</li>
<li><p>基本使用(服务消费者)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--Feign声明式服务调用--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类加注解<code>@EnableFeignClients</code></p>
</li>
<li><p>定义FeignClient接口Bean</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 此服务消费者需要调用的服务声明</span></div><div class="line"><span class="meta">@FeignClient</span>(<span class="string">"provider-user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</div><div class="line">    <span class="comment">// Feign不支持@GetMapping, @PathVariable必须指明参数值</span></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/simple/&#123;id&#125;"</span>)</div><div class="line">    <span class="function">User <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, value = <span class="string">"/feign-post"</span>)</div><div class="line">    <span class="function">User <span class="title">postFeignUser</span><span class="params">(@RequestBody User user)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在controller中直接调用接口中方法(此时不直接调用restTemplate)</p>
</li>
</ul>
</li>
</ul>
<h2 id="Hystrix服务容错保护-断路器"><a href="#Hystrix服务容错保护-断路器" class="headerlink" title="Hystrix服务容错保护(断路器)"></a>Hystrix服务容错保护(断路器)</h2><ul>
<li>简介</li>
<li><p>基本使用(服务消费者)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--服务容错保护(断路器) Hystrix--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类加注解<code>@EnableCircuitBreaker</code></p>
</li>
<li><p>声明断路后回调函数</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"findByIdFallBack"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    <span class="comment">// virtual ip: 服务的spring.application.name</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://provider-user/simple/"</span> + id, User.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当服务调用失败或者超时则回调此函数. 此函数参数和返回值必须和调用函数一致</span></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByIdFallBack</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    System.out.println(id + <span class="string">", error[hystrix]"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Zuul-API-GateWay：网关"><a href="#Zuul-API-GateWay：网关" class="headerlink" title="Zuul (API GateWay：网关)"></a>Zuul (API GateWay：网关)</h2><ul>
<li>简介</li>
<li><p>基本使用</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- API网关。包含actuator、hystrix、ribbon --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类声明<code>@EnableZuulProxy</code></p>
</li>
<li><p>基础配置application.yml</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line">  <span class="comment"># 忽略表达式。当遇到路径中有admin的不进行路由</span></div><div class="line">  <span class="comment"># ignored-patterns: /**/admin/**</span></div><div class="line">  <span class="comment"># 路由前缀</span></div><div class="line">  <span class="comment"># prefix: /api</span></div><div class="line">  <span class="comment"># zuul默认会过滤路由前缀(strip-prefix=true)，此处是关闭此过滤</span></div><div class="line">  <span class="comment"># strip-prefix: false</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line">    <span class="comment"># 通配符(ant规范)：? 代表一个任意字符，* 代表多个任意字符，** 代表多个任意字符且支持多级目录</span></div><div class="line">    <span class="comment"># 此处路径在配置文件中越靠前的约优先（系统将所有路径放到LinkedHashMap中，当匹配到一个后就终止匹配）</span></div><div class="line">    <span class="comment"># 现在可以同时访问http://localhost:5555/consumer-movie-ribbon/movie/1 和 http://localhost:5555/api-movie/movie/1</span></div><div class="line">    <span class="comment"># api-movie为规则名, 可通过spring cloud config进行动态加载(覆盖)</span></div><div class="line"><span class="attr">    api-movie:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-movie/**</span></div><div class="line">      <span class="comment"># 从eureka中获取此服务(spring.application.name)的地址(面向服务的路由)</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">consumer-movie-ribbon</span></div><div class="line"><span class="attr">    api-user:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-user/**</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">provider-user</span></div><div class="line">    <span class="comment"># 本地跳转(当访问/api-local/**的时候，则会转到当前应用的/local/**的地址)</span></div><div class="line">    <span class="comment"># api-local:</span></div><div class="line">    <span class="comment">#   path: /api-local/**</span></div><div class="line">    <span class="comment">#   url: forward:/local</span></div><div class="line">    <span class="comment"># 禁用过滤器：zuul.&lt;FilterClassName&gt;.&lt;filterType&gt;.disable=true</span></div><div class="line">    <span class="comment"># AccessFilter:</span></div><div class="line">    <span class="comment">#   pre:</span></div><div class="line">    <span class="comment">#     disable: true</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自定义路由规则</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> PatternServiceRouteMapper <span class="title">serviceRouteMapper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 将serviceName-v1映射成/v1/serviceName. 未匹配到则按照原始的</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PatternServiceRouteMapper(</div><div class="line">            <span class="string">"(?&lt;name&gt;^.+)-(?&lt;version&gt;v.+$)"</span>,</div><div class="line">            <span class="string">"$&#123;version&#125;/$&#123;name&#125;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>过滤器</p>
<ul>
<li>Zuul过滤器核心处理器(<code>com.netflix.zuul.FilterProcessor</code>)</li>
<li>核心过滤器处理(对应包<code>org.springframework.cloud.netflix.zuul.filters</code>)</li>
<li><p>自定义过滤器</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(AccessFilter.class);</div><div class="line"></div><div class="line">    <span class="comment">// 过滤器类型，决定过滤器在请求的哪个生命周期中执行</span></div><div class="line">    <span class="comment">// pre：表示请求在路由之前执行</span></div><div class="line">    <span class="comment">// routing：在路由请求时被执行(调用真实服务应用时)</span></div><div class="line">    <span class="comment">// post：路由完成(服务调用完成)被执行</span></div><div class="line">    <span class="comment">// error：出错时执行</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 多个过滤器时，控制过滤器的执行顺序（数值越小越优先）</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断该过滤器是否需要被执行(true需要执行)，可根据实际情况进行范围限定</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 过滤器的具体逻辑</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        RequestContext ctx = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = ctx.getRequest();</div><div class="line"></div><div class="line">        logger.info(<span class="string">"send &#123;&#125; request to &#123;&#125;"</span>, request.getMethod(), request.getRequestURL().toString()); <span class="comment">// send GET request to http://localhost:5555/api-movie/movie/1</span></div><div class="line"></div><div class="line">        Object accessToken = request.getParameter(<span class="string">"accessToken"</span>);</div><div class="line">        <span class="keyword">if</span>(accessToken == <span class="keyword">null</span>) &#123;</div><div class="line">            logger.warn(<span class="string">"access token is empty, add parameter like: accessToken=smalle"</span>);</div><div class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>); <span class="comment">// 令zuul过滤此请求，不进行路由</span></div><div class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</div><div class="line">            ctx.setResponseBody(<span class="string">"zuul filter"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        logger.info(<span class="string">"access token ok"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 测试异常过滤器（org.springframework.cloud.netflix.zuul.filters.post.SendErrorFilter）</span></div><div class="line">        <span class="comment">// doSomteing();</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomteing</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"run error"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自定义异常信息：出现异常会forward到<code>/error</code>的端点，<code>/error</code>端点的实现来源于Spring Boot的<code>org.springframework.boot.autoconfigure.web.BasicErrorController</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最好使用postman等工具测试</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</div><div class="line">        map.remove(<span class="string">"exception"</span>); <span class="comment">// 移除exception信息，客户端将看不到此信息</span></div><div class="line">        map.put(<span class="string">"myAttr"</span>, <span class="string">"hello"</span>);</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>动态路由：请见分布式配置中心(Config)部分</p>
</li>
</ul>
<h2 id="Config-分布式配置中心-Spring-Cloud-Config"><a href="#Config-分布式配置中心-Spring-Cloud-Config" class="headerlink" title="Config 分布式配置中心(Spring Cloud Config)"></a>Config 分布式配置中心(Spring Cloud Config)</h2><ul>
<li><p>配置中心(Config服务器端)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- 配置中心 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- 用于配置中心访问账号认证 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!--向eureka注册，服务化配置中心--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类添加<code>@EnableConfigServer</code>，开启服务发现则还要加<code>@EnableDiscoveryClient</code></p>
</li>
<li><p>配置文件</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      server:</span></div><div class="line"><span class="attr">        git:</span></div><div class="line">          <span class="comment"># 可以使用占位符&#123;application&#125;、&#123;profile&#125;、&#123;label&#125;</span></div><div class="line"><span class="attr">          uri:</span> <span class="attr">https://git.oschina.net/smalle/spring-cloud-config-test.git</span></div><div class="line">          <span class="comment"># 搜索此git仓库的配置文件目录</span></div><div class="line"><span class="attr">          search-paths:</span> <span class="string">config-repo</span></div><div class="line"><span class="attr">          username:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">          password:</span> <span class="string">aezocn</span></div><div class="line"></div><div class="line"><span class="attr">  server:</span></div><div class="line"><span class="attr">    port:</span> <span class="number">7000</span></div><div class="line"></div><div class="line"><span class="attr">  security:</span></div><div class="line"><span class="attr">    basic:</span></div><div class="line"><span class="attr">      enabled:</span> <span class="literal">true</span> <span class="comment"># 开启权限验证(默认是false)</span></div><div class="line"><span class="attr">    user:</span></div><div class="line"><span class="attr">      name:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">      password:</span> <span class="string">smalle</span></div><div class="line"></div><div class="line">  <span class="comment"># eureka客户端配置</span></div><div class="line"><span class="attr">  eureka:</span></div><div class="line"><span class="attr">    client:</span></div><div class="line"><span class="attr">      serviceUrl:</span></div><div class="line"><span class="attr">        defaultZone:</span> <span class="attr">http://smalle:smalle@localhost:8761/eureka/</span></div><div class="line"><span class="attr">    instance:</span></div><div class="line">      <span class="comment"># 启用ip访问</span></div><div class="line"><span class="attr">      prefer-ip-address:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在git仓库的config-repo目录下添加配置文件: <code>consumer-movie-ribbon.yml</code>(写如配置如：from: git-default-1.0. 下同)、<code>consumer-movie-ribbon-dev.yml</code>、<code>consumer-movie-ribbon-test.yml</code>、<code>consumer-movie-ribbon-prod.yml</code>，并写入参数</p>
</li>
<li>访问：<code>http://localhost:7000/consumer-movie-ribbon/prod/master</code>即可获取应用为<code>consumer-movie-ribbon</code>，profile为<code>prod</code>，git分支为<code>master</code>的配置数据(<code>/{application}/{profile}/{label}</code>)<ul>
<li>某application对应的配置命名必须为<code>{application}-{profile}.yml</code>，其中<code>{profile}</code>和<code>{label}</code>可在对应的application的<code>bootstrap.yml</code>中指定</li>
<li>访问配置路径后，程序默认会将配置数据下载到本地，当git仓库不可用时则获取本地的缓存数据</li>
<li>支持git/svn/本地文件等</li>
</ul>
</li>
</ul>
</li>
<li><p>客户端配置映射</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- 配置中心客户端 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加<code>bootstrap.yml</code>配置文件(不能放在application.yml中)</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bootstrap.yml其优先级高于application.yml</span></div><div class="line"><span class="attr">spring:</span></div><div class="line">  <span class="comment"># application:</span></div><div class="line">  <span class="comment">#  name: consumer-movie-ribbon</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line">      <span class="comment"># (1) config server地址</span></div><div class="line">      <span class="comment"># uri: http://localhost:7000/</span></div><div class="line">      <span class="comment"># (2) 配置中心实行服务化(向eureka注册了自己)，此处要开启服务发现，并指明配置中心服务id</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">        service-id:</span> <span class="string">config-server</span></div><div class="line"><span class="attr">      profile:</span> <span class="string">prod</span></div><div class="line"><span class="attr">      label:</span> <span class="string">master</span></div><div class="line">      <span class="comment"># 如果配置中心开启了权限验证，此处填写相应的用户名和密码</span></div><div class="line"><span class="attr">      username:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">      password:</span> <span class="string">smalle</span></div><div class="line"></div><div class="line"><span class="comment"># eureka客户端配置(使用了spring cloud config, 则eureka的配置必须写在bootstrap.yml中，否则报找不到config server )</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://smalle:smalle@localhost:8761/eureka/</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line">    <span class="comment"># 启用ip访问</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>测试程序</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @RefreshScope // 之后刷新config后可重新注入值</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigController</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;from:none&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String from;</div><div class="line"></div><div class="line">    <span class="comment">// 测试从配置中心获取配置数据，访问http://localhost:9000/from</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/from"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">from</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.from; <span class="comment">// 会从git仓库中读取配置数据</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>动态刷新配置(可获取最新配置信息的git提交)</p>
<ul>
<li>config客户端重启会刷新配置(重新注入配置信息)</li>
<li>动态刷新<ul>
<li>在需要动态加载配置的Bean上加注解<code>@RefreshScope</code></li>
<li>给 <strong>config client</strong> 加入权限验证依赖(<code>org.springframework.boot/spring-boot-starter-security</code>)，并在对应的application.yml中开启验证<ul>
<li>否则访问<code>/refresh</code>端点会失败，报错：<code>Consider adding Spring Security or set &#39;management.security.enabled&#39; to false.</code>(需要加入Spring Security或者关闭端点验证)</li>
</ul>
</li>
<li>对应的需要注入配置的类加<code>@RefreshScope</code></li>
<li><code>POST</code>请求<code>http://localhost:9000/refresh</code>(将Postman的Authorization选择Basic Auth和输入用户名/密码)</li>
<li>再次访问config client的 <a href="http://localhost:9000/from" target="_blank" rel="external">http://localhost:9000/from</a> 即可获取最新git提交的数据(由于开启了验证，所有端点都需要输入用户名密码)<ul>
<li>得到如<code>[&quot;from&quot;]</code>的结果(from配置文件中改变的key)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>动态加载网关配置</p>
<ul>
<li>在<code>api-gateway-zuul</code>服务中同上述一样加<code>bootstrap.yml</code>，并对eureka和config server进行配置</li>
<li><p>在<code>application.yml</code>对</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line"><span class="attr">    api-movie:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-movie/**</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">consumer-movie-ribbon</span></div><div class="line">      <span class="comment"># 如果consumer-movie-ribbon服务开启了权限验证，则需要防止zuul将头信息(Cookie/Set-Cookie/Authorization)过滤掉了.(多用于API网关下的权限验证等服务)</span></div><div class="line">      <span class="comment"># 此方法是对指定规则开启自定义敏感头. 还有一中解决方法是设置路由敏感头为空(则不会过滤任何头信息)：zuul.routes.&lt;route&gt;.sensitiveHeaders=</span></div><div class="line"><span class="attr">      customSensitiveHeaders:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># 为了动态刷新配置(spring cloud config)，执行/refresh端点(此端点需要加入Spring Security或者关闭端点验证)</span></div><div class="line"><span class="attr">security:</span></div><div class="line"><span class="attr">  basic:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  user:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">    password:</span> <span class="string">smalle</span></div></pre></td></tr></table></figure>
</li>
<li><p>在git仓库中加入<code>api-gateway-zuul-prod.yml</code>等配置文件，并加入配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line"><span class="attr">    api-movie:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-movie-config/**</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">consumer-movie-ribbon</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>POST</code>请求<code>http://localhost:5555/refresh</code>即可刷新<code>api-gateway-zuul</code>的配置，因此动态加载了路由规则zuul.routes.api-movie</p>
</li>
</ul>
</li>
</ul>
<h2 id="Bus-消息总线-Spring-Cloud-Bus"><a href="#Bus-消息总线-Spring-Cloud-Bus" class="headerlink" title="Bus 消息总线(Spring Cloud Bus)"></a>Bus 消息总线(Spring Cloud Bus)</h2><ul>
<li>简介：使用轻量级的消息代理来构建一个公用的消息主题让系统中所有微服务都连接上来，由于该主题会被所有实例监听和消费所以称消息总线。各个实例都可以广播消息让其他实例消费。</li>
<li>是基于消息队列(如：ActiveMQ/Kafka/RabbitMQ/RocketMQ), Spring Cloud Bus暂时支持RabbitMQ和Kafka</li>
</ul>
<h3 id="以RabbitMQ为例"><a href="#以RabbitMQ为例" class="headerlink" title="以RabbitMQ为例"></a>以RabbitMQ为例</h3><blockquote>
<p>RabbitMQ是实现了高级消息队列协议(AMQP)的开源消息代理软件，也称为面向消息的中间件。后续操作需要先安装RabbitMQ服务。关于RabbitMQ在SpringBoot中的使用参考SpringBoot章节</p>
</blockquote>
<ul>
<li><p>在<code>config-server</code>和<code>consumer-movie-ribbon</code>两个服务中加入bus依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- 消息总线 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动RabbitMQ服务(如果未修改默认配置，则SpringBoot会自动连接。自定义配置如下)</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这是springboot的默认配置，可根据实际情况修改</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  rabbitmq:</span></div><div class="line"><span class="attr">    host:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">    port:</span> <span class="number">5672</span></div><div class="line"><span class="attr">    username:</span> <span class="string">guest</span></div><div class="line"><span class="attr">    password:</span> <span class="string">guest</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动一个<code>config-server</code>和两个<code>consumer-movie-ribbon</code>(9000、9002)</p>
</li>
<li>修改上述【分布式配置中心】的git管理的配置字段<code>from</code></li>
<li>刷新<code>config-server</code>：<code>POST</code>访问<a href="http://localhost:7000/bus/refresh" target="_blank" rel="external">http://localhost:7000/bus/refresh</a><ul>
<li><code>POST</code>访问<a href="http://localhost:7000/refresh" target="_blank" rel="external">http://localhost:7000/refresh</a> 只能刷新<code>config-server</code>本身</li>
<li><code>POST</code>访问<a href="http://localhost:7000/bus/refresh" target="_blank" rel="external">http://localhost:7000/bus/refresh</a> 可以刷新消息总线上所有的服务</li>
<li><code>POST</code>访问<a href="http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:9000" target="_blank" rel="external">http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:9000</a> 可以刷新的指定服务实例</li>
<li><code>POST</code>访问<a href="http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:**" target="_blank" rel="external">http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:**</a> 可以刷新服务consumer-movie-ribbon下的所有实例</li>
<li>刷新消息总线上的任何一个服务都可以到达此效果(消息总线上的其他服务会收到触发刷新服务的消息，进行同步刷新)</li>
</ul>
</li>
<li><p>原理如下 [^3]</p>
<p>  <img src="/data/images/2017/07/spring-cloud-bus.png" alt="spring-cloud-bus"></p>
</li>
</ul>
<h3 id="以Kafka为例"><a href="#以Kafka为例" class="headerlink" title="以Kafka为例"></a>以Kafka为例</h3><blockquote>
<p>Kafka是有LinkedIn开发的分布式消息系统，现由Apache维护，使用Scala实现。</p>
</blockquote>
<ul>
<li><p>更换依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>只需更换依赖，其他地方同rabbitmq即可(使用kafka默认配置时会产生一个Topic为)</p>
</li>
<li>启动kafka(包括zookeeper). 关于<code>Kafka</code>使用可查看文章【Kafka】</li>
<li>启动应用后会产生一个名为springCloudBus的Topic</li>
</ul>
<h2 id="Stream-消息驱动-Spring-Cloud-Stream"><a href="#Stream-消息驱动-Spring-Cloud-Stream" class="headerlink" title="Stream 消息驱动(Spring Cloud Stream)"></a>Stream 消息驱动(Spring Cloud Stream)</h2><ul>
<li>简介<ul>
<li>Spring Cloud Stream本质上是整合了Spring Boot和Spring integration，主要包含发布-订阅、消息组、分区三个概念</li>
<li>其功能是为应用程序(Spring Boot)和消息中间件之间添加一个绑定器(Binder)，只对应用程序提供统一的Channel通道，从而应用程序不需要考虑不同消息中间件的实现(调用规则)</li>
<li>暂时只支持RabbitMQ和Kafka的自动化配置</li>
</ul>
</li>
<li><p>入门案例</p>
<ul>
<li><p>引入依赖(以服务<code>consumer-movie-ribbon</code>为例)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- 消息驱动 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 基于rabbitmq(也可以引入spring-cloud-stream-binder-rabbit/kafka/redis) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>application.yml 部分配置(consumer-movie-ribbon)</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">consumer-movie-ribbon</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line">    <span class="comment"># Spring Cloud Stream配置</span></div><div class="line"><span class="attr">    stream:</span></div><div class="line"><span class="attr">      bindings:</span></div><div class="line">        <span class="comment"># input为定义的通道名称</span></div><div class="line"><span class="attr">        input:</span></div><div class="line">          <span class="comment"># 通道数据传输类型</span></div><div class="line">          <span class="comment"># content-type: text/plain # application/json</span></div><div class="line">          <span class="comment"># 将此实例的某个Stream(input)定义为某个消费组(同一个消费组里面的实例只有其中一个对消息进行消费, 否则所有的实例都会消费, 建议定义)</span></div><div class="line"><span class="attr">          group:</span> <span class="string">group-movie</span></div><div class="line">          <span class="comment"># 应用中的监听的input通道对应中间件的主题(rabbitmq的Exchange, kafka的Topic)为xxx(默认是通道名称, 此时即input)</span></div><div class="line">          <span class="comment"># destination: xxx</span></div><div class="line">        <span class="comment"># ...此处省略其他通道配置...</span></div></pre></td></tr></table></figure>
</li>
<li><p>消息接受者(consumer-movie-ribbon)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开启绑定，启动消息驱动。</span></div><div class="line"><span class="comment">// @EnableBinding属性value可指定多个关于消息通道的配置(类)，表示需要加载的类，即根据这些类中的注解(@Input、@Output生成bean)</span></div><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;Processor.class, MyChannel.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 消息消费者监听的通道名称.</span></div><div class="line">    <span class="meta">@StreamListener</span>(Processor.INPUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"msg = "</span> + msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// @StreamListener可将收到的消息(json/xml数据格式)转换成具体的对象</span></div><div class="line">    <span class="meta">@StreamListener</span>(MyChannel.CHANNEL2_INPUT) <span class="comment">// 接受rabbitmq的channel1_output</span></div><div class="line">    <span class="meta">@SendTo</span>(MyChannel.CHANNEL2_OUTPUT) <span class="comment">// 收到消息后进行反馈(给rabbitmq的channel1_input发送)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">receive2</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"user.getUsername() ==&gt; "</span> + user.getUsername());</div><div class="line">        <span class="keyword">return</span> <span class="string">"SinkReceiver.receive2 = "</span> + user; <span class="comment">// 将此数据返回给消息发送这或者其他服务</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义通道</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyChannel</span> </span>&#123;</div><div class="line">    <span class="comment">// 输入输出通道名称最好不要相同</span></div><div class="line">    String CHANNEL2_INPUT = <span class="string">"channel2_input"</span>;</div><div class="line">    String CHANNEL2_OUTPUT = <span class="string">"channel2_output"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Input</span>(MyChannel.CHANNEL2_INPUT)</div><div class="line">    <span class="function">SubscribableChannel <span class="title">channel2_input</span><span class="params">()</span></span>; <span class="comment">// 设置消息通道名称(默认使用方法名作为消息通道名)，表示从该通道发送数据</span></div><div class="line"></div><div class="line">    <span class="meta">@Output</span>(MyChannel.CHANNEL2_OUTPUT)</div><div class="line">    <span class="function">MessageChannel <span class="title">channel2_output</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>易错点：<ul>
<li>在两个类中分别@EnableBinding绑定Processor，并同时监听@Input则报错 unknown.channel.name.(一个应用中不能绑定多个相同名称的@Input、@Output; 同理, Processor只能被一个类@EnableBinding绑定或者被两个类分别绑定@Input、@Output)</li>
<li>如果一个应用需要监听相同的主题(如：input)，可以重新命名一个@Input(“xxx”), 然后通过spring.cloud.stream.bindings.xxx.destination=input来监听input主题。或者将监听程序写在一个类中</li>
</ul>
</li>
</ul>
</li>
<li><p>消息发送者(provider-user)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableBinding</span>(MyChannel.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkSender</span> </span>&#123;</div><div class="line">    <span class="comment">// 法一：注入绑定接口</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MyChannel myChannel;</div><div class="line"></div><div class="line">    <span class="comment">// 法二：注入消息通道</span></div><div class="line">    <span class="meta">@Autowired</span> <span class="meta">@Qualifier</span>(<span class="string">"input"</span>) <span class="comment">// 此时有多个MessageChannel(根据SinkSender中@Output注入的), 需要指明</span></div><div class="line">    <span class="keyword">private</span> MessageChannel channel;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MessageChannel channel1_output;</div><div class="line"></div><div class="line">    <span class="comment">// 也可以这样注入</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SinkSender</span><span class="params">(@Qualifier(<span class="string">"channel1_output"</span>)</span> MessageChannel channel) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.channel1_output = channel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试基本的消息发送和接受</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 此条消息会在测试程序中打印</span></div><div class="line">        myChannel.channel().send(MessageBuilder.withPayload(<span class="string">"hello stream [from provider-user]"</span>).build());</div><div class="line"></div><div class="line">        <span class="comment">// 此条消息会在消息消费者中显示</span></div><div class="line">        channel.send(MessageBuilder.withPayload(<span class="string">"hello channel [from provider-user]"</span>).build());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试@StreamListener对消息自动转换和消息反馈</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgTransform</span><span class="params">()</span> </span>&#123;</div><div class="line">        channel1_output.send(MessageBuilder.withPayload(<span class="string">"&#123;\"id\": 1, \"username\": \"smalle\"&#125;"</span>).build());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 用于接受反馈消息</span></div><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;MyChannel.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelReceiver</span> </span>&#123;</div><div class="line">    <span class="comment">// 接受反馈的消息</span></div><div class="line">    <span class="meta">@StreamListener</span>(MyChannel.CHANNEL1_INPUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveSendTo</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"ChannelReceiver.receiveSendTo ==&gt; "</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义通道</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyChannel</span> </span>&#123;</div><div class="line">    String CHANNEL = <span class="string">"input"</span>;</div><div class="line">    String CHANNEL1_INPUT = <span class="string">"channel1_input"</span>;</div><div class="line">    String CHANNEL1_OUTPUT = <span class="string">"channel1_output"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Input</span>(MyChannel.CHANNEL1_INPUT)</div><div class="line">    <span class="function">SubscribableChannel <span class="title">channel1_input</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Output</span>(MyChannel.CHANNEL)</div><div class="line">    <span class="function">MessageChannel <span class="title">channel</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Output</span>(MyChannel.CHANNEL1_OUTPUT)</div><div class="line">    <span class="function">MessageChannel <span class="title">channel1_output</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Spring integration原生支持(了解，Spring Cloud Stream是基于它实现的)</p>
<ul>
<li><p>消息消费者(consumer-movie-ribbon)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;MyChannel.class&#125;) <span class="comment">// 收发消息的通道不能使用同一个MessageChannel</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@ServiceActivator</span>(inputChannel = MyChannel.POLLER_INPUT) <span class="comment">// 收发消息的通道不能使用同一个MessageChannel</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"MyReceiver: msg = "</span> + msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 消息转换(也可放在MySender中)，@ServiceActivator本身不具备消息转换功能(如：json/xml转成具体的对象)</span></div><div class="line">    <span class="meta">@Transformer</span>(inputChannel = MyChannel.POLLER_INPUT, outputChannel = MyChannel.POLLER_OUTPUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Date msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>).format(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>消息生产者(provider-user)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;MyChannel.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySender</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span> <span class="comment">// 项目启动后便会执行</span></div><div class="line">    <span class="meta">@InboundChannelAdapter</span>(value = MyChannel.POLLER_OUTPUT, poller = <span class="meta">@Poller</span>(fixedDelay = <span class="string">"5000"</span>)) <span class="comment">// 对MyChannel.POLLER_OUTPUT通道进行输出. poller表示轮询，此时为每5秒执行一次方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MessageSource&lt;Date&gt; <span class="title">timeMsgSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> () -&gt; <span class="keyword">new</span> GenericMessage&lt;&gt;(<span class="keyword">new</span> Date());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>消息分区(未测试)</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 消费者配置</div><div class="line"># 当前消费者的总实例数量(消息分区需要设置)</div><div class="line">spring.cloud.stream.instanceCount=2</div><div class="line"># 当前实例的索引号(消息分区需要设置，最大为instance-count - 1)</div><div class="line">spring.cloud.stream.instanceIndex=0</div><div class="line"># 开启消费者分区功能</div><div class="line">spring.cloud.stream.bindings.input.consumer.partitioned=true</div><div class="line"></div><div class="line"># 生成者配置</div><div class="line">spring.cloud.stream.bindings.output.destination=input</div><div class="line"># 可根据实际消息规则配置SpEL表达式生成分区键用于分配出站数据, 用于消息分区</div><div class="line">spring.cloud.stream.bindings.output.producer.partitionKeyExpression=payload</div><div class="line"># 分区数量</div><div class="line">spring.cloud.stream.bindings.output.producer.partitionCount=2</div></pre></td></tr></table></figure>
</li>
<li><p>绑定器SPI</p>
<ul>
<li>绑定器是将程序(SpringBoot)中的输入/输出通道和消息中间件的输入输出做绑定</li>
<li>Spring Cloud Stream暂时只实现了RabbitMQ和Kafka的绑定其，因此只支持此二者的自动化配置</li>
<li><p>可自己实现其他消息中间件的绑定器</p>
<ul>
<li>一个实现Binder接口的类</li>
<li>一个Spring配置加载类，用来连接中间件</li>
<li><p>一个或多个能够在classpath下找到META-INF/spring.binders定义绑定器定的文件。如：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rabbit:\</div><div class="line">org.springframework.cloud.stream.binder.rabbit.config.RabbitServiceAutoConfiguration</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>绑定器配置</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 默认的绑定器为rabbit(名字是META-INF/spring.binders中定义的)</div><div class="line">spring.cloud.stream.defaultBinder=rabbit</div><div class="line"># 定义某个通道(input)的绑定器</div><div class="line">spring.cloud.stream.bindings.input.binder=kafka</div><div class="line"></div><div class="line"># 为不同通道定义同一类型不同环境的绑定器</div><div class="line">spring.cloud.stream.bindings.input.binder=rabbit1</div><div class="line">spring.cloud.stream.bindings.output.binder=rabbit2</div><div class="line"># 定义rabbit1的类型和环境(此处省略rabbit2的配置)</div><div class="line">spring.cloud.stream.binders.rabbit1.type=rabbit1</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.host=127.0.0.1</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.port=5672</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.username=guest</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.password=guest</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Sleuth-分布式服务跟踪-Spring-Cloud-Sleuth"><a href="#Sleuth-分布式服务跟踪-Spring-Cloud-Sleuth" class="headerlink" title="Sleuth 分布式服务跟踪(Spring Cloud Sleuth)"></a>Sleuth 分布式服务跟踪(Spring Cloud Sleuth)</h2><ul>
<li>简介<ul>
<li>用来跟踪每个请求在全链路调用的过程，可快速发现每条链路上的性能瓶颈</li>
<li>构建后会自动监控RabbitMQ/Kafka传递的请求、Zuul代理传递的请求、RestTemplate发起的请求</li>
</ul>
</li>
<li><p>入门案例</p>
<ul>
<li><p>引入依赖(在生产者和消费者中都引入)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- 服务跟踪 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>访问生产者<code>http://localhost:8000/simple/1</code>，控制台输出类似<code>TRACE [provider-user,0ec3c3b4ee83efd5,0ec3c3b4ee83efd5,false]</code>的信息，信息中括号的值分别代表：应用名称、Trace ID(一个请求链路的唯一标识)、Span ID(一个基本工作单元，如一个Http请求)、是否将信息收集到Zipkin等服务中来收集和展示</p>
</li>
<li>添加配置<code>logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG</code>可打印更多信息</li>
</ul>
</li>
<li>请求头信息：<code>org.springframework.cloud.sleuth.Span</code></li>
<li><p>抽样收集</p>
<ul>
<li>Spring Cloud Sleuth收集策略通过Sampler接口实现(通过isSampled返回boolean判断是否收集)，默认会使用PercentageBasedSampler实现的抽样策略</li>
<li><code>spring.sleuth.sampler.percentage=0.1</code> 代表收集10%的请求跟踪信息</li>
<li><p>可收集请求头信息中包含某个tag的样品</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagSampler</span> <span class="keyword">implements</span> <span class="title">Sampler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String tag;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TagSampler</span><span class="params">(String tag)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tag = tag;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSampled</span><span class="params">(Span span)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> span.tags().get(tag) != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>与Zipkin整合(推荐)</p>
<ul>
<li><p>建立zipkin server</p>
<ul>
<li>新建服务<code>zipkin-server</code></li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- eureka客户端 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Zipkin创建sleuth主题的stream --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--包含Zipkin服务的核心依赖(zipkin-server)、消息中间件的核心依赖、扩展数据存依赖等. 不包含Zipkin前端界面依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Zipkin前端界面依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 存储Zipkin跟踪信息到mysql(可选. 使用mysql后, Zipkin前端界面显示的数据是通过Restful API从数据库中获取的. 不使用数据存储在Zipkin内部) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类加注解<code>@EnableEurekaClient</code>、<code>@EnableZipkinStreamServer</code>(用stream方式启动，包含常规启动@EnableZipkinServer和创建sleuth的stream主题)</p>
</li>
<li><p>application.yml配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">9411</span></div><div class="line"></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">zipkin-server</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line">    <span class="comment"># 建表语句, 用来新建zipkin跟踪信息相关表(zipkin_spans、zipkin_annotations、zipkin_dependencies), 文件在Maven:io.zipkin.java:zipkin.storage.mysql目录下</span></div><div class="line"><span class="attr">    schema:</span> <span class="attr">classpath:/mysql.sql</span></div><div class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/test</span></div><div class="line"><span class="attr">    username:</span> <span class="string">root</span></div><div class="line"><span class="attr">    password:</span> <span class="string">root</span></div><div class="line"><span class="attr">    initialize:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    continue-on-error:</span> <span class="literal">true</span></div><div class="line">  <span class="comment"># 不对此服务开启跟踪</span></div><div class="line"><span class="attr">  sleuth:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># 改变zipkin日志跟踪信息存储方式为mysql(测试也可不使用mysql存储)</span></div><div class="line"><span class="attr">zipkin:</span></div><div class="line"><span class="attr">  storage:</span></div><div class="line"><span class="attr">    type:</span> <span class="string">mysql</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>被跟踪的应用(在生产者和消费者中都引入)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--服务跟踪与Zipkin整合(可选)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果zipkin没有使用eureka， 则需要在application.yml中添加<code>spring.zipkin.base-url: http://localhost:9411/</code>(zipkin server地址)</p>
</li>
</ul>
</li>
<li>进入到zipkin server后台界面查看跟踪信息：<a href="http://localhost:9411/(跟踪信息可能会有延迟" target="_blank" rel="external">http://localhost:9411/(跟踪信息可能会有延迟</a>)</li>
</ul>
</li>
<li><p>ELK日志分析系统(Logstash)</p>
<ul>
<li>ELK平台包含：ElasticSerch(分布式搜索引擎)、Logstash(日志收集-过滤-存储)、Kibana(界面展现)三个开源工具。(与Zipkin类似，二者不建议同时使用)</li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--服务跟踪与ELK日志分析平台整合(可选，此包用于Logstash收集日志)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>将spring.application.name配置到bootstrap.yml中</p>
</li>
<li>在resources目录加logback-spring.xml文件(请看源码)</li>
</ul>
</li>
</ul>
<hr>
<p>[^3]: <a href="http://blog.csdn.net/sosfnima/article/details/53178326" target="_blank" rel="external">Spring Cloud Bus原理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;架构演进&lt;ol&gt;
&lt;li&gt;单体架构：复杂度逐渐变高、部署速度慢、阻碍技术创新、无法按需伸缩&lt;/li&gt;
&lt;li&gt;SOA &lt;a hr
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="http://blog.aezo.cn/tags/SpringCloud/"/>
    
      <category term="微服务" scheme="http://blog.aezo.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Eureka" scheme="http://blog.aezo.cn/tags/Eureka/"/>
    
      <category term="Ribbon" scheme="http://blog.aezo.cn/tags/Ribbon/"/>
    
      <category term="Feign" scheme="http://blog.aezo.cn/tags/Feign/"/>
    
      <category term="Hystrix" scheme="http://blog.aezo.cn/tags/Hystrix/"/>
    
      <category term="Zuul" scheme="http://blog.aezo.cn/tags/Zuul/"/>
    
      <category term="Config" scheme="http://blog.aezo.cn/tags/Config/"/>
    
      <category term="Bus" scheme="http://blog.aezo.cn/tags/Bus/"/>
    
  </entry>
  
  <entry>
    <title>springboot</title>
    <link href="http://blog.aezo.cn/2017/07/23/java/springboot/"/>
    <id>http://blog.aezo.cn/2017/07/23/java/springboot/</id>
    <published>2017-07-23T07:05:00.000Z</published>
    <updated>2018-01-05T14:05:08.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><code>helloworld</code>(1.5.6)</li>
<li>数据访问<ul>
<li><code>hibernate</code>(1.5.6, mysql)</li>
<li><code>mybatis</code>(1.5.6)</li>
</ul>
</li>
<li><code>thymeleaf-spring-security</code>(1.5.6)</li>
<li><code>rabbitmq</code>(1.5.6)</li>
</ul>
<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--包含spring-boot-starter、hibernate-validator、jackson-databind、spring-web、spring-webmvc--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类 <code>SpringbootApplication.java</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span> <span class="comment">// @Controller</span></div><div class="line"><span class="meta">@EnableAutoConfiguration</span> <span class="comment">// 开启自动配置</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</div><div class="line">	<span class="comment">// 访问 http://localhost:8080/</span></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">	<span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Hello World!"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(SpringbootApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>至此，无需其他任何配置。浏览器访问：<a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a></p>
</li>
</ul>
<h2 id="配置文件-properties-yml"><a href="#配置文件-properties-yml" class="headerlink" title="配置文件(properties/yml)"></a>配置文件(properties/yml)</h2><ul>
<li>profile配置：可新建<code>application.properties</code>(默认)、<code>application-dev.properties</code>(会继承默认中的配置)、<code>application-prod.properties</code>、<code>application-test.properties</code>来针对不同的运行环境(<code>application-{profile}.properties</code>)</li>
<li>使用配置文件(优先级从高到低)<ul>
<li>外部配置：<code>java -jar aezocn.jar --spring.profiles.active=prod</code></li>
<li>配置文件：<code>spring.profiles.active=dev</code> 代表使用application-dev.properties的配置文件(在application.properties中添加此配置)</li>
</ul>
</li>
<li>可以idea中修改默认profiles或者某些配置达到运行多个实例的目的</li>
</ul>
<h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><ul>
<li><p>随应用启动而运行(实现<code>CommandLineRunner</code>接口)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">@Order(value = 1) // @Order值越小越优先</div><div class="line">public class HelpStartupRunner implements CommandLineRunner &#123;</div><div class="line">	@Value(&quot;$&#123;help.imageUploadRoot&#125;&quot;)</div><div class="line">	String imageUploadRoot;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run(String... args) throws Exception &#123;</div><div class="line">		initImageUploadRoot();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private void initImageUploadRoot() &#123;</div><div class="line">		System.out.println(&quot;help.imageUploadRoot = &quot; + imageUploadRoot);</div><div class="line"></div><div class="line">		File dicFile = new File(imageUploadRoot);</div><div class="line">		if(!dicFile.exists() &amp;&amp; !dicFile.isDirectory()) &#123;</div><div class="line">			dicFile.mkdir();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>拦截器</p>
<ul>
<li><p>定义拦截器</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;在请求处理之前进行调用（Controller方法调用之前）"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 只有返回true才会继续向下执行，返回false取消当前请求</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 这个方法只会在当前这个Interceptor的preHandle方法返回值为true的时候才会执行。</div><div class="line">	* postHandle是进行处理器拦截用的，它的执行时间是在处理器进行处理之后，也就是在Controller的方法调用之后执行，但是它会在DispatcherServlet进行视图的渲染之前执行，也就是说在这个方法中你可以对ModelAndView进行操作。</div><div class="line">	* 这个方法的链式结构跟正常访问的方向是相反的，也就是说先声明的Interceptor拦截器，该方法反而会后调用</div><div class="line">	*/</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></div><div class="line">						ModelAndView modelAndView) <span class="keyword">throws</span> Exception &#123;</div><div class="line">		System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;请求处理之后进行调用（Controller方法调用之后），但是在视图被渲染之前"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(response.getStatus() == <span class="number">500</span>) &#123;</div><div class="line">			modelAndView.setViewName(<span class="string">"/error/500"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(response.getStatus() == <span class="number">404</span>) &#123;</div><div class="line">			modelAndView.setViewName(<span class="string">"/error/404"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(response.getStatus() == <span class="number">403</span>) &#123;</div><div class="line">			modelAndView.setViewName(<span class="string">"/error/403"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。</div><div class="line">	* 该方法将在整个请求完成之后，也就是DispatcherServlet渲染了视图执行</div><div class="line">	* 这个方法的主要作用是用于清理资源的，当然这个方法也只能在当前这个Interceptor的preHandle方法的返回值为true时才会执行。</div><div class="line">	*/</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行（主要是用于进行资源清理工作）"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注册拦截器</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">		<span class="comment">// 多个拦截器组成一个拦截器链</span></div><div class="line">		<span class="comment">// addPathPatterns 用于添加拦截规则</span></div><div class="line">		<span class="comment">// excludePathPatterns 用于排除拦截</span></div><div class="line">		registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">super</span>.addInterceptors(registry);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>获取Bean：此处选择实现<code>ApplicationContextAware</code>接口 <a href="[Spring在代码中获取bean的几种方式](http://www.cnblogs.com/yjbjingcha/p/6752265.html)">^7</a></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"springContextU"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextU</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		<span class="keyword">if</span>(SpringContextU.applicationContext == <span class="keyword">null</span>) &#123;</div><div class="line">			SpringContextU.applicationContext = applicationContext;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 获取applicationContext</div><div class="line">	* <span class="doctag">@return</span></div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> applicationContext;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 通过name获取 Bean.</div><div class="line">	* <span class="doctag">@param</span> name</div><div class="line">	* <span class="doctag">@return</span></div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> getApplicationContext().getBean(name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 通过class获取Bean.</div><div class="line">	* <span class="doctag">@param</span> clazz</div><div class="line">	* <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">	* <span class="doctag">@return</span></div><div class="line">	*/</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> getApplicationContext().getBean(clazz);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 通过name以及Clazz返回指定的Bean</div><div class="line">	* <span class="doctag">@param</span> name</div><div class="line">	* <span class="doctag">@param</span> clazz</div><div class="line">	* <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">	* <span class="doctag">@return</span></div><div class="line">	*/</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name,Class&lt;T&gt; clazz)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> getApplicationContext().getBean(name, clazz);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>异步执行服务 <a href="[异步调用Async](http://blog.csdn.net/v2sking/article/details/72795742)">^8</a></p>
<ul>
<li>启动类加注解<code>@EnableAsync</code></li>
<li>服务类方法加注解<code>@Async</code></li>
</ul>
</li>
<li><p><code>@Value</code>给静态成员设值</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"myValue"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyValue</span> </span>&#123;</div><div class="line">	<span class="comment">// ...Model：字段、get、set方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 设值：在application.properties中设置`myValue.val`的值</span></div><div class="line"></div><div class="line"><span class="comment">// 取值</span></div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;myValue.val&#125;"</span>)</div><div class="line"><span class="keyword">private</span> String val;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> String hello;</div><div class="line"></div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;myValue.hello&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">setHello</span><span class="params">(String hello)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.hello = hello;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>跨域资源共享（CORS）<a href="[Spring对CORS的支持](https://spring.io/blog/2015/06/08/cors-support-in-spring-framework)">^9</a></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line">   <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</div><div class="line">               registry.addMapping(<span class="string">"/**"</span>)</div><div class="line">                       .allowedHeaders(<span class="string">"*"</span>)</div><div class="line">                       .allowedMethods(<span class="string">"*"</span>)</div><div class="line">                       .allowedOrigins(<span class="string">"*"</span>)</div><div class="line">                       .allowCredentials(<span class="keyword">true</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用spring security的CORS配置可参考相应文章</li>
</ul>
</li>
<li><p>国际化</p>
<ul>
<li>在resources目录增加两个properties文件：<code>messages.properties</code>(默认)、<code>messages_zh_CN.properties</code>(中文)<ul>
<li>可通过<code>spring.messages.basename=i18n/messages</code>定义配置文件路径，此时应该将<code>messages.*</code>放在<code>resources/i18n</code>目录</li>
</ul>
</li>
<li>在其中加入类似配置<code>error.unknowexception=未知错误</code></li>
<li><p>调用</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">  	<span class="keyword">private</span> MessageSource messageSource;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getLocalMessage</span><span class="params">(String code)</span> </span>&#123;</div><div class="line">	String localMessage = <span class="keyword">null</span>;</div><div class="line">	Locale locale = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		locale = LocaleContextHolder.getLocale();</div><div class="line">		localMessage = messageSource.getMessage(code, <span class="keyword">null</span>, locale);</div><div class="line">	&#125; <span class="keyword">catch</span> (NoSuchMessageException e1) &#123;</div><div class="line">		logger.warn(<span class="string">"invalid i18n! code: "</span> + code + <span class="string">", local: "</span> + locale);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> localMessage;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="请求及响应"><a href="#请求及响应" class="headerlink" title="请求及响应"></a>请求及响应</h2><ul>
<li><p>相关配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 端口</div><div class="line">server.port=9090</div><div class="line"># context-path路径</div><div class="line">server.context-path=/myapp</div></pre></td></tr></table></figure>
</li>
<li><p>请求协议</p>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>request-method</th>
<th>content-type</th>
<th>postman</th>
<th>springboot</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>post</td>
<td>application/json</td>
<td>row-json</td>
<td>(@RequestBody User user)</td>
<td>如果后台使用了@RequestBody，此时row-text等都无法请求到</td>
</tr>
<tr>
<td>post</td>
<td>multipart/form-data</td>
<td>form-data</td>
<td>(HttpServletRequest request, User user, @RequestParam(“hello”) String hello)</td>
<td>参考实例1。可进行文件上传(包含参数)</td>
</tr>
</tbody>
</table>
<ol>
<li><p><code>&#39;content-type&#39;: &#39;multipart/form-data;</code>(postman对应form-data)：可进行文件上传(包含参数), 响应代码如：</p>
<ul>
<li><code>javascript XHR</code>需要使用<code>new FormData()</code>进行数据传输(可查看postman代码)</li>
<li><p>还可使用<code>MultipartFile</code>来接受单个文件, 使用<code>List&lt;MultipartFile&gt; files = ((MultipartHttpServletRequest) request).getFiles(&quot;file&quot;);</code>获取多个文件 <a href="[spring-boot文件上传](http://blog.csdn.net/coding13/article/details/54577076)">^3</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 此时User会根据前台参数和User类的set方法自动填充(调用的是User类的set方法)</span></div><div class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/edit-user"</span>, method = RequestMethod.POST)</div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">editEvent</span><span class="params">(HttpServletRequest request, User user, @RequestParam(<span class="string">"hello"</span>)</span> String hello) </span>&#123;</div><div class="line">	Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">	System.out.println(<span class="string">"hello = "</span> + hello); <span class="comment">// hello world</span></div><div class="line">	System.out.println(<span class="string">"user.getName() = "</span> + user.getName()); <span class="comment">// smalle</span></div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 为了获取文件项</span></div><div class="line">		Collection&lt;Part&gt; parts = request.getParts();</div><div class="line"></div><div class="line">		<span class="comment">// part中包含了所有数据(参数和文件)</span></div><div class="line">		<span class="keyword">for</span> (Part part: parts) &#123;</div><div class="line">			String originName = part.getSubmittedFileName(); <span class="comment">// 上传文件对应的文件名</span></div><div class="line">			System.out.println(<span class="string">"originName = "</span> + originName);</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(<span class="keyword">null</span> != originName) &#123;</div><div class="line">				<span class="comment">// 此part为文件</span></div><div class="line">				InputStream inputStream = part.getInputStream();</div><div class="line">				<span class="comment">// ...</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;  <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h2><ul>
<li><p>数据库驱动</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--数据库驱动--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">## spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mysql://localhost/springboot?useUnicode=true&amp;characterEncoding=utf-8</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line"></div><div class="line"># 每次启动都会执行, 且在hibernate建表语句之前执行</div><div class="line"># 若无此定义, springboot也会默认执行resources下的schema.sql(先)和data.sql(后)文件(如果存在)</div><div class="line"># 执行建表语句(也会执行插入等语句)</div><div class="line">spring.datasource.schema=classpath:schema.sql</div><div class="line"># 执行数据添加语句</div><div class="line">spring.datasource.data=classpath:data.sql</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="对hibernate的默认支持-JPA"><a href="#对hibernate的默认支持-JPA" class="headerlink" title="对hibernate的默认支持(JPA)"></a>对hibernate的默认支持(JPA)</h3><blockquote>
<p><a href="http://www.cnblogs.com/rulian/tag/jpa/" target="_blank" rel="external">Spring Data JPA博文</a></p>
<ul>
<li>继承接口查询(JpaRepository/JpaSpecificationExecutor等)：<a href="http://www.cnblogs.com/rulian/p/6557471.html" target="_blank" rel="external">http://www.cnblogs.com/rulian/p/6557471.html</a></li>
<li>方法定义规则查询：<a href="http://www.cnblogs.com/rulian/p/6434631.html" target="_blank" rel="external">http://www.cnblogs.com/rulian/p/6434631.html</a></li>
<li>Example实例查询：<a href="http://www.cnblogs.com/rulian/p/6533109.html" target="_blank" rel="external">http://www.cnblogs.com/rulian/p/6533109.html</a></li>
</ul>
</blockquote>
<ul>
<li><p>引入数据库和jpa</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--jpa是ORM框架的API(基于hibernate完成), jdbc是java操作数据库的API(执行sql语句)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据库添加配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">## spring.jpa.database=MYSQL</div><div class="line"># 自动执行ddl语句(create/create-drop/update).</div><div class="line">spring.jpa.hibernate.ddl-auto=update</div><div class="line"># 打印sql执行语句, 查询和建表</div><div class="line">spring.jpa.show-sql=true</div><div class="line"># 格式化打印语句</div><div class="line">spring.jpa.properties.hibernate.format_sql=true</div><div class="line"># 懒加载配置</div><div class="line">spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true</div></pre></td></tr></table></figure>
</li>
<li><p><code>User.java</code>实体</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@Entity</div><div class="line">public class User &#123;</div><div class="line">	@Id</div><div class="line">	@GeneratedValue</div><div class="line">	private Long userId;</div><div class="line"></div><div class="line">	@Column(nullable=false) // 不能为空</div><div class="line">	private Long username;</div><div class="line"></div><div class="line">	private String password;</div><div class="line"></div><div class="line">	private Long groupId;</div><div class="line"></div><div class="line">	@Generated(GenerationTime.INSERT)</div><div class="line">	@Column(columnDefinition=&quot; BIT default 1 &quot;) // 默认插入1(就算new User的时候设置成0最终保存的仍然是1)</div><div class="line">	private Boolean yesValid;</div><div class="line"></div><div class="line">	@Generated(GenerationTime.INSERT)</div><div class="line">	@Column(insertable = false, updatable = false, columnDefinition=&quot;timestamp default current_timestamp comment &apos;加入时间&apos;&quot;)</div><div class="line">	private Timestamp createTime;</div><div class="line"></div><div class="line">	// getter/setter...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>UserDao.java</code>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 继承了JpaRepository(JpaRepository又继承了CrudRepository已经定义好了基本增删查改相关方法)</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClassDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserClass</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">	<span class="comment">// spring data 根据属性名和查询关键字自动生成查询方法(spring data会自动实现)</span></div><div class="line">	<span class="function">UserClass <span class="title">findByClassName</span><span class="params">(String className)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>UserController.java</code>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">   UserDao userDao;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/users"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">       <span class="comment">// 前台传一个类似的user对象，会把此对象做作为条件进行查询</span></div><div class="line">       Example&lt;User&gt; example = Example.of(user);</div><div class="line"></div><div class="line">	<span class="comment">// 进行模糊匹配</span></div><div class="line">	<span class="comment">// ExampleMatcher matcher = ExampleMatcher.matching().withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING);</span></div><div class="line">	<span class="comment">// Example&lt;User&gt; example = Example.of(user, matcher);</span></div><div class="line"></div><div class="line">       <span class="keyword">return</span> userDao.findAll(example);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>@Query</code>查询示例</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UserDao定义的查询语句. org.springframework.data.jpa.repository.Query</span></div><div class="line"><span class="meta">@Query</span>(<span class="string">"select u.classId, u.sex, count(u.classId) as count from User u "</span> +</div><div class="line">		<span class="string">"   where u.password = :password "</span> +</div><div class="line">		<span class="string">"   group by u.classId, u.sex"</span>)</div><div class="line">List&lt;Object[]&gt; countUser(<span class="meta">@Param</span>(<span class="string">"password"</span>) String password);</div><div class="line"></div><div class="line"><span class="comment">// 原生sql</span></div><div class="line"><span class="meta">@Query</span>(value = <span class="string">"select u.* from user u, user_class uc where uc.class_id = u.class_id and uc.class_name = 'one'"</span>, nativeQuery = <span class="keyword">true</span>)</div><div class="line">List&lt;Object[]&gt; findUsers();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// @Query自定义sql语句. http://127.0.0.1:9526/api/user-query</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user-query"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line">	Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">	result.put(<span class="string">"count"</span>, userDao.countUser(<span class="string">"123456"</span>));</div><div class="line">	result.put(<span class="string">"users"</span>, userDao.findUsers());</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

- 执行结果

    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">count</span>: [</div><div class="line">		[</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="number">2</span></div><div class="line">		]</div><div class="line">	],</div><div class="line">	<span class="attr">users</span>: [</div><div class="line">		[</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="string">"smalle"</span>,</div><div class="line">			<span class="string">"123456"</span>,</div><div class="line">			<span class="number">1</span></div><div class="line">		],</div><div class="line">		[</div><div class="line">			<span class="number">2</span>,</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="string">"aezo"</span>,</div><div class="line">			<span class="string">"123456"</span>,</div><div class="line">			<span class="number">1</span></div><div class="line">		]</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p><code>Pageable</code>分页查询：Pageable里面常用参数<code>page</code>(页码, 0代表第一页)、<code>size</code>(页长)、<code>order</code>(排序规则) <a href="[hibernate查询分页](http://www.cnblogs.com/softidea/p/6287788.html)">^4</a></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查询UserClass信息, 并获取子表User的前5条数据. http://127.0.0.1:9526/api/classes?className=one</span></div><div class="line">   <span class="meta">@RequestMapping</span>(value = <span class="string">"/classes"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">findClasses</span><span class="params">(UserClass userClass)</span> </span>&#123;</div><div class="line">       Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">       <span class="comment">// 前台传一个类似的UserClass对象，会把此对象做作为条件进行查询</span></div><div class="line">       Example&lt;UserClass&gt; example = Example.of(userClass);</div><div class="line">       result.put(<span class="string">"userClass"</span>, userClassDao.findAll(example));</div><div class="line"></div><div class="line">       <span class="comment">// 分页获取User数据：如果使用classes.getUsers()获取则需要写实体对应关系(@OneToMany), 且会产生外键. 此时单表查询不需关联关系</span></div><div class="line">       Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">5</span>, <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"id"</span>)); <span class="comment">// 获取第1页, 每页显示5条, 按照id排序</span></div><div class="line">       result.put(<span class="string">"users"</span>, userDao.findAll(pageable));</div><div class="line"></div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// 分页(page为页码, 0代表第1页; size代表页长). http://127.0.0.1:9526/api/users-page?page=0</span></div><div class="line"><span class="comment">// 排序：`?sort=firstname&amp;sort=lastname,desc` 表示在按firstname正序排列基础上按lastname倒序排列</span></div><div class="line">   <span class="comment">// org.springframework.data.domain.Pageable、org.springframework.data.domain.Example</span></div><div class="line">   <span class="meta">@RequestMapping</span>(value = <span class="string">"/users-page"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> Page&lt;User&gt; <span class="title">findUsersPage</span><span class="params">(</span></span></div><div class="line">           @RequestParam(value = <span class="string">"username"</span>, defaultValue = <span class="string">"smalle"</span>) String username,</div><div class="line">           Pageable pageable) &#123;</div><div class="line">       <span class="comment">// 前台传一个类似的user对象，会把此对象做作为条件进行查询</span></div><div class="line">       Example&lt;User&gt; example = Example.of(<span class="keyword">new</span> User(username));</div><div class="line"></div><div class="line">       <span class="keyword">return</span> userDao.findAll(example, pageable);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>查询UserClass信息返回数据如下(已经美化去除引号)：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">userClass</span>: [</div><div class="line">		&#123;</div><div class="line">			<span class="attr">classId</span>: <span class="number">1</span>,</div><div class="line">			<span class="attr">className</span>: <span class="string">"one"</span></div><div class="line">		&#125;</div><div class="line">	],</div><div class="line">	<span class="attr">users</span>: &#123;</div><div class="line">		<span class="attr">content</span>: [</div><div class="line">			&#123;</div><div class="line">				<span class="attr">id</span>: <span class="number">2</span>,</div><div class="line">				<span class="attr">classId</span>: <span class="number">1</span>,</div><div class="line">				<span class="attr">username</span>: <span class="string">"aezo"</span>,</div><div class="line">				<span class="attr">password</span>: <span class="string">"123456"</span>,</div><div class="line">				<span class="attr">sex</span>: <span class="number">1</span></div><div class="line">			&#125;,</div><div class="line">			&#123;</div><div class="line">				<span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">				<span class="attr">classId</span>: <span class="number">1</span>,</div><div class="line">				<span class="attr">username</span>: <span class="string">"smalle"</span>,</div><div class="line">				<span class="attr">password</span>: <span class="string">"123456"</span>,</div><div class="line">				<span class="attr">sex</span>: <span class="number">1</span></div><div class="line">			&#125;</div><div class="line">		],</div><div class="line">		<span class="attr">totalElements</span>: <span class="number">2</span>,</div><div class="line">		<span class="attr">totalPages</span>: <span class="number">1</span>,</div><div class="line">		<span class="attr">last</span>: <span class="literal">true</span>,</div><div class="line">		<span class="attr">number</span>: <span class="number">0</span>,</div><div class="line">		<span class="attr">size</span>: <span class="number">5</span>,</div><div class="line">		<span class="attr">first</span>: <span class="literal">true</span>,</div><div class="line">		<span class="attr">numberOfElements</span>: <span class="number">2</span>,</div><div class="line">		<span class="attr">sort</span>: [</div><div class="line">			&#123;</div><div class="line">				<span class="attr">direction</span>: <span class="string">"DESC"</span>,</div><div class="line">				<span class="attr">property</span>: <span class="string">"id"</span>,</div><div class="line">				<span class="attr">ignoreCase</span>: <span class="literal">false</span>,</div><div class="line">				<span class="attr">nullHandling</span>: <span class="string">"NATIVE"</span>,</div><div class="line">				<span class="attr">ascending</span>: <span class="literal">false</span>,</div><div class="line">				<span class="attr">descending</span>: <span class="literal">true</span></div><div class="line">			&#125;</div><div class="line">		]</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h3><p>参考AEZO：《mybatis》：<a href="http://blog.aezo.cn/2017/05/22/java/mybatis/">http://blog.aezo.cn#java@mybatis</a></p>
<h3 id="JdbcTemplate访问数据"><a href="#JdbcTemplate访问数据" class="headerlink" title="JdbcTemplate访问数据"></a>JdbcTemplate访问数据</h3><ul>
<li><p>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">String sql = <span class="string">"SELECT h.*, e.name as event_name from th_help h, th_event e where h.event_id = e.event_id"</span>;</div><div class="line">List&lt;Map&lt;String, Object&gt;&gt; object = jdbcTemplate.queryForList(sql);</div></pre></td></tr></table></figure>
</li>
<li><p>jdbc批量执行sql语句</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Message message = new Message(...);</span></div><div class="line"></div><div class="line"><span class="keyword">final</span> String sql = <span class="string">"insert into th_message(user_id, message_type, content, is_read, is_valid, create_time) values(?, ?, ?, ?, ?, ?)"</span>;</div><div class="line"></div><div class="line">jdbcTemplate.batchUpdate(sql, <span class="keyword">new</span> BatchPreparedStatementSetter() &#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">		User user = users.get(i);</div><div class="line">		preparedStatement.setLong(<span class="number">1</span>, user.getUserId());</div><div class="line">		preparedStatement.setObject(<span class="number">2</span>, message.getMessageType());</div><div class="line">		preparedStatement.setString(<span class="number">3</span>, message.getContent());</div><div class="line">		preparedStatement.setObject(<span class="number">4</span>, <span class="number">0</span>);</div><div class="line">		preparedStatement.setObject(<span class="number">5</span>, <span class="number">1</span>);</div><div class="line">		preparedStatement.setObject(<span class="number">6</span>, DateU.nowTimestamp());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBatchSize</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> users.size();</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="数据库相关配置"><a href="#数据库相关配置" class="headerlink" title="数据库相关配置"></a>数据库相关配置</h3><ul>
<li><p>数据库/表新建时命名策略(JPA) <a href="https://docs.spring.io/spring-boot/docs/1.5.6.RELEASE/reference/htmlsingle/#howto-configure-hibernate-naming-strategy" target="_blank" rel="external">doc</a></p>
<ul>
<li><code>org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy</code>为springboot默认提供命令策略(实体驼峰转成数据库下划线)</li>
<li><p>示例：给表名加前缀</p>
<ul>
<li><p>配置：<code>spring.jpa.hibernate.naming.physical-strategy=cn.aezo.springboot.CustomPhysicalNamingStrategy</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPhysicalNamingStrategy</span> <span class="keyword">extends</span> <span class="title">SpringPhysicalNamingStrategy</span> </span>&#123;</div><div class="line">	<span class="comment">// 重写父类方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Identifier <span class="title">toPhysicalTableName</span><span class="params">(Identifier name, JdbcEnvironment jdbcEnvironment)</span> </span>&#123;</div><div class="line">		<span class="comment">// System.out.println("name = " + name);</span></div><div class="line">		<span class="comment">// System.out.println("jdbcEnvironment = " + jdbcEnvironment);</span></div><div class="line">		<span class="comment">// System.out.println("name.getCanonicalName() = " + name.getCanonicalName());</span></div><div class="line">		<span class="comment">// System.out.println("name.getText() = " + name.getText());</span></div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.apply(Identifier.toIdentifier(<span class="string">"th_"</span> + name.getText()), jdbcEnvironment);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// copy父类方法</span></div><div class="line">	<span class="function"><span class="keyword">private</span> Identifier <span class="title">apply</span><span class="params">(Identifier name, JdbcEnvironment jdbcEnvironment)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			StringBuilder builder = <span class="keyword">new</span> StringBuilder(name.getText().replace(<span class="string">'.'</span>, <span class="string">'_'</span>));</div><div class="line"></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; builder.length() - <span class="number">1</span>; ++i) &#123;</div><div class="line">				<span class="keyword">if</span>(<span class="keyword">this</span>.isUnderscoreRequired(builder.charAt(i - <span class="number">1</span>), builder.charAt(i), builder.charAt(i + <span class="number">1</span>))) &#123;</div><div class="line">					builder.insert(i++, <span class="string">'_'</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.getIdentifier(builder.toString(), name.isQuoted(), jdbcEnvironment);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// copy父类方法</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isUnderscoreRequired</span><span class="params">(<span class="keyword">char</span> before, <span class="keyword">char</span> current, <span class="keyword">char</span> after)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> Character.isLowerCase(before) &amp;&amp; Character.isUpperCase(current) &amp;&amp; Character.isLowerCase(after);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="使用H2数据库-1"><a href="#使用H2数据库-1" class="headerlink" title="使用H2数据库 ^1"></a>使用H2数据库 <a href="[idea连接h2](https://stackoverflow.com/questions/31498682/spring-boot-intellij-embedded-database-headache)">^1</a></h3><ul>
<li>h2简介：内存数据库（Embedded database或in-momery database）具有配置简单、启动速度快、尤其是其可测试性等优点，使其成为开发过程中非常有用的轻量级数据库。在spring中支持HSQL、H2和Derby三种数据库</li>
<li><a href="http://h2database.com/html/main.html" target="_blank" rel="external">官网：http://h2database.com/html/main.html</a></li>
<li>springboot整合：<a href="../db/h2.md">文章：《h2》</a></li>
</ul>
<h2 id="thymeleaf模板引擎"><a href="#thymeleaf模板引擎" class="headerlink" title="thymeleaf模板引擎"></a>thymeleaf模板引擎</h2><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--thymeleaf模板引擎, 包含spring-boot-starter-web--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 可选：thymeleaf和springsecurity结合在页面级别进行权限控制 --&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;dependency&gt;</span></div><div class="line">	&lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;thymeleaf-extras-springsecurity4&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>properties配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#spring:</span></div><div class="line"><span class="comment">#  thymeleaf:</span></div><div class="line"><span class="comment">#	# 将thymeleaf文件放在resources/templates/目录</span></div><div class="line">   <span class="comment">#	prefix: classpath:/templates/</span></div><div class="line">   <span class="comment">#	suffix: .html</span></div></pre></td></tr></table></figure>
</li>
<li><p>示例</p>
<ul>
<li><p>Controller：类的注解必须是<code>@Controller</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span> <span class="comment">// 此时不能是@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 页面显示resources/templates/hello.html的内容</span></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Map&lt;String, Object&gt; model)</span> </span>&#123;</div><div class="line">		<span class="comment">// 无需注入参数值时，则方法可不接收model参数</span></div><div class="line">		model.put(<span class="string">"hello"</span>, <span class="string">"UserController.thymeleaf"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="string">"/hello"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>hello.html文件</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="comment">&lt;!-- xmlns:th="http://www.thymeleaf.org"声明后方可使用 th:* --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>smalle<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;hello&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>显示结果(第二个${hello}并不能解析)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UserController.thymeleaf</div><div class="line">$&#123;hello&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>启用thymeleaf的html非严格模式</p>
<ul>
<li>添加配置<code>spring.thymeleaf.mode = LEGACYHTML5</code></li>
<li><p>添加依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 启用thymeleaf的html非严格模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>thymeleaf缓存(热部署)</p>
<ul>
<li>推荐使用<code>JRebel</code>(idea需要Ctrl+Shift+F9刷新)</li>
<li><p>使用<code>devtools</code>(也适用于java文件热部署)</p>
<ul>
<li><p>增加maven配置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>idea需要Ctrl+Shift+F9刷新，相当于重启项目，较普通项目重启快</p>
</li>
</ul>
</li>
<li>配置中加<code>spring.thymeleaf.cache=false</code><ul>
<li>需要使用maven启动</li>
</ul>
</li>
</ul>
</li>
<li>thymeleaf语法：<a href="../lang/thymeleaf.md">文章：《thymeleaf》</a></li>
</ul>
<h2 id="企业级开发"><a href="#企业级开发" class="headerlink" title="企业级开发"></a>企业级开发</h2><h3 id="Nosql"><a href="#Nosql" class="headerlink" title="Nosql"></a>Nosql</h3><h4 id="整合Mongodb"><a href="#整合Mongodb" class="headerlink" title="整合Mongodb"></a>整合Mongodb</h4><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>application.properties配置添加：<code>spring.data.mongodb.uri=mongodb://name:pass@localhost:27017/test</code>、</p>
</li>
<li><p>查询方式</p>
<ul>
<li><p>使用基本查询</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DBCollection collection = mongoTemplate.getCollection(<span class="string">"hscode"</span>); <span class="comment">// 获取集合(类似与key)</span></div><div class="line"></div><div class="line">      DBObject query = <span class="keyword">new</span> BasicDBObject();</div><div class="line">      query.put(<span class="string">"hsCode"</span>, hscode);</div><div class="line"></div><div class="line">      DBObject dbObject = collection.findOne(query); <span class="comment">// 打印直接就是json数据</span></div></pre></td></tr></table></figure>
</li>
<li><p>创建实体，书写Dao(使用MongoTemplate完成) <a href="[Springboot中mongodb的使用](http://www.cnblogs.com/ityouknow/p/6828919.html)">^6</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><ul>
<li><p>RabbitMQ是实现了高级消息队列协议(AMQP)的开源消息代理软件，也称为面向消息的中间件。后续操作需要先安装RabbitMQ服务</p>
</li>
<li><p>引入对amqp协议支持依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置rabbitmq服务器链接</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  rabbitmq:</span></div><div class="line"><span class="attr">    host:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">    port:</span> <span class="number">5672</span></div><div class="line"><span class="attr">    username:</span> <span class="string">guest</span></div><div class="line"><span class="attr">    password:</span> <span class="string">guest</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置队列、生产者、消费者</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 配置队列 hello</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">helloQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"hello"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 生产者</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</div><div class="line"></div><div class="line">    <span class="comment">// 发送消息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</div><div class="line">        String context = <span class="string">"hello "</span> + <span class="keyword">new</span> Date();</div><div class="line">        System.out.println(<span class="string">"Provider: "</span> + context);</div><div class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">"hello"</span>, context);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 消费者</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"hello"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RabbitHandler</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Consumer: "</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="session共享"><a href="#session共享" class="headerlink" title="session共享"></a>session共享</h3><ul>
<li>基于redis实现session共享. 多个项目需要都引入此依赖，并连接相同的redis</li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- redis依赖 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;dependency&gt;</span></div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt; --&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>启动类加<code>@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 7200)</code> (maxInactiveIntervalInSeconds即session检测的最大时间间隔)</p>
</li>
<li>可将一个项目启动两个端口进行测试</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="替换项目运行时springboot的logo"><a href="#替换项目运行时springboot的logo" class="headerlink" title="替换项目运行时springboot的logo"></a>替换项目运行时springboot的logo</h3><ul>
<li><p>在<code>resources</code>添加<code>banner.txt</code>文件. 内容自定义(文字转字符：<a href="http://patorjk.com/software/taag/)，如：" target="_blank" rel="external">http://patorjk.com/software/taag/)，如：</a></p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"> .oooo.    .ooooo.    oooooooo  .ooooo.   .ooooo.  ooo. .oo.   </div><div class="line">`P  )88b  d88' `88b  d'""7d8P  d88' `88b d88' `"Y8 `888P"Y88b  </div><div class="line"> .oP"888  888ooo888    .d8P'   888   888 888        888   888  </div><div class="line">d8(  888  888    .o  .d8P'  .P 888   888 888   .o8  888   888  </div><div class="line">`Y888""8o `Y8bod8P' d8888888P  `Y8bod8P' `Y8bod8P' o888o o888o</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;helloworld&lt;/code&gt;(1.5.6)&lt;/li&gt;
&lt;li&gt;数据访问&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hiber
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="springboot" scheme="http://blog.aezo.cn/tags/springboot/"/>
    
      <category term="mybatis" scheme="http://blog.aezo.cn/tags/mybatis/"/>
    
      <category term="hibernate" scheme="http://blog.aezo.cn/tags/hibernate/"/>
    
      <category term="rabbitmq" scheme="http://blog.aezo.cn/tags/rabbitmq/"/>
    
  </entry>
  
</feed>
