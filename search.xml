<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[ofbiz模型图(UML)分析]]></title>
      <url>/2017/12/09/java/ofbiz/ofbiz-uml/</url>
      <content type="html"><![CDATA[<h2 id="模型列表"><a href="#模型列表" class="headerlink" title="模型列表"></a>模型列表</h2><ul>
<li>webapp中类图</li>
<li>Event调用过程</li>
<li>Contorl处理过程</li>
<li>登录</li>
<li>校验登录 extensionCheckLogin</li>
<li>view渲染</li>
<li>screen渲染</li>
</ul>
<embed width="1000" height="800" src="/data/images/2017/09/OFBiz-UML.pdf" internalinstanceid="7">]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ofbiz </tag>
            
            <tag> uml </tag>
            
            <tag> 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MUI]]></title>
      <url>/2017/11/24/web/mui/</url>
      <content type="html"><![CDATA[<h2 id="mui简介"><a href="#mui简介" class="headerlink" title="mui简介"></a>mui简介</h2><ul>
<li>MUI不依赖任何第三方JS库，原生UI(MUI以iOS平台UI为基础，补充部分Android平台特有的UI控件)，结合H5 plus可实现更解决原生的APP应用</li>
<li>APP开发类型：原生开发、H5开发、混合开发(Hybrid App：一部分功能用native构建，一部分功能用html5构建，比如AppCan、PhoneGap(Cordova)等)</li>
<li>官网：<a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="external">http://dev.dcloud.net.cn/mui/</a></li>
</ul>
<h2 id="mui零散知识"><a href="#mui零散知识" class="headerlink" title="mui零散知识"></a>mui零散知识</h2><ul>
<li>H5底部导航跳转</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"mui-bar mui-bar-tab"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">data-href</span>=<span class="string">"index.html"</span> <span class="attr">class</span>=<span class="string">"mui-tab-item sm-href"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">data-href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"mui-tab-item sm-href"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-contact"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>活动<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">data-href</span>=<span class="string">"home.html"</span> <span class="attr">class</span>=<span class="string">"mui-tab-item sm-href mui-active"</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-icon mui-icon-contact"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mui-tab-label"</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a标签点击跳转:解决mui的a标签href无法跳转</span></div><div class="line">bindSmHref(<span class="built_in">document</span>.getElementsByClassName(<span class="string">"sm-href"</span>));</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindSmHref</span>(<span class="params">pageTabs</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; pageTabs.length; i++) &#123;</div><div class="line">		pageTabs[i].addEventListener(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">			<span class="keyword">var</span> href = <span class="keyword">this</span>.getAttribute(<span class="string">"data-href"</span>);</div><div class="line">			<span class="keyword">if</span>(href != <span class="literal">null</span> &amp;&amp; href != <span class="string">""</span>) &#123;</div><div class="line">				<span class="built_in">window</span>.location.href = href;</div><div class="line">			&#125;</div><div class="line">		&#125;, <span class="literal">false</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>popover弹框、scroll滚动<ul>
<li>popover参数二为锚点元素(<code>anchorElement</code>)，标识弹框是基于某个元素的。如果</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"popover"</span> <span class="attr">class</span>=<span class="string">"mui-popover"</span>&gt;</span><span class="comment">&lt;!--默认隐藏, dom在body下即可--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-scroll-wrapper"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mui-scroll"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding: 10px;"</span>&gt;</span><span class="comment">&lt;!--mui-scroll下是真实dom，需要里面元素有padding则需要调解此div--&gt;</span></div><div class="line">                这里是内容</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">mui, window, document, undefined</span>) </span>&#123;</div><div class="line">    mui.init();</div><div class="line"></div><div class="line">    <span class="comment">// 初始化滚动条</span></div><div class="line">    mui(<span class="string">'.mui-scroll-wrapper'</span>).scroll(&#123;&#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 当mybtn按钮被点击时，弹框显示隐藏切换</span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"mybtn"</span>).addEventListener(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        mui(<span class="string">"#popover"</span>).popover(<span class="string">"toggle"</span>, <span class="built_in">document</span>.getElementById(<span class="string">"popoverRef"</span>)); <span class="comment">// 如果弹框居中，则只需要参考popoverRef元素为居中</span></div><div class="line">    &#125;);</div><div class="line">&#125;)(mui, <span class="built_in">window</span>, <span class="built_in">document</span>, <span class="literal">undefined</span>);</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#popover</span> &#123;</div><div class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">85%</span>;</div><div class="line">	<span class="comment">/*</span></div><div class="line">    display: block;</div><div class="line">    top: 0px;</div><div class="line">    left: 5%;</div><div class="line">    overflow: auto;</div><div class="line">	*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>图片上传，下列方法可解决mui示例中h5页面拍照无法上传问题(缺点：上传到后台无法记录文件类型，无文件后缀)<ul>
<li>利用canvas将图片转成base64并压缩 -&gt; 将base64的dataUrl转成Blob -&gt; 将Blob放入到FormData -&gt; xhr</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// =======</span></div><div class="line"><span class="comment">// 图片上传: 利用canvas将图片转成base64并压缩 -&gt; 将base64的dataUrl转成Blob -&gt; 将Blob放入到FormData -&gt; xhr</span></div><div class="line"><span class="comment">// =======</span></div><div class="line"><span class="comment">/*</span></div><div class="line">	var smImg = new SmUploadImg();</div><div class="line">	smImg.init(&#123;</div><div class="line">		inputs: document.getElementById(".sm-input__img"),</div><div class="line">		callback: function(base64, target) &#123;</div><div class="line">			// formData.append(target.id, this.dataUrltoBlob(base64));</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line"> */</div><div class="line">SmUploadImg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.sw = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.sh = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.tw = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.th = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.scale = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.maxWidth = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.maxHeight = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.maxSize = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.fileSize = <span class="number">0</span>;   </div><div class="line">    <span class="keyword">this</span>.fileDate = <span class="literal">null</span>;   </div><div class="line">    <span class="keyword">this</span>.fileType = <span class="string">''</span>;   </div><div class="line">    <span class="keyword">this</span>.fileName = <span class="string">''</span>;   </div><div class="line">    <span class="keyword">this</span>.inputs = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.canvas = <span class="literal">null</span>;   </div><div class="line">    <span class="keyword">this</span>.mime = &#123;&#125;;   </div><div class="line">    <span class="keyword">this</span>.type = <span class="string">''</span>;</div><div class="line">    <span class="keyword">this</span>.target = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.toastr = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.callback = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.loading = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**   </span></div><div class="line"> * @description 初始化对象</div><div class="line"> */</div><div class="line">SmUploadImg.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.maxWidth = options.maxWidth || <span class="number">800</span>;</div><div class="line">	<span class="keyword">this</span>.maxHeight = options.maxHeight || <span class="number">600</span>;</div><div class="line">	<span class="keyword">this</span>.maxSize = options.maxSize || <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 图最大大小(5M)</span></div><div class="line">	<span class="keyword">this</span>.inputs = options.inputs; <span class="comment">// 文件输入框(可多个)</span></div><div class="line">	<span class="keyword">this</span>.mime = &#123;</div><div class="line">		<span class="string">'png'</span>: <span class="string">'image/png'</span>,</div><div class="line">		<span class="string">'jpg'</span>: <span class="string">'image/jpeg'</span>,</div><div class="line">		<span class="string">'jpeg'</span>: <span class="string">'image/jpeg'</span>,</div><div class="line">		<span class="string">'bmp'</span>: <span class="string">'image/bmp'</span></div><div class="line">	&#125;;</div><div class="line">	<span class="comment">// 提示函数</span></div><div class="line">	<span class="keyword">this</span>.toastr = options.toastr || <span class="literal">null</span>;</div><div class="line">	<span class="comment">// 图片加载完后返回base64</span></div><div class="line">	<span class="keyword">this</span>.callback = options.callback || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">	<span class="comment">// 读取图片时调用</span></div><div class="line">	<span class="keyword">this</span>.loading = options.loading || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// console.log("loading...");</span></div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>._addEvent();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**   </span></div><div class="line"> * @description 将base64的dataUrl转换成Blob对象</div><div class="line"> */</div><div class="line">SmUploadImg.prototype.dataUrltoBlob = <span class="function"><span class="keyword">function</span>(<span class="params">dataurl</span>) </span>&#123;	</div><div class="line">    <span class="keyword">var</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</div><div class="line">        bstr = atob(arr[<span class="number">1</span>]), n = bstr.length, u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</div><div class="line">    <span class="keyword">while</span>(n--)&#123;</div><div class="line">        u8arr[n] = bstr.charCodeAt(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8arr], &#123;<span class="attr">type</span>:mime&#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 为新加入Dom的元素绑定事件</div><div class="line"> * @param &#123;Object&#125; inputs</div><div class="line"> */</div><div class="line">SmUploadImg.prototype.addInputs = <span class="function"><span class="keyword">function</span>(<span class="params">inputs</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>._addEvent(inputs);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**   </span></div><div class="line"> * @description 绑定事件   </div><div class="line"> * @param &#123;Object&#125; elm 元素   </div><div class="line"> * @param &#123;Function&#125; fn 绑定函数   </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">inputs</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">tmpSelectFile</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">		_this._handelSelectFile(ev);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(!inputs) </div><div class="line">		inputs = _this.inputs;</div><div class="line">	<span class="keyword">if</span>(inputs.length || inputs.length == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; inputs.length; i++) &#123;</div><div class="line">			inputs[i].addEventListener(<span class="string">'change'</span>, tmpSelectFile, <span class="literal">false</span>);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(inputs) &#123;</div><div class="line">		inputs.addEventListener(<span class="string">'change'</span>, tmpSelectFile, <span class="literal">false</span>);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 绑定事件  </div><div class="line"> * @param &#123;Object&#125; elm 元素  </div><div class="line"> * @param &#123;Function&#125; fn 绑定函数  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._handelSelectFile = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> file = ev.target.files[<span class="number">0</span>];</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.type = file.type;</div><div class="line">	<span class="keyword">this</span>.target = ev.target;</div><div class="line"></div><div class="line">	<span class="comment">// 如果没有文件类型，则通过后缀名判断（解决微信及360浏览器无法获取图片类型问题）   </span></div><div class="line">	<span class="keyword">if</span>(!<span class="keyword">this</span>.type) &#123;</div><div class="line">		<span class="keyword">this</span>.type = <span class="keyword">this</span>.mime[file.name.match(<span class="regexp">/\.([^\.]+)$/i</span>)[<span class="number">1</span>]];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(!<span class="regexp">/image.(png|jpg|jpeg|bmp)/</span>.test(<span class="keyword">this</span>.type)) &#123;</div><div class="line">		<span class="keyword">var</span> msg = <span class="string">'不支持此文件类型'</span>;</div><div class="line">		<span class="keyword">this</span>.toastr ? <span class="keyword">this</span>.toastr(msg) : alert(msg);</div><div class="line">		<span class="keyword">this</span>.target.value = <span class="string">""</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(file.size &gt; <span class="keyword">this</span>.maxSize) &#123;</div><div class="line">		<span class="keyword">var</span> msg = <span class="string">'选择文件大于'</span> + <span class="keyword">this</span>.maxSize / <span class="number">1024</span> / <span class="number">1024</span> + <span class="string">'M，请重新选择'</span>;</div><div class="line">		<span class="keyword">this</span>.toastr ? <span class="keyword">this</span>.toastr(msg) : alert(msg);</div><div class="line">		<span class="keyword">this</span>.target.value = <span class="string">""</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.fileName = file.name;</div><div class="line">	<span class="keyword">this</span>.fileSize = file.size;</div><div class="line">	<span class="keyword">this</span>.fileType = <span class="keyword">this</span>.type;</div><div class="line">	<span class="keyword">this</span>.fileDate = file.lastModifiedDate;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>._readImage(file);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 读取图片文件  </div><div class="line"> * @param &#123;Object&#125; image 图片文件  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._readImage = <span class="function"><span class="keyword">function</span>(<span class="params">file</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">tmpCreateImage</span>(<span class="params">uri</span>) </span>&#123;</div><div class="line">		_this._createImage(uri);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.loading();</div><div class="line"></div><div class="line">	<span class="keyword">this</span>._getURI(file, tmpCreateImage);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 通过文件获得URI  </div><div class="line"> * @param &#123;Object&#125; file 文件  </div><div class="line"> * @param &#123;Function&#125; callback 回调函数，返回文件对应URI  </div><div class="line"> * return &#123;Bool&#125; 返回false  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._getURI = <span class="function"><span class="keyword">function</span>(<span class="params">file, callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">tmpLoad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">// 头不带图片格式，需填写格式   </span></div><div class="line">		<span class="keyword">var</span> re = <span class="regexp">/^data:base64,/</span>;</div><div class="line">		<span class="keyword">var</span> ret = <span class="keyword">this</span>.result + <span class="string">''</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(re.test(ret))</div><div class="line">			ret = ret.replace(re, <span class="string">'data:'</span> + _this.mime[_this.fileType] + <span class="string">';base64,'</span>);</div><div class="line"></div><div class="line">		callback &amp;&amp; callback(ret, <span class="keyword">this</span>.target);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	reader.onload = tmpLoad;</div><div class="line"></div><div class="line">	reader.readAsDataURL(file);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 创建图片  </div><div class="line"> * @param &#123;Object&#125; image 图片文件  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._createImage = <span class="function"><span class="keyword">function</span>(<span class="params">uri</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> img = <span class="keyword">new</span> Image();</div><div class="line">	<span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">tmpLoad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		_this._drawImage(<span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	img.onload = tmpLoad;</div><div class="line"></div><div class="line">	img.src = uri;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**  </span></div><div class="line"> * @description 创建Canvas将图片画至其中，并获得压缩后的文件  </div><div class="line"> * @param &#123;Object&#125; img 图片文件  </div><div class="line"> * @param &#123;Number&#125; width 图片最大宽度  </div><div class="line"> * @param &#123;Number&#125; height 图片最大高度  </div><div class="line"> * @param &#123;Function&#125; callback 回调函数，参数为图片base64编码  </div><div class="line"> * return &#123;Object&#125; 返回压缩后的图片  </div><div class="line"> */</div><div class="line">SmUploadImg.prototype._drawImage = <span class="function"><span class="keyword">function</span>(<span class="params">img, callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.sw = img.width;</div><div class="line">	<span class="keyword">this</span>.sh = img.height;</div><div class="line">	<span class="keyword">this</span>.tw = img.width;</div><div class="line">	<span class="keyword">this</span>.th = img.height;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.scale = (<span class="keyword">this</span>.tw / <span class="keyword">this</span>.th).toFixed(<span class="number">2</span>);</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.sw &gt; <span class="keyword">this</span>.maxWidth) &#123;</div><div class="line">		<span class="keyword">this</span>.sw = <span class="keyword">this</span>.maxWidth;</div><div class="line">		<span class="keyword">this</span>.sh = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.sw / <span class="keyword">this</span>.scale);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.sh &gt; <span class="keyword">this</span>.maxHeight) &#123;</div><div class="line">		<span class="keyword">this</span>.sh = <span class="keyword">this</span>.maxHeight;</div><div class="line">		<span class="keyword">this</span>.sw = <span class="built_in">Math</span>.round(<span class="keyword">this</span>.sh * <span class="keyword">this</span>.scale);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</div><div class="line">	<span class="keyword">var</span> ctx = <span class="keyword">this</span>.canvas.getContext(<span class="string">'2d'</span>);</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.canvas.width = <span class="keyword">this</span>.sw;</div><div class="line">	<span class="keyword">this</span>.canvas.height = <span class="keyword">this</span>.sh;</div><div class="line"></div><div class="line">	ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, img.width, img.height, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.sw, <span class="keyword">this</span>.sh);</div><div class="line"></div><div class="line">	<span class="keyword">this</span>.callback(<span class="keyword">this</span>.canvas.toDataURL(<span class="keyword">this</span>.type), <span class="keyword">this</span>.target);</div><div class="line"></div><div class="line">	ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.tw, <span class="keyword">this</span>.th);</div><div class="line">	<span class="keyword">this</span>.canvas.width = <span class="number">0</span>;</div><div class="line">	<span class="keyword">this</span>.canvas.height = <span class="number">0</span>;</div><div class="line">	<span class="keyword">this</span>.canvas = <span class="literal">null</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UI </tag>
            
            <tag> H5 </tag>
            
            <tag> App </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-security]]></title>
      <url>/2017/10/22/java/spring-security/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>官网：<a href="http://projects.spring.io/spring-security/" target="_blank" rel="external">http://projects.spring.io/spring-security/</a></li>
<li>文档：<a href="https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/" target="_blank" rel="external">V4.2.3</a></li>
<li>引入spring security后便有了session机制</li>
</ul>
<h3 id="spring-security实现方法-1"><a href="#spring-security实现方法-1" class="headerlink" title="spring security实现方法 [^1]"></a>spring security实现方法 [^1]</h3><ul>
<li>总共有四种用法，从简到深为<ul>
<li>不用数据库，全部数据写在配置文件，这个也是官方文档里面的demo</li>
<li>使用数据库，根据spring security默认实现代码设计数据库，也就是说数据库已经固定了，这种方法不灵活，而且那个数据库设计得很简陋，实用性差</li>
<li>spring security和Acegi不同，它不能修改默认filter了，但支持插入filter，所以根据这个，我们可以插入自己的filter来灵活使用<strong>（可基于此数据库结构进行自定义参数认证）</strong></li>
<li>暴力手段，修改源码，前面说的修改默认filter只是修改配置文件以替换filter而已，这种是直接改了里面的源码，但是这种不符合OO设计原则，而且不实际，不可用</li>
</ul>
</li>
</ul>
<h2 id="springboot整合"><a href="#springboot整合" class="headerlink" title="springboot整合"></a>springboot整合</h2><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring-Security --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li><p>SpringSecurityConfig 访问权限规则设置</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        auth.inMemoryAuthentication()</div><div class="line">            .withUser(<span class="string">"admin"</span>).password(<span class="string">"admin"</span>).roles(<span class="string">"ADMIN"</span>) <span class="comment">// 在内存中定义用户名密码为admin/admin, 角色为ADMIN的用户(用于登录和权限判断)</span></div><div class="line">            .and()</div><div class="line">            .withUser(<span class="string">"user"</span>).password(<span class="string">"user"</span>).roles(<span class="string">"USER"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义权限规则</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        http.headers().frameOptions().disable(); <span class="comment">// 解决spring boot项目中出现不能加载iframe</span></div><div class="line">        http.csrf().disable()</div><div class="line">            .authorizeRequests()</div><div class="line">                .antMatchers(<span class="string">"/manage/"</span>, <span class="string">"/manage/home"</span>, <span class="string">"/manage/about"</span>, <span class="string">"/manage/404"</span>, <span class="string">"/manage/403"</span>, <span class="string">"/thymeleaf/**"</span>).permitAll() <span class="comment">// 这些端点不进行权限验证</span></div><div class="line">                .antMatchers(<span class="string">"/resources/**"</span>).permitAll() <span class="comment">// idea的resources/static目录下的文件夹对应一个端点，相当于可以访问resources/static/resources/下所有文件（还有一些默认的端点：/css/**、/js/**、/images/**、/webjars/**、/**/favicon.ico）</span></div><div class="line">                .antMatchers(<span class="string">"/manage/**"</span>).hasAnyRole(<span class="string">"ADMIN"</span>) <span class="comment">// 需要有ADMIN角色才可访问/admin</span></div><div class="line">                .antMatchers(<span class="string">"/user/**"</span>).hasAnyRole(<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>) <span class="comment">// 有USER/ADMIN角色均可</span></div><div class="line">                .anyRequest().authenticated() <span class="comment">// (除上述忽略请求)所有的请求都需要权限认证</span></div><div class="line">                .and()</div><div class="line">            .formLogin()</div><div class="line">                .loginPage(<span class="string">"/manage/login"</span>).permitAll() <span class="comment">// 登录界面(Get)和登录处理方法(Post。具体逻辑不需要写，并且会自动生成此端点的control). 登录成功后，如果从登录界面登录则跳到项目主页(http://localhost:9526)，如果从其他页面跳转到登录页面进行登录则成功后跳转到原始页面</span></div><div class="line">                .and()</div><div class="line">            .logout().permitAll() <span class="comment">// 默认访问/logout(Get)即可登出</span></div><div class="line">                .and()</div><div class="line">            .exceptionHandling().accessDeniedHandler(accessDeniedHandler);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>AccessDeniedHandler访问受限拦截</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(MyAccessDeniedHandler.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest,</span></span></div><div class="line">                    HttpServletResponse httpServletResponse,</div><div class="line">                    AccessDeniedException e) <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line"></div><div class="line">        Authentication auth = SecurityContextHolder.getContext().getAuthentication();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (auth != <span class="keyword">null</span>) &#123;</div><div class="line">            logger.info(<span class="string">"用户 '"</span> + auth.getName() + <span class="string">"' 试图访问受保护的 URL: "</span> + httpServletRequest.getRequestURI());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"auth = "</span> + auth);</div><div class="line">        httpServletResponse.sendRedirect(<span class="string">"/manage/403"</span>); <span class="comment">// 跳转到403页面</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="示例扩展"><a href="#示例扩展" class="headerlink" title="示例扩展"></a>示例扩展</h3><ul>
<li>此示例使用数据库用户名/密码(或扩展验证)进行用户登录验证，并且对登录成功做处理，资源权限控制</li>
<li><p>SpringSecurityConfig 访问权限规则设置</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled=<span class="keyword">true</span>) <span class="comment">// 开启方法级别权限控制</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CustomAuthenticationProvider authProvider; <span class="comment">// 提供认证算法(判断是否登录成功)(1)</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AuthenticationDetailsSource&lt;HttpServletRequest, WebAuthenticationDetails&gt; authenticationDetailsSource; <span class="comment">// 认证信息</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler authenticationSuccessHandler; <span class="comment">// 用于处理登录成功(2)</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AuthenticationFailureHandler authenticationFailureHandler; <span class="comment">// 用于处理登录失败(2)</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AccessDeniedHandler accessDeniedHandler; <span class="comment">// 用于处理无权访问 (3)</span></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureGlobal</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        auth.authenticationProvider(authProvider);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义权限规则</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        http.headers().frameOptions().disable(); <span class="comment">// 解决spring boot项目中出现不能加载iframe</span></div><div class="line">        http.csrf().disable()</div><div class="line">            .authorizeRequests()</div><div class="line">                .antMatchers(<span class="string">"/manage/"</span>, <span class="string">"/manage/home"</span>, <span class="string">"/manage/about"</span>, <span class="string">"/manage/404"</span>, <span class="string">"/manage/403"</span>, <span class="string">"/thymeleaf/**"</span>).permitAll() <span class="comment">// 这些端点不进行权限验证</span></div><div class="line">                .antMatchers(<span class="string">"/resources/**"</span>).permitAll() <span class="comment">// idea的resources/static目录下的文件夹对应一个端点，相当于可以访问resources/static/resources/下所有文件（还有一些默认的端点：/css/**、/js/**、/images/**、/webjars/**、/**/favicon.ico）</span></div><div class="line">                .antMatchers(<span class="string">"/manage/**"</span>).hasAnyRole(<span class="string">"ADMIN"</span>) <span class="comment">// 需要有ADMIN角色才可访问/admin（有先后顺序，前面先定义的优先级高，因此比antMatchers("/**").hasAnyRole("USER", "ADMIN")优先级高）</span></div><div class="line">                .antMatchers(<span class="string">"/**"</span>).hasAnyRole(<span class="string">"USER"</span>, <span class="string">"ADMIN"</span>) <span class="comment">// 有USER/ADMIN角色均可</span></div><div class="line">                .anyRequest().authenticated() <span class="comment">// (除上述忽略请求)所有的请求都需要权限认证</span></div><div class="line">                .and()</div><div class="line">            .formLogin()</div><div class="line">                .loginPage(<span class="string">"/manage/login"</span>).permitAll() <span class="comment">// 登录界面(Get)</span></div><div class="line">                .loginProcessingUrl(<span class="string">"/manage/login"</span>) <span class="comment">// 或者通配符/**/login拦截对"/manage/login"和"/login"等的POST请求(登录请求。具体逻辑不需要写，并且会自动生成此端点的control，否则和loginPage一致)</span></div><div class="line">                .successHandler(authenticationSuccessHandler) <span class="comment">// 此处定义登录成功处理方法</span></div><div class="line">                .failureHandler(authenticationFailureHandler)</div><div class="line">                .authenticationDetailsSource(authenticationDetailsSource)</div><div class="line">                .and()</div><div class="line">            .logout().logoutUrl(<span class="string">"/manage/logout"</span>).logoutSuccessUrl(<span class="string">"/manage/login"</span>).permitAll() <span class="comment">// 访问"/manage/logout"登出，登出成功后跳转到"/manage/login"</span></div><div class="line">                .and()</div><div class="line">            .exceptionHandling().accessDeniedHandler(accessDeniedHandler);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>自定义登录认证字段(spring security默认基于username/password完成)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomWebAuthenticationDetails</span> <span class="keyword">extends</span> <span class="title">WebAuthenticationDetails</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String wxCode; <span class="comment">// 此处为微信公众号使用微信code进行认证，也可扩展邮箱/手机号等</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomWebAuthenticationDetails</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(request);</div><div class="line">        wxCode = request.getParameter(<span class="string">"wxCode"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWxCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> wxCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        sb.append(<span class="keyword">super</span>.toString()).append(<span class="string">"; wxCode: "</span>).append(<span class="keyword">this</span>.getWxCode());</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将自定义登录认证字段加入到认证数据源</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationDetailsSource</span> <span class="keyword">implements</span> <span class="title">AuthenticationDetailsSource</span>&lt;<span class="title">HttpServletRequest</span>, <span class="title">WebAuthenticationDetails</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> WebAuthenticationDetails <span class="title">buildDetails</span><span class="params">(HttpServletRequest context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomWebAuthenticationDetails(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>根据用户唯一字段(如username、wxCode)获取用户信息</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserDao userDao;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomUserDetailsService</span><span class="params">(UserDao userDao)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userDao = userDao;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 根据自定义登录认证字段获取用户信息。此处简化微信公众号认证(原本需要先拿到openid)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByWxCode</span><span class="params">(String wxCode)</span></span></div><div class="line">            <span class="keyword">throws</span> UsernameNotFoundException &#123;</div><div class="line">        <span class="keyword">if</span>(wxCode == <span class="keyword">null</span> || <span class="string">""</span>.equals(wxCode)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"invalid wxCode "</span> + wxCode);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        User user = userDao.findByWxCode(wxCode);</div><div class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"Could not find user, user wxCode "</span> + wxCode);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomUserDetails(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 默认根据username(唯一)获取用户信息</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span></span></div><div class="line">            <span class="keyword">throws</span> UsernameNotFoundException &#123;</div><div class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span> || <span class="string">""</span>.equals(username)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"invalid username "</span> + username);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        User user = userDao.findByUsername(username);</div><div class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"Could not find user "</span> + username);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomUserDetails(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 自定义用户认证Model</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUserDetails</span> <span class="keyword">extends</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">CustomUserDetails</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(user);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</div><div class="line">            <span class="keyword">return</span> AuthorityUtils.createAuthorityList(<span class="string">"ROLE_"</span> + <span class="keyword">this</span>.getRoleCode()); <span class="comment">// 组成如：ROLE_ADMIN/ROLE_USER，在资源权限定义时写法如：hasRole('ADMIN')</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5639683223516504866L</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>(1) 基于自定义登录认证字段，提供登录算法(返回认证对象Authentication)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CustomUserDetailsService customUserDetailsService;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomAuthenticationProvider</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(<span class="keyword">final</span> Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">        CustomWebAuthenticationDetails details = (CustomWebAuthenticationDetails) authentication.getDetails();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> String wxCode = details.getWxCode();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> String username = authentication.getName();</div><div class="line">        <span class="keyword">final</span> String password = authentication.getCredentials().toString();</div><div class="line"></div><div class="line">        UserDetails userDetails = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(username) &amp;&amp; !StringUtils.isEmpty(password)) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                userDetails = customUserDetailsService.loadUserByUsername(username);</div><div class="line">            &#125; <span class="keyword">catch</span> (UsernameNotFoundException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!StringUtils.isEmpty(wxCode)) &#123;</div><div class="line">            userDetails = customUserDetailsService.loadUserByWxCode(wxCode);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid params: username,password and wxCode are invalid"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(userDetails != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> List&lt;GrantedAuthority&gt; grantedAuths = (List&lt;GrantedAuthority&gt;) userDetails.getAuthorities();</div><div class="line">            <span class="keyword">final</span> Authentication auth = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(userDetails, password, grantedAuths);</div><div class="line">            <span class="keyword">return</span> auth;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; authentication)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> authentication.equals(UsernamePasswordAuthenticationToken.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>(2)登录校验完成拦截：登录成功/失败处理</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFinishHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(LoginFinishHandler.class);</div><div class="line"></div><div class="line">    <span class="meta">@Component</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">            CustomWebAuthenticationDetails details = (CustomWebAuthenticationDetails) authentication.getDetails();</div><div class="line">            String wxCode = details.getWxCode();</div><div class="line"></div><div class="line">            HttpSession session = httpServletRequest.getSession();</div><div class="line">            User user = (User) authentication.getPrincipal();</div><div class="line">            session.setAttribute(<span class="string">"SESSION_USER_INFO"</span>, user);</div><div class="line"></div><div class="line">            logger.info(<span class="string">"&#123;&#125; 登录成功"</span>, user.getUsername());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Component</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationFailureHandler</span> <span class="keyword">extends</span> <span class="title">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">            logger.info(<span class="string">"登录失败"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>(3)AccessDeniedHandler访问受限拦截同上例</p>
</li>
</ul>
<h3 id="在方法-资源-上加权限控制"><a href="#在方法-资源-上加权限控制" class="headerlink" title="在方法(资源)上加权限控制"></a>在方法(资源)上加权限控制</h3><ul>
<li>需要权限配置类上加注解<code>@EnableGlobalMethodSecurity(prePostEnabled=true)</code>，标识开启方法级别prePostEnabled权限控制，还可以开启其他控制</li>
<li><p>使用</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Controller.java</span></div><div class="line"><span class="comment">// @PreAuthorize("hasRole('ADMIN')") // 可使用自定义注解@HasAdminRole进行封装(可组合更复杂的权限注解)</span></div><div class="line"><span class="meta">@HasAdminRole</span></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/adminRole"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">adminRole</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"/adminRole"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// HasAdminRole.java</span></div><div class="line"><span class="comment">// 自定义权限注解，被@HasAdminRole注解的方法需要有ADMIN角色</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('ADMIN')"</span>)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> HasAdminRole &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>更多权限控制说明：<a href="https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/#jc-authentication" target="_blank" rel="external">https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/#jc-authentication</a></p>
</li>
</ul>
<hr>
<p>[^1]: <a href="http://www.importnew.com/20612.html" target="_blank" rel="external">spring security的原理及教程</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
            <tag> spring </tag>
            
            <tag> springsecurity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[h2数据库]]></title>
      <url>/2017/10/21/db/h2/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>h2简介 <a href="[h2介绍](http://412887952-qq-com.iteye.com/blog/2322756)">^1</a>：内存数据库（Embedded database或in-momery database）具有配置简单、启动速度快、尤其是其可测试性等优点，使其成为开发过程中非常有用的轻量级数据库。在spring中支持HSQL、H2和Derby三种数据库</li>
<li><a href="http://h2database.com/html/main.html" target="_blank" rel="external">官网：http://h2database.com/html/main.html</a>\</li>
</ul>
<h2 id="springboot整合"><a href="#springboot整合" class="headerlink" title="springboot整合"></a>springboot整合</h2><ul>
<li><p>添加依赖(jpa等省略)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.h2database&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;h2&lt;/artifactId&gt;</div><div class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>连接配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">    datasource:</div><div class="line">    # 用户名密码会根据填写的生成(默认生成的用户名为sa, 密码为空)</div><div class="line">    url: jdbc:h2:~/.h2/minions;AUTO_SERVER=true;</div><div class="line">    # 用户名密码会根据填写的生成(默认生成的用户名为sa, 密码为空).</div><div class="line">    # 如果已经生成了数据库文件(同时也生成了密码), 那么再修改此处用户名密码将无法连接数据库</div><div class="line">    username: sa</div><div class="line">    password: sa</div><div class="line">    driver-class-name: org.h2.Driver</div><div class="line"># h2 web console</div><div class="line"># 登录配置Generic H2 (Server)  jdbc:h2:~/.h2/minions;AUTO_SERVER=true;  sa/sa</div><div class="line"># 推荐使用IDEA的数据库工具</div><div class="line">#  h2:</div><div class="line">#    console:</div><div class="line">#      # 程序开启时就会启动h2 web consloe</div><div class="line">#      enabled: true</div><div class="line">#      # 访问路径: http://localhost:$&#123;server.port&#125;/h2-console</div><div class="line">#      path: /h2-console</div><div class="line">#      settings:</div><div class="line">#        # 运行远程访问h2 web consloe</div><div class="line">#        web-allow-others: true</div></pre></td></tr></table></figure>
</li>
<li><p>配置说明</p>
<ul>
<li><code>jdbc:h2:file:~/.h2/minions;</code>文件型存储(默认可省略file:). <code>jdbc:h2:minions;</code>则代表在当前目录(运行h2 jar的位置)生成数据库文件</li>
<li><code>jdbc:h2:mem:my_db_name;</code>内存型存储(在连接的瞬间即可创建数据库)，程序关掉则内存数据丢失</li>
<li><code>~</code> 这个符号代表的就是当前登录到操作系统的用户对应的用户目录. <code>minions</code>代表数据库名(会在~/.h2目录生成minions.mv.db文件)</li>
<li><code>AUTO_SERVER=true;</code>表示以TCP服务形式启动数据库. 否则项目启动(数据库启动)后, idea无法连接数据库(<code>AUTO_SERVER_PORT=9092;</code>可指明端口, 不指明会的话自动识别)</li>
</ul>
</li>
<li>IDEA数据库工具使用 <a href="[idea连接h2](https://stackoverflow.com/questions/31498682/spring-boot-intellij-embedded-database-headache)">^2</a><ul>
<li>Url: <code>jdbc:h2:~/.h2/minions;AUTO_SERVER=true;</code></li>
<li>Url类型：<code>Remote</code></li>
<li>用户名/密码：<code>sa/sa</code></li>
<li>其他都不需要填写(url处可能报红可忽略)</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
        <tags>
            
            <tag> db </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[行业概念]]></title>
      <url>/2017/10/12/others/business-conception/</url>
      <content type="html"><![CDATA[<h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><ul>
<li><code>ERP</code> 企业资源计划(Enterprise Resource Planning)</li>
</ul>
<h2 id="物流"><a href="#物流" class="headerlink" title="物流"></a>物流</h2><ul>
<li><code>WMS</code> 仓库管理系统(Warehouse Management System)</li>
<li><code>MES</code> 制造执行系统(Manufacturing Execution System) <a href="[MES七大功能-MES解决方案](https://wenku.baidu.com/view/1627cd0a844769eae009edfe.html)">^1</a><ul>
<li>功能：库房管理、生产调度、制造过程管理、质量管理、设备工装管理、文档管理、物料批次跟踪</li>
</ul>
</li>
</ul>
<h2 id="营销-运营"><a href="#营销-运营" class="headerlink" title="营销/运营"></a>营销/运营</h2><ul>
<li><code>MVP</code> 最小价值产品或最小可视化产品(Minimal Viable Product) <a href="[MVP是什么](https://www.zhihu.com/question/47489768?from=profile_question_card)">^2</a></li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> business </tag>
            
            <tag> conception </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内网穿透]]></title>
      <url>/2017/10/09/extend/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>内网穿透，即NAT穿透，让外网用户可通过公网ip访问到内网服务。有时想要让其他人通过域名访问或者测试我们在本地搭建的 web 服务，但是由于本地机器没有公网 IP，无法将域名解析到本地的机器，通过内网穿透就可以实现这一功能</li>
<li>常见的内网穿透工具如ngrok(二级域名每次启动会变化)、花生壳(需要支付8元)、NATAPP(和ngrok类似，2-3天会更新二级域名)。当然本文不不会介绍这些xx.</li>
<li>本文介绍的内网穿透工具：frp。(内网穿透仍然需要一台公网IP的服务器，如阿里云服务器)</li>
</ul>
<h2 id="frp实现内网穿透"><a href="#frp实现内网穿透" class="headerlink" title="frp实现内网穿透"></a>frp实现内网穿透</h2><h3 id="frp介绍"><a href="#frp介绍" class="headerlink" title="frp介绍"></a>frp介绍</h3><ul>
<li>开源项目，支持<code>TCP</code>、<code>UDP</code>、<code>HTTP</code>、<code>HTTPS</code>，支持自定义域名绑定</li>
<li><a href="https://github.com/fatedier/frp" target="_blank" rel="external">github链接</a>、<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="external">中文文档</a></li>
</ul>
<h3 id="frp使用"><a href="#frp使用" class="headerlink" title="frp使用"></a>frp使用</h3><blockquote>
<ul>
<li>本文配合nginx使用(本文公网服务器不是主要用于内网穿透，且解析了多个域名，所以有些端口，如80被占用)</li>
<li>本文以微信公众号H5开发为例(微信H5开发需要绑定回调地址，此回调地址必须是备案的域名，因此本地开发比较麻烦故使用内网穿透解决)</li>
</ul>
</blockquote>
<ul>
<li>下载最新frp版本，本文使用<code>v0.13.0</code><ul>
<li>需要下载公网IP服务器(以下简称”服务器”)适用版(如<code>frp_0.13.0_linux_amd64.tar.gz</code>)和本地适用版(如<code>frp_0.13.0_windows_amd64.zip</code>)</li>
</ul>
</li>
<li><p>服务端</p>
<ul>
<li>解压后含有<code>frps.ini</code>(配置文件)、<code>frps</code>(可执行文件)</li>
<li><p>对<code>frps.ini</code>进行配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[common]</div><div class="line">bind_port = 7000</div><div class="line"># 使用泛域名*.frp.aezo.cn(需要将*.frp解析到此服务器)(不使用泛域名可忽略)</div><div class="line">subdomain_host = frp.aezo.cn</div><div class="line"># 访问本地服务需要映射公网ip的端口(所有的都走此端口)</div><div class="line">vhost_http_port = 7070</div><div class="line"></div><div class="line"># dashboard(后台可视化管理)访问地址和用户名密码</div><div class="line">dashboard_port = 7500</div><div class="line">dashboard_user = smalle</div><div class="line">dashboard_pwd = smalle</div></pre></td></tr></table></figure>
</li>
<li><p>后台运行frp服务端：<code>nohup sudo -b ./frps &gt; my.log 2&gt;&amp;1 &amp;</code></p>
</li>
<li>服务器将开放相应端口：<strong>7000、7070、7050(入)；7000(出)</strong></li>
<li><p>服务器nginx配置如下</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen  <span class="number">80</span>;</div><div class="line">	server_name test.aezo.cn;</div><div class="line"></div><div class="line">	location / &#123;</div><div class="line">    		proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</div><div class="line">    		proxy_set_header Host $http_host;</div><div class="line">    		proxy_redirect off;</div><div class="line">    		<span class="keyword">if</span> (!-f $request_filename) &#123;</div><div class="line">    			proxy_pass http:<span class="comment">//test.aezo.cn:7070;</span></div><div class="line">    			<span class="keyword">break</span>;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>需要将域名<code>test.aezo.cn</code>解析到此服务器(101.1.1.1)</p>
</li>
</ul>
</li>
<li><p>客户端</p>
<ul>
<li>解压后含有<code>frpc.ini</code>(配置文件)、<code>frpc</code>(可执行文件)</li>
<li><p>对<code>frpc.ini</code>进行配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[common]</div><div class="line"># 服务器公网ip</div><div class="line">server_addr = 101.1.1.1</div><div class="line">server_port = 7000</div><div class="line"></div><div class="line">[web]</div><div class="line">type = http</div><div class="line"># 访问本地服务的端口</div><div class="line">local_port = 80</div><div class="line">custom_domains = test.aezo.cn</div><div class="line"></div><div class="line"># 不使用泛域名可忽略</div><div class="line">[web01]</div><div class="line">type = http</div><div class="line">local_port = 80</div><div class="line"># 使用泛域名进行解析(映射到http://test.frp.aezo.cn)</div><div class="line">subdomain = test</div></pre></td></tr></table></figure>
</li>
<li><p>cmd运行<code>frpc -c ./frpc.ini</code>(可写成start.bat文件方便快速运行)</p>
</li>
<li>客户端也可配合使用nginx</li>
</ul>
</li>
<li>请求流程<ul>
<li>访问：<a href="http://test.aezo.cn，被nginx监听" target="_blank" rel="external">http://test.aezo.cn，被nginx监听</a></li>
<li>服务端nginx转向：<a href="http://test.aezo.cn:7070，被frp监听" target="_blank" rel="external">http://test.aezo.cn:7070，被frp监听</a></li>
<li>frp通过7000端口和frp客户端进行通信：<a href="http://127.0.0.1:80" target="_blank" rel="external">http://127.0.0.1:80</a></li>
</ul>
</li>
<li>微信h5开发：将<code>test.aezo.cn</code>绑定到对应的回调地址上即可</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> extend </category>
            
        </categories>
        
        
        <tags>
            
            <tag> frp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[oracle-function]]></title>
      <url>/2017/09/30/db/oracle_function/</url>
      <content type="html"><![CDATA[<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><code>wm_concat</code>行转列(默认用”,”分割，select的其他字段需要是group by字段)<ul>
<li><code>select replace(wm_concat(name), &#39;,&#39;, &#39;|&#39;) from test;</code>替换分割符</li>
</ul>
</li>
</ul>
<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h3 id="字符串分割函数"><a href="#字符串分割函数" class="headerlink" title="字符串分割函数"></a>字符串分割函数</h3><ul>
<li>创建字符串数组类型：<code>create or replace type sm_type_arr_str is table of varchar2 (60);</code> (一个数组，每个元素是varchar2 (60))</li>
<li><p>创建自定义函数<code>sm_split</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">create or replace function sm_split(p_str       in varchar2,</div><div class="line">                                p_delimiter in varchar2)</div><div class="line">  return sm_type_arr_str</div><div class="line">  pipelined is</div><div class="line">  j    int := 0;</div><div class="line">  i    int := 1;</div><div class="line">  len  int := 0;</div><div class="line">  len1 int := 0;</div><div class="line">  str  varchar2(4000);</div><div class="line">begin</div><div class="line">  len  := length(p_str);</div><div class="line">  len1 := length(p_delimiter);</div><div class="line"></div><div class="line">  while j &lt; len loop</div><div class="line">    j := instr(p_str, p_delimiter, i);</div><div class="line"></div><div class="line">    if j = 0 then</div><div class="line">      j   := len;</div><div class="line">      str := substr(p_str, i);</div><div class="line">      pipe row(str);</div><div class="line">      if i &gt;= len then</div><div class="line">        exit;</div><div class="line">      end if;</div><div class="line">    else</div><div class="line">      str := substr(p_str, i, j - i);</div><div class="line">      i   := j + len1;</div><div class="line">      pipe row(str);</div><div class="line">    end if;</div><div class="line">  end loop;</div><div class="line"></div><div class="line">  return;</div><div class="line">end sm_split;</div></pre></td></tr></table></figure>
</li>
<li><p>查询示例：<code>select * from table (cast (sm_split (&#39;aa,,bb,cc,,&#39;, &#39;,&#39;) as sm_type_arr_str));</code> 结果如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  COLUMN_VALUE</div><div class="line">1	aa</div><div class="line">2</div><div class="line">3	bb</div><div class="line">4	cc</div><div class="line">5</div></pre></td></tr></table></figure>
</li>
<li><p>示例二</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> t.*</div><div class="line">  <span class="keyword">from</span> test_table t</div><div class="line">  <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span></div><div class="line">          <span class="keyword">from</span> <span class="keyword">table</span>(<span class="keyword">cast</span>(sm_split(t.name, <span class="string">','</span>) <span class="keyword">as</span> sm_type_arr_str)) arr</div><div class="line">          <span class="keyword">where</span> <span class="keyword">trim</span>(arr.column_value) = <span class="string">'aa'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
        <tags>
            
            <tag> oracle </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[chrome]]></title>
      <url>/2017/09/13/extend/chrome/</url>
      <content type="html"><![CDATA[<h2 id="chrome插件收集"><a href="#chrome插件收集" class="headerlink" title="chrome插件收集"></a>chrome插件收集</h2><ul>
<li><code>Postman</code> Http请求客户端</li>
<li><code>JSONView</code> 将Http请求获取的json字符串格式化(可收缩)</li>
<li><code>Secure Shell</code> ssh客户端</li>
<li><code>Axure RP Extension for Chrome</code> Axure设计</li>
<li><code>Set Character Encoding</code> 解决chrome查看源码乱码问题</li>
<li><code>Vue.js devtools</code> Vue.js调试工具</li>
<li><code>AdBlock</code> 广告拦截</li>
<li><code>有道词典Chrome划词插件</code></li>
<li><code>印象笔记·剪藏</code></li>
<li><p><code>Infinity新标签页</code> 标签管理</p>
</li>
<li><p><code>Octo Mate</code> github单文件下载(也可右键github按钮raw另存为)</p>
</li>
</ul>
<h2 id="调试技巧"><a href="#调试技巧" class="headerlink" title="调试技巧"></a>调试技巧</h2><ul>
<li><code>ctrl + shift + i</code>/<code>F12</code> 打开开发者工具</li>
<li>主面板介绍<ul>
<li><code>Elements</code> html文件显示，Css样式调试</li>
<li><code>Console</code> js代码打印面板</li>
<li><code>Sources</code> 静态文件(html、css、js、images等)<ul>
<li><code>{}</code>/<code>Pretty Print</code>可对压缩文件进行格式化</li>
</ul>
</li>
<li><code>NetWork</code> 网络显示面板：记录所有请求加载(XHR/JS/CSS/Img等)<ul>
<li><code>Initiator</code> 可查看此执行此请求的运行栈(如：某按钮被点击 - 发起XHR请求)</li>
<li>点击某个请求可查看请求头(Headers)、响应结果等</li>
</ul>
</li>
<li><code>Application</code> 查看网址的Cookies、Storage等</li>
<li><code>更多按钮</code><ul>
<li><code>Search all files</code> 基于此url地址请求的所有静态文件进行查询。多用于js函数搜索</li>
</ul>
</li>
</ul>
</li>
<li>VM文件查看<ul>
<li>VM文件是V8引擎计算出的临时代码，VM文件出现情况，如：（1）直接在console控制台运行js代码 （2）使用eval函数计算js代码(如果一些函数通过eval定义)（3）js添加的<code>&lt;script&gt;</code>标签产生的</li>
<li>查看VM函数<ul>
<li><code>debugger</code> 相应代码。如某些函数通过eval定义，在调用此函数的地方debugger，运行到该行后，点击此行数就会出VM文件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="chrome插件开发"><a href="#chrome插件开发" class="headerlink" title="chrome插件开发"></a>chrome插件开发</h2><ul>
<li>中文文档：<a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="external">http://open.chrome.360.cn/extension_dev/overview.html</a></li>
</ul>
<h3 id="helloword：改变网页背景颜色"><a href="#helloword：改变网页背景颜色" class="headerlink" title="helloword：改变网页背景颜色"></a>helloword：改变网页背景颜色</h3><ul>
<li>chrome官网例子getstarted，下载地址<code>https://developer.chrome.com/extensions/examples/tutorials/getstarted.zip</code></li>
<li><p>效果展示</p>
<p>  <img src="/data/images/2016/09/chrome-plugin-helloword.png" alt="chrome-plugin-helloword"></p>
</li>
<li><p><code>icon.png</code> 显示</p>
</li>
<li><p><code>manifest.json</code></p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line"></div><div class="line">    <span class="string">"name"</span>: <span class="string">"Getting started example"</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="string">"This extension allows the user to change the background color of the current page."</span>,</div><div class="line">    <span class="string">"version"</span>: <span class="string">"1.0"</span>,</div><div class="line"></div><div class="line">    <span class="string">"browser_action"</span>: &#123;</div><div class="line">        <span class="string">"default_icon"</span>: <span class="string">"icon.png"</span>,</div><div class="line">        <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"permissions"</span>: [</div><div class="line">        <span class="string">"activeTab"</span>,</div><div class="line">        <span class="string">"storage"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>popup.html</code></p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Getting Started Extension's Popup<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">    body &#123;</div><div class="line">        margin: 10px;</div><div class="line">        white-space: nowrap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    h1 &#123;</div><div class="line">        font-size: 15px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #container &#123;</div><div class="line">        align-items: center;</div><div class="line">        display: flex;</div><div class="line">        justify-content: space-between;</div><div class="line">    &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"popup.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Background Color Changer<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Choose a color<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">disabled</span> <span class="attr">hidden</span> <span class="attr">value</span>=<span class="string">''</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"white"</span>&gt;</span>White<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"pink"</span>&gt;</span>Pink<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"green"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"yellow"</span>&gt;</span>Yellow<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>popup.js</code></p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Get the current URL.</div><div class="line">*</div><div class="line">* @param &#123;function(string)&#125; callback called when the URL of the current tab</div><div class="line">*   is found.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentTabUrl</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="comment">// Query filter to be passed to chrome.tabs.query - see</span></div><div class="line">    <span class="comment">// https://developer.chrome.com/extensions/tabs#method-query</span></div><div class="line">    <span class="keyword">var</span> queryInfo = &#123;</div><div class="line">        <span class="attr">active</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">currentWindow</span>: <span class="literal">true</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    chrome.tabs.query(queryInfo, (tabs) =&gt; &#123;</div><div class="line">        <span class="comment">// chrome.tabs.query invokes the callback with a list of tabs that match the</span></div><div class="line">        <span class="comment">// query. When the popup is opened, there is certainly a window and at least</span></div><div class="line">        <span class="comment">// one tab, so we can safely assume that |tabs| is a non-empty array.</span></div><div class="line">        <span class="comment">// A window can only have one active tab at a time, so the array consists of</span></div><div class="line">        <span class="comment">// exactly one tab.</span></div><div class="line">        <span class="keyword">var</span> tab = tabs[<span class="number">0</span>];</div><div class="line"></div><div class="line">        <span class="comment">// A tab is a plain object that provides information about the tab.</span></div><div class="line">        <span class="comment">// See https://developer.chrome.com/extensions/tabs#type-Tab</span></div><div class="line">        <span class="keyword">var</span> url = tab.url;</div><div class="line"></div><div class="line">        <span class="comment">// tab.url is only available if the "activeTab" permission is declared.</span></div><div class="line">        <span class="comment">// If you want to see the URL of other tabs (e.g. after removing active:true</span></div><div class="line">        <span class="comment">// from |queryInfo|), then the "tabs" permission is required to see their</span></div><div class="line">        <span class="comment">// "url" properties.</span></div><div class="line">        <span class="built_in">console</span>.assert(<span class="keyword">typeof</span> url == <span class="string">'string'</span>, <span class="string">'tab.url should be a string'</span>);</div><div class="line"></div><div class="line">        callback(url);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// Most methods of the Chrome extension APIs are asynchronous. This means that</span></div><div class="line">    <span class="comment">// you CANNOT do something like this:</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// var url;</span></div><div class="line">    <span class="comment">// chrome.tabs.query(queryInfo, (tabs) =&gt; &#123;</span></div><div class="line">    <span class="comment">//   url = tabs[0].url;</span></div><div class="line">    <span class="comment">// &#125;);</span></div><div class="line">    <span class="comment">// alert(url); // Shows "undefined", because chrome.tabs.query is async.</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Change the background color of the current page.</div><div class="line">    *</div><div class="line">    * @param &#123;string&#125; color The new background color.</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeBackgroundColor</span>(<span class="params">color</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> script = <span class="string">'document.body.style.backgroundColor="'</span> + color + <span class="string">'";'</span>;</div><div class="line">    <span class="comment">// See https://developer.chrome.com/extensions/tabs#method-executeScript.</span></div><div class="line">    <span class="comment">// chrome.tabs.executeScript allows us to programmatically inject JavaScript</span></div><div class="line">    <span class="comment">// into a page. Since we omit the optional first argument "tabId", the script</span></div><div class="line">    <span class="comment">// is inserted into the active tab of the current window, which serves as the</span></div><div class="line">    <span class="comment">// default.</span></div><div class="line">    chrome.tabs.executeScript(&#123;</div><div class="line">        <span class="attr">code</span>: script</div><div class="line">    &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Gets the saved background color for url.</div><div class="line">    *</div><div class="line">    * @param &#123;string&#125; url URL whose background color is to be retrieved.</div><div class="line">    * @param &#123;function(string)&#125; callback called with the saved background color for</div><div class="line">    *     the given url on success, or a falsy value if no color is retrieved.</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getSavedBackgroundColor</span>(<span class="params">url, callback</span>) </span>&#123;</div><div class="line">    <span class="comment">// See https://developer.chrome.com/apps/storage#type-StorageArea. We check</span></div><div class="line">    <span class="comment">// for chrome.runtime.lastError to ensure correctness even when the API call</span></div><div class="line">    <span class="comment">// fails.</span></div><div class="line">    chrome.storage.sync.get(url, (items) =&gt; &#123;</div><div class="line">        callback(chrome.runtime.lastError ? <span class="literal">null</span> : items[url]);</div><div class="line">    &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Sets the given background color for url.</div><div class="line">    *</div><div class="line">    * @param &#123;string&#125; url URL for which background color is to be saved.</div><div class="line">    * @param &#123;string&#125; color The background color to be saved.</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">saveBackgroundColor</span>(<span class="params">url, color</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> items = &#123;&#125;;</div><div class="line">    items[url] = color;</div><div class="line">    <span class="comment">// See https://developer.chrome.com/apps/storage#type-StorageArea. We omit the</span></div><div class="line">    <span class="comment">// optional callback since we don't need to perform any action once the</span></div><div class="line">    <span class="comment">// background color is saved.</span></div><div class="line">    chrome.storage.sync.set(items);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// This extension loads the saved background color for the current tab if one</span></div><div class="line">    <span class="comment">// exists. The user can select a new background color from the dropdown for the</span></div><div class="line">    <span class="comment">// current page, and it will be saved as part of the extension's isolated</span></div><div class="line">    <span class="comment">// storage. The chrome.storage API is used for this purpose. This is different</span></div><div class="line">    <span class="comment">// from the window.localStorage API, which is synchronous and stores data bound</span></div><div class="line">    <span class="comment">// to a document's origin. Also, using chrome.storage.sync instead of</span></div><div class="line">    <span class="comment">// chrome.storage.local allows the extension data to be synced across multiple</span></div><div class="line">    <span class="comment">// user devices.</span></div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</div><div class="line">    getCurrentTabUrl(<span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">var</span> dropdown = <span class="built_in">document</span>.getElementById(<span class="string">'dropdown'</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Load the saved background color for this page and modify the dropdown</span></div><div class="line">        <span class="comment">// value, if needed.</span></div><div class="line">        getSavedBackgroundColor(url, (savedColor) =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (savedColor) &#123;</div><div class="line">            changeBackgroundColor(savedColor);</div><div class="line">            dropdown.value = savedColor;</div><div class="line">        &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// Ensure the background color is changed and saved when the dropdown</span></div><div class="line">        <span class="comment">// selection changes.</span></div><div class="line">        dropdown.addEventListener(<span class="string">'change'</span>, () =&gt; &#123;</div><div class="line">        changeBackgroundColor(dropdown.value);</div><div class="line">        saveBackgroundColor(url, dropdown.value);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="打包发布"><a href="#打包发布" class="headerlink" title="打包发布"></a>打包发布</h3><ol>
<li>打包为crx文件发布<ul>
<li>在chrome安装目录运行 <code>chrome.exe --pack-extension=&quot;D:\chromeplugins\helloword&quot;</code><ul>
<li><code>helloword</code>为插件源码根目录</li>
<li>会生成<code>helloword.crx</code>(扩展文件)和<code>helloword.pem</code>(密钥)</li>
</ul>
</li>
</ul>
</li>
<li>上传zip到chrome：<a href="https://chrome.google.com/webstore/developer/dashboard" target="_blank" rel="external">https://chrome.google.com/webstore/developer/dashboard</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> extend </category>
            
        </categories>
        
        
        <tags>
            
            <tag> plugins </tag>
            
            <tag> debug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[db-procedure]]></title>
      <url>/2017/08/24/db/mysql-procedure/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Mysql存储过程调试工具：<code>dbForge Studio for MySQL</code></li>
</ul>
<h2 id="Mysql存储过程示例"><a href="#Mysql存储过程示例" class="headerlink" title="Mysql存储过程示例"></a>Mysql存储过程示例</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">CREATE DEFINER = 'root'@'localhost'</div><div class="line">PROCEDURE test.county(IN `in_provid` int, IN `in_urlid` int)</div><div class="line">BEGIN</div><div class="line">  DECLARE v_sql varchar(1000);</div><div class="line">  DECLARE c_cityid integer;</div><div class="line">  DECLARE c_cityname varchar(20);</div><div class="line">  DECLARE c_countyname varchar(20);</div><div class="line">  DECLARE c_cityid_tmp integer;</div><div class="line"></div><div class="line">  # 是否未找到数据标记(要在游标之前定义)</div><div class="line">  DECLARE done INT DEFAULT FALSE;</div><div class="line"></div><div class="line">  -- 定义第一个游标</div><div class="line">  DECLARE cur1 CURSOR FOR</div><div class="line">  SELECT</div><div class="line">    t.N_CITYID,</div><div class="line">    t.S_CITYNAME</div><div class="line">  FROM dict_city t</div><div class="line">  WHERE t.N_PROVID = in_provid;</div><div class="line"></div><div class="line">  # 临时表游标</div><div class="line">  DECLARE cur2 CURSOR FOR</div><div class="line">  SELECT</div><div class="line">    S_COUNTYNAME,</div><div class="line">    N_CITYID AS cityid</div><div class="line">  FROM tmp_table;</div><div class="line"></div><div class="line">  # 循环终止的标志，游标中如果没有数据就设置done为TRUE(停止遍历)</div><div class="line">  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;</div><div class="line"></div><div class="line">  # 创建临时表</div><div class="line">  DROP TABLE IF EXISTS tmp_table;</div><div class="line">  CREATE TEMPORARY TABLE IF NOT EXISTS tmp_table (</div><div class="line">    ID int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,</div><div class="line">    S_COUNTYNAME varchar(20),</div><div class="line">    N_CITYID int(10)</div><div class="line">  );</div><div class="line"></div><div class="line">  # mysql不能直接变量结果集, 此出场将结果集放到临时表中, 用于后面变量</div><div class="line">  OPEN cur1;</div><div class="line">  flag_loop: LOOP</div><div class="line">    # 取出每条记录并赋值给相关变量，注意顺序</div><div class="line">    # 变量的定义不要和你的select的列的键同名, 否则fetch into 会失败！</div><div class="line">    FETCH cur1 INTO c_cityid, c_cityname;</div><div class="line"></div><div class="line">    # FETCH之后, 如果没有数据则会运行SET done = TRUE</div><div class="line">    IF done THEN</div><div class="line">      # 跳出循环</div><div class="line">      LEAVE flag_loop;</div><div class="line">    END IF;</div><div class="line"></div><div class="line">    # 字符串截取，从第一位开始，截取2位</div><div class="line">    SET c_cityname = SUBSTRING(c_cityname, 1, 2);</div><div class="line"></div><div class="line">    # 动态sql执行后的结果记录集在MySQL中无法获取，因此需要转变思路将其放置到一个临时表中</div><div class="line">    # 动态sql需要使用CONCAT(a, b, c, ....)拼接</div><div class="line">    SET v_sql = CONCAT("insert into tmp_table(S_COUNTYNAME, N_CITYID) select t.`name`, ", c_cityid, " from sm_renthouse_url t where</div><div class="line">    t.pid in (select p.id from sm_renthouse_url p where p.pid = ", in_urlid, " and p.`name` like '%", c_cityname, "%')");</div><div class="line"></div><div class="line">    # 如果以@开头的变量可以不用通过declare语句事先声明</div><div class="line">    SET @v_sql = v_sql;</div><div class="line">    # 预处理需要执行的动态SQL，其中stmt是一个变量</div><div class="line">    PREPARE stmt FROM @v_sql;</div><div class="line">    # 执行SQL语句</div><div class="line">    EXECUTE stmt;</div><div class="line">    # 释放掉预处理段</div><div class="line">    DEALLOCATE PREPARE stmt;</div><div class="line">  END LOOP;</div><div class="line">  CLOSE cur1;</div><div class="line"></div><div class="line">  # 调试输出, 打印使用SELECT</div><div class="line">  SELECT</div><div class="line">    *</div><div class="line">  FROM tmp_table;</div><div class="line"></div><div class="line">  # 还原终止的标志, 用于第二个游标</div><div class="line">  SET done = FALSE;</div><div class="line"></div><div class="line">  OPEN cur2;</div><div class="line">  flag_loop: LOOP</div><div class="line">    FETCH cur2 INTO c_countyname, c_cityid_tmp;</div><div class="line">    IF done THEN</div><div class="line">      LEAVE flag_loop;</div><div class="line">    END IF;</div><div class="line"></div><div class="line">    INSERT INTO dict_county (S_COUNTYNAME, N_CITYID, S_STATE)</div><div class="line">      VALUES (c_countyname, c_cityid_tmp, '1');</div><div class="line"></div><div class="line">  END LOOP;</div><div class="line">  CLOSE cur2;</div><div class="line"></div><div class="line">  # 删除临时表</div><div class="line">  DROP TEMPORARY TABLE tmp_table;</div><div class="line">END</div></pre></td></tr></table></figure>
<h2 id="Oracle存储过程示例"><a href="#Oracle存储过程示例" class="headerlink" title="Oracle存储过程示例"></a>Oracle存储过程示例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 定义</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> up_user_role <span class="keyword">is</span></div><div class="line">  <span class="keyword">cursor</span> c <span class="keyword">is</span> <span class="keyword">select</span> t.* <span class="keyword">from</span> User_Login t; <span class="comment">-- 游标</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">  <span class="keyword">delete</span> <span class="keyword">from</span> User_Login_Security_Group t <span class="keyword">where</span> t.group_id = <span class="string">'DW_DEPT_ADMIN'</span>;</div><div class="line">  for user_item in c loop</div><div class="line">      <span class="keyword">insert</span> <span class="keyword">into</span> User_Login_Security_Group(User_Login_Id, <span class="keyword">Group_Id</span>, From_Date) </div><div class="line">            <span class="keyword">values</span>(user_item.user_login_id, <span class="string">'DW_DEPT_ADMIN'</span>, <span class="string">'2017-11-01 00:00:00.000000'</span>);</div><div class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line">  <span class="keyword">commit</span>;</div><div class="line"><span class="keyword">end</span>;</div><div class="line"></div><div class="line"><span class="comment">-- 运行</span></div><div class="line"><span class="keyword">call</span> up_user_role();</div><div class="line"></div><div class="line"><span class="comment">-- 删除</span></div><div class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> up_user_role;</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
        <tags>
            
            <tag> oracle </tag>
            
            <tag> mysql </tag>
            
            <tag> procedure </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Excel VBA]]></title>
      <url>/2017/08/20/lang/excel-vba/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><code>VBA</code>：Visual Basic for Applications是Visual Basic的一种宏语言</li>
<li><a href="https://msdn.microsoft.com/zh-cn/library/ee861528.aspx" target="_blank" rel="external">官方VBA文档</a>、<a href="https://support.office.com/zh-cn/excel" target="_blank" rel="external">官方Excel帮助</a>、<a href="https://docs.microsoft.com/zh-cn/dotnet/visual-basic/index" target="_blank" rel="external">官方VB文档</a></li>
<li><a href="http://www.yiibai.com/vba/vba_for_loop.html" target="_blank" rel="external">基础语法</a>、<a href="http://www.51zxw.net/list.aspx?cid=539" target="_blank" rel="external">51自学视频(后面几章收费)</a></li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li><p>不会写法的可以使用录制宏，然后进行代码查看</p>
</li>
<li><p><code>FormulaR1C1</code>是公式输入方法</p>
<ul>
<li>有中括号是相对于选定单元格的相对偏移量，”-“为向左或向上偏移，正数为右或下偏移。 无中括号为相对于选定单元格的绝对偏移量，没有负数。”R”和”C”对应行和列”</li>
<li>如：C1单元格为”=A1+B1”。Range(“C1”).FormulaR1C1 = “=RC[-2]+RC[-1]”</li>
<li>如：C1单元格为”=A2+E3” Range(“C1”).FormulaR1C1 = “=R[1]C[-2]+R[2]C[2]”</li>
</ul>
</li>
<li><code>Selection.AutoFill Destination:=fillRange, Type:=xlFillDefault</code> 自动填充<ul>
<li>此处<code>Selection</code>选中的Range即sourceRange(源)，根据sourceRange进行fillRange的填充。此时fillRange必须包含sourceRange。sourceRange中可以有公式等</li>
</ul>
</li>
<li><code>ActiveWindow.SmallScroll Down:=6</code>等是对窗口进行移动，不影响计算</li>
</ul>
<h2 id="宏界面配置"><a href="#宏界面配置" class="headerlink" title="宏界面配置"></a>宏界面配置</h2><ul>
<li>设置字体：工具-选项-编辑器格式-标准字体-Consolas (西方)</li>
<li>设置语法检测：工具-选项-编辑器-自动语法检测去勾选。防止编辑时弹框提示语法错误，运行时语法错误会提示</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="Delat-Ct法计算候选基因稳定性"><a href="#Delat-Ct法计算候选基因稳定性" class="headerlink" title="Delat Ct法计算候选基因稳定性"></a>Delat Ct法计算候选基因稳定性</h3><blockquote>
<p>此算法是临时帮朋友写的，可能与实际算法不符，仅供参考</p>
</blockquote>
<ul>
<li>简介：这是一种常见的算法，叫做Delat Ct法计算候选基因稳定性。最后得到的是每个基因的mean SD值，首先计算两个基因的ΔCt值，再计算其ΔCt值的方差，最后得到该基因与其余每个基因ΔCt值的方差的平均值。</li>
<li>excel表格数据如下：</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>beta-Actin</th>
<th>Tubulin-alpha</th>
<th>EF1A</th>
<th>GAPDH</th>
<th>Tubulin-beta</th>
<th>18S rRNA  </th>
</tr>
</thead>
<tbody>
<tr>
<td>卵子</td>
<td>23.82</td>
<td>23.82</td>
<td>23.93</td>
<td>25.48</td>
<td>25.76</td>
<td>17.67</td>
</tr>
<tr>
<td>受精后</td>
<td>22.47</td>
<td>23.94</td>
<td>22.51</td>
<td>23.31</td>
<td>23.91</td>
<td>13.74  </td>
</tr>
<tr>
<td>2cell</td>
<td>23.29</td>
<td>24.78</td>
<td>22.83</td>
<td>24.23</td>
<td>25.05</td>
<td>15.35</td>
</tr>
<tr>
<td>4cell</td>
<td>22.95</td>
<td>24.84</td>
<td>22.51</td>
<td>23.39</td>
<td>24.54</td>
<td>14.6</td>
</tr>
<tr>
<td>8cell</td>
<td>21.75</td>
<td>23.77</td>
<td>21.8</td>
<td>22.58</td>
<td>23.66</td>
<td>13.22</td>
</tr>
<tr>
<td>16cell</td>
<td>21.82</td>
<td>24.21</td>
<td>22.49</td>
<td>23.45</td>
<td>23.8</td>
<td>12.73</td>
</tr>
<tr>
<td>32cell</td>
<td>21.92</td>
<td>24.62</td>
<td>22.33</td>
<td>23.74</td>
<td>21.12</td>
<td>13.95</td>
</tr>
<tr>
<td>64cell</td>
<td>22.92</td>
<td>24.83</td>
<td>22.19</td>
<td>24.39</td>
<td>24.9</td>
<td>15.76</td>
</tr>
<tr>
<td>多cell</td>
<td>21.62</td>
<td>24.04</td>
<td>21.26</td>
<td>22.66</td>
<td>24.04</td>
<td>12.63</td>
</tr>
<tr>
<td>高囊胚1</td>
<td>23.06</td>
<td>25.08</td>
<td>23.08</td>
<td>24.45</td>
<td>25.09</td>
<td>15.17</td>
</tr>
<tr>
<td>高囊胚2</td>
<td>22.98</td>
<td>26.27</td>
<td>22.22</td>
<td>25.04</td>
<td>25.72</td>
<td>15.55</td>
</tr>
<tr>
<td>低囊胚</td>
<td>23</td>
<td>26.24</td>
<td>22.03</td>
<td>26.31</td>
<td>26.49</td>
<td>17.04</td>
</tr>
<tr>
<td>原肠胚前期</td>
<td>21.23</td>
<td>25.46</td>
<td>20</td>
<td>26.46</td>
<td>25.87</td>
<td>14.12</td>
</tr>
<tr>
<td>原肠胚中期</td>
<td>20.23</td>
<td>24.6</td>
<td>19.52</td>
<td>26.57</td>
<td>25.81</td>
<td>14.03</td>
</tr>
<tr>
<td>原肠胚后期</td>
<td>19.56</td>
<td>22.77</td>
<td>18.5</td>
<td>26.3</td>
<td>24.91</td>
<td>12.83</td>
</tr>
<tr>
<td>神经</td>
<td>19.46</td>
<td>23.87</td>
<td>17.66</td>
<td>26.82</td>
<td>24.58</td>
<td>15.86</td>
</tr>
<tr>
<td>肌节</td>
<td>18.03</td>
<td>22.7</td>
<td>16.48</td>
<td>23.35</td>
<td>23.79</td>
<td>12.86</td>
</tr>
<tr>
<td>器官形成期1</td>
<td>18.47</td>
<td>23.71</td>
<td>17.26</td>
<td>24.89</td>
<td>24.21</td>
<td>15.3</td>
</tr>
<tr>
<td>器官形成期2</td>
<td>18.65</td>
<td>23.6</td>
<td>17.83</td>
<td>23.94</td>
<td>23.74</td>
<td>15.92</td>
</tr>
<tr>
<td>器官形成期3</td>
<td>18.14</td>
<td>23.24</td>
<td>16.12</td>
<td>23.66</td>
<td>23.82</td>
<td>16</td>
</tr>
<tr>
<td>破膜</td>
<td>17.82</td>
<td>22.89</td>
<td>17.45</td>
<td>5.44</td>
<td>23.92</td>
<td>13.92</td>
</tr>
<tr>
<td>仔鱼</td>
<td>16.97</td>
<td>22.65</td>
<td>16.15</td>
<td>20.69</td>
<td>22.86</td>
<td>11.55</td>
</tr>
</tbody>
</table>
<ul>
<li><p>效果如下</p>
<p>  <img src="/data/images/2017/08/delacCt.png" alt="效果图"></p>
</li>
<li><p>VBA处理源码(效率可能较低)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Sub delacCt()</div><div class="line">&apos;</div><div class="line">&apos; Delac Ct算法计算基因mean SD 宏</div><div class="line">&apos;</div><div class="line">    Dim rows As Integer</div><div class="line">    Dim columns As Integer</div><div class="line">    Dim rangeItem1 As range</div><div class="line">    Dim rangeItem2 As range</div><div class="line">    Dim targetCellRange1 As range</div><div class="line">    Dim targetCellRange2 As range</div><div class="line">    Dim isStart As Boolean</div><div class="line"></div><div class="line">    &apos;dataCell为一个Range对象</div><div class="line">    Set myRange = Application.InputBox(prompt:=&quot;按住Shift选择数据所在区域（包含行标题不包含列标题）&quot;, Type:=8)</div><div class="line">    &apos;Set myRange = range(&quot;B1:D23&quot;)</div><div class="line"></div><div class="line">    &apos;获取此区域的总行数和总列数</div><div class="line">    rows = myRange.rows.count</div><div class="line">    columns = myRange.columns.count</div><div class="line"></div><div class="line">    &apos;循环其中两个基因</div><div class="line">    With myRange</div><div class="line">        For i = 1 To columns Step 1</div><div class="line">            &apos;每一行的方差</div><div class="line">            Dim total As Double</div><div class="line">            total = 0</div><div class="line"></div><div class="line">            For j = i + 1 To columns Step 1</div><div class="line">                &apos;此处.代表myRange(With中)</div><div class="line">                Set rangeItem1 = .columns(i)</div><div class="line">                Set rangeItem2 = .columns(j)</div><div class="line"></div><div class="line">                Dim cellRow As Integer</div><div class="line">                Dim cellColumn As Integer</div><div class="line">                cellRow = i * (rows + 3) + 1</div><div class="line">                cellColumn = (j - 2) * 4 + 2</div><div class="line"></div><div class="line">                &apos;目标单元格</div><div class="line">                Set targetCellRange1 = Worksheets(1).Cells(cellRow, cellColumn)</div><div class="line">                Set targetCellRange2 = Worksheets(1).Cells(cellRow, cellColumn + 1)</div><div class="line"></div><div class="line">                &apos;复制并粘贴其中某两个基因</div><div class="line">                Call geneCopy(rangeItem1, targetCellRange1)</div><div class="line">                Call geneCopy(rangeItem2, targetCellRange2)</div><div class="line"></div><div class="line">                &apos;计算方差</div><div class="line">                total = total + geneCalculate(range(targetCellRange1, targetCellRange1.Offset(rows - 1, 0)))</div><div class="line">            Next</div><div class="line"></div><div class="line">            &apos; 计算方差平均值</div><div class="line">            If i &lt; columns Then</div><div class="line">                &apos;MsgBox total / (columns - i)</div><div class="line">                Dim row As Integer</div><div class="line">                &apos;方差所在行</div><div class="line">                row = targetCellRange1.Offset(rows - 1, 0).row + 1</div><div class="line"></div><div class="line">                Worksheets(1).range(&quot;A&quot; &amp; row).Value = &quot;SD&quot;</div><div class="line">                Worksheets(1).range(&quot;A&quot; &amp; row + 1).Value = &quot;mean SD&quot;</div><div class="line">                Worksheets(1).range(&quot;B&quot; &amp; row + 1).Value = total / (columns - i)</div><div class="line">            End If</div><div class="line">        Next</div><div class="line">    End With</div><div class="line"></div><div class="line">    &apos;ActiveWorkbook.Save</div><div class="line">End Sub</div><div class="line"></div><div class="line">Private Sub geneCopy(rangeItem As range, targetCellRange As range)</div><div class="line">&apos;</div><div class="line">&apos; 复制并粘贴其中某两个基因</div><div class="line">&apos;</div><div class="line">    rangeItem.Select</div><div class="line">    Selection.Copy</div><div class="line"></div><div class="line">    targetCellRange.Select</div><div class="line">    ActiveSheet.Paste</div><div class="line">End Sub</div><div class="line"></div><div class="line">Private Function geneCalculate(targetRange1 As range) As Double</div><div class="line">&apos;</div><div class="line">&apos; 对两个基因进行计算</div><div class="line">&apos;</div><div class="line">    &apos;求差值</div><div class="line">    Call subValue(targetRange1)</div><div class="line"></div><div class="line">    &apos;求方差(targetRange1.Row是获取该单元格得在Sheet中是第几行)</div><div class="line">    geneCalculate = varianceValue(range(Worksheets(1).Cells(targetRange1.row + 1, targetRange1.Column + 2), _</div><div class="line">            Worksheets(1).Cells(targetRange1.row + targetRange1.rows.count - 1, targetRange1.Column + 2)))</div><div class="line"></div><div class="line">    &apos;MsgBox geneCalculate</div><div class="line">End Function</div><div class="line"></div><div class="line">Private Sub subValue(rangeItem1 As range)</div><div class="line">&apos;</div><div class="line">&apos; 求差值</div><div class="line">&apos;</div><div class="line">    Dim sourceRange As range</div><div class="line">    Dim fillRange As range</div><div class="line"></div><div class="line">    Set sourceRange = Worksheets(1).Cells(rangeItem1.row + 1, rangeItem1.Column + 2)</div><div class="line">    sourceRange.Select</div><div class="line">    ActiveCell.FormulaR1C1 = &quot;=RC[-2]-RC[-1]&quot;</div><div class="line"></div><div class="line">    Set fillRange = range(Worksheets(1).Cells(rangeItem1.row + 1, rangeItem1.Column + 2), _</div><div class="line">                            Worksheets(1).Cells(rangeItem1.row + rangeItem1.rows.count - 1, rangeItem1.Column + 2))</div><div class="line"></div><div class="line">    &apos;此处根据选中的sourceRange进行fillRange的填充，fillRange必须包含sourceRange</div><div class="line">    Selection.AutoFill Destination:=fillRange, Type:=xlFillDefault</div><div class="line">End Sub</div><div class="line"></div><div class="line">Private Function varianceValue(range As range) As Double</div><div class="line">&apos;</div><div class="line">&apos; 求方差</div><div class="line">&apos;</div><div class="line">    Dim targetCellRange As range</div><div class="line"></div><div class="line">    Set targetCellRange = Worksheets(1).Cells(range.row + range.rows.count, range.Column)</div><div class="line">    targetCellRange.Select</div><div class="line"></div><div class="line">    targetCellRange.FormulaR1C1 = &quot;=SQRT(VAR(R[-22]C[0]:R[-1]C[0]))&quot;</div><div class="line"></div><div class="line">    &apos;返回值</div><div class="line">    varianceValue = targetCellRange.Value</div><div class="line">End Function</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> lang </category>
            
        </categories>
        
        
        <tags>
            
            <tag> excel </tag>
            
            <tag> vb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringCloud]]></title>
      <url>/2017/08/05/java/springcloud/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>架构演进<ol>
<li>单体架构：复杂度逐渐变高、部署速度慢、阻碍技术创新、无法按需伸缩</li>
<li>SOA <a href="[SOA和微服务架构的区别](https://www.zhihu.com/question/37808426)">^1</a></li>
<li>微服务</li>
</ol>
</li>
<li>微服务特点<ul>
<li>微服务可独立运行在自己的进程里</li>
<li>一系列独立运行的微服务构成整个系统</li>
<li>每个服务独立开发维护</li>
<li>微服务之间通过REST API或RPC等方式通信</li>
<li>优点：易于开发和维护，启动快，技术栈不受限制，按需伸缩，DevOps</li>
<li>挑战：运维要求较高，分布式的复杂性，接口调整成本高</li>
</ul>
</li>
<li>微服务设计原则：单一职责原则、服务自治原则、轻量级通信原则、接口明确原则</li>
<li>微服务开发框架：<code>Spring Cloud</code>、<code>Dubbo</code>、<code>Dropwizard</code>、<code>Consul</code>等</li>
<li>Spring Cloud是基于Spring Boot的用于快速构建分布式系统工具集</li>
<li>Spring Cloud特点：约定优于配置、开箱即用，快速启动、轻量级组件、组件丰富、选型中立</li>
<li>本文相关软件：JDK: 1.8，SpringCloud: Dalston.SR1</li>
</ul>
<h2 id="微服务构建"><a href="#微服务构建" class="headerlink" title="微服务构建"></a>微服务构建</h2><ul>
<li>服务提供者、服务消费者</li>
<li>服务消费者中通过restTemp调用服务提供者提供的服务<ul>
<li>如：<code>User user = this.restTemplate.getForObject(&quot;http://localhost:7900/simple/&quot; + id, User.class);</code></li>
</ul>
</li>
</ul>
<h2 id="Eureka服务发现"><a href="#Eureka服务发现" class="headerlink" title="Eureka服务发现"></a>Eureka服务发现</h2><ul>
<li><p>服务注册与发现</p>
<p>  <img src="/data/images/2017/07/服务注册与发现.png" alt="服务注册与发现"></p>
<ul>
<li>服务发现方式 <a href="[服务发现的可行方案以及实践案例](http://blog.daocloud.io/microservices-4/)">^2</a><ul>
<li>客户端发现：Eureka、Zk</li>
<li>服务端发现：Consul + nginx</li>
</ul>
</li>
<li>服务注册表是一个记录当前可用服务实例的网络信息的数据库，是服务发现机制的核心。服务注册表提供查询API和管理API，使用查询API获得可用的服务实例，使用管理API实现注册和注销</li>
</ul>
</li>
<li><p>简介：Eureka是<code>Netflix</code>开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。Spring Cloud将它集成在其子项目<code>spring-cloud-netflix</code>中，以实现Spring Cloud的服务发现功能</p>
</li>
<li><p>架构图</p>
<p>  <img src="/data/images/2017/07/eureka.png" alt="eureka"></p>
<ul>
<li>AWS概念：us-east-1c、us-east-1d等是zone，它们都属于us-east-1这个region</li>
<li>在应用启动后，将会向Eureka Server发送心跳（默认周期为30秒）。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个服务节点移除（默认90秒）</li>
<li>Eureka还提供了客户端缓存的机制，即使所有的Eureka Server都挂掉，客户端依然可以利用缓存中的信息消费其他服务的API</li>
</ul>
</li>
<li><p>eureka server</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- 用于注册中心访问账号认证，非必须 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在Application.java中加注解<code>@EnableEurekaServer</code></p>
</li>
<li><p>application.yml配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8761</span></div><div class="line"></div><div class="line"><span class="comment"># 引入了spring-boot-starter-security则会默认开启认证</span></div><div class="line"><span class="attr">security:</span></div><div class="line"><span class="attr">  basic:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">true</span> <span class="comment">#开启eureka后台登录认证</span></div><div class="line">  <span class="comment"># 不配置user，则默认的用户名为user，密码为自动生成(在控制台可查看)</span></div><div class="line"><span class="attr">  user:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">    password:</span> <span class="string">smalle</span></div><div class="line"></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  client:</span></div><div class="line">    <span class="comment"># eureka server默认也是一个eureka client.以下两行仅将此App当成eureka server，不当成eureka client(由于是单点测试)</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></div><div class="line">    <span class="comment"># 将eureka注册到哪个url</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://user:password@$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></div></pre></td></tr></table></figure>
</li>
<li><p>后台地址：<code>http://localhost:8761</code></p>
</li>
</ul>
</li>
<li><p>eureka client</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在Application.java中加注解<code>@EnableEurekaClient</code></p>
</li>
<li><p>application.yml配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eureka客户端配置</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://smalle:smalle@localhost:8761/eureka/</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line">    <span class="comment"># 启用ip访问eureka server(默认是使用主机名进行访问)</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></div><div class="line">    <span class="comment"># 实例id</span></div><div class="line"><span class="attr">    instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>示例请看源码</p>
<ul>
<li>示例中使用H2数据库，IDEA连接方式：path:<code>mem:testdb</code>, user:<code>sa</code>, password:空, url:<code>jdbc:h2:mem:testdb</code>, 使用<code>Embedded</code>或<code>In-memory</code>方式连接</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><ul>
<li><p>简介</p>
<ul>
<li>Ribbon是Netflix发布的云中间层服务开源项目，其主要功能是提供客户端侧负载均衡算法。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，Ribbon是一个客户端负载均衡器，我们可以在配置文件中列出Load Balancer后面所有的机器，Ribbon会自动基于某种规则（如简单轮询，随机连接等）去连接这些机器，我们也很容易使用Ribbon实现自定义的负载均衡算法。</li>
<li><p>Eureka与Ribbon连用</p>
<p>  <img src="/data/images/2017/07/eureka-ribbon.png" alt="eureka-ribbon"></p>
<ul>
<li>Ribbon工作时分为两步：第一步先选择 Eureka Server, 它优先选择在同一个Zone且负载较少的Server；第二步再根据用户指定的策略，在从Server取到的服务注册列表中选择一个地址。其中Ribbon提供了多种策略，例如轮询round robin、随机Random、根据响应时间加权等</li>
</ul>
</li>
</ul>
</li>
<li><p>基本使用</p>
<ul>
<li>引入依赖：group：<code>org.springframework.cloud</code>，artifact id：<code>spring-cloud-starter-ribbon</code><ul>
<li>如果引入了<code>spring-cloud-starter-eureka</code>中默认引入了，此时可无需再引入</li>
</ul>
</li>
<li><p>在restTemplate对应的Bean上注解<code>@LoadBalanced</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@LoadBalanced</span> <span class="comment">// 使用ribbon实现客户端负载均衡</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>备注：此时需要启动多个服务提供者进行测试，IDEA中：</p>
<ul>
<li>可以先启动一个后再将端口改掉再启动另外一个</li>
<li>(推荐) <code>Eidt Configurations</code>再配置一个Spring boot的启动项，配置时将<code>Spring Boot Settings</code> - <code>Override parameters</code>添加一个参数<code>server.port=8080</code></li>
</ul>
</li>
</ul>
</li>
<li><p>自定义负载均衡策略</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># robbin负载均衡策略优先级：配置文件策略 &gt; 代码级别策略 &gt; ribbon默认策略(com.netflix.loadbalancer.ZoneAvoidanceRule)</span></div><div class="line"><span class="attr">provider-user:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line">      <span class="comment"># 当访问服务provider-user时采用随机策略RandomRule，此时访问其他服务时仍然为默认策略ZoneAvoidanceRule；WeightedResponseTimeRule响应时间加权策略</span></div><div class="line"><span class="attr">      NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></div></pre></td></tr></table></figure>
</li>
<li><p>脱离Eureka的配置，此时仍然可以运行Eureka，但是不从eureka中获取服务地址，而是从配置文件中读取</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">stores:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line"><span class="attr">    listOfServers:</span> <span class="string">example.com,aezo.cn</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Feign声明式服务调用"><a href="#Feign声明式服务调用" class="headerlink" title="Feign声明式服务调用"></a>Feign声明式服务调用</h2><ul>
<li>简介</li>
<li><p>基本使用(服务消费者)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--Feign声明式服务调用--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类加注解<code>@EnableFeignClients</code></p>
</li>
<li><p>定义FeignClient接口Bean</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 此服务消费者需要调用的服务声明</span></div><div class="line"><span class="meta">@FeignClient</span>(<span class="string">"provider-user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignClient</span> </span>&#123;</div><div class="line">    <span class="comment">// Feign不支持@GetMapping, @PathVariable必须指明参数值</span></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, value = <span class="string">"/simple/&#123;id&#125;"</span>)</div><div class="line">    <span class="function">User <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, value = <span class="string">"/feign-post"</span>)</div><div class="line">    <span class="function">User <span class="title">postFeignUser</span><span class="params">(@RequestBody User user)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在controller中直接调用接口中方法(此时不直接调用restTemplate)</p>
</li>
</ul>
</li>
</ul>
<h2 id="Hystrix服务容错保护-断路器"><a href="#Hystrix服务容错保护-断路器" class="headerlink" title="Hystrix服务容错保护(断路器)"></a>Hystrix服务容错保护(断路器)</h2><ul>
<li>简介</li>
<li><p>基本使用(服务消费者)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--服务容错保护(断路器) Hystrix--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类加注解<code>@EnableCircuitBreaker</code></p>
</li>
<li><p>声明断路后回调函数</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"findByIdFallBack"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    <span class="comment">// virtual ip: 服务的spring.application.name</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://provider-user/simple/"</span> + id, User.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当服务调用失败或者超时则回调此函数. 此函数参数和返回值必须和调用函数一致</span></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByIdFallBack</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    System.out.println(id + <span class="string">", error[hystrix]"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Zuul-API-GateWay：网关"><a href="#Zuul-API-GateWay：网关" class="headerlink" title="Zuul (API GateWay：网关)"></a>Zuul (API GateWay：网关)</h2><ul>
<li>简介</li>
<li><p>基本使用</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- API网关。包含actuator、hystrix、ribbon --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类声明<code>@EnableZuulProxy</code></p>
</li>
<li><p>基础配置application.yml</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line">  <span class="comment"># 忽略表达式。当遇到路径中有admin的不进行路由</span></div><div class="line">  <span class="comment"># ignored-patterns: /**/admin/**</span></div><div class="line">  <span class="comment"># 路由前缀</span></div><div class="line">  <span class="comment"># prefix: /api</span></div><div class="line">  <span class="comment"># zuul默认会过滤路由前缀(strip-prefix=true)，此处是关闭此过滤</span></div><div class="line">  <span class="comment"># strip-prefix: false</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line">    <span class="comment"># 通配符(ant规范)：? 代表一个任意字符，* 代表多个任意字符，** 代表多个任意字符且支持多级目录</span></div><div class="line">    <span class="comment"># 此处路径在配置文件中越靠前的约优先（系统将所有路径放到LinkedHashMap中，当匹配到一个后就终止匹配）</span></div><div class="line">    <span class="comment"># 现在可以同时访问http://localhost:5555/consumer-movie-ribbon/movie/1 和 http://localhost:5555/api-movie/movie/1</span></div><div class="line">    <span class="comment"># api-movie为规则名, 可通过spring cloud config进行动态加载(覆盖)</span></div><div class="line"><span class="attr">    api-movie:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-movie/**</span></div><div class="line">      <span class="comment"># 从eureka中获取此服务(spring.application.name)的地址(面向服务的路由)</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">consumer-movie-ribbon</span></div><div class="line"><span class="attr">    api-user:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-user/**</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">provider-user</span></div><div class="line">    <span class="comment"># 本地跳转(当访问/api-local/**的时候，则会转到当前应用的/local/**的地址)</span></div><div class="line">    <span class="comment"># api-local:</span></div><div class="line">    <span class="comment">#   path: /api-local/**</span></div><div class="line">    <span class="comment">#   url: forward:/local</span></div><div class="line">    <span class="comment"># 禁用过滤器：zuul.&lt;FilterClassName&gt;.&lt;filterType&gt;.disable=true</span></div><div class="line">    <span class="comment"># AccessFilter:</span></div><div class="line">    <span class="comment">#   pre:</span></div><div class="line">    <span class="comment">#     disable: true</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自定义路由规则</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> PatternServiceRouteMapper <span class="title">serviceRouteMapper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 将serviceName-v1映射成/v1/serviceName. 未匹配到则按照原始的</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PatternServiceRouteMapper(</div><div class="line">            <span class="string">"(?&lt;name&gt;^.+)-(?&lt;version&gt;v.+$)"</span>,</div><div class="line">            <span class="string">"$&#123;version&#125;/$&#123;name&#125;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>过滤器</p>
<ul>
<li>Zuul过滤器核心处理器(<code>com.netflix.zuul.FilterProcessor</code>)</li>
<li>核心过滤器处理(对应包<code>org.springframework.cloud.netflix.zuul.filters</code>)</li>
<li><p>自定义过滤器</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(AccessFilter.class);</div><div class="line"></div><div class="line">    <span class="comment">// 过滤器类型，决定过滤器在请求的哪个生命周期中执行</span></div><div class="line">    <span class="comment">// pre：表示请求在路由之前执行</span></div><div class="line">    <span class="comment">// routing：在路由请求时被执行(调用真实服务应用时)</span></div><div class="line">    <span class="comment">// post：路由完成(服务调用完成)被执行</span></div><div class="line">    <span class="comment">// error：出错时执行</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 多个过滤器时，控制过滤器的执行顺序（数值越小越优先）</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断该过滤器是否需要被执行(true需要执行)，可根据实际情况进行范围限定</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 过滤器的具体逻辑</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        RequestContext ctx = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = ctx.getRequest();</div><div class="line"></div><div class="line">        logger.info(<span class="string">"send &#123;&#125; request to &#123;&#125;"</span>, request.getMethod(), request.getRequestURL().toString()); <span class="comment">// send GET request to http://localhost:5555/api-movie/movie/1</span></div><div class="line"></div><div class="line">        Object accessToken = request.getParameter(<span class="string">"accessToken"</span>);</div><div class="line">        <span class="keyword">if</span>(accessToken == <span class="keyword">null</span>) &#123;</div><div class="line">            logger.warn(<span class="string">"access token is empty, add parameter like: accessToken=smalle"</span>);</div><div class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>); <span class="comment">// 令zuul过滤此请求，不进行路由</span></div><div class="line">            ctx.setResponseStatusCode(<span class="number">401</span>);</div><div class="line">            ctx.setResponseBody(<span class="string">"zuul filter"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        logger.info(<span class="string">"access token ok"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 测试异常过滤器（org.springframework.cloud.netflix.zuul.filters.post.SendErrorFilter）</span></div><div class="line">        <span class="comment">// doSomteing();</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSomteing</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"run error"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>自定义异常信息：出现异常会forward到<code>/error</code>的端点，<code>/error</code>端点的实现来源于Spring Boot的<code>org.springframework.boot.autoconfigure.web.BasicErrorController</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最好使用postman等工具测试</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(RequestAttributes requestAttributes, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; map = <span class="keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);</div><div class="line">        map.remove(<span class="string">"exception"</span>); <span class="comment">// 移除exception信息，客户端将看不到此信息</span></div><div class="line">        map.put(<span class="string">"myAttr"</span>, <span class="string">"hello"</span>);</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>动态路由：请见分布式配置中心(Config)部分</p>
</li>
</ul>
<h2 id="Config-分布式配置中心-Spring-Cloud-Config"><a href="#Config-分布式配置中心-Spring-Cloud-Config" class="headerlink" title="Config 分布式配置中心(Spring Cloud Config)"></a>Config 分布式配置中心(Spring Cloud Config)</h2><ul>
<li><p>配置中心(Config服务器端)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- 配置中心 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!-- 用于配置中心访问账号认证 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!--向eureka注册，服务化配置中心--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类添加<code>@EnableConfigServer</code>，开启服务发现则还要加<code>@EnableDiscoveryClient</code></p>
</li>
<li><p>配置文件</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      server:</span></div><div class="line"><span class="attr">        git:</span></div><div class="line">          <span class="comment"># 可以使用占位符&#123;application&#125;、&#123;profile&#125;、&#123;label&#125;</span></div><div class="line"><span class="attr">          uri:</span> <span class="attr">https://git.oschina.net/smalle/spring-cloud-config-test.git</span></div><div class="line">          <span class="comment"># 搜索此git仓库的配置文件目录</span></div><div class="line"><span class="attr">          search-paths:</span> <span class="string">config-repo</span></div><div class="line"><span class="attr">          username:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">          password:</span> <span class="string">aezocn</span></div><div class="line"></div><div class="line"><span class="attr">  server:</span></div><div class="line"><span class="attr">    port:</span> <span class="number">7000</span></div><div class="line"></div><div class="line"><span class="attr">  security:</span></div><div class="line"><span class="attr">    basic:</span></div><div class="line"><span class="attr">      enabled:</span> <span class="literal">true</span> <span class="comment"># 开启权限验证(默认是false)</span></div><div class="line"><span class="attr">    user:</span></div><div class="line"><span class="attr">      name:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">      password:</span> <span class="string">smalle</span></div><div class="line"></div><div class="line">  <span class="comment"># eureka客户端配置</span></div><div class="line"><span class="attr">  eureka:</span></div><div class="line"><span class="attr">    client:</span></div><div class="line"><span class="attr">      serviceUrl:</span></div><div class="line"><span class="attr">        defaultZone:</span> <span class="attr">http://smalle:smalle@localhost:8761/eureka/</span></div><div class="line"><span class="attr">    instance:</span></div><div class="line">      <span class="comment"># 启用ip访问</span></div><div class="line"><span class="attr">      prefer-ip-address:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在git仓库的config-repo目录下添加配置文件: <code>consumer-movie-ribbon.yml</code>(写如配置如：from: git-default-1.0. 下同)、<code>consumer-movie-ribbon-dev.yml</code>、<code>consumer-movie-ribbon-test.yml</code>、<code>consumer-movie-ribbon-prod.yml</code>，并写入参数</p>
</li>
<li>访问：<code>http://localhost:7000/consumer-movie-ribbon/prod/master</code>即可获取应用为<code>consumer-movie-ribbon</code>，profile为<code>prod</code>，git分支为<code>master</code>的配置数据(<code>/{application}/{profile}/{label}</code>)<ul>
<li>某application对应的配置命名必须为<code>{application}-{profile}.yml</code>，其中<code>{profile}</code>和<code>{label}</code>可在对应的application的<code>bootstrap.yml</code>中指定</li>
<li>访问配置路径后，程序默认会将配置数据下载到本地，当git仓库不可用时则获取本地的缓存数据</li>
<li>支持git/svn/本地文件等</li>
</ul>
</li>
</ul>
</li>
<li><p>客户端配置映射</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- 配置中心客户端 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加<code>bootstrap.yml</code>配置文件(不能放在application.yml中)</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bootstrap.yml其优先级高于application.yml</span></div><div class="line"><span class="attr">spring:</span></div><div class="line">  <span class="comment"># application:</span></div><div class="line">  <span class="comment">#  name: consumer-movie-ribbon</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line">      <span class="comment"># (1) config server地址</span></div><div class="line">      <span class="comment"># uri: http://localhost:7000/</span></div><div class="line">      <span class="comment"># (2) 配置中心实行服务化(向eureka注册了自己)，此处要开启服务发现，并指明配置中心服务id</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">        service-id:</span> <span class="string">config-server</span></div><div class="line"><span class="attr">      profile:</span> <span class="string">prod</span></div><div class="line"><span class="attr">      label:</span> <span class="string">master</span></div><div class="line">      <span class="comment"># 如果配置中心开启了权限验证，此处填写相应的用户名和密码</span></div><div class="line"><span class="attr">      username:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">      password:</span> <span class="string">smalle</span></div><div class="line"></div><div class="line"><span class="comment"># eureka客户端配置(使用了spring cloud config, 则eureka的配置必须写在bootstrap.yml中，否则报找不到config server )</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://smalle:smalle@localhost:8761/eureka/</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line">    <span class="comment"># 启用ip访问</span></div><div class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    instanceId:</span> <span class="string">$&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p>测试程序</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @RefreshScope // 之后刷新config后可重新注入值</span></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigController</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;from:none&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String from;</div><div class="line"></div><div class="line">    <span class="comment">// 测试从配置中心获取配置数据，访问http://localhost:9000/from</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/from"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">from</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.from; <span class="comment">// 会从git仓库中读取配置数据</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>动态刷新配置(可获取最新配置信息的git提交)</p>
<ul>
<li>config客户端重启会刷新配置(重新注入配置信息)</li>
<li>动态刷新<ul>
<li>在需要动态加载配置的Bean上加注解<code>@RefreshScope</code></li>
<li>给 <strong>config client</strong> 加入权限验证依赖(<code>org.springframework.boot/spring-boot-starter-security</code>)，并在对应的application.yml中开启验证<ul>
<li>否则访问<code>/refresh</code>端点会失败，报错：<code>Consider adding Spring Security or set &#39;management.security.enabled&#39; to false.</code>(需要加入Spring Security或者关闭端点验证)</li>
</ul>
</li>
<li>对应的需要注入配置的类加<code>@RefreshScope</code></li>
<li><code>POST</code>请求<code>http://localhost:9000/refresh</code>(将Postman的Authorization选择Basic Auth和输入用户名/密码)</li>
<li>再次访问config client的 <a href="http://localhost:9000/from" target="_blank" rel="external">http://localhost:9000/from</a> 即可获取最新git提交的数据(由于开启了验证，所有端点都需要输入用户名密码)<ul>
<li>得到如<code>[&quot;from&quot;]</code>的结果(from配置文件中改变的key)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>动态加载网关配置</p>
<ul>
<li>在<code>api-gateway-zuul</code>服务中同上述一样加<code>bootstrap.yml</code>，并对eureka和config server进行配置</li>
<li><p>在<code>application.yml</code>对</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line"><span class="attr">    api-movie:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-movie/**</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">consumer-movie-ribbon</span></div><div class="line">      <span class="comment"># 如果consumer-movie-ribbon服务开启了权限验证，则需要防止zuul将头信息(Cookie/Set-Cookie/Authorization)过滤掉了.(多用于API网关下的权限验证等服务)</span></div><div class="line">      <span class="comment"># 此方法是对指定规则开启自定义敏感头. 还有一中解决方法是设置路由敏感头为空(则不会过滤任何头信息)：zuul.routes.&lt;route&gt;.sensitiveHeaders=</span></div><div class="line"><span class="attr">      customSensitiveHeaders:</span> <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment"># 为了动态刷新配置(spring cloud config)，执行/refresh端点(此端点需要加入Spring Security或者关闭端点验证)</span></div><div class="line"><span class="attr">security:</span></div><div class="line"><span class="attr">  basic:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  user:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">smalle</span></div><div class="line"><span class="attr">    password:</span> <span class="string">smalle</span></div></pre></td></tr></table></figure>
</li>
<li><p>在git仓库中加入<code>api-gateway-zuul-prod.yml</code>等配置文件，并加入配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">zuul:</span></div><div class="line"><span class="attr">  routes:</span></div><div class="line"><span class="attr">    api-movie:</span></div><div class="line"><span class="attr">      path:</span> <span class="string">/api-movie-config/**</span></div><div class="line"><span class="attr">      serviceId:</span> <span class="string">consumer-movie-ribbon</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>POST</code>请求<code>http://localhost:5555/refresh</code>即可刷新<code>api-gateway-zuul</code>的配置，因此动态加载了路由规则zuul.routes.api-movie</p>
</li>
</ul>
</li>
</ul>
<h2 id="Bus-消息总线-Spring-Cloud-Bus"><a href="#Bus-消息总线-Spring-Cloud-Bus" class="headerlink" title="Bus 消息总线(Spring Cloud Bus)"></a>Bus 消息总线(Spring Cloud Bus)</h2><ul>
<li>简介：使用轻量级的消息代理来构建一个公用的消息主题让系统中所有微服务都连接上来，由于该主题会被所有实例监听和消费所以称消息总线。各个实例都可以广播消息让其他实例消费。</li>
<li>是基于消息队列(如：ActiveMQ/Kafka/RabbitMQ/RocketMQ), Spring Cloud Bus暂时支持RabbitMQ和Kafka</li>
</ul>
<h3 id="以RabbitMQ为例"><a href="#以RabbitMQ为例" class="headerlink" title="以RabbitMQ为例"></a>以RabbitMQ为例</h3><blockquote>
<p>RabbitMQ是实现了高级消息队列协议(AMQP)的开源消息代理软件，也称为面向消息的中间件。后续操作需要先安装RabbitMQ服务。关于RabbitMQ在SpringBoot中的使用参考SpringBoot章节</p>
</blockquote>
<ul>
<li><p>在<code>config-server</code>和<code>consumer-movie-ribbon</code>两个服务中加入bus依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- 消息总线 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动RabbitMQ服务(如果未修改默认配置，则SpringBoot会自动连接。自定义配置如下)</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这是springboot的默认配置，可根据实际情况修改</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  rabbitmq:</span></div><div class="line"><span class="attr">    host:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">    port:</span> <span class="number">5672</span></div><div class="line"><span class="attr">    username:</span> <span class="string">guest</span></div><div class="line"><span class="attr">    password:</span> <span class="string">guest</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动一个<code>config-server</code>和两个<code>consumer-movie-ribbon</code>(9000、9002)</p>
</li>
<li>修改上述【分布式配置中心】的git管理的配置字段<code>from</code></li>
<li>刷新<code>config-server</code>：<code>POST</code>访问<a href="http://localhost:7000/bus/refresh" target="_blank" rel="external">http://localhost:7000/bus/refresh</a><ul>
<li><code>POST</code>访问<a href="http://localhost:7000/refresh" target="_blank" rel="external">http://localhost:7000/refresh</a> 只能刷新<code>config-server</code>本身</li>
<li><code>POST</code>访问<a href="http://localhost:7000/bus/refresh" target="_blank" rel="external">http://localhost:7000/bus/refresh</a> 可以刷新消息总线上所有的服务</li>
<li><code>POST</code>访问<a href="http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:9000" target="_blank" rel="external">http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:9000</a> 可以刷新的指定服务实例</li>
<li><code>POST</code>访问<a href="http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:**" target="_blank" rel="external">http://localhost:7000/bus/refresh?destination=consumer-movie-ribbon:**</a> 可以刷新服务consumer-movie-ribbon下的所有实例</li>
<li>刷新消息总线上的任何一个服务都可以到达此效果(消息总线上的其他服务会收到触发刷新服务的消息，进行同步刷新)</li>
</ul>
</li>
<li><p>原理如下 [^3]</p>
<p>  <img src="/data/images/2017/07/spring-cloud-bus.png" alt="spring-cloud-bus"></p>
</li>
</ul>
<h3 id="以Kafka为例"><a href="#以Kafka为例" class="headerlink" title="以Kafka为例"></a>以Kafka为例</h3><blockquote>
<p>Kafka是有LinkedIn开发的分布式消息系统，现由Apache维护，使用Scala实现。</p>
</blockquote>
<ul>
<li><p>更换依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>只需更换依赖，其他地方同rabbitmq即可(使用kafka默认配置时会产生一个Topic为)</p>
</li>
<li>启动kafka(包括zookeeper). 关于<code>Kafka</code>使用可查看文章【Kafka】</li>
<li>启动应用后会产生一个名为springCloudBus的Topic</li>
</ul>
<h2 id="Stream-消息驱动-Spring-Cloud-Stream"><a href="#Stream-消息驱动-Spring-Cloud-Stream" class="headerlink" title="Stream 消息驱动(Spring Cloud Stream)"></a>Stream 消息驱动(Spring Cloud Stream)</h2><ul>
<li>简介<ul>
<li>Spring Cloud Stream本质上是整合了Spring Boot和Spring integration，主要包含发布-订阅、消息组、分区三个概念</li>
<li>其功能是为应用程序(Spring Boot)和消息中间件之间添加一个绑定器(Binder)，只对应用程序提供统一的Channel通道，从而应用程序不需要考虑不同消息中间件的实现(调用规则)</li>
<li>暂时只支持RabbitMQ和Kafka的自动化配置</li>
</ul>
</li>
<li><p>入门案例</p>
<ul>
<li><p>引入依赖(以服务<code>consumer-movie-ribbon</code>为例)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- 消息驱动 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 基于rabbitmq(也可以引入spring-cloud-stream-binder-rabbit/kafka/redis) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>application.yml 部分配置(consumer-movie-ribbon)</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">consumer-movie-ribbon</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line">    <span class="comment"># Spring Cloud Stream配置</span></div><div class="line"><span class="attr">    stream:</span></div><div class="line"><span class="attr">      bindings:</span></div><div class="line">        <span class="comment"># input为定义的通道名称</span></div><div class="line"><span class="attr">        input:</span></div><div class="line">          <span class="comment"># 通道数据传输类型</span></div><div class="line">          <span class="comment"># content-type: text/plain # application/json</span></div><div class="line">          <span class="comment"># 将此实例的某个Stream(input)定义为某个消费组(同一个消费组里面的实例只有其中一个对消息进行消费, 否则所有的实例都会消费, 建议定义)</span></div><div class="line"><span class="attr">          group:</span> <span class="string">group-movie</span></div><div class="line">          <span class="comment"># 应用中的监听的input通道对应中间件的主题(rabbitmq的Exchange, kafka的Topic)为xxx(默认是通道名称, 此时即input)</span></div><div class="line">          <span class="comment"># destination: xxx</span></div><div class="line">        <span class="comment"># ...此处省略其他通道配置...</span></div></pre></td></tr></table></figure>
</li>
<li><p>消息接受者(consumer-movie-ribbon)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 开启绑定，启动消息驱动。</span></div><div class="line"><span class="comment">// @EnableBinding属性value可指定多个关于消息通道的配置(类)，表示需要加载的类，即根据这些类中的注解(@Input、@Output生成bean)</span></div><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;Processor.class, MyChannel.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 消息消费者监听的通道名称.</span></div><div class="line">    <span class="meta">@StreamListener</span>(Processor.INPUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"msg = "</span> + msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// @StreamListener可将收到的消息(json/xml数据格式)转换成具体的对象</span></div><div class="line">    <span class="meta">@StreamListener</span>(MyChannel.CHANNEL2_INPUT) <span class="comment">// 接受rabbitmq的channel1_output</span></div><div class="line">    <span class="meta">@SendTo</span>(MyChannel.CHANNEL2_OUTPUT) <span class="comment">// 收到消息后进行反馈(给rabbitmq的channel1_input发送)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">receive2</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"user.getUsername() ==&gt; "</span> + user.getUsername());</div><div class="line">        <span class="keyword">return</span> <span class="string">"SinkReceiver.receive2 = "</span> + user; <span class="comment">// 将此数据返回给消息发送这或者其他服务</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义通道</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyChannel</span> </span>&#123;</div><div class="line">    <span class="comment">// 输入输出通道名称最好不要相同</span></div><div class="line">    String CHANNEL2_INPUT = <span class="string">"channel2_input"</span>;</div><div class="line">    String CHANNEL2_OUTPUT = <span class="string">"channel2_output"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Input</span>(MyChannel.CHANNEL2_INPUT)</div><div class="line">    <span class="function">SubscribableChannel <span class="title">channel2_input</span><span class="params">()</span></span>; <span class="comment">// 设置消息通道名称(默认使用方法名作为消息通道名)，表示从该通道发送数据</span></div><div class="line"></div><div class="line">    <span class="meta">@Output</span>(MyChannel.CHANNEL2_OUTPUT)</div><div class="line">    <span class="function">MessageChannel <span class="title">channel2_output</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>易错点：<ul>
<li>在两个类中分别@EnableBinding绑定Processor，并同时监听@Input则报错 unknown.channel.name.(一个应用中不能绑定多个相同名称的@Input、@Output; 同理, Processor只能被一个类@EnableBinding绑定或者被两个类分别绑定@Input、@Output)</li>
<li>如果一个应用需要监听相同的主题(如：input)，可以重新命名一个@Input(“xxx”), 然后通过spring.cloud.stream.bindings.xxx.destination=input来监听input主题。或者将监听程序写在一个类中</li>
</ul>
</li>
</ul>
</li>
<li><p>消息发送者(provider-user)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableBinding</span>(MyChannel.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SinkSender</span> </span>&#123;</div><div class="line">    <span class="comment">// 法一：注入绑定接口</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MyChannel myChannel;</div><div class="line"></div><div class="line">    <span class="comment">// 法二：注入消息通道</span></div><div class="line">    <span class="meta">@Autowired</span> <span class="meta">@Qualifier</span>(<span class="string">"input"</span>) <span class="comment">// 此时有多个MessageChannel(根据SinkSender中@Output注入的), 需要指明</span></div><div class="line">    <span class="keyword">private</span> MessageChannel channel;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MessageChannel channel1_output;</div><div class="line"></div><div class="line">    <span class="comment">// 也可以这样注入</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SinkSender</span><span class="params">(@Qualifier(<span class="string">"channel1_output"</span>)</span> MessageChannel channel) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.channel1_output = channel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试基本的消息发送和接受</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 此条消息会在测试程序中打印</span></div><div class="line">        myChannel.channel().send(MessageBuilder.withPayload(<span class="string">"hello stream [from provider-user]"</span>).build());</div><div class="line"></div><div class="line">        <span class="comment">// 此条消息会在消息消费者中显示</span></div><div class="line">        channel.send(MessageBuilder.withPayload(<span class="string">"hello channel [from provider-user]"</span>).build());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 测试@StreamListener对消息自动转换和消息反馈</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgTransform</span><span class="params">()</span> </span>&#123;</div><div class="line">        channel1_output.send(MessageBuilder.withPayload(<span class="string">"&#123;\"id\": 1, \"username\": \"smalle\"&#125;"</span>).build());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 用于接受反馈消息</span></div><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;MyChannel.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelReceiver</span> </span>&#123;</div><div class="line">    <span class="comment">// 接受反馈的消息</span></div><div class="line">    <span class="meta">@StreamListener</span>(MyChannel.CHANNEL1_INPUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveSendTo</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"ChannelReceiver.receiveSendTo ==&gt; "</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义通道</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyChannel</span> </span>&#123;</div><div class="line">    String CHANNEL = <span class="string">"input"</span>;</div><div class="line">    String CHANNEL1_INPUT = <span class="string">"channel1_input"</span>;</div><div class="line">    String CHANNEL1_OUTPUT = <span class="string">"channel1_output"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Input</span>(MyChannel.CHANNEL1_INPUT)</div><div class="line">    <span class="function">SubscribableChannel <span class="title">channel1_input</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Output</span>(MyChannel.CHANNEL)</div><div class="line">    <span class="function">MessageChannel <span class="title">channel</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Output</span>(MyChannel.CHANNEL1_OUTPUT)</div><div class="line">    <span class="function">MessageChannel <span class="title">channel1_output</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Spring integration原生支持(了解，Spring Cloud Stream是基于它实现的)</p>
<ul>
<li><p>消息消费者(consumer-movie-ribbon)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;MyChannel.class&#125;) <span class="comment">// 收发消息的通道不能使用同一个MessageChannel</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@ServiceActivator</span>(inputChannel = MyChannel.POLLER_INPUT) <span class="comment">// 收发消息的通道不能使用同一个MessageChannel</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Object msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"MyReceiver: msg = "</span> + msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 消息转换(也可放在MySender中)，@ServiceActivator本身不具备消息转换功能(如：json/xml转成具体的对象)</span></div><div class="line">    <span class="meta">@Transformer</span>(inputChannel = MyChannel.POLLER_INPUT, outputChannel = MyChannel.POLLER_OUTPUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Date msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd HH:mm:ss"</span>).format(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>消息生产者(provider-user)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableBinding</span>(value = &#123;MyChannel.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySender</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span> <span class="comment">// 项目启动后便会执行</span></div><div class="line">    <span class="meta">@InboundChannelAdapter</span>(value = MyChannel.POLLER_OUTPUT, poller = <span class="meta">@Poller</span>(fixedDelay = <span class="string">"5000"</span>)) <span class="comment">// 对MyChannel.POLLER_OUTPUT通道进行输出. poller表示轮询，此时为每5秒执行一次方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MessageSource&lt;Date&gt; <span class="title">timeMsgSource</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> () -&gt; <span class="keyword">new</span> GenericMessage&lt;&gt;(<span class="keyword">new</span> Date());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>消息分区(未测试)</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 消费者配置</div><div class="line"># 当前消费者的总实例数量(消息分区需要设置)</div><div class="line">spring.cloud.stream.instanceCount=2</div><div class="line"># 当前实例的索引号(消息分区需要设置，最大为instance-count - 1)</div><div class="line">spring.cloud.stream.instanceIndex=0</div><div class="line"># 开启消费者分区功能</div><div class="line">spring.cloud.stream.bindings.input.consumer.partitioned=true</div><div class="line"></div><div class="line"># 生成者配置</div><div class="line">spring.cloud.stream.bindings.output.destination=input</div><div class="line"># 可根据实际消息规则配置SpEL表达式生成分区键用于分配出站数据, 用于消息分区</div><div class="line">spring.cloud.stream.bindings.output.producer.partitionKeyExpression=payload</div><div class="line"># 分区数量</div><div class="line">spring.cloud.stream.bindings.output.producer.partitionCount=2</div></pre></td></tr></table></figure>
</li>
<li><p>绑定器SPI</p>
<ul>
<li>绑定器是将程序(SpringBoot)中的输入/输出通道和消息中间件的输入输出做绑定</li>
<li>Spring Cloud Stream暂时只实现了RabbitMQ和Kafka的绑定其，因此只支持此二者的自动化配置</li>
<li><p>可自己实现其他消息中间件的绑定器</p>
<ul>
<li>一个实现Binder接口的类</li>
<li>一个Spring配置加载类，用来连接中间件</li>
<li><p>一个或多个能够在classpath下找到META-INF/spring.binders定义绑定器定的文件。如：</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rabbit:\</div><div class="line">org.springframework.cloud.stream.binder.rabbit.config.RabbitServiceAutoConfiguration</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>绑定器配置</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 默认的绑定器为rabbit(名字是META-INF/spring.binders中定义的)</div><div class="line">spring.cloud.stream.defaultBinder=rabbit</div><div class="line"># 定义某个通道(input)的绑定器</div><div class="line">spring.cloud.stream.bindings.input.binder=kafka</div><div class="line"></div><div class="line"># 为不同通道定义同一类型不同环境的绑定器</div><div class="line">spring.cloud.stream.bindings.input.binder=rabbit1</div><div class="line">spring.cloud.stream.bindings.output.binder=rabbit2</div><div class="line"># 定义rabbit1的类型和环境(此处省略rabbit2的配置)</div><div class="line">spring.cloud.stream.binders.rabbit1.type=rabbit1</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.host=127.0.0.1</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.port=5672</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.username=guest</div><div class="line">spring.cloud.stream.binders.rabbit1.environment.spring.rabbitmq.password=guest</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Sleuth-分布式服务跟踪-Spring-Cloud-Sleuth"><a href="#Sleuth-分布式服务跟踪-Spring-Cloud-Sleuth" class="headerlink" title="Sleuth 分布式服务跟踪(Spring Cloud Sleuth)"></a>Sleuth 分布式服务跟踪(Spring Cloud Sleuth)</h2><ul>
<li>简介<ul>
<li>用来跟踪每个请求在全链路调用的过程，可快速发现每条链路上的性能瓶颈</li>
<li>构建后会自动监控RabbitMQ/Kafka传递的请求、Zuul代理传递的请求、RestTemplate发起的请求</li>
</ul>
</li>
<li><p>入门案例</p>
<ul>
<li><p>引入依赖(在生产者和消费者中都引入)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">&lt;!-- 服务跟踪 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>访问生产者<code>http://localhost:8000/simple/1</code>，控制台输出类似<code>TRACE [provider-user,0ec3c3b4ee83efd5,0ec3c3b4ee83efd5,false]</code>的信息，信息中括号的值分别代表：应用名称、Trace ID(一个请求链路的唯一标识)、Span ID(一个基本工作单元，如一个Http请求)、是否将信息收集到Zipkin等服务中来收集和展示</p>
</li>
<li>添加配置<code>logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG</code>可打印更多信息</li>
</ul>
</li>
<li>请求头信息：<code>org.springframework.cloud.sleuth.Span</code></li>
<li><p>抽样收集</p>
<ul>
<li>Spring Cloud Sleuth收集策略通过Sampler接口实现(通过isSampled返回boolean判断是否收集)，默认会使用PercentageBasedSampler实现的抽样策略</li>
<li><code>spring.sleuth.sampler.percentage=0.1</code> 代表收集10%的请求跟踪信息</li>
<li><p>可收集请求头信息中包含某个tag的样品</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagSampler</span> <span class="keyword">implements</span> <span class="title">Sampler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String tag;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TagSampler</span><span class="params">(String tag)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.tag = tag;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSampled</span><span class="params">(Span span)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> span.tags().get(tag) != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>与Zipkin整合(推荐)</p>
<ul>
<li><p>建立zipkin server</p>
<ul>
<li>新建服务<code>zipkin-server</code></li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!-- eureka客户端 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Zipkin创建sleuth主题的stream --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--包含Zipkin服务的核心依赖(zipkin-server)、消息中间件的核心依赖、扩展数据存依赖等. 不包含Zipkin前端界面依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Zipkin前端界面依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 存储Zipkin跟踪信息到mysql(可选. 使用mysql后, Zipkin前端界面显示的数据是通过Restful API从数据库中获取的. 不使用数据存储在Zipkin内部) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类加注解<code>@EnableEurekaClient</code>、<code>@EnableZipkinStreamServer</code>(用stream方式启动，包含常规启动@EnableZipkinServer和创建sleuth的stream主题)</p>
</li>
<li><p>application.yml配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">9411</span></div><div class="line"></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">zipkin-server</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line">    <span class="comment"># 建表语句, 用来新建zipkin跟踪信息相关表(zipkin_spans、zipkin_annotations、zipkin_dependencies), 文件在Maven:io.zipkin.java:zipkin.storage.mysql目录下</span></div><div class="line"><span class="attr">    schema:</span> <span class="attr">classpath:/mysql.sql</span></div><div class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/test</span></div><div class="line"><span class="attr">    username:</span> <span class="string">root</span></div><div class="line"><span class="attr">    password:</span> <span class="string">root</span></div><div class="line"><span class="attr">    initialize:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    continue-on-error:</span> <span class="literal">true</span></div><div class="line">  <span class="comment"># 不对此服务开启跟踪</span></div><div class="line"><span class="attr">  sleuth:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment"># 改变zipkin日志跟踪信息存储方式为mysql(测试也可不使用mysql存储)</span></div><div class="line"><span class="attr">zipkin:</span></div><div class="line"><span class="attr">  storage:</span></div><div class="line"><span class="attr">    type:</span> <span class="string">mysql</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>被跟踪的应用(在生产者和消费者中都引入)</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--服务跟踪与Zipkin整合(可选)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果zipkin没有使用eureka， 则需要在application.yml中添加<code>spring.zipkin.base-url: http://localhost:9411/</code>(zipkin server地址)</p>
</li>
</ul>
</li>
<li>进入到zipkin server后台界面查看跟踪信息：<a href="http://localhost:9411/(跟踪信息可能会有延迟" target="_blank" rel="external">http://localhost:9411/(跟踪信息可能会有延迟</a>)</li>
</ul>
</li>
<li><p>ELK日志分析系统(Logstash)</p>
<ul>
<li>ELK平台包含：ElasticSerch(分布式搜索引擎)、Logstash(日志收集-过滤-存储)、Kibana(界面展现)三个开源工具。(与Zipkin类似，二者不建议同时使用)</li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">      <span class="comment">&lt;!--服务跟踪与ELK日志分析平台整合(可选，此包用于Logstash收集日志)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>将spring.application.name配置到bootstrap.yml中</p>
</li>
<li>在resources目录加logback-spring.xml文件(请看源码)</li>
</ul>
</li>
</ul>
<hr>
<p>[^3]: <a href="http://blog.csdn.net/sosfnima/article/details/53178326" target="_blank" rel="external">Spring Cloud Bus原理</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Eureka </tag>
            
            <tag> Ribbon </tag>
            
            <tag> Feign </tag>
            
            <tag> Hystrix </tag>
            
            <tag> Zuul </tag>
            
            <tag> Config </tag>
            
            <tag> Bus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springboot]]></title>
      <url>/2017/07/23/java/springboot/</url>
      <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><code>helloworld</code>(1.5.6)</li>
<li>数据访问<ul>
<li><code>hibernate</code>(1.5.6, mysql)</li>
<li><code>mybatis</code>(1.5.6)</li>
</ul>
</li>
<li><code>thymeleaf-spring-security</code>(1.5.6)</li>
<li><code>rabbitmq</code>(1.5.6)</li>
</ul>
<h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--包含spring-boot-starter、hibernate-validator、jackson-databind、spring-web、spring-webmvc--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类 <code>SpringbootApplication.java</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span> <span class="comment">// @Controller</span></div><div class="line"><span class="meta">@EnableAutoConfiguration</span> <span class="comment">// 开启自动配置</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</div><div class="line">	<span class="comment">// 访问 http://localhost:8080/</span></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">	<span class="function">String <span class="title">home</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Hello World!"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(SpringbootApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>至此，无需其他任何配置。浏览器访问：<a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a></p>
</li>
</ul>
<h2 id="配置文件-properties-yml"><a href="#配置文件-properties-yml" class="headerlink" title="配置文件(properties/yml)"></a>配置文件(properties/yml)</h2><ul>
<li>profile配置：可新建<code>application.properties</code>(默认)、<code>application-dev.properties</code>(会继承默认中的配置)、<code>application-prod.properties</code>、<code>application-test.properties</code>来针对不同的运行环境(<code>application-{profile}.properties</code>)</li>
<li>使用配置文件(优先级从高到低)<ul>
<li>外部配置：<code>java -jar aezocn.jar --spring.profiles.active=prod</code></li>
<li>配置文件：<code>spring.profiles.active=dev</code> 代表使用application-dev.properties的配置文件(在application.properties中添加此配置)</li>
</ul>
</li>
<li>可以idea中修改默认profiles或者某些配置达到运行多个实例的目的</li>
</ul>
<h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><ul>
<li><p>随应用启动而运行(实现<code>CommandLineRunner</code>接口)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">@Order(value = 1) // @Order值越小越优先</div><div class="line">public class HelpStartupRunner implements CommandLineRunner &#123;</div><div class="line">	@Value(&quot;$&#123;help.imageUploadRoot&#125;&quot;)</div><div class="line">	String imageUploadRoot;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void run(String... args) throws Exception &#123;</div><div class="line">		initImageUploadRoot();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	private void initImageUploadRoot() &#123;</div><div class="line">		System.out.println(&quot;help.imageUploadRoot = &quot; + imageUploadRoot);</div><div class="line"></div><div class="line">		File dicFile = new File(imageUploadRoot);</div><div class="line">		if(!dicFile.exists() &amp;&amp; !dicFile.isDirectory()) &#123;</div><div class="line">			dicFile.mkdir();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>拦截器</p>
<ul>
<li><p>定义拦截器</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;在请求处理之前进行调用（Controller方法调用之前）"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 只有返回true才会继续向下执行，返回false取消当前请求</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 这个方法只会在当前这个Interceptor的preHandle方法返回值为true的时候才会执行。</div><div class="line">	* postHandle是进行处理器拦截用的，它的执行时间是在处理器进行处理之后，也就是在Controller的方法调用之后执行，但是它会在DispatcherServlet进行视图的渲染之前执行，也就是说在这个方法中你可以对ModelAndView进行操作。</div><div class="line">	* 这个方法的链式结构跟正常访问的方向是相反的，也就是说先声明的Interceptor拦截器，该方法反而会后调用</div><div class="line">	*/</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></div><div class="line">						ModelAndView modelAndView) <span class="keyword">throws</span> Exception &#123;</div><div class="line">		System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;请求处理之后进行调用（Controller方法调用之后），但是在视图被渲染之前"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(response.getStatus() == <span class="number">500</span>) &#123;</div><div class="line">			modelAndView.setViewName(<span class="string">"/error/500"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(response.getStatus() == <span class="number">404</span>) &#123;</div><div class="line">			modelAndView.setViewName(<span class="string">"/error/404"</span>);</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(response.getStatus() == <span class="number">403</span>) &#123;</div><div class="line">			modelAndView.setViewName(<span class="string">"/error/403"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 该方法也是需要当前对应的Interceptor的preHandle方法的返回值为true时才会执行。</div><div class="line">	* 该方法将在整个请求完成之后，也就是DispatcherServlet渲染了视图执行</div><div class="line">	* 这个方法的主要作用是用于清理资源的，当然这个方法也只能在当前这个Interceptor的preHandle方法的返回值为true时才会执行。</div><div class="line">	*/</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></div><div class="line">			<span class="keyword">throws</span> Exception &#123;</div><div class="line">		System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行（主要是用于进行资源清理工作）"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注册拦截器</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">		<span class="comment">// 多个拦截器组成一个拦截器链</span></div><div class="line">		<span class="comment">// addPathPatterns 用于添加拦截规则</span></div><div class="line">		<span class="comment">// excludePathPatterns 用于排除拦截</span></div><div class="line">		registry.addInterceptor(<span class="keyword">new</span> MyInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">super</span>.addInterceptors(registry);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>获取Bean：此处选择实现<code>ApplicationContextAware</code>接口 <a href="[Spring在代码中获取bean的几种方式](http://www.cnblogs.com/yjbjingcha/p/6752265.html)">^7</a></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"springContextU"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextU</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		<span class="keyword">if</span>(SpringContextU.applicationContext == <span class="keyword">null</span>) &#123;</div><div class="line">			SpringContextU.applicationContext = applicationContext;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 获取applicationContext</div><div class="line">	* <span class="doctag">@return</span></div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> applicationContext;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 通过name获取 Bean.</div><div class="line">	* <span class="doctag">@param</span> name</div><div class="line">	* <span class="doctag">@return</span></div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> getApplicationContext().getBean(name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 通过class获取Bean.</div><div class="line">	* <span class="doctag">@param</span> clazz</div><div class="line">	* <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">	* <span class="doctag">@return</span></div><div class="line">	*/</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> getApplicationContext().getBean(clazz);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* 通过name以及Clazz返回指定的Bean</div><div class="line">	* <span class="doctag">@param</span> name</div><div class="line">	* <span class="doctag">@param</span> clazz</div><div class="line">	* <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">	* <span class="doctag">@return</span></div><div class="line">	*/</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name,Class&lt;T&gt; clazz)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> getApplicationContext().getBean(name, clazz);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>异步执行服务 <a href="[异步调用Async](http://blog.csdn.net/v2sking/article/details/72795742)">^8</a></p>
<ul>
<li>启动类加注解<code>@EnableAsync</code></li>
<li>服务类方法加注解<code>@Async</code></li>
</ul>
</li>
<li><p><code>@Value</code>给静态成员设值</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"myValue"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyValue</span> </span>&#123;</div><div class="line">	<span class="comment">// ...Model：字段、get、set方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 设值：在application.properties中设置`myValue.val`的值</span></div><div class="line"></div><div class="line"><span class="comment">// 取值</span></div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;myValue.val&#125;"</span>)</div><div class="line"><span class="keyword">private</span> String val;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> String hello;</div><div class="line"></div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;myValue.hello&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">setHello</span><span class="params">(String hello)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.hello = hello;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="请求及响应"><a href="#请求及响应" class="headerlink" title="请求及响应"></a>请求及响应</h2><ul>
<li><p>相关配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 端口</div><div class="line">server.port=9090</div><div class="line"># context-path路径</div><div class="line">server.context-path=/myapp</div></pre></td></tr></table></figure>
</li>
<li><p>请求协议</p>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>request-method</th>
<th>content-type</th>
<th>postman</th>
<th>springboot</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>post</td>
<td>application/json</td>
<td>row-json</td>
<td>(@RequestBody User user)</td>
<td>如果后台使用了@RequestBody，此时row-text等都无法请求到</td>
</tr>
<tr>
<td>post</td>
<td>multipart/form-data</td>
<td>form-data</td>
<td>(HttpServletRequest request, User user, @RequestParam(“hello”) String hello)</td>
<td>参考实例1。可进行文件上传(包含参数)</td>
</tr>
</tbody>
</table>
<ol>
<li><p><code>&#39;content-type&#39;: &#39;multipart/form-data;</code>(postman对应form-data)：可进行文件上传(包含参数), 响应代码如：</p>
<ul>
<li><code>javascript XHR</code>需要使用<code>new FormData()</code>进行数据传输(可查看postman代码)</li>
<li><p>还可使用<code>MultipartFile</code>来接受单个文件, 使用<code>List&lt;MultipartFile&gt; files = ((MultipartHttpServletRequest) request).getFiles(&quot;file&quot;);</code>获取多个文件 <a href="[spring-boot文件上传](http://blog.csdn.net/coding13/article/details/54577076)">^3</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 此时User会根据前台参数和User类的set方法自动填充(调用的是User类的set方法)</span></div><div class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/edit-user"</span>, method = RequestMethod.POST)</div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">editEvent</span><span class="params">(HttpServletRequest request, User user, @RequestParam(<span class="string">"hello"</span>)</span> String hello) </span>&#123;</div><div class="line">	Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">	System.out.println(<span class="string">"hello = "</span> + hello); <span class="comment">// hello world</span></div><div class="line">	System.out.println(<span class="string">"user.getName() = "</span> + user.getName()); <span class="comment">// smalle</span></div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 为了获取文件项</span></div><div class="line">		Collection&lt;Part&gt; parts = request.getParts();</div><div class="line"></div><div class="line">		<span class="comment">// part中包含了所有数据(参数和文件)</span></div><div class="line">		<span class="keyword">for</span> (Part part: parts) &#123;</div><div class="line">			String originName = part.getSubmittedFileName(); <span class="comment">// 上传文件对应的文件名</span></div><div class="line">			System.out.println(<span class="string">"originName = "</span> + originName);</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(<span class="keyword">null</span> != originName) &#123;</div><div class="line">				<span class="comment">// 此part为文件</span></div><div class="line">				InputStream inputStream = part.getInputStream();</div><div class="line">				<span class="comment">// ...</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;  <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h2><ul>
<li><p>数据库驱动</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--数据库驱动--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">## spring.datasource.driver-class-name=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mysql://localhost/springboot?useUnicode=true&amp;characterEncoding=utf-8</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line"></div><div class="line"># 每次启动都会执行, 且在hibernate建表语句之前执行</div><div class="line"># 若无此定义, springboot也会默认执行resources下的schema.sql(先)和data.sql(后)文件(如果存在)</div><div class="line"># 执行建表语句(也会执行插入等语句)</div><div class="line">spring.datasource.schema=classpath:schema.sql</div><div class="line"># 执行数据添加语句</div><div class="line">spring.datasource.data=classpath:data.sql</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="对hibernate的默认支持-JPA"><a href="#对hibernate的默认支持-JPA" class="headerlink" title="对hibernate的默认支持(JPA)"></a>对hibernate的默认支持(JPA)</h3><blockquote>
<p><a href="http://www.cnblogs.com/rulian/tag/jpa/" target="_blank" rel="external">Spring Data JPA博文</a></p>
<ul>
<li>继承接口查询(JpaRepository/JpaSpecificationExecutor等)：<a href="http://www.cnblogs.com/rulian/p/6557471.html" target="_blank" rel="external">http://www.cnblogs.com/rulian/p/6557471.html</a></li>
<li>方法定义规则查询：<a href="http://www.cnblogs.com/rulian/p/6434631.html" target="_blank" rel="external">http://www.cnblogs.com/rulian/p/6434631.html</a></li>
<li>Example实例查询：<a href="http://www.cnblogs.com/rulian/p/6533109.html" target="_blank" rel="external">http://www.cnblogs.com/rulian/p/6533109.html</a></li>
</ul>
</blockquote>
<ul>
<li><p>引入数据库和jpa</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--jpa是ORM框架的API(基于hibernate完成), jdbc是java操作数据库的API(执行sql语句)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据库添加配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">## spring.jpa.database=MYSQL</div><div class="line"># 自动执行ddl语句(create/create-drop/update).</div><div class="line">spring.jpa.hibernate.ddl-auto=update</div><div class="line"># 打印sql执行语句, 查询和建表</div><div class="line">spring.jpa.show-sql=true</div><div class="line"># 格式化打印语句</div><div class="line">spring.jpa.properties.hibernate.format_sql=true</div><div class="line"># 懒加载配置</div><div class="line">spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true</div></pre></td></tr></table></figure>
</li>
<li><p><code>UserDao.java</code>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 继承了JpaRepository(JpaRepository又继承了CrudRepository已经定义好了基本增删查改相关方法)</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClassDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserClass</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">	<span class="comment">// spring data 根据属性名和查询关键字自动生成查询方法(spring data会自动实现)</span></div><div class="line">	<span class="function">UserClass <span class="title">findByClassName</span><span class="params">(String className)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>UserController.java</code>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">   UserDao userDao;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/users"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">       <span class="comment">// 前台传一个类似的user对象，会把此对象做作为条件进行查询</span></div><div class="line">       Example&lt;User&gt; example = Example.of(user);</div><div class="line"></div><div class="line">	<span class="comment">// 进行模糊匹配</span></div><div class="line">	<span class="comment">// ExampleMatcher matcher = ExampleMatcher.matching().withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING);</span></div><div class="line">	<span class="comment">// Example&lt;User&gt; example = Example.of(user, matcher);</span></div><div class="line"></div><div class="line">       <span class="keyword">return</span> userDao.findAll(example);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>@Query</code>查询示例</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UserDao定义的查询语句. org.springframework.data.jpa.repository.Query</span></div><div class="line"><span class="meta">@Query</span>(<span class="string">"select u.classId, u.sex, count(u.classId) as count from User u "</span> +</div><div class="line">		<span class="string">"   where u.password = :password "</span> +</div><div class="line">		<span class="string">"   group by u.classId, u.sex"</span>)</div><div class="line">List&lt;Object[]&gt; countUser(<span class="meta">@Param</span>(<span class="string">"password"</span>) String password);</div><div class="line"></div><div class="line"><span class="comment">// 原生sql</span></div><div class="line"><span class="meta">@Query</span>(value = <span class="string">"select u.* from user u, user_class uc where uc.class_id = u.class_id and uc.class_name = 'one'"</span>, nativeQuery = <span class="keyword">true</span>)</div><div class="line">List&lt;Object[]&gt; findUsers();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// @Query自定义sql语句. http://127.0.0.1:9526/api/user-query</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user-query"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line">	Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">	result.put(<span class="string">"count"</span>, userDao.countUser(<span class="string">"123456"</span>));</div><div class="line">	result.put(<span class="string">"users"</span>, userDao.findUsers());</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

- 执行结果

    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">count</span>: [</div><div class="line">		[</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="number">2</span></div><div class="line">		]</div><div class="line">	],</div><div class="line">	<span class="attr">users</span>: [</div><div class="line">		[</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="string">"smalle"</span>,</div><div class="line">			<span class="string">"123456"</span>,</div><div class="line">			<span class="number">1</span></div><div class="line">		],</div><div class="line">		[</div><div class="line">			<span class="number">2</span>,</div><div class="line">			<span class="number">1</span>,</div><div class="line">			<span class="string">"aezo"</span>,</div><div class="line">			<span class="string">"123456"</span>,</div><div class="line">			<span class="number">1</span></div><div class="line">		]</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p><code>Pageable</code>分页查询：Pageable里面常用参数<code>page</code>(页码, 0代表第一页)、<code>size</code>(页长)、<code>order</code>(排序规则) <a href="[hibernate查询分页](http://www.cnblogs.com/softidea/p/6287788.html)">^4</a></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查询UserClass信息, 并获取子表User的前5条数据. http://127.0.0.1:9526/api/classes?className=one</span></div><div class="line">   <span class="meta">@RequestMapping</span>(value = <span class="string">"/classes"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">findClasses</span><span class="params">(UserClass userClass)</span> </span>&#123;</div><div class="line">       Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">       <span class="comment">// 前台传一个类似的UserClass对象，会把此对象做作为条件进行查询</span></div><div class="line">       Example&lt;UserClass&gt; example = Example.of(userClass);</div><div class="line">       result.put(<span class="string">"userClass"</span>, userClassDao.findAll(example));</div><div class="line"></div><div class="line">       <span class="comment">// 分页获取User数据：如果使用classes.getUsers()获取则需要写实体对应关系(@OneToMany), 且会产生外键. 此时单表查询不需关联关系</span></div><div class="line">       Pageable pageable = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">5</span>, <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"id"</span>)); <span class="comment">// 获取第1页, 每页显示5条, 按照id排序</span></div><div class="line">       result.put(<span class="string">"users"</span>, userDao.findAll(pageable));</div><div class="line"></div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">// 分页(page为页码, 0代表第1页; size代表页长). http://127.0.0.1:9526/api/users-page?page=0</span></div><div class="line"><span class="comment">// 排序：`?sort=firstname&amp;sort=lastname,desc` 表示在按firstname正序排列基础上按lastname倒序排列</span></div><div class="line">   <span class="comment">// org.springframework.data.domain.Pageable、org.springframework.data.domain.Example</span></div><div class="line">   <span class="meta">@RequestMapping</span>(value = <span class="string">"/users-page"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> Page&lt;User&gt; <span class="title">findUsersPage</span><span class="params">(</span></span></div><div class="line">           @RequestParam(value = <span class="string">"username"</span>, defaultValue = <span class="string">"smalle"</span>) String username,</div><div class="line">           Pageable pageable) &#123;</div><div class="line">       <span class="comment">// 前台传一个类似的user对象，会把此对象做作为条件进行查询</span></div><div class="line">       Example&lt;User&gt; example = Example.of(<span class="keyword">new</span> User(username));</div><div class="line"></div><div class="line">       <span class="keyword">return</span> userDao.findAll(example, pageable);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>查询UserClass信息返回数据如下(已经美化去除引号)：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">userClass</span>: [</div><div class="line">		&#123;</div><div class="line">			<span class="attr">classId</span>: <span class="number">1</span>,</div><div class="line">			<span class="attr">className</span>: <span class="string">"one"</span></div><div class="line">		&#125;</div><div class="line">	],</div><div class="line">	<span class="attr">users</span>: &#123;</div><div class="line">		<span class="attr">content</span>: [</div><div class="line">			&#123;</div><div class="line">				<span class="attr">id</span>: <span class="number">2</span>,</div><div class="line">				<span class="attr">classId</span>: <span class="number">1</span>,</div><div class="line">				<span class="attr">username</span>: <span class="string">"aezo"</span>,</div><div class="line">				<span class="attr">password</span>: <span class="string">"123456"</span>,</div><div class="line">				<span class="attr">sex</span>: <span class="number">1</span></div><div class="line">			&#125;,</div><div class="line">			&#123;</div><div class="line">				<span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">				<span class="attr">classId</span>: <span class="number">1</span>,</div><div class="line">				<span class="attr">username</span>: <span class="string">"smalle"</span>,</div><div class="line">				<span class="attr">password</span>: <span class="string">"123456"</span>,</div><div class="line">				<span class="attr">sex</span>: <span class="number">1</span></div><div class="line">			&#125;</div><div class="line">		],</div><div class="line">		<span class="attr">totalElements</span>: <span class="number">2</span>,</div><div class="line">		<span class="attr">totalPages</span>: <span class="number">1</span>,</div><div class="line">		<span class="attr">last</span>: <span class="literal">true</span>,</div><div class="line">		<span class="attr">number</span>: <span class="number">0</span>,</div><div class="line">		<span class="attr">size</span>: <span class="number">5</span>,</div><div class="line">		<span class="attr">first</span>: <span class="literal">true</span>,</div><div class="line">		<span class="attr">numberOfElements</span>: <span class="number">2</span>,</div><div class="line">		<span class="attr">sort</span>: [</div><div class="line">			&#123;</div><div class="line">				<span class="attr">direction</span>: <span class="string">"DESC"</span>,</div><div class="line">				<span class="attr">property</span>: <span class="string">"id"</span>,</div><div class="line">				<span class="attr">ignoreCase</span>: <span class="literal">false</span>,</div><div class="line">				<span class="attr">nullHandling</span>: <span class="string">"NATIVE"</span>,</div><div class="line">				<span class="attr">ascending</span>: <span class="literal">false</span>,</div><div class="line">				<span class="attr">descending</span>: <span class="literal">true</span></div><div class="line">			&#125;</div><div class="line">		]</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h3><p>参考AEZO：《mybatis》：<a href="http://blog.aezo.cn/2017/05/22/java/mybatis/">http://blog.aezo.cn#java@mybatis</a></p>
<h3 id="JdbcTemplate访问数据"><a href="#JdbcTemplate访问数据" class="headerlink" title="JdbcTemplate访问数据"></a>JdbcTemplate访问数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">String sql = <span class="string">"SELECT h.*, e.name as event_name from th_help h, th_event e where h.event_id = e.event_id"</span>;</div><div class="line">List&lt;Map&lt;String, Object&gt;&gt; object = jdbcTemplate.queryForList(sql);</div></pre></td></tr></table></figure>
<h3 id="数据库相关配置"><a href="#数据库相关配置" class="headerlink" title="数据库相关配置"></a>数据库相关配置</h3><ul>
<li><p>数据库/表新建时命名策略(JPA) <a href="https://docs.spring.io/spring-boot/docs/1.5.6.RELEASE/reference/htmlsingle/#howto-configure-hibernate-naming-strategy" target="_blank" rel="external">doc</a></p>
<ul>
<li><code>org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy</code>为springboot默认提供命令策略(实体驼峰转成数据库下划线)</li>
<li><p>示例：给表名加前缀</p>
<ul>
<li><p>配置：<code>spring.jpa.hibernate.naming.physical-strategy=cn.aezo.springboot.CustomPhysicalNamingStrategy</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPhysicalNamingStrategy</span> <span class="keyword">extends</span> <span class="title">SpringPhysicalNamingStrategy</span> </span>&#123;</div><div class="line">	<span class="comment">// 重写父类方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Identifier <span class="title">toPhysicalTableName</span><span class="params">(Identifier name, JdbcEnvironment jdbcEnvironment)</span> </span>&#123;</div><div class="line">		<span class="comment">// System.out.println("name = " + name);</span></div><div class="line">		<span class="comment">// System.out.println("jdbcEnvironment = " + jdbcEnvironment);</span></div><div class="line">		<span class="comment">// System.out.println("name.getCanonicalName() = " + name.getCanonicalName());</span></div><div class="line">		<span class="comment">// System.out.println("name.getText() = " + name.getText());</span></div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.apply(Identifier.toIdentifier(<span class="string">"th_"</span> + name.getText()), jdbcEnvironment);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// copy父类方法</span></div><div class="line">	<span class="function"><span class="keyword">private</span> Identifier <span class="title">apply</span><span class="params">(Identifier name, JdbcEnvironment jdbcEnvironment)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			StringBuilder builder = <span class="keyword">new</span> StringBuilder(name.getText().replace(<span class="string">'.'</span>, <span class="string">'_'</span>));</div><div class="line"></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; builder.length() - <span class="number">1</span>; ++i) &#123;</div><div class="line">				<span class="keyword">if</span>(<span class="keyword">this</span>.isUnderscoreRequired(builder.charAt(i - <span class="number">1</span>), builder.charAt(i), builder.charAt(i + <span class="number">1</span>))) &#123;</div><div class="line">					builder.insert(i++, <span class="string">'_'</span>);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.getIdentifier(builder.toString(), name.isQuoted(), jdbcEnvironment);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// copy父类方法</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isUnderscoreRequired</span><span class="params">(<span class="keyword">char</span> before, <span class="keyword">char</span> current, <span class="keyword">char</span> after)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> Character.isLowerCase(before) &amp;&amp; Character.isUpperCase(current) &amp;&amp; Character.isLowerCase(after);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="使用H2数据库-1"><a href="#使用H2数据库-1" class="headerlink" title="使用H2数据库 ^1"></a>使用H2数据库 <a href="[idea连接h2](https://stackoverflow.com/questions/31498682/spring-boot-intellij-embedded-database-headache)">^1</a></h3><ul>
<li>h2简介：内存数据库（Embedded database或in-momery database）具有配置简单、启动速度快、尤其是其可测试性等优点，使其成为开发过程中非常有用的轻量级数据库。在spring中支持HSQL、H2和Derby三种数据库</li>
<li><a href="http://h2database.com/html/main.html" target="_blank" rel="external">官网：http://h2database.com/html/main.html</a></li>
<li>springboot整合：<a href="../db/h2.md">文章：《h2》</a></li>
</ul>
<h2 id="thymeleaf模板引擎"><a href="#thymeleaf模板引擎" class="headerlink" title="thymeleaf模板引擎"></a>thymeleaf模板引擎</h2><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--thymeleaf模板引擎, 包含spring-boot-starter-web--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 可选：thymeleaf和springsecurity结合在页面级别进行权限控制 --&gt;</span></div><div class="line"><span class="comment">&lt;!--&lt;dependency&gt;</span></div><div class="line">	&lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;thymeleaf-extras-springsecurity4&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;--&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>properties配置</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#spring:</span></div><div class="line"><span class="comment">#  thymeleaf:</span></div><div class="line"><span class="comment">#	# 将thymeleaf文件放在resources/templates/目录</span></div><div class="line">   <span class="comment">#	prefix: classpath:/templates/</span></div><div class="line">   <span class="comment">#	suffix: .html</span></div></pre></td></tr></table></figure>
</li>
<li><p>示例</p>
<ul>
<li><p>Controller：类的注解必须是<code>@Controller</code></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span> <span class="comment">// 此时不能是@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafController</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 页面显示resources/templates/hello.html的内容</span></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Map&lt;String, Object&gt; model)</span> </span>&#123;</div><div class="line">		<span class="comment">// 无需注入参数值时，则方法可不接收model参数</span></div><div class="line">		model.put(<span class="string">"hello"</span>, <span class="string">"UserController.thymeleaf"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="string">"/hello"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>hello.html文件</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="comment">&lt;!-- xmlns:th="http://www.thymeleaf.org"声明后方可使用 th:* --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span>smalle<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>$&#123;hello&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>显示结果(第二个${hello}并不能解析)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UserController.thymeleaf</div><div class="line">$&#123;hello&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>启用thymeleaf的html非严格模式</p>
<ul>
<li>添加配置<code>spring.thymeleaf.mode = LEGACYHTML5</code></li>
<li><p>添加依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 启用thymeleaf的html非严格模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>thymeleaf缓存(热部署)</p>
<ul>
<li>推荐使用<code>JRebel</code>(idea需要Ctrl+Shift+F9刷新)</li>
<li><p>使用<code>devtools</code>(也适用于java文件热部署)</p>
<ul>
<li><p>增加maven配置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>idea需要Ctrl+Shift+F9刷新，相当于重启项目，较普通项目重启快</p>
</li>
</ul>
</li>
<li>配置中加<code>spring.thymeleaf.cache=false</code><ul>
<li>需要使用maven启动</li>
</ul>
</li>
</ul>
</li>
<li>thymeleaf语法：<a href="../lang/thymeleaf.md">文章：《thymeleaf》</a></li>
</ul>
<h2 id="企业级开发"><a href="#企业级开发" class="headerlink" title="企业级开发"></a>企业级开发</h2><h3 id="Nosql"><a href="#Nosql" class="headerlink" title="Nosql"></a>Nosql</h3><h4 id="整合Mongodb"><a href="#整合Mongodb" class="headerlink" title="整合Mongodb"></a>整合Mongodb</h4><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>application.properties配置添加：<code>spring.data.mongodb.uri=mongodb://name:pass@localhost:27017/test</code>、</p>
</li>
<li><p>查询方式</p>
<ul>
<li><p>使用基本查询</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">DBCollection collection = mongoTemplate.getCollection(<span class="string">"hscode"</span>); <span class="comment">// 获取集合(类似与key)</span></div><div class="line"></div><div class="line">      DBObject query = <span class="keyword">new</span> BasicDBObject();</div><div class="line">      query.put(<span class="string">"hsCode"</span>, hscode);</div><div class="line"></div><div class="line">      DBObject dbObject = collection.findOne(query); <span class="comment">// 打印直接就是json数据</span></div></pre></td></tr></table></figure>
</li>
<li><p>创建实体，书写Dao(使用MongoTemplate完成) <a href="[Springboot中mongodb的使用](http://www.cnblogs.com/ityouknow/p/6828919.html)">^6</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><ul>
<li><p>RabbitMQ是实现了高级消息队列协议(AMQP)的开源消息代理软件，也称为面向消息的中间件。后续操作需要先安装RabbitMQ服务</p>
</li>
<li><p>引入对amqp协议支持依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置rabbitmq服务器链接</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  rabbitmq:</span></div><div class="line"><span class="attr">    host:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">    port:</span> <span class="number">5672</span></div><div class="line"><span class="attr">    username:</span> <span class="string">guest</span></div><div class="line"><span class="attr">    password:</span> <span class="string">guest</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置队列、生产者、消费者</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 配置队列 hello</span></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">helloQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"hello"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 生产者</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</div><div class="line"></div><div class="line">    <span class="comment">// 发送消息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</div><div class="line">        String context = <span class="string">"hello "</span> + <span class="keyword">new</span> Date();</div><div class="line">        System.out.println(<span class="string">"Provider: "</span> + context);</div><div class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">"hello"</span>, context);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 消费者</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"hello"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RabbitHandler</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Consumer: "</span> + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="session共享"><a href="#session共享" class="headerlink" title="session共享"></a>session共享</h3><ul>
<li>基于redis实现session共享. 多个项目需要都引入此依赖，并连接相同的redis</li>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- redis依赖 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;dependency&gt;</span></div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt; --&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>启动类加<code>@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 7200)</code> (maxInactiveIntervalInSeconds即session检测的最大时间间隔)</p>
</li>
<li>可将一个项目启动两个端口进行测试</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="替换项目运行时springboot的logo"><a href="#替换项目运行时springboot的logo" class="headerlink" title="替换项目运行时springboot的logo"></a>替换项目运行时springboot的logo</h3><ul>
<li><p>在<code>resources</code>添加<code>banner.txt</code>文件. 内容自定义(文字转字符：<a href="http://patorjk.com/software/taag/)，如：" target="_blank" rel="external">http://patorjk.com/software/taag/)，如：</a></p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"> .oooo.    .ooooo.    oooooooo  .ooooo.   .ooooo.  ooo. .oo.   </div><div class="line">`P  )88b  d88' `88b  d'""7d8P  d88' `88b d88' `"Y8 `888P"Y88b  </div><div class="line"> .oP"888  888ooo888    .d8P'   888   888 888        888   888  </div><div class="line">d8(  888  888    .o  .d8P'  .P 888   888 888   .o8  888   888  </div><div class="line">`Y888""8o `Y8bod8P' d8888888P  `Y8bod8P' `Y8bod8P' o888o o888o</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mybatis </tag>
            
            <tag> hibernate </tag>
            
            <tag> rabbitmq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring]]></title>
      <url>/2017/07/01/java/spring/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol>
<li>spring项目官网：<a href="https://spring.io/projects" target="_blank" rel="external">https://spring.io/projects</a> ，其中的<code>spring-framework</code>即是spring框架内容</li>
<li>历史：(1) spring 1.x，xml配置时代 (2) spring 2.x，注解时代 (3) <strong>spring 3.x，java配置</strong></li>
<li>spring模块(每个模块有个jar包)：<ul>
<li>核心容器：<code>spring-core</code>, <code>spring-beans</code>, <code>spring-context</code>(运行时spring容器), <code>spring-context-support</code>(spring对第三方包的集成支持), <code>spring-expression</code>(使用表达式语言在运行时查询和操作对象)</li>
<li>AOP：spring-aop, spring-aspects</li>
<li>消息：spring-messaging</li>
<li>数据访问：<code>spring-jdbc</code>, <code>spring-tx</code>(提供编程式和声明明式事物支持), <code>spring-orm</code>, <code>spring-oxm</code>(提供对对象/xml映射技术支持), <code>spring-jms</code>(提供jms支持)</li>
<li>Web： <code>spring-web</code>(在web项目中提供spring容器), <code>spring-webmvc</code>(基于Servlet的SpringMVC), <code>spring-websocket</code>, <code>spring-webmvc-portlet</code></li>
</ul>
</li>
<li>spring生态：<code>Spring Boot</code>(使用默认开发配置来快速开发)、<code>Spring Cloud</code>(为分布式系统开发提供工具集)等</li>
<li>本文档基于spring4.3.8</li>
</ol>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ul>
<li><p>maven依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--包含spring-core、spring-beans、spring-aop、spring-expression、spring-instrument--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>依赖注入</p>
<ul>
<li>声明Bean的注解(下面几个注解效果一样)：<ul>
<li><code>@Component</code> 没有明确的角色</li>
<li><code>@Service</code> 在业务逻辑层(cn.aezo.spring.aop_spel.service)使用</li>
<li><code>@Repository</code> 在数据访问层(cn.aezo.spring.aop_spel.dao)使用</li>
<li><code>@Controller</code> 在展现层使用</li>
</ul>
</li>
<li>注入Bean的注解(效果一样)<ul>
<li><code>@Autowired</code> Spring提供(默认按类型by type(根据类); 如果想用by name，则使用<code>@Qualifier(&quot;my-bean-name&quot;)</code>)</li>
<li><code>@Resource</code> JSR-250提供(常用)</li>
<li><code>@Inject</code> JSR-330提供</li>
</ul>
</li>
</ul>
</li>
<li>java配置<ul>
<li><code>@Configuration</code> 注解类表示此类是一个配置类，里面有0个或者多个<code>@Bean</code><ul>
<li><code>@ComponetScan(&quot;cn.aezo&quot;)</code> 定义需要扫描的包名，并将里面的<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>注解的类注册为Bean</li>
</ul>
</li>
<li><code>@Bean</code> 注解方法，表示当前方法的返回值是一个Bean，Bean的名称是方法名</li>
<li>一般公共类使用java配置进行Bean声明，业务相关类使用注解进行Bean声明</li>
</ul>
</li>
<li><p>调用</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");</span></div><div class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class); <span class="comment">// AppConfig为定义的java配置类</span></div><div class="line"></div><div class="line">Hello hello = context.getBean(<span class="string">"hello"</span>, Hello.class);</div><div class="line">hello.hello();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><ul>
<li>相关注解<ul>
<li><code>@Aspect</code> 声明一个切面</li>
<li><code>@Before</code>、<code>@After</code>、<code>@Around</code> 定义建言(advice)</li>
</ul>
</li>
<li><p>maven依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span><span class="comment">&lt;!--不要也可测试成功--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>编写切面</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span> <span class="comment">// 声明一个切面</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</div><div class="line">    <span class="comment">// 法一：简单</span></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* cn.aezo.spring.base.annotation.aop.DemoMethodService.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</div><div class="line">        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();</div><div class="line">        Method method = methodSignature.getMethod();</div><div class="line">        System.out.println(<span class="string">"方法规则式拦截[@Before-execution]："</span> + method.getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>调用service</p>
</li>
</ul>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><ul>
<li><code>@Scope(&quot;prototype&quot;)</code> 注解类(配置Bean的作用域)<ul>
<li><code>singleton</code> 整个容器共享一个实例（默认配置）</li>
<li><code>prototype</code> 每次调用新建一个实例</li>
<li><code>request</code> Web项目中，每一个Http Request新建一个实例</li>
<li><code>session</code></li>
<li><code>globalSession</code> 用于portal应用</li>
</ul>
</li>
</ul>
<h3 id="EL-Spring-EL"><a href="#EL-Spring-EL" class="headerlink" title="EL(Spring-EL)"></a>EL(Spring-EL)</h3><ul>
<li><code>@Value</code> 在其中输入EL表达式。可对资源进行注入</li>
<li><p>实例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.aezo.spring.base.annotation.el"</span>)</div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:cn/aezo/spring/base/annotation/el/el.properties"</span>) <span class="comment">// 注入配置文件</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ELConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"I Love You"</span>)</div><div class="line">    <span class="keyword">private</span> String normal;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;systemProperties['os.name']&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String osName;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;T(java.lang.Math).random() * 100.0&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String randomNumber;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;site.url:www.aezo.cn&#125;"</span>) <span class="comment">// 读取配置文件(需要注入配置文件)，使用$而不是#。冒号后面是缺省值</span></div><div class="line">    <span class="keyword">private</span> Resource siteUrl;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;demoService.another&#125;"</span>) <span class="comment">// 读取其他类属性的@Value注解值</span></div><div class="line">    <span class="keyword">private</span> String fromAnother;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"classpath:cn/aezo/spring/base/annotation/el/test.txt"</span>)</div><div class="line">    <span class="keyword">private</span> Resource testFile;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"http://www.baidu.com"</span>)</div><div class="line">    <span class="keyword">private</span> Resource testUrl;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Environment environment;</div><div class="line"></div><div class="line">    <span class="comment">// @Bean</span></div><div class="line">    <span class="comment">// public static PropertySourcesPlaceholderConfigurer propertyConfigurer() &#123;</span></div><div class="line">    <span class="comment">//     return new PropertySourcesPlaceholderConfigurer();</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputResource</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"normal = "</span> + normal);</div><div class="line">        System.out.println(<span class="string">"osName = "</span> + osName);</div><div class="line">        System.out.println(<span class="string">"randomNumber = "</span> + randomNumber);</div><div class="line">        System.out.println(<span class="string">"normal = "</span> + siteUrl);</div><div class="line">        System.out.println(<span class="string">"fromAnother = "</span> + fromAnother);</div><div class="line">        System.out.println(<span class="string">"environment = "</span> + environment.getProperty(<span class="string">"site.url"</span>));</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"testFile = "</span> + IOUtils.toString(testFile.getInputStream(), <span class="string">"UTF-8"</span>));</div><div class="line">            System.out.println(<span class="string">"testUrl = "</span> + IOUtils.toString(testUrl.getInputStream(), <span class="string">"UTF-8"</span>));</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h3><ul>
<li>不同的环境读取不同的配置文件：<code>dev</code>/<code>prod</code></li>
</ul>
<h3 id="Application-Event"><a href="#Application-Event" class="headerlink" title="Application Event"></a>Application Event</h3><ul>
<li>事件：一个Bean(A)完成某个任务后，可以给另外一个Bean(B)发送事件，前提是B对A进行了监听</li>
<li><p>方法：</p>
<ul>
<li><p>继承<code>ApplicationEvent</code> 进行事件定义</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoEvent</span><span class="params">(Object source, String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(source);</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现<code>ApplicationListener</code> 进行事件监听</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">DemoEvent</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(DemoEvent demoEvent)</span> </span>&#123;</div><div class="line">        String message = demoEvent.getMessage();</div><div class="line">        System.out.println(<span class="string">"DemoListener.onApplicationEvent=="</span> + message);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>applicationContext.publishEvent(new DemoEvent(this, message));</code> 发布事件</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoPublisher</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ApplicationContext applicationContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        applicationContext.publishEvent(<span class="keyword">new</span> DemoEvent(<span class="keyword">this</span>, message));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="Spring-Aware"><a href="#Spring-Aware" class="headerlink" title="Spring Aware"></a>Spring Aware</h3><ul>
<li>Spring依赖注入最大的亮点就是你所有的Bean对Spring容器的存在是无意识的。即你可以将容器换成其他容器，如Google Guice，这是Bean之间的耦合度很低。</li>
<li>Spring Aware可以让你的Bean调用Spring提供的资源，缺点是Bean会和Spring框架耦合。</li>
<li>相关接口<ul>
<li><code>BeanNameAware</code> 获得容器中Bean的名称</li>
<li><code>BeanFactoryAware</code> 获得当前Bean Factory，这样就有可以调用容器服务</li>
<li><code>ApplicationContextAware</code> 获得当前Application Context，这样就有可以调用容器服务</li>
<li><code>MessageSourceAware</code> 获得当前Message Source，可以获得文本信息</li>
<li><code>ApplicationEventPublisherAware</code> 应用事件发布器，可以发布事件</li>
<li><code>ResourceLoaderAware</code> 获得资源加载器，可以获取外部资源</li>
</ul>
</li>
<li><p>实例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwareService</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span>, <span class="title">ResourceLoaderAware</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String beanName;</div><div class="line">    <span class="keyword">private</span> ResourceLoader loader;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.beanName = s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loader = resourceLoader;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputResult</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"beanName = "</span> + beanName);</div><div class="line">        Resource resource = loader.getResource(<span class="string">"classpath:cn/aezo/spring/base/annotation/springaware/test.txt"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String test = IOUtils.toString(resource.getInputStream(), <span class="string">"UTF-8"</span>);</div><div class="line">            System.out.println(<span class="string">"test = "</span> + test);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><ul>
<li>Spring通过任务执行器(TaskExecutor)来实现多线程和并发编程。使用<code>ThreadPoolTaskExecutor</code>可实现一个基于线程池的TaskExecutor。</li>
<li><code>@EnableAsync</code> 可开启对异步任务的支持。需要对应的配置类实现</li>
<li><code>@Async</code> 注解执行异步任务的方法</li>
<li><p>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取线程池</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.aezo.spring.base.annotation.thread"</span>)</div><div class="line"><span class="meta">@EnableAsync</span> <span class="comment">// 开启异步任务支持</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskExecutorConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">        ThreadPoolTaskExecutor taskExecutor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</div><div class="line">        taskExecutor.setCorePoolSize(<span class="number">5</span>);</div><div class="line">        taskExecutor.setMaxPoolSize(<span class="number">10</span>);</div><div class="line">        taskExecutor.setQueueCapacity(<span class="number">25</span>);</div><div class="line">        taskExecutor.initialize();</div><div class="line">        <span class="keyword">return</span> taskExecutor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义异步方法</span></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskService</span> </span>&#123;</div><div class="line">    <span class="meta">@Async</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeAsyncTask</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"i = "</span> + i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Async</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeAsyncTaskPlus</span><span class="params">(Integer i)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"i+1 = "</span> + (i+<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ul>
<li><code>@EnableScheduling</code> 开启定时任务</li>
<li><p><code>@Scheduled</code> 执行任务的方法</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"cn.aezo.spring.base.annotation.scheduled"</span>)</div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskScheduledConfig</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTaskService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 方法访问权限必须为protected或以下</span></div><div class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>) <span class="comment">// 5000毫秒. fixedRate每隔固定时间执行</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"每隔5秒执行一次："</span> + dateFormat.format(<span class="keyword">new</span> Date()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 50 14 ? * *"</span>) <span class="comment">// 每天14.50执行</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fixTimeException</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"在指定时间执行："</span> + dateFormat.format(<span class="keyword">new</span> Date()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="条件注解-Condition"><a href="#条件注解-Condition" class="headerlink" title="条件注解(Condition)"></a>条件注解(Condition)</h3><ul>
<li><code>@Condition</code> 根据满足某一特定条件来创建某个特定的Bean. 如某个Bean创建后才会创建另一个Bean(Spring 4.x)</li>
<li>方法<ul>
<li>条件类实现<code>Condition</code>接口</li>
<li>自定义服务接口，并有多种实现</li>
<li>在<code>@Configuration</code>中<code>@Bean</code>的方法上注解<code>@Conditional(条件类.class)</code>表示符合此条件才会创建对应的Bean</li>
</ul>
</li>
</ul>
<h3 id="组合注解、元注解"><a href="#组合注解、元注解" class="headerlink" title="组合注解、元注解"></a>组合注解、元注解</h3><ul>
<li>元注解是指可以注解到其他注解上的注解，被元注解注解之后的注解称之为组合注解</li>
<li>如<code>@Configuration</code>是包含<code>@Component</code>的组合注解，<code>@Component</code>为元注解</li>
<li><p>示例，将<code>@Configuration</code>和<code>@ComponentScan</code>组合成一个注解</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WiselyConfiguration &#123;</div><div class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring </tag>
            
            <tag> spring-mvc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mybatis]]></title>
      <url>/2017/05/22/java/mybatis/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="external">MyBatis3中文文档</a></li>
<li><code>MyBatis Generator</code>：mybatis代码生成(model/dao/mapper)，<a href="http://www.mybatis.org/generator/" target="_blank" rel="external">文档</a></li>
</ul>
<h2 id="SpringBoot整合mybatis-1"><a href="#SpringBoot整合mybatis-1" class="headerlink" title="SpringBoot整合mybatis ^1"></a>SpringBoot整合mybatis <a href="[整合mybatis](http://blog.csdn.net/gebitan505/article/details/54929287)">^1</a></h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ul>
<li><p>引入依赖(mybatis-spring-boot-starter为mybatis提供的自动配置插件)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 自动配置 https://github.com/mybatis/spring-boot-starter --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--mybatis分页插件: https://github.com/pagehelper/Mybatis-PageHelper--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动类中加：<code>@MapperScan({&quot;cn.aezo.springboot.mybatis.mapper&quot;, &quot;cn.aezo.springboot.mybatis.mapperxml&quot;})</code> // 声明需要扫描mapper接口的路径</p>
</li>
<li><p>配置</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 基于xml配置时需指明映射文件扫描位置；设置多个路径可用&quot;,&quot;分割，如：&quot;classpath:mapper/*.xml, classpath:mapper2/*.xml&quot;</div><div class="line">mybatis.mapper-locations=classpath:mapper/*.xml</div><div class="line"># mybatis配置文件位置(mybatis.config-location和mybatis.configuration...不能同时使用), 由于自动配置对插件支持不够暂时使用xml配置</div><div class="line">mybatis.config-location=classpath:mybatis-config.xml</div><div class="line"></div><div class="line"># 字段格式对应关系：数据库字段为下划线, model字段为驼峰标识(不设定则需要通过resultMap进行转换)</div><div class="line">#mybatis.configuration.map-underscore-to-camel-case=true</div><div class="line"># 类型别名定义扫描的包(可结合@Alias使用, 默认是类名首字母小写)</div><div class="line">#mybatis.type-aliases-package=cn.aezo.springboot.mybatis.model</div></pre></td></tr></table></figure>
</li>
<li><p>mybatis配置文件: <code>mybatis-config.xml</code></p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></div><div class="line"><span class="comment">&lt;!--在application.properties中使用了mybatis.configuration进行配置，无需此文件(传统配置)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--字段格式对应关系：数据库字段为下划线, model字段为驼峰标识(不设定则需要通过resultMap进行转换)--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--打印mybatis运行的sql语句--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--类型别名定义--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--定义需要扫描的包--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.aezo.springboot.mybatis.model"</span>/&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--定义后可在映射文件中间的parameterType等字段中使用userInfo代替cn.aezo.springboot.mybatis.model.UserInfo--&gt;</span></div><div class="line">		<span class="comment">&lt;!--&lt;typeAlias alias="userInfo" type="cn.aezo.springboot.mybatis.model.UserInfo" /&gt;--&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 分页插件 --&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 5.0.0以后使用com.github.pagehelper.PageInterceptor作为拦截器 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!--更多参数配置：https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md--&gt;</span></div><div class="line">			<span class="comment">&lt;!--&lt;property name="pageSizeZero" value="true"/&gt;--&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Model：UserInfo/ClassInfo等无需任何注解.(其中HobbyEnum是一个枚举类)</p>
</li>
</ul>
<h3 id="annotation版本-适合简单业务"><a href="#annotation版本-适合简单业务" class="headerlink" title="annotation版本(适合简单业务)"></a>annotation版本(适合简单业务)</h3><ul>
<li><p><code>annotation版本(适合简单业务)</code></p>
<ul>
<li><p>Dao层：UserMapper.java</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// @Mapper // 在启动类中定义需要扫码mapper的包：@MapperScan("cn.aezo.springboot.mybatis.mapper"), 则此处无需声明@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line">	<span class="comment">// 此处注入变量可以使用#或者$, 区别：# 创建的是一个prepared statement语句, $ 符创建的是一个inlined statement语句</span></div><div class="line">	<span class="meta">@Select</span>(<span class="string">"select * from user_info where nick_name = #&#123;nickName&#125;"</span>)</div><div class="line">	<span class="comment">// (使用配置&lt;setting name="mapUnderscoreToCamelCase" value="true"/&gt;因此无需转换) 数据库字段名和model字段名或javaType不一致的均需要@Result转换</span></div><div class="line">	<span class="comment">// @Results(&#123;</span></div><div class="line">	<span class="comment">//         @Result(property = "hobby",  column = "hobby", javaType = HobbyEnum.class),</span></div><div class="line">	<span class="comment">//         @Result(property = "nickName", column = "nick_name"),</span></div><div class="line">	<span class="comment">//         @Result(property = "groupId", column = "group_Id")</span></div><div class="line">	<span class="comment">// &#125;)</span></div><div class="line">	<span class="function">UserInfo <span class="title">findByNickName</span><span class="params">(String nickName)</span></span>;</div><div class="line"></div><div class="line">	<span class="meta">@Select</span>(<span class="string">"select * from user_info"</span>)</div><div class="line">	<span class="function">List&lt;UserInfo&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="meta">@Insert</span>(<span class="string">"insert into user_info(nick_name, group_id, hobby) values(#&#123;nickName&#125;, #&#123;groupId&#125;, #&#123;hobby&#125;)"</span>)</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(UserInfo userInfo)</span></span>; <span class="comment">// 一个参数可以省略@Param，多个需要进行指定</span></div><div class="line"></div><div class="line">	<span class="meta">@Update</span>(<span class="string">"update user_info set nick_name = #&#123;nickName&#125;, hobby = #&#123;hobby&#125; where id = #&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(UserInfo userInfo)</span></span>;</div><div class="line"></div><div class="line">	<span class="meta">@Delete</span>(<span class="string">"delete from user_info where id = #&#123;id&#125;"</span>)</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>分页</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 分页查询：http://localhost:9526/api/users</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/users"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> PageInfo <span class="title">showAllUser</span><span class="params">(</span></span></div><div class="line">		@RequestParam(defaultValue = <span class="string">"1"</span>) Integer pageNum,</div><div class="line">		@<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"5"</span>)</span> Integer pageSize) &#123;</div><div class="line">	PageHelper.startPage(pageNum, pageSize); <span class="comment">// 默认查询第一页，显示5条数据</span></div><div class="line">	List&lt;UserInfo&gt; users = userMapper.findAll(); <span class="comment">// 第一条执行的SQL语句会被分页，实际上输出users是page对象</span></div><div class="line">	PageInfo&lt;UserInfo&gt; pageUser = <span class="keyword">new</span> PageInfo&lt;UserInfo&gt;(users); <span class="comment">// 将users对象绑定到pageInfo</span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> pageUser;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>分页查询结果</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">pageNum</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">pageSize</span>: <span class="number">5</span>,</div><div class="line">	<span class="attr">size</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">startRow</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">endRow</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">total</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">pages</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">list</span>: [</div><div class="line">		&#123;</div><div class="line">			<span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">			<span class="attr">groupId</span>: <span class="number">1</span>,</div><div class="line">			<span class="attr">nickName</span>: <span class="string">"smalle"</span>,</div><div class="line">			<span class="attr">hobby</span>: <span class="string">"GAME"</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="attr">id</span>: <span class="number">2</span>,</div><div class="line">			<span class="attr">groupId</span>: <span class="number">1</span>,</div><div class="line">			<span class="attr">nickName</span>: <span class="string">"aezo"</span>,</div><div class="line">			<span class="attr">hobby</span>: <span class="string">"CODE"</span></div><div class="line">		&#125;</div><div class="line">	],</div><div class="line">	<span class="attr">prePage</span>: <span class="number">0</span>,</div><div class="line">	<span class="attr">nextPage</span>: <span class="number">0</span>,</div><div class="line">	<span class="attr">isFirstPage</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">isLastPage</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">hasPreviousPage</span>: <span class="literal">false</span>,</div><div class="line">	<span class="attr">hasNextPage</span>: <span class="literal">false</span>,</div><div class="line">	<span class="attr">navigatePages</span>: <span class="number">8</span>,</div><div class="line">	<span class="attr">navigatepageNums</span>: [</div><div class="line">		<span class="number">1</span></div><div class="line">	],</div><div class="line">	<span class="attr">navigateFirstPage</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">navigateLastPage</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">firstPage</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">lastPage</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>测试</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByNickName</span><span class="params">()</span> </span>&#123;</div><div class="line">	UserInfo userInfo = userMapper.findByNickName(<span class="string">"smalle"</span>);</div><div class="line">	System.out.println(<span class="string">"userInfo = "</span> + userInfo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	userMapper.insert(<span class="keyword">new</span> UserInfo(<span class="string">"test"</span>, <span class="number">1L</span>, HobbyEnum.READ));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>基于注解的sql示例(<strong>推荐</strong>) <a href="[@Select注解中当参数为空则不添加该参数的判断](https://segmentfault.com/q/1010000006875476)">^2</a></p>
<ul>
<li><p>用script标签包围，然后像xml语法一样书写</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Dao层，mybatis会基于此注解完成对应的实现</span></div><div class="line"><span class="comment">// 可以理解为查询sql语句返回的是一个List&lt;Map&lt;String, Object&gt;&gt;(List里面必须为Map或其子类)。如果用Map&lt;String, Object&gt;接受返回值则默认取第一条数据</span></div><div class="line"><span class="meta">@Select</span>(&#123; <span class="string">"&lt;script&gt;"</span>,</div><div class="line">    <span class="string">"select h.help_id, h.apply_money, h.create_time, h.creator, h.description, h.is_comfort, h.is_valid, h.title, h.update_time, h.updater "</span>,</div><div class="line">    <span class="string">"   , e.name"</span>,</div><div class="line">    <span class="string">" from th_help as h "</span>,</div><div class="line">    <span class="string">"   left join th_event e on e.event_id = h.event_id"</span>,</div><div class="line">    <span class="string">" where 1=1 "</span>,</div><div class="line">    <span class="string">" &lt;when test='help.title != null'&gt; AND h.title like concat('%', #&#123;help.title&#125;, '%')&lt;/when&gt;"</span>, <span class="comment">// 此处必须使用concat进行字符串连接</span></div><div class="line">    <span class="string">" &lt;when test='event.name != null'&gt; AND e.name = #&#123;event.name&#125;"</span>, <span class="string">"&lt;/when&gt;"</span>,</div><div class="line">    <span class="string">"&lt;/script&gt;"</span> &#125;)</div><div class="line">List&lt;Map&lt;String, Object&gt;&gt; findHelps(<span class="meta">@Param</span>(<span class="string">"help"</span>) Help help, <span class="meta">@Param</span>(<span class="string">"event"</span>) Event event); <span class="comment">// 普通变量可以省略@Param, 多个对象则可使用@Param指明其引用名称方可使用（如：help.title），否则只能写成title（多个对象可能存在相同字段，建议指明）</span></div><div class="line"></div><div class="line"><span class="comment">// 配合分页插件使用</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">findHelps</span><span class="params">(Help help, Event event,</span></span></div><div class="line">        @RequestParam(defaultValue = <span class="string">"1"</span>) Integer pageNum,</div><div class="line">        @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"10"</span>)</span> Integer pageSize) &#123;</div><div class="line">    PageHelper.startPage(pageNum, pageSize);</div><div class="line">    List users = helpMapper.findHelps(help, event);</div><div class="line">    PageInfo pageUser = <span class="keyword">new</span> PageInfo(users);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> pageUser;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>&lt;when&gt;</code> 可进行嵌套使用</li>
<li>双引号转义：<code>&lt;when test=&#39;help.title != null and type = \&quot;MY_TYPE\&quot;&#39;&gt;</code></li>
<li>大于小于好需要转义（&gt;：<code>&amp;gt;</code>, &lt;：<code>&amp;lt;</code>）</li>
<li>mysql当前时间获取<code>now()</code>，数据库日期型可和前台时间字符串进行比较</li>
<li>数据库字段类型根据mybatis映射转换，<code>count(*)</code>转换成<code>Long</code></li>
</ul>
</li>
<li><p>用Provider去实现SQL拼接(适用于复杂sql)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderProvider</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TBL_ORDER = <span class="string">"tbl_order"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryOrderByParam</span><span class="params">(OrderPara param)</span> </span>&#123;</div><div class="line">        SQL sql = <span class="keyword">new</span> SQL().SELECT(<span class="string">"*"</span>).FROM(TBL_ORDER);</div><div class="line">        String room = param.getRoom();</div><div class="line">        <span class="keyword">if</span> (StringUtils.hasText(room)) &#123;</div><div class="line">            sql.WHERE(<span class="string">"room LIKE #&#123;room&#125;"</span>);</div><div class="line">        &#125;</div><div class="line">        Date myDate = param.getMyDate();</div><div class="line">        <span class="keyword">if</span> (myDate != <span class="keyword">null</span>) &#123;</div><div class="line">            sql.WHERE(<span class="string">"mydate LIKE #&#123;mydate&#125;"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sql.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderDAO</span> </span>&#123;</div><div class="line">    <span class="meta">@SelectProvider</span>(type = OrderProvider.class, method = <span class="string">"queryOrderByParam"</span>)</div><div class="line">    <span class="function">List&lt;Order&gt; <span class="title">queryOrderByParam</span><span class="params">(OrderParam param)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="xml版本-适合复杂操作"><a href="#xml版本-适合复杂操作" class="headerlink" title="xml版本(适合复杂操作)"></a>xml版本(适合复杂操作)</h3><ul>
<li><p><code>xml版本(适合复杂操作)</code></p>
<ul>
<li><p>Dao层：UserMapperXml.java</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapperXml</span> </span>&#123;</div><div class="line">	<span class="function">List&lt;UserInfo&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="function">UserInfo <span class="title">getOne</span><span class="params">(Long id)</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(UserInfo user)</span></span>; <span class="comment">// 成功返回1</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(UserInfo user)</span></span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Dao实现(映射文件): UserMapper.xml(放在resources/mapper目录下)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"><span class="comment">&lt;!--http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html#--&gt;</span></div><div class="line"><span class="comment">&lt;!--sql映射文件: namespace必须为实现接口名；每个sql是一个statement--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.aezo.springboot.mybatis.mapperxml.UserMapperXml"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--resultMap结果集映射定义(用来描述如何从数据库结果集中来加载对象). resultType 与 resultMap 不能并用--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserInfoResultMap"</span> <span class="attr">type</span>=<span class="string">"cn.aezo.springboot.mybatis.model.UserInfo"</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--设置mybatis.configuration.map-underscore-to-camel-case=true则会自动对格式进行转换, 无效下面转换--&gt;</span></div><div class="line">		<span class="comment">&lt;!--&lt;result column="group_id" property="groupId" jdbcType="BIGINT"/&gt;--&gt;</span></div><div class="line">		<span class="comment">&lt;!--&lt;result column="nick_name" property="nickName" jdbcType="VARCHAR"/&gt;--&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--sql:可被其他语句引用的可重用语句块. id:唯一的标识符，可被其它语句引用--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"UserInfoColumns"</span>&gt;</span> id, group_id, nick_name, hobby <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--id对应接口的方法名; resultType(类全称或别名) 与 resultMap(自定义数据库字段与实体字段转换关系map) 不能并用; --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- statementType: STATEMENT(statement)、PREPARED(preparedstatement, 默认)、CALLABLE(callablestatement)--&gt;</span></div><div class="line">	<span class="comment">&lt;!-- resultSetType: FORWARD_ONLY(游标向前滑动)，SCROLL_SENSITIVE(滚动敏感)，SCROLL_INSENSITIVE(不区分大小写的滚动)--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultMap</span>=<span class="string">"UserInfoResultMap"</span>&gt;</span></div><div class="line">		select</div><div class="line">		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"UserInfoColumns"</span>/&gt;</span></div><div class="line">		from user_info</div><div class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--parameterType传入参数类型. 使用typeAliases进行类型别名映射后可写成resultType="userInfo"(自动扫描包mybatis.type-aliases-package, 默认该包下的类名首字母小写为别名) --&gt;</span></div><div class="line">	<span class="comment">&lt;!--如果返回结果使用resultType="cn.aezo.springboot.mybatis.model.UserInfo", 则nickName，groupId则为null(数据库中下划线对应实体驼峰转换失败，解决办法：设置mybatis.configuration.map-underscore-to-camel-case=true). 此处使用resultMap指明字段对应关系--&gt;</span></div><div class="line">	<span class="comment">&lt;!-- #&#123;&#125;是实现的是PrepareStatement，$&#123;&#125;实现的是普通Statement --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOne"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span> <span class="attr">resultType</span>=<span class="string">"userInfo"</span>&gt;</span></div><div class="line">		select</div><div class="line">		<span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"UserInfoColumns"</span>/&gt;</span></div><div class="line">		from user_info</div><div class="line">		where id = #&#123;id&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!-- keyProperty(主键对应Model的属性名)和useGeneratedKeys(是否使用JDBC来获取内部自增主键，默认false)联合使用返回自增的主键(可用于insert和update语句)：userMapper.insert(userInfo); userInfo.getUserId(); --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">keyProperty</span>=<span class="string">"userId"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">parameterType</span>=<span class="string">"cn.aezo.springboot.mybatis.model.UserInfo"</span>&gt;</span></div><div class="line">		insert into</div><div class="line">		user_info</div><div class="line">		(nick_name, group_id, hobby)</div><div class="line">		values</div><div class="line">		(#&#123;nickName&#125;, #&#123;groupId&#125;, #&#123;hobby&#125;)</div><div class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"cn.aezo.springboot.mybatis.model.UserInfo"</span>&gt;</span></div><div class="line">		update</div><div class="line">		user_info</div><div class="line">		set</div><div class="line">		<span class="comment">&lt;!--动态sql, 标签：if、choose (when, otherwise)、trim (where, set)、foreach--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"nickName != null"</span>&gt;</span>nick_name = #&#123;nickName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">		hobby = #&#123;hobby&#125;</div><div class="line">		where</div><div class="line">		id = #&#123;id&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span>&gt;</span></div><div class="line">		delete from</div><div class="line">		user_info</div><div class="line">		where</div><div class="line">		id = #&#123;id&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>xml联表查询举例</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getClass"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"ClassResultMap"</span>&gt;</span></div><div class="line">       select * from class c, teacher t,student s where c.teacher_id = t.t_id and c.C_id = s.class_id and  c.c_id = #&#123;id&#125;</div><div class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--此处Classes类中仍然需要保存一个Teacher的引用和一个List&lt;Student&gt;的引用--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"cn.aezo.demo.Classes"</span> <span class="attr">id</span>=<span class="string">"ClassResultMap"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--一个 ID 结果;标记结果作为 ID 可以帮助提高整体效能--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></div><div class="line">	<span class="comment">&lt;!--注入到字段或 JavaBean 属性的普通结果--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"c_name"</span>/&gt;</span></div><div class="line">	<span class="comment">&lt;!-- association字面意思关联，这里只专门做一对一关联； property表示是cn.aezo.demo.Classes中的属性名称； javaType表示该属性是什么类型对象 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"teacher_id"</span> <span class="attr">javaType</span>=<span class="string">"cn.aezo.demo.Teacher"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"t_id"</span>/&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"t_name"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">association</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- ofType指定students集合中的对象类型 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"cn.aezo.demo.Student"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"s_id"</span>/&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"s_name"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>查询sql举例</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectInsuranceListByCreator"</span> <span class="attr">resultType</span>=<span class="string">"cn.aezo.demo.ThMyInsuranceListView"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span> &gt;</span></div><div class="line">	SELECT</div><div class="line">		t2.insurance_compay insuranceCompany,</div><div class="line">		t2.insurance_name insurancePlan,</div><div class="line">		t1.is_valid insuranceStatus,</div><div class="line">		t1.order_id orderId</div><div class="line">	FROM</div><div class="line">		th_insurance_order t1,</div><div class="line">		th_insurance t2</div><div class="line">	WHERE</div><div class="line">		t1.creator = #&#123;creator, jdbcType=BIGINT&#125;</div><div class="line">	AND t1.insurance_id = t2.insurance_id</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>insuranceCompany</code>会对应ThMyInsuranceListView中的字段</li>
</ul>
</li>
<li><p>xml文件修改无需重新部署，立即生效</p>
</li>
<li>关于<code>&lt;</code>、<code>&gt;</code>转义字符<ul>
<li><code>&lt;</code> 转成 <code>&amp;lt;</code>，<code>&gt;=</code> 转成 <code>&amp;gt;=</code>等</li>
<li>使用<code>&lt;![CDATA[ when min(starttime) &lt;= &#39;12:00&#39; and max(endtime) &lt;= &#39;12:00&#39; ]]&gt;</code></li>
</ul>
</li>
</ul>
<h3 id="MyBatis-Generator"><a href="#MyBatis-Generator" class="headerlink" title="MyBatis Generator"></a>MyBatis Generator</h3><ul>
<li>使用<code>MyBatis Generator</code>自动生成model/dao/mapper</li>
<li>官方文档：<a href="http://www.mybatis.org/generator/index.html" target="_blank" rel="external">http://www.mybatis.org/generator/index.html</a></li>
<li><p>生成方式有多种(此处介绍maven插件的方式)</p>
<ul>
<li><p>maven配置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- mybatis(mapper等)自动生成 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!--maven可执行命令--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>resources目录添加文件：<code>generatorConfig.xml</code></p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></div><div class="line">		PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</div><div class="line">		"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--数据库驱动 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"C:\Users\smalle\.m2\repository\mysql\mysql-connector-java\5.1.43\mysql-connector-java-5.1.43.jar"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MySQLTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--数据库链接地址账号密码 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">jdbcConnection</span></span></div><div class="line">				<span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></div><div class="line">				<span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/springboot"</span></div><div class="line">				<span class="attr">userId</span>=<span class="string">"root"</span></div><div class="line">				<span class="attr">password</span>=<span class="string">"root"</span>&gt;</div><div class="line">		<span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--生成Model类存放位置：targetPackage为model对应的包名；targetProject为项目根目录，此处相对当前项目，还可写成D:/mydemo/src/main/java --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">javaModelGenerator</span></span></div><div class="line">				<span class="attr">targetPackage</span>=<span class="string">"cn.aezo.springboot.mybatis.generator.model"</span></div><div class="line">				<span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--生成映射文件存放位置，会存放在src/main/resources/mapper目录下(自动创建mapper目录) --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">sqlMapGenerator</span></span></div><div class="line">				<span class="attr">targetPackage</span>=<span class="string">"mapper"</span></div><div class="line">				<span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!--生成Dao类存放位置 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">javaClientGenerator</span></span></div><div class="line">				<span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></div><div class="line">				<span class="attr">targetPackage</span>=<span class="string">"cn.aezo.springboot.mybatis.generator.dao"</span></div><div class="line">				<span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- %标识根据表名生成，tableName="t_%"表示只生成t_开头的表名 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"%"</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- </span></div><div class="line">				1、生成selectKey语句，为mybatis生成自增主键(无需数据库字段设置成自增)</div><div class="line">				2、column表的字段名(不支持通配符，因此为了方便可将所有表的主键名设置为id)</div><div class="line">				3、sqlStatement="MySql/DB2/SqlServer等"</div><div class="line">				4、identity：true表示column代表的是主键，会在插入记录之后获取自增值替换对应model的id值(自增需要由数据库提供)，false表示非主键，会在插入记录获取自增值并替换model的id(如从序列中获取)</div><div class="line">				5、最终生成的语句如</div><div class="line">				&lt;selectKey keyProperty="userId" order="AFTER" resultType="java.lang.Long"&gt;</div><div class="line">				SELECT LAST_INSERT_ID()</div><div class="line">				&lt;/selectKey&gt;</div><div class="line">			--&gt;</div><div class="line">			<span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"MySql"</span> <span class="attr">identity</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>进入到pom.xml目录，cmd执行命令生成文件：<code>mvn mybatis-generator:generate</code></p>
</li>
<li><p>生成Mapper中Example的使用：<a href="http://www.mybatis.org/generator/generatedobjects/exampleClassUsage.html" target="_blank" rel="external">http://www.mybatis.org/generator/generatedobjects/exampleClassUsage.html</a></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">UserExample userExample = <span class="keyword">new</span> UserExample();</div><div class="line">      userExample.createCriteria().andUsernameEqualTo(<span class="string">"smalle"</span>);</div><div class="line"></div><div class="line">      List&lt;User&gt; users =  userMapper.selectByExample(userExample);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>通过java代码调用mybatis-generator生成</p>
<ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>关键代码</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      <span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</div><div class="line">      File configFile = <span class="keyword">new</span> File(<span class="string">"generatorConfig.xml"</span>);</div><div class="line">      ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          Configuration config = cp.parseConfiguration(configFile);</div><div class="line">          DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</div><div class="line">          MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</div><div class="line">          myBatisGenerator.generate(<span class="keyword">null</span>);</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
            <tag> mybatis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hibernate]]></title>
      <url>/2017/05/21/java/hibernate/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>ORM框架(对象关系映射)<ul>
<li>JDBC操作数据库很繁琐</li>
<li>Sql语句编写并不是面向对象的</li>
<li>可以在对象和关系表之间建立关联来简化编程</li>
<li>0/R Mapping 简化编程</li>
<li>0/R Mapping跨越数据库平台</li>
</ul>
</li>
<li>ssh流程/hibernate流程(<strong>视频01、02</strong>)、hibernate原理(<strong>视频06(反射)、hiberbate内部大多直接以生成二进制码的形式实现</strong>)</li>
<li>O/RMapping编程模型（<strong>映射接口使用jpa的，编程接口使用hibernate的</strong>）<ul>
<li>映射模型<ul>
<li>jpa annotation(java提供的annotation配置–常用)</li>
<li>hibernate annotation extension(Hibernate扩展的annotation配置–较少用)</li>
<li>hibernate xml(Hibernate的xml配置方式–常用)</li>
<li>jpa xml(java提供的xml配置–较少用)</li>
</ul>
</li>
<li>编程接口（做CRUD）<ul>
<li>Jpa(不常用)</li>
<li>hibernate(现在用)</li>
</ul>
</li>
<li>数据査询语言<ul>
<li>HQL(常用)</li>
<li>EJBQL(JPQL)：是HQL的一个子集. EJB必须用在容器(application server)中，而hibernate可以在j2se中使用</li>
</ul>
</li>
</ul>
</li>
<li>JPA：Java Persistence API. JPA是接口/规范，hibernate是其实现. JPA是hibernate的作者基于hibernate抽象出来的. JPA是EJB3.0的的一部分</li>
<li>本文档基于hibernate3.3.2</li>
<li>资源下载：<a href="https://sourceforge.net/projects/hibernate/files/hibernate3/3.3.2.GA/hibernate-distribution-3.3.2.GA-dist.tar.gz/download" target="_blank" rel="external">hibernate-distribution-3.3.2.GA</a>、<a href="https://sourceforge.net/projects/hibernate/files/hibernate-annotations/3.4.0.GA/hibernate-annotations-3.4.0.GA.zip/download" target="_blank" rel="external">hibernate-annotations-3.4.0.GA</a>、<a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12/1.5.8" target="_blank" rel="external">slf4jl.5.8</a>、<a href="https://mvnrepository.com/artifact/log4j/log4j/1.2.15" target="_blank" rel="external">log4j-1.2.15</a></li>
<li><p>jar包如下：(日志使用的log4j)</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">antlr-2.7.6.jar</div><div class="line">commons-collections-3.1.jar</div><div class="line">dom4j-1.6.1.jar</div><div class="line">ejb3-persistence.jar</div><div class="line">hibernate3.jar</div><div class="line">hibernate-annotations.jar</div><div class="line">hibernate-commons-annotations.jar</div><div class="line">javassist-3.9.0.GA.jar</div><div class="line">jta-1.1.jar</div><div class="line">junit-4.7.jar</div><div class="line">log4j-1.2.15.jar</div><div class="line">mysql-connector-java-5.1.26-bin.jar</div><div class="line">slf4j-api-1.5.8.jar</div><div class="line">slf4j-log4j12-1.5.8.jar</div></pre></td></tr></table></figure>
<ul>
<li><code>slf4j-api</code>是一个日志接口，其实现可以为<code>log4j</code>(需要对应的适配器进行接口转换，如<code>slf4j-log4j12-1.5.8.jar</code>)、<code>slf nodep</code>、<code>jdk logging api</code>、<code>apache commons-logging</code></li>
</ul>
</li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><blockquote>
<p><code>test/cn.aezo.hibernate.hello.StudentTest</code></p>
</blockquote>
<ol>
<li><p>配置<code>hibernate.cfg.xml</code>(配置数据源、加入)</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></div><div class="line">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</div><div class="line">        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- hibernate使用xml配置数据库映射的helloworld案例。 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"cn.aezo.hibernate.hello"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Student"</span> <span class="attr">table</span>=<span class="string">"student"</span>&gt;</span></div><div class="line"> 		<span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span><span class="comment">&lt;!-- 定义id自动生成器 --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 当使用联合主键时的配置 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 因为使用UTF-8编码是主键长度不能超过256个字节，而默认id长度是int(11),name长度是varchar(255)，则超出长度，故此处应该定义长度 --&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">        &lt;composite-id name="pk" class="cn.aezo.hibernate.model.StudentPK"&gt;</div><div class="line">        	&lt;key-property name="id"&gt;&lt;/key-property&gt;</div><div class="line">        	&lt;key-property name="name" length="50"&gt;&lt;/key-property&gt;</div><div class="line">        &lt;/composite-id&gt;</div><div class="line">        --&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>配置Student的映射关系(Student.hbm.xml，需要放在对应类的同级目录)，并将其加入hibernate.cfg.xml中(<code>&lt;mapping resource=&quot;cn/aezo/hibernate/hello/Student.hbm.xml&quot;/&gt;</code>)</p>
</li>
</ol>
<h3 id="Annotation注解-常用"><a href="#Annotation注解-常用" class="headerlink" title="Annotation注解 (常用)"></a>Annotation注解 (常用)</h3><blockquote>
<p><code>test/cn.aezo.hibernate.hello.TeacherTest</code></p>
</blockquote>
<ol>
<li>配置<code>hibernate.cfg.xml</code>(配置数据源、加入)</li>
<li>给Teacher加注解</li>
<li>将Teacher映射加入到hibernate.cfg.xml中(<code>&lt;mapping class=&quot;cn.aezo.hibernate.hello.Teacher&quot;/&gt;</code>)</li>
</ol>
<h2 id="hibernate-cfg-xml配置"><a href="#hibernate-cfg-xml配置" class="headerlink" title="hibernate.cfg.xml配置"></a>hibernate.cfg.xml配置</h2><ul>
<li>此配置文件需要放入在src目录</li>
<li><p>配置如下</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></div><div class="line">        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</div><div class="line">        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置链接数据信息，配置后不需要自己写连接代码Database connection settings --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/hiber<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.password"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- JDBC connection pool (use the built-in) --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;property name="connection.pool_size"&gt;1&lt;/property&gt; --&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 方言,告诉hibernate使用的sql语言是mysql规定的 SQL dialect--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 通过getCurrentSession()获取此上下文的session，没有则自动创建。thread表示线程级别,jta用于分布式事物管理(不同的数据库服务器),使用时需要中间件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Disable the second-level cache  --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.provider_class"</span>&gt;</span>org.hibernate.cache.NoCacheProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 展示sql语句 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 展示sql语句是格式化一下，更加美观 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 自动生成建表语句：hibernate建表后的字段顺序并不是和model字段顺序一致(内部使用TreeMap保存) --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="comment">&lt;!-- 测试那个就映射那个，将其他映射先去掉防止干扰 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"cn/aezo/hibernate/hello/Student.hbm.xml"</span>/&gt;</span><span class="comment">&lt;!-- 使用xml方式需要的映射格式 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"cn.aezo.hibernate.hello.Teacher"</span>/&gt;</span><span class="comment">&lt;!-- 使用annotation方式需要的映射格式 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="相关注解类"><a href="#相关注解类" class="headerlink" title="相关注解类"></a>相关注解类</h2><p><strong>注解要么写在字段上，要么写在get方法上，千万不能混合使用，否则会报：</strong> <code>Could not determine type for: java.util.List, at table</code></p>
<ul>
<li>注解应该导入jpa的注解，如<strong><code>javax.persistence.*</code></strong></li>
<li><p>类级别</p>
<ul>
<li><strong><code>@Entity</code></strong>: 注解实体类, 最终会和数据库的表对应. <strong>注解了之后需要将该类加到hibernate.cfg.xml的mapping中</strong></li>
<li><strong><code>@Table(name=&quot;_teacher&quot;)</code></strong> 当实体类的类名和对应的表名不一致时批注,此时对应表的实际名为_teacher</li>
<li><p><code>@IdClass(TeacherPK.class)</code> 定义联合主键的类</p>
<blockquote>
<p>如 <code>cn.aezo.hibernate.hello.Teacher</code></p>
</blockquote>
<ul>
<li><code>@EmbeddedlD</code>/<code>@ Embeddable</code>也可以定义联合主键</li>
</ul>
</li>
<li><code>@SequenceGenerator(name = &quot;teacherSeq&quot;, sequenceName = &quot;teacherSeq_db&quot;)</code> Id生成策略使用能够sequence<ul>
<li>在主键上加注解 <code>@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;teacherSeq&quot;)</code></li>
<li>常用ID生成策略有native identity sequence uuid(xml配置)</li>
</ul>
</li>
<li><code>@TableGenerator</code> 用一张表存储所有表主键的当前值(id生成策略)</li>
<li><code>@BatchSize(size=5)</code> 发出sql语句时一次性取出5条数据</li>
</ul>
</li>
<li><p>字段/方法级别</p>
<ul>
<li><strong><code>@Id</code></strong> 主键; <code>@Basic</code> 其他属性,可省略</li>
<li><strong><code>@GeneratedValue</code></strong> 批注后主键会自动生成值，默认使用id生成策略是AUTO。@GeneratedValue(strategy=GenerationType.AUTO)，其中(strategy=GenerationType.AUTO)可以省略，会自动根据mysql/oracle转换，相当于xml方式中的native</li>
<li><strong><code>@Column(name=&quot;_title&quot;)</code></strong> 当实际的字段名和类的属性名不一致时才需批注,此时表示对应的表中的字段实际名为_title。最好一致<ul>
<li><code>@Column(columnDefinition=&quot; BIT default 1 &quot;)</code> 设置默认值(BIT对应Boolean，其中的空格不能少)</li>
<li><code>@Column(columnDefinition=&quot;TEXT&quot;)</code> 设置字段类型(java中的String对应db中的TEXT). 存储长文本<ul>
<li>存储长文本建议使用TEXT：<code>TINYTEXT</code> 256bytes、<code>TEXT</code> 64kb、<code>MEDIUMTEXT</code> 16Mb、<code>LONGTEXT</code> 4GB (mysql)</li>
<li><code>CLOB</code>/<code>BLOB</code>以二进制存储，前台参数无法直接映射成类</li>
</ul>
</li>
</ul>
</li>
<li><code>@JoinColumn</code>、<code>@OneToMany</code>等见下文关系映射</li>
<li><code>@OrderBy(&quot;name ASC&quot;)</code> 排序</li>
<li><code>@Transient</code> 透明的.表示此字段在更新时不保存到数据库中,即不参加持久化.这是annotation的写法,在xml中则不写此属性即可</li>
<li><code>@Temporal(value=TemporalType.DATE)</code> 表示相应日期类型只记录日期,最终表的字段类型是DATE。不写的话默认是记录日期和时间,字段类型是TIMESTAMP。此处可以省略”value=”。不常用</li>
<li><p><code>@Enumerated(EnumType.STRING)</code> 声明枚举类型。EnumType.STRING表示在表中生成的字段类型是varchar;EnumType.ORDINAL表示表中生成的字段类型是int，并且拿枚举的下表存储</p>
<blockquote>
<p>如 <code>test/cn.aezo.hibernate.hello.TeacherTest</code></p>
</blockquote>
</li>
</ul>
</li>
<li><p>annotation字段映射位置：可以在field上或者get方法上(建议)，如果写在field则破坏了面向对象的机制，写在get方法是public的，所有一般写在get方法上</p>
</li>
</ul>
<h2 id="核心开发接口"><a href="#核心开发接口" class="headerlink" title="核心开发接口"></a>核心开发接口</h2><ol>
<li><p>示例</p>
<blockquote>
<p>如 <code>test/cn.aezo.hibernate.coreapi.TeacherTest</code></p>
</blockquote>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Configuration cfg = Configuration().configure(); // xml可以使用</span></div><div class="line">AnnotationConfiguration acfg = <span class="keyword">new</span> AnnotationConfiguration().configure(); <span class="comment">// xml和Annotation都能使用</span></div><div class="line"></div><div class="line">SessionFactory　session = acfg.buildSessionFactory();</div><div class="line"></div><div class="line">Session session = sf.getCurrentSession(); <span class="comment">//从上下文找(要在hibernate配置文件中配置session运行的上下文)，如果有直接用，如果没有重新创建。事务提交自动close，下次获取的就是新的session</span></div><div class="line"><span class="comment">// Session session =  sf.openSession(); //每次都是新的，需要close</span></div><div class="line"></div><div class="line">session.beginTransaction(); <span class="comment">//开始一个事物</span></div><div class="line"></div><div class="line">session.save(teacher1);</div><div class="line">Teacher1 teacher1 = (Teacher1)session.load(Teacher1.class, <span class="number">1</span>); <span class="comment">// 存在懒加载</span></div><div class="line"><span class="comment">// Teacher1 teacher1 = (Teacher1)session.get(Teacher1.class, 1); // 不存在懒加载</span></div><div class="line"></div><div class="line">session.getTransaction().commit(); <span class="comment">//提交事物</span></div><div class="line"><span class="comment">// session.close();</span></div><div class="line"></div><div class="line">System.out.println(teacher1.getName()); <span class="comment">// 懒加载时，此处会报错</span></div></pre></td></tr></table></figure>
</li>
<li><p>接口</p>
<ul>
<li><code>Configuration</code> / <code>AnnotationConfiguration</code>: 管理配置信息(hibernate.cfg.xml), 用来产生SessionFactory(使用buildSessionFactory方法产生Session)<ul>
<li>方法：<code>buildSessionFactory</code></li>
</ul>
</li>
<li><code>SessoinFactor</code>: 用来产生和管理Session, 通常情况下每个应用只需要一个SessionFactory(除非要访间多个数据库)<ul>
<li>方法：<code>getCurrentsession</code>(从上下文中获取，如果上下文中没有则创建一个新的。常在事物中使用，事物提交后此session则关闭)、<code>openSession</code>(每次都是新的session，需要close)</li>
<li>getCurrentsession的上下文配置：<code>&lt;property name=&quot;current_session_context_classs&quot;&gt;thread&lt;/property&gt;</code>(jta、thread常用 managed、custom.Class少用)<ul>
<li>上下文主要有thread和jta两种。thread依赖于数据库本身的，简称Connection事务，只针对一个数据库。jta从分布式界定事物</li>
<li><strong><code>jta</code>(全称java transaction api) java分布式事务管理（多数据库访问）, jta需要application server支持，由中间件提供（jboss、WebLogic等，tomcat不支持）</strong></li>
</ul>
</li>
</ul>
</li>
<li><code>Session</code>: 管理一个数据库的任务单元（简单说就是增 删 改 查）<ul>
<li>方法：<code>sava</code>、<code>delete</code>、<code>get</code>、<code>load</code>、<code>update</code>、<code>saveOrUpdate</code>、<code>clear</code>、<code>flush</code></li>
<li><strong>get与load的区别</strong><ul>
<li>不存在对应记录时表现不一样</li>
<li>load返回的是代理对象，等到真正用到对象的内容时才发出sql语句(懒加载的)</li>
<li>get直接从数据库加载，不会延迟</li>
<li><code>User3 user3 = (User3)session.get(User3.class, 1);</code>、<code>User3 user3 = (User3)session.load(User3.class, 1);</code></li>
</ul>
</li>
<li>update(视频32)<ul>
<li>用来更新detached对象，更新完成后转为persistent状态</li>
<li>update时默认会更新全部字段，更新部分字段的解决办法<ul>
<li>使用 HQL(EjBQL)(建议）</li>
<li>xml设定property标签的update属性，annotation设定@Column的updatable=false，不过这种方式很少用，因为不灵活</li>
<li>xml中使用dynamic-update。同一个session可以，跨session不行，不过可以用merge方法</li>
</ul>
</li>
</ul>
</li>
<li>clear：无论是load还是get,都会首先査找缓存（一级缓存)，如果没有才会去数据库査找。调用clear()方法可以强制清除session缓存</li>
<li>flush<ul>
<li>强制将内存(session缓存)与数据库同步. 默认情况下是session的事务提交(commit)时才同步!</li>
<li>session的FlushMode设置, 可以设定在什么时候同步缓存与数据库(很少用)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>三种对象状态(transient、persistent、detached)</p>
<ul>
<li>三种状态：<ul>
<li>transient：内存中一个对象，内存和缓存(session缓存)中都没有ID。刚new 对象之后</li>
<li>persistent：ID在内存、缓存、数据库中都有。save了之后</li>
<li>detached：ID在内存和数据库中有，在缓存中没有。事物提交后(session关闭)</li>
</ul>
</li>
<li>三种状态的区分关键在于有没有ID，ID在数据库中有没有，在内存中有没有，在session缓存中有没有</li>
</ul>
</li>
</ol>
<h2 id="关系映射-视频35-52"><a href="#关系映射-视频35-52" class="headerlink" title="关系映射 (视频35-52)"></a>关系映射 (视频35-52)</h2><p>一对一：<code>@0neTo0ne</code>、<code>@JoinColumn</code>；一对多/多对一：<code>@OneToMany</code>、<code>@ManyToOne</code>、<code>@JoinColumn</code>；多对多：<code>@ManyToMany</code>、<code>@JoinTable</code>（<strong>字段定义和set方法省略</strong>）</p>
<ol>
<li><p>一对一</p>
<ul>
<li><code>@0neTo0ne</code> 指定关系, <code>@JoinColumn</code> 用于指定外键名称, 省略该注解则使用默认的外键名称,  <code>@JoinColumns</code> 联合主键使用, <code>@Embedded</code> 组件映射使用</li>
<li><p><strong>一对一单向外键关联</strong>(src/cn.aezo.hibernate.one2one_uni_fk)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Husband类的被约束表字段的get方法上加@0neTo0ne @JoinColumn. 最终会在Husband的表中生成外键</span></div><div class="line"><span class="meta">@OneToOne</span></div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"wifeId"</span>)<span class="comment">// 指定生成的数据库字段名，不写@JoinColumn则默认生成外键名为wife_id</span></div><div class="line"><span class="function"><span class="keyword">public</span> Wife <span class="title">getWife</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> wife;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>Husband表会多出一个字段wifeId, 即为外键</strong></li>
<li><p>xml设置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.aezo.hibernate.one2one_uni_fk.Husband"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"wife"</span> <span class="attr">column</span>=<span class="string">"wifeId"</span> <span class="attr">unique</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>一对一双向外键关联</strong>(src/cn.aezo.hibernate.one2one_bi_fk, 视频37)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Husband1类</span></div><div class="line"><span class="meta">@OneToOne</span></div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"wife1Id"</span>)<span class="comment">//指定生成的数据库字段名，否则默认生成外键名为wife_id. 最终只会在Husband的表中生成外键</span></div><div class="line"><span class="function"><span class="keyword">public</span> Wife1 <span class="title">getWife1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> wife1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Wife1类</span></div><div class="line"><span class="comment">// 此处表示Husband中对"getWife"中的wife字段设置的外键是主导，此处只是指明关系但是并不会在Wife1表中生成外键。双向关系必须指明</span></div><div class="line"><span class="comment">// 双向时这个地方也需要一个关联关系，但是Husband1中wife1已经指明了关联关系且有一个外键了，故不应该再在Wife1生成一个外键。mappedBy就表明此处参考(映射到)Husband1中的wife1字段</span></div><div class="line"><span class="meta">@OneToOne</span>(mappedBy=<span class="string">"wife1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Husband1 <span class="title">getHusband1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> husband1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>凡是双向关联，必设<code>mappedBy</code></strong></li>
<li><strong><code>一对一单向外键关联与一对一双向外键关联在数据库的表的格式是一样的,区别在于java程序中. 双向外键关联可通过Hibernate在两个类间互相调用彼此,而单向外键关联只能单方向调用.</code></strong></li>
</ul>
</li>
<li>一对一单向主键关联(<code>@OneToOne、@primaryKeyJoinColumn</code>)</li>
<li>一对一双向主键关联(<code>@OneToOne、@primaryKeyJoinColumn</code>)</li>
<li><p><strong>一对一的单向联合主键的外键关联</strong>(src/cn.aezo.hibernate.one2one_uni_fk_composite)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Husband2类(Wife2是一个联合主键类, name是只最终会在Husband2中生成的字段名即外键名, referencedColumnName指这个外键参考的字段)</span></div><div class="line"><span class="meta">@OneToOne</span></div><div class="line"><span class="meta">@JoinColumns</span>(&#123;</div><div class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"wife2Id"</span>, referencedColumnName=<span class="string">"id"</span>),</div><div class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"wife2Name"</span>, referencedColumnName=<span class="string">"name"</span>)</div><div class="line">&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> Wife2 <span class="title">getWife2</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> wife2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>组件映射(src/cn.aezo.hibernate.component)</p>
<ul>
<li>一个对象是另外一个对象的一部分，java中有两个对象，但是保存在一张表中</li>
<li><code>@Embedded</code> 注解的字段表明该对象是从别的位置嵌入过来的,是不需要单独映射的表</li>
<li><code>@AttributeOverride</code> 注解需要写在getWife方法上, 可以重新指定生成的Wife类组件生成的字段名, 例如:Husband与Wife两个类中都有name字段,这样在生成表的时候会有冲突, 此时采用@AttributeOverride注解可以指定Wife类中的name属性对应新的字段名”wifename”</li>
<li>xml中使用 <code>&lt;component&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>多对一、一对多</strong></p>
<ul>
<li>指当前类(写注解的类)相对于注解属性(对应的类)的关系</li>
<li><p>多对一单向关联：<code>@ManyToOne</code>(src/cn.aezo.hibernate.many2one_uni)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// User类. 外键保存在User类中</span></div><div class="line"><span class="meta">@ManyToOne</span></div><div class="line"><span class="function"><span class="keyword">public</span> Group <span class="title">getGroup</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> group;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>xml中</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">    cascade取值all,none,save-update,delete,对象间的级联操作,只对增删改起作用.</div><div class="line">    在存储时User时,设置了cascade="all"会自动存储相应的t_group.而不用管user关联的对象(通常情况下会优先存储关联的对象,然后再存储user)</div><div class="line"> --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"group"</span> <span class="attr">column</span>=<span class="string">"groupid"</span> <span class="attr">cascade</span>=<span class="string">"all"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>一对多单向关联：<code>@OneToMany</code>(src/cn.aezo.hibernate.one2many_uni)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Group1类. 外键保存在User1类中</span></div><div class="line"><span class="meta">@OneToMany</span></div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"groupId"</span>)<span class="comment">// Hibernate默认将OneToMany理解为ManyToMany的特殊形式，如果不指定生成的外键列@JoinColumn(name="groupId")，则会默认生成多对多的关系,产生一张中间表</span></div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;User1&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>xml中</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"groupId"</span>/&gt;</span>指定生成外键字段的名字</div><div class="line">    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"cn.aezo.hibernate.one2many_uni.User1"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>一对多/多对一双向关联(src/cn.aezo.hibernate.one2many_many2one_bi)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// User2类</span></div><div class="line"><span class="meta">@ManyToOne</span> <span class="comment">// 配置规则:一般以多的一端为主,先配置多的一端</span></div><div class="line"><span class="function"><span class="keyword">public</span> Group2 <span class="title">getGroup</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> group;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Group2类</span></div><div class="line"><span class="meta">@OneToMany</span>(mappedBy=<span class="string">"group"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;User2&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>多对多(会生成中间表)</p>
<ul>
<li><code>@ManyToMany</code>、<code>@JoinTable</code></li>
<li><p>多对多单向外键关联(src/cn.aezo.hibernate.many2many_uni)</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Teacher2类</span></div><div class="line"><span class="meta">@ManyToMany</span><span class="comment">// 多对多关联 Teacher是主的一方 Student是附属的一方</span></div><div class="line"><span class="meta">@JoinTable</span>(</div><div class="line">    joinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"teacherId"</span>)&#125;,<span class="comment">//本类主键在中间表生成的对应字段名</span></div><div class="line">    inverseJoinColumns=&#123;<span class="meta">@JoinColumn</span>(name=<span class="string">"student2Id"</span>)&#125;<span class="comment">//对方类主键在中间表生成的对应字段名</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;Student2&gt; <span class="title">getStudent2s</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> student2s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>多对多双向外键关联</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 在Teacher这一端的students上配置</div><div class="line">@ManyToMany</div><div class="line">@JoinTable(</div><div class="line">    name=&quot;t_s&quot;,</div><div class="line">    joinColumns=&#123;@JoinColumn(name=&quot;teacher_id&quot;)&#125;,</div><div class="line">    inverseJoinColumns=&#123;@JoinColumn(name=&quot;student_id&quot;)&#125;</div><div class="line">)</div><div class="line"></div><div class="line">// 在Student一端的teachers只需要配置</div><div class="line">@ManyToMany(mappedBy=&quot;students&quot;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>关联关系中的CRUD、Cascade(级联)、Fetch(test/cn.aezo.hibernate.one2many_many2one_bi_curd)</p>
<ul>
<li><p><strong>设定<code>cascade</code>以设定在持久化时对于关联对象的操作（CUD，R归Fetch管）</strong></p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Group3类</span></div><div class="line"><span class="meta">@OneToMany</span>(</div><div class="line">    mappedBy=<span class="string">"group"</span>,</div><div class="line">    cascade=&#123;CascadeType.ALL&#125;<span class="comment">//cascade=CascadeType.ALL表示存储user表时把与他相关联的表也存储，否则需要自己先手动存储关联的那个表</span></div><div class="line">    <span class="comment">//,fetch=FetchType.EAGER//取一对多时，默认只会取出一不会取出多,即fetch默认是lazy，此时设置了eager则会在取组的同时取出用户信息。一般不这么用</span></div><div class="line">)<span class="comment">//cascade设定CUD，fetch设定R</span></div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;User3&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// User3类</span></div><div class="line"><span class="meta">@ManyToOne</span>(cascade=&#123;CascadeType.ALL&#125;)<span class="comment">//cascade=CascadeType.ALL表示存储user表时把与他相关联的表也存储，否则需要自己先手动存储关联的那个表</span></div><div class="line"><span class="function"><span class="keyword">public</span> Group3 <span class="title">getGroup</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> group;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>只要有关联关系(包括所有关联类型)，默认保存A，hibernate不会自动保存B. 设置在A中设置cascade可以让hibernate在保存A的时候也保持B. 如果需要保存B也保存A，则需要在B中也设置cascade</li>
<li>CascadeType取值：<ul>
<li><code>ALL</code>      Cascade all operations所有情况(CUD)</li>
<li><code>MERGE</code>    Cascade merge operation合并(merge=save+update)</li>
<li><code>PERSIST</code>  Cascade persist operation存储 persist()</li>
<li><code>REFRESH</code>  Cascade refresh operation刷新</li>
<li><code>REMOVE</code>   Cascade remove operation删除</li>
</ul>
</li>
</ul>
</li>
<li><p><strong><code>fetch</code>获取数据的方式</strong></p>
<ul>
<li>查询时@ManyToOne默认会把一的那一方取出来(默认为EAGER)，@OneToMany则不会默认把多的那一方取出来(默认为LAZY). 修改fetch则可以改变默认取值方式</li>
<li>取值有：<code>FetchType.LAZY</code>(懒惰) 和 <code>FetchType.EAGER</code>(渴望)</li>
<li><p>示例</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示例一</span></div><div class="line">Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line"><span class="comment">// User3 user3 = (User3)session.load(User3.class, 1);</span></div><div class="line">User3 user3 = (User3)session.get(User3.class, <span class="number">1</span>); <span class="comment">//当多对一时，取多时，默认会把一也取出来。此时取用户的信息时也会把组的信息取出来放到内存中</span></div><div class="line">session.getTransaction().commit();</div><div class="line">System.out.println(user3.getGroup().getName()); <span class="comment">// 可以正常获取, @ManyToOne默认是EAGER。如果上面是load则此处会报错</span></div><div class="line"></div><div class="line"><span class="comment">// 示例二</span></div><div class="line">Session session = sf.getCurrentSession();</div><div class="line">session.beginTransaction();</div><div class="line">Group3 group3 = (Group3)session.get(Group3.class, <span class="number">1</span>);<span class="comment">//取一对多时，默认只会取出一不会取出多。但如果在关联的批注处设定了fetch=FetchType.EAGER，则会同时取出用户信息</span></div><div class="line"><span class="comment">// Set&lt;User3&gt; user3s = group3.getUsers(); // ### 如果fetch没有设定了eager，则可以在此处手动把User都拿出来放到内存中. 一般是一对多时手动获取多的那一方 ###</span></div><div class="line">session.getTransaction().commit();</div><div class="line"></div><div class="line"><span class="comment">// ### 如果fetch设定了eager则已经将用户信息取到内存中了. 否则此处会报错 ###</span></div><div class="line"><span class="keyword">for</span>(User3 u : group3.getUsers()) &#123;</div><div class="line">    System.out.println(u.getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>删除操作：如果Group和User都设置了CascadeType.ALL，则在删除user时也会把group删除. 解决办法</p>
<ul>
<li>直接写Hql语句执行删除（推荐）</li>
<li>去掉@ManyToOne(cascade={CascadeType.All})设置, 手动执行CRU</li>
<li><p>将user对象的group属性设为null，相当于打断User与Group间的关联</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">session.beginTransaction();</div><div class="line">User user = (User)session.load(User.class,<span class="number">1</span>);</div><div class="line">user.setGroup(<span class="keyword">null</span>);</div><div class="line">session.delete(user);</div><div class="line">session.getTransaction().commit();</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>集合映射(src/cn.aezo.hibernate.collections_mapping)</p>
<ul>
<li><p>多的一方是什么的存储方式：Set(常用)、List、Map</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用Map存储</span></div><div class="line"><span class="meta">@OneToMany</span>(mappedBy=<span class="string">"group"</span>,cascade=&#123;CascadeType.ALL&#125;)</div><div class="line"><span class="meta">@MapKey</span>(name=<span class="string">"id"</span>)<span class="comment">//以users中user的id作为map的key</span></div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;Integer, User4&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> users;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>继承映射(视频55)</p>
<ul>
<li><code>SINGLE_TABLE</code> 一张总表保存</li>
<li><code>TABLE_PER_CLASS</code> 每个类分别一张表(最终也会生成3张表，使用@TableGenerator的id生成策略映射)<ul>
<li>使用多态查询时会查3张表并进行合并</li>
</ul>
</li>
<li><code>JOINED</code> 每个子类一张表(最终也会生成3张表，使用@Inheritance(strategy=InheritanceType.JOINED))<ul>
<li>查询必须使用进行联合</li>
</ul>
</li>
</ul>
</li>
<li><p>树状结构设计(src/cn.aezo.hibernate.tree)</p>
<ul>
<li><p>在一个类中同时使用一对多和多对一</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Org组织类，对应表Org(id, pid, name)</span></div><div class="line"><span class="meta">@OneToMany</span>(</div><div class="line">    mappedBy=<span class="string">"parent"</span>,</div><div class="line">    cascade=&#123;CascadeType.ALL&#125;</div><div class="line">    <span class="comment">//,fetch=FetchType.EAGER//只适合小级别的树，同时取出所有的，打印就可以打印在一起了；否则就在需要的时候发起sql语句</span></div><div class="line">)</div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;Org&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> children;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@ManyToOne</span></div><div class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"parent_id"</span>)<span class="comment">//只需写在关联处即可，所有也可写在@OneToMany的下面</span></div><div class="line"><span class="function"><span class="keyword">public</span> Org <span class="title">getParent</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> parent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>易错点</p>
<ul>
<li>在一个实体文件中，所有的注解要么全部放在字段上，要么全部放在get方法上，不能混合使用. 否则报错<code>Caused by: org.hibernate.MappingException: Could not determine type for...</code></li>
</ul>
</li>
</ol>
<h2 id="HQL-test-cn-aezo-hibernate-hql1-2"><a href="#HQL-test-cn-aezo-hibernate-hql1-2" class="headerlink" title="HQL (test/cn.aezo.hibernate.hql1/2)"></a>HQL (test/cn.aezo.hibernate.hql1/2)</h2><ol>
<li>查询语言：NativeSQL(oracle/mysql原生) &gt; HQL(hibernate查询语言) &gt; EJBQL(JPQL 1.0, 可以跨ORM框架) &gt; QBC(Query By Criteria) &gt; QBE(Query By Example)</li>
<li><p>举例(查询、修改、删除)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">import</span> org.hibernate.Query;</div><div class="line">  <span class="keyword">import</span> org.hibernate.Session;</div><div class="line"></div><div class="line">  <span class="comment">// HQL 面向对象的查询语言，此处要写类名而不是表名，可以省略 select *</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Category c where c.name &gt; 'c5' order by c.name desc"</span>);</div><div class="line">  List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list(); <span class="comment">// q.iterate()</span></div><div class="line"></div><div class="line">  <span class="comment">// 链式编程</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Category c where c.id &gt; :min and c.id &lt; :max"</span>)</div><div class="line">                   .setInteger(<span class="string">"min"</span>, <span class="number">2</span>)</div><div class="line">                   .setInteger(<span class="string">"max"</span>, <span class="number">8</span>);</div><div class="line">  List&lt;Category&gt; categories = (List&lt;Category&gt;) q.list();</div><div class="line"></div><div class="line">  <span class="comment">// setParameter会自动转换参数类型</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Category c where c.id &gt; ? and c.id &lt; ?"</span>);</div><div class="line">  q.setParameter(<span class="number">0</span>, <span class="number">2</span>).setParameter(<span class="number">1</span>, <span class="number">8</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 分页(取第二条到第4条数据)</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Category c order by c.name desc"</span>);</div><div class="line">  q.setMaxResults(<span class="number">4</span>);</div><div class="line">  q.setFirstResult(<span class="number">2</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 获取Topic的Category类的属性id (Topic下的Category是@ManyToOne，默认在查询Topic的会取Category)</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic t where t.category.id = 1"</span>);</div><div class="line">  <span class="comment">// 如果设置成Lazy，则当调用t.getCategory()的时候才会查询Category</span></div><div class="line"></div><div class="line">  <span class="comment">// 从实体中取出一个VO/DTO（下面的MsgInfo不是一个实体，是一个VO/DTO，他需要一个对应的构造方法）</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select new cn.aezo.hibernate.hql1.MsgInfo(m.id, m.cont, m.topic.title, m.topic.category.name) from Msg m"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// join连接(left join)</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select t.title, c.name from Topic t join t.category c"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 对象查询（调用的是equals方法）</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Msg m where m = :MsgToSearch"</span>);</div><div class="line">  Msg m = <span class="keyword">new</span> Msg();</div><div class="line">  m.setId(<span class="number">1</span>);</div><div class="line">  q.setParameter(<span class="string">"MsgToSearch"</span>, m);</div><div class="line">  Msg mResult = (Msg) q.uniqueResult(); <span class="comment">// 返回唯一结果(确定里面只有一条)</span></div><div class="line"></div><div class="line">  <span class="comment">// is empty 和 is not empty（最终sql语句使用了exists、not exists）</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where t.msgs is empty"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where not exists (select m.id from Msg1 m where m.topic.id=t.id)"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 获取时间</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select current_date, current_time, current_timestamp, t.id from Topic1 t"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 时间比较</span></div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where t.createDate &lt; :date"</span>);</div><div class="line">  q.setParameter(<span class="string">"date"</span>, <span class="keyword">new</span> Date());</div><div class="line"></div><div class="line">  <span class="comment">// 分组</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select t.title, count(*) from Topic1 t group by t.title"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"select t.title, count(*) from Topic1 t group by t.title having count(*) &gt;= 1"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 原生sql查询</span></div><div class="line">  SQLQuery q = session.createSQLQuery(<span class="string">"select * from category limit 2,4"</span>).addEntity(Category1.class);</div><div class="line">  List&lt;Category1&gt; categories = (List&lt;Category1&gt;)q.list();</div><div class="line"></div><div class="line">  <span class="comment">// 常用查询</span></div><div class="line">  Query q = session.createQuery(<span class="string">"select count(*) from Msg m"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"select max(m.id), min(m.id), avg(m.id), sum(m.id) from Msg m"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Msg m where m.id between 3 and 5"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Msg m where m.id in (3,4, 5)"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Msg m where m.cont is not null"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where t.title like '%5'"</span>);</div><div class="line">  Query q = session.createQuery(<span class="string">"from Topic1 t where t.title like '_5'"</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 别名查询</span></div><div class="line">  <span class="comment">// (1) 在实体上进行注解查询语句，去别名topic.selectCertainTopic（原生sql语句查询别名注解@NamedNativeQueries）</span></div><div class="line">  <span class="meta">@NamedQueries</span>(&#123;</div><div class="line">     <span class="meta">@NamedQuery</span>(name=<span class="string">"topic.selectCertainTopic"</span>, query=<span class="string">"from Topic t where t.id = :id"</span>)</div><div class="line">&#125;)</div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Topic1</span> </span>&#123;...&#125;</div><div class="line">  <span class="comment">// (2) 使用上叙别名</span></div><div class="line">  Query q = session.getNamedQuery(<span class="string">"topic.selectCertainTopic"</span>);</div><div class="line">  q.setParameter(<span class="string">"id"</span>, <span class="number">5</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 执行修改/删除</span></div><div class="line">  Query q = session.createQuery(<span class="string">"update Topic1 t set t.title = upper(t.title)"</span>) ;</div><div class="line">  q.executeUpdate();</div></pre></td></tr></table></figure>
</li>
<li><p>QBC/QBE (test/cn.aezo.hibernate.qbc/qbe)</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// QBC (Query By Criteria). 此时不需要sql语句, 纯面向对象了</span></div><div class="line"><span class="comment">// criterion 约束/标准/准则</span></div><div class="line">Criteria c = session.createCriteria(Topic2.class) <span class="comment">// from Topic</span></div><div class="line">             .add(Restrictions.gt(<span class="string">"id"</span>, <span class="number">2</span>)) <span class="comment">// greater than = id &gt; 2</span></div><div class="line">             .add(Restrictions.lt(<span class="string">"id"</span>, <span class="number">8</span>)) <span class="comment">// little than = id &lt; 8</span></div><div class="line">             .add(Restrictions.like(<span class="string">"title"</span>, <span class="string">"t_"</span>))</div><div class="line">             .createCriteria(<span class="string">"category"</span>)</div><div class="line">             .add(Restrictions.between(<span class="string">"id"</span>, <span class="number">3</span>, <span class="number">5</span>)) <span class="comment">// category.id &gt;= 3 and category.id &lt;=5</span></div><div class="line">             ;</div><div class="line"><span class="comment">// DetachedCriterea</span></div><div class="line"><span class="keyword">for</span>(Object o : c.list()) &#123;</div><div class="line">    Topic2 t = (Topic2) o;</div><div class="line">    System.out.println(t.getId() + <span class="string">"-"</span> + t.getTitle());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// QBE (Query By Example)</span></div><div class="line">Topic3 tExample = <span class="keyword">new</span> Topic3();</div><div class="line">tExample.setTitle(<span class="string">"T_"</span>);</div><div class="line"></div><div class="line">Example e = Example.create(tExample)</div><div class="line">            .ignoreCase().enableLike();</div><div class="line">Criteria c = session.createCriteria(Topic3.class)</div><div class="line">             .add(Restrictions.gt(<span class="string">"id"</span>, <span class="number">2</span>))</div><div class="line">             .add(Restrictions.lt(<span class="string">"id"</span>, <span class="number">8</span>))</div><div class="line">             .add(e)</div><div class="line">             ;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Object o : c.list()) &#123;</div><div class="line">    Topic3 t = (Topic3)o;</div><div class="line">    System.out.println(t.getId() + <span class="string">"-"</span> + t.getTitle());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h2><ol>
<li><code>session.clear()</code>的运用，尤其在不断分页循环的时候<ul>
<li>在一个大集合中进行遍历，遍历msg，取出其中的含有敏感字样的对象</li>
<li>另外一种形式的内存泄露(面试题：Java在语法级别没有内存泄漏，但是可由java引起。例如：连接池不关闭或io读取后不关闭)</li>
</ul>
</li>
<li>1+N问题<ul>
<li>使用LAZY。<code>@ManyToOne</code> 默认是EAGER（默认在查询主表是，也会查询子表的数据，发出sql语句）。可将其改为<code>@ManyToOne(fetch=FetchType.LAZY)</code>，此时当使用的时候(如:t.getCategory().getName()时)才会发出sql语句</li>
<li>hql语句中使用<code>join fetch</code>。如将hql语句改成<code>from Topic t left join fetch t.category c</code></li>
<li>QBC。如使用createCriteria查询，会自动生成含join fetch的sql语句</li>
</ul>
</li>
<li>list和iterate不同之处<ul>
<li>list取所有；iterate先取ID，等用到的时候再根据ID来取对象</li>
<li>session中list第二次发出仍会到数据库査询；iterate第二次首先找session级缓存</li>
</ul>
</li>
<li><p>一级缓存和二级缓存和査询缓存(指两次查询的条件一样)</p>
<ul>
<li>一级缓存是session级别的缓存；二级缓存是SessionFactory级别的缓存，可以跨越session存在；</li>
<li><p>二级缓存</p>
<ul>
<li><p>打开二级缓存，hibernate.cfg.xml设定：</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--使用二级缓存--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cache.provider_class"</span>&gt;</span>org.hibernate.cache.EhCacheProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!--使用EhCache提供商提供的二级缓存--&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Cache</code>注解(由hibernate扩展提供)</p>
<ul>
<li><code>@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)</code></li>
<li>使用EhCache二级缓存 需要导入ehcache-1.2.3.jar及commons-logging-1.0.4.jar包</li>
</ul>
</li>
<li>二级缓存的使用场景：<strong>经常被访问、改动不大或不会经常改动、数重有限（如权限信息、组织信息）</strong></li>
<li>load默认使用二级缓存；iterate默认使用二级缓存；list默认往二级缓存加数据，但是查询的时候不使用</li>
<li>查询缓存(指两次查询的条件一样)<ul>
<li><code>&lt;property name=&quot;cache.use_query_cache&quot;&gt;true&lt;/property&gt;</code> 查询缓存依赖与二级缓存，需要打开二级缓存</li>
<li>调用Query的<code>setCachable(true)</code>方法指明使用二级缓存，如：<code>session.createQuery(&quot;from Category&quot;).setCacheable(true).list();</code></li>
</ul>
</li>
<li>缓存算法：LRU、LFU、FIFO<ul>
<li>LRU: Least Recently Used 最近很少被使用，按使用时间</li>
<li>LFU: Least Frequently Used 按命中率高低</li>
<li>FIFO: First In First Out 按顺序替换</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>事务并发处理<ul>
<li>事务：ACID (Atomic原子性、Consistency一致性、Itegrity独立性、Durability持久性)</li>
<li>事务并发时可能出现的问题<ul>
<li><code>dirty read</code>脏读(读到了另一个事务在处理中还未提交的数据)</li>
<li><code>non-repeatable read</code>不可重复读(一个事物中两次读取的数据不一致，被其他事物影响了)</li>
<li><code>phantom read</code>幻读(主要针对插入和删除，在读的过程中，另外一个事物插入或删除了一条数据影响了读的结果)</li>
</ul>
</li>
<li>数据库的事务隔离机制<ul>
<li>查看 <code>java.sql.Connection</code> 文档</li>
<li>1：<code>read-uncommitted</code> 2：<code>read-committed</code> 4：<code>repeatable read</code> 8：<code>serializable</code>（数字代表对应值或级别，级别越高越安全但是效率约低）           <ul>
<li><code>read-uncommitted</code>(允许读取未提交的数据) 会出现dirty read, phantom-read, non-repeatable read 问题</li>
<li><strong><code>read-commited</code></strong>(读取已提交的数据 项目中一般都使用这个)不会出现dirty read，因为只有另一个事务提交才会读出来结果，但仍然会出现 non-repeatable read 和 phantom-read。使用read-commited机制可用悲观锁、乐观锁来解决non-repeatable read 和 phantom-read问题</li>
<li><code>repeatable read</code>(事务执行中其他事务无法执行修改或插入操作，较安全)</li>
<li><code>serializable</code> 解决一切问题(顺序执行事务 不并发，实际中很少用)</li>
<li>为什么取值要使用 1 2 4 8 而不是 1 2 3 4。1=0000  2=0010 4=0100 8=1000(位移计算效率高)</li>
</ul>
</li>
<li>hibernate设置<ul>
<li>设定hibernate的事务隔离级别(使用hibernate.connection.isolation配置，取值1、2、4、8)</li>
<li>hibernate.connection.isolation = 2（如果不设 默认依赖数据库本身的级别）</li>
<li>用悲观锁解决repeatable read的问题（依赖于数据库的锁）<ul>
<li>法一：<code>select ... for update</code></li>
<li>法二：使用另一种load方法：<code>load(xxx.class, i, LockMode.Upgrade)</code> i=1/2/4/8</li>
</ul>
</li>
<li>Hibernate(JPA)乐观锁定(ReadCommitted)<ul>
<li>实体类中增加version属性(数据库也会对应生成该字段,初始值为0)，并在其get方法前加<code>@Version</code>注解，则在操作过程中没更新一次该行数据则version值加1，即可在事务提交前判断该数据是否被其他事务修改过</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ssh </tag>
            
            <tag> orm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows]]></title>
      <url>/2017/05/10/extend/windows/</url>
      <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>注释：<code>::</code>、<code>rem</code>等 <a href="[注释](http://blog.csdn.net/wh_19910525/article/details/8125762)">^1</a></li>
<li><code>title</code>: 设置cmd窗口标题(乱码时，需要将文件记事本打开另保存为ANSI)</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><p>运行java</p>
  <figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">title</span>=<span class="built_in">cmd</span>窗口的标题</div><div class="line"><span class="built_in">echo</span> off</div><div class="line"><span class="comment">rem 我的注释：`%~d0`挂载项目到第一个驱动器，并设置当前目录为项目根目录</span></div><div class="line">%~d0</div><div class="line"><span class="built_in">set</span> MY_PROJECT_HOME=%~p0</div><div class="line"><span class="built_in">cd</span> <span class="variable">%MY_PROJECT_HOME%</span></div><div class="line"><span class="built_in">echo</span> on</div><div class="line">"<span class="variable">%JAVA_HOME%</span>\bin\java" -jar my.jar</div><div class="line"><span class="built_in">echo</span> off</div></pre></td></tr></table></figure>
<ul>
<li>此时配置文件应和jar包位于同一目录</li>
<li>如果<code>set MY_PROJECT_HOME=%~p0..\</code>则表示设置bat文件所在目录的的上级目录为项目根目录</li>
<li>如果不是系统默认jdk，可将<code>%JAVA_HOME%</code>换成对应的路径</li>
</ul>
</li>
<li><p>后台运行bat文件</p>
  <figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="keyword">if</span> "%<span class="number">1</span>" == "h" <span class="keyword">goto</span> begin</div><div class="line">mshta vbscript:createobject("wscript.shell").run("%~nx0 h",<span class="number">0</span>)(window.close)&amp;&amp;<span class="keyword">exit</span></div><div class="line">:begin</div><div class="line">:: 这是注释，后面运行脚本，如：</div><div class="line">java -jar my.jar</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> extend </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[struts2]]></title>
      <url>/2017/05/06/java/struts2/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ol>
<li>struts2是 struts1和WebWork的结合</li>
<li><strong>struts2的本质就是将请求与视图分开</strong> (struts2原理：<strong>视频09</strong>)</li>
<li>官网：<a href="http://struts.apache.org/" target="_blank" rel="external">http://struts.apache.org/</a>, 下文基于版本2.3.24(当前更新到2.5.10)</li>
<li><p>所需jar包：struts2/lib下的jar包</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">commons-fileupload-1.3.1.jar</div><div class="line">commons-io-2.2.jar</div><div class="line">commons-lang3-3.2.jar</div><div class="line">freemarker-2.3.22.jar</div><div class="line">javassist-3.11.0.GA.jar</div><div class="line">ognl-3.0.6.jar</div><div class="line">struts2-core-2.3.24.1.jar</div><div class="line">xwork-core-2.3.24.1.jar</div></pre></td></tr></table></figure>
</li>
<li><p>struts知识点</p>
<ul>
<li>Action<ul>
<li>a)namespace（掌握）</li>
<li>b)path（掌握）</li>
<li>c)DMI（掌握）</li>
<li>d)wildcard（掌握）</li>
<li>e)接收参数（掌握前两种）</li>
<li>f)访问request等（掌握Map IOC方式）</li>
<li>g)简单数据验证（掌握addFieldError和<code>&lt;s:fieldError&gt;</code>）</li>
</ul>
</li>
<li>Result<ul>
<li>a)结果类型（掌握四种，重点两种）</li>
<li>b)全局结果（掌握）</li>
<li>c)动态结果（了解）</li>
</ul>
</li>
<li><strong>OGNL表达式</strong>（精通）<ul>
<li>a)# % $</li>
</ul>
</li>
<li>Struts标签<ul>
<li>a)掌握常用的</li>
</ul>
</li>
<li>声明式异常处理（了解）</li>
<li>I18N（了解）</li>
<li>CRUD的过程（最重要是设计与规划）（精通）</li>
<li>Interceptor的原理（掌握）<strong><em>视频中分析了Struts2源码</em></strong></li>
<li>类型转换（掌握默认，了解自定义）</li>
</ul>
</li>
</ol>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ul>
<li><p>web.xml中加入</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- struts2的核心拦截器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在src目录新建struts.xml(注意路径为src, 名称为struts.xml)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"index"</span>&gt;</span><span class="comment">&lt;!-- 省略class, 则自动调用xwork的一个ActionSupport类 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>扩展</p>
<ul>
<li><p>给jar包导入源码和doc文档</p>
<blockquote>
<ul>
<li>（1）给jar包导入源码(给struts2-core-2.3.24.1.jar导入源码)：右键相应jar包-&gt;properties-&gt;Java Source Attachment-&gt;External location-&gt;External Folder-&gt;D:/Java/struts-2.3.24.1/src/core/src/main/java</li>
<li>（2）给此jar包导入doc文档：右键相应jar包-&gt;properties-&gt;Javadoc Location-&gt;javadoc URL-&gt;D:/Java/struts-2.3.24.1/docs/struts2-core/apidocs(定位到相应类，按F1，点击javadoc查看相应文档)</li>
</ul>
</blockquote>
</li>
<li><p>添加XML文件自动提示功能</p>
<blockquote>
<ul>
<li>（1）解压struts-2.3.24.1\lib\struts2-core-2.3.24.1.jar</li>
<li>（2）记录struts.xml内DOCTYPE的一个值<a href="http://struts.apache.org/dtds/struts-2.3.dtd" target="_blank" rel="external">http://struts.apache.org/dtds/struts-2.3.dtd</a></li>
<li>（3）Windows-&gt;搜索catalog-&gt;XML catalog-&gt;add-&gt;{Location:struts-2.3.24.1\lib\struts2-core-2.3.24.1\struts-2.3.dtd, Key type:URL, Key:<a href="http://struts.apache.org/dtds/struts-2.3.dtd}" target="_blank" rel="external">http://struts.apache.org/dtds/struts-2.3.dtd}</a></li>
</ul>
</blockquote>
</li>
<li><p>本地拷贝项目</p>
<blockquote>
<ul>
<li>需要修改Web Context-root(项目右键-&gt;properties-&gt;MyEclipse-&gt;Project Facets-&gt;Web)</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="struts-xml"><a href="#struts-xml" class="headerlink" title="struts.xml"></a>struts.xml</h3><ol>
<li>package</li>
</ol>
<ul>
<li><code>package</code>(是为了区分重名的action，类似于java中的包)<ul>
<li>name:包名</li>
<li>namespace:命名空间，此namespace和action中name的值的组合不能重复<ul>
<li>（1）namespace决定了action的访问路径，默认为””，可以接受所有路径的action</li>
<li>（2）namespace可以写为/，或者/xxx，或者/xxx/yyy，对应的action访问路径如/index.action，/xxx/index.action，或者/xxx/yyy/index.action(其中index为action的属性name值，后面的.action可省略)</li>
<li>（3）package和namespace最好用模块来进行命名</li>
</ul>
</li>
<li>extends:继承了那个包，所有的包都继承了<code>struts-default</code>，来自struts2-core-2.3.24.1.jar-&gt;struts-default.xml</li>
</ul>
</li>
<li><code>package</code>&gt;<code>action</code><ul>
<li>name:此action名称(在浏览器的url中要访问此action就要输入此名称)</li>
<li>class:当访问此action时，就会调用相应的java类(如果没有就默认访问ActionSupport，ActionSupport是xwork的一个类，他实现了Action接口；<strong>实际中一般使用类继承ActionSupport</strong>)<ul>
<li><strong>每一个访问请求都会重新new一个对象</strong></li>
</ul>
</li>
<li>method:当访问此action时，要调用相应class类的相应的方法。默认调用<code>execute()</code>方法<ul>
<li>动态方法调用：添加配置<code>&lt;constant name=&quot;struts.enable.DynamicMethodInvocation&quot; value=&quot;true&quot; /&gt;</code>，使用myAction!myMethod方式调用</li>
<li>注：除了用method属性指定相应的action调用方法(缺点是产生太多action)；还可以在url地址中动态指定(动态方法调用DMI，使用!，视频13还没测试成功)；实际中多使用通配符</li>
</ul>
</li>
</ul>
</li>
<li><code>package</code>&gt;<code>action</code>&gt;<code>result</code><ul>
<li>name:此result名称</li>
<li>原理：访问时，先获取实现了Action接口的类或者其子类的execute()方法的返回值，然后匹配name属性为此返回值的result，再显示此result标签中的页面</li>
<li>注：属性为successs时可省略此name属性，因为Action接口execute()方法默认返回的是success字符串</li>
<li>注：默认有<code>SUCCESS</code>/<code>ERROR</code>/<code>INPUT</code>/<code>LOGIN</code>等常量，有时候使用SUCCESS可以解决，但仍用INPUT是为了作区分</li>
</ul>
</li>
</ul>
<ol>
<li><p><strong>struts2中的路径问题</strong>（jsp文件中的href路径）</p>
<ul>
<li>struts2是根据action的路径而不是jsp路径来确定，所有尽量不要使用相对路径，虽然可以用redirect方式解决，但redirect方式并非必要</li>
<li>解决办法<ul>
<li>统一使用绝对路径(JSP页面的绝对路径中第一个”/“指的是服务器的根路径，而不是项目的根路径)</li>
<li>在jsp中用request.getContextPath()方式来拿到webapp的路径,或者使用myeclipse常用的指定basePath</li>
<li>参考源码：<code>WebRoot/others/testPath.jsp</code></li>
</ul>
</li>
</ul>
</li>
<li><p>通配符，可以将配置量降到最低</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 如果namespace="/" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*_*"</span> <span class="attr">class</span>=<span class="string">"cn.aezo.wildcard.&#123;1&#125;"</span> <span class="attr">method</span>=<span class="string">"&#123;2&#125;"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span>&gt;</span>/wildcard/&#123;1&#125;_&#123;2&#125;.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>注释：{1}表示第一个<em>，{2}表示第二个</em>；如果访问<a href="http://localhost:8080/Student_add，则{1}为Student，{2}为add；匹配是以最佳匹配优先" target="_blank" rel="external">http://localhost:8080/Student_add，则{1}为Student，{2}为add；匹配是以最佳匹配优先</a></li>
<li>建议使用到<code>*_*</code>，如果*太多程序可读性降低</li>
</ul>
</li>
</ol>
<h3 id="接收用户传入参数"><a href="#接收用户传入参数" class="headerlink" title="接收用户传入参数"></a>接收用户传入参数</h3><ul>
<li>（1）用Action属性接收url中的参数</li>
<li>（2）使用域模型DomainModel接收参数,一般使用的方法(可以同时使用vo/do/dto来对数据进行处理)<ul>
<li>使用Domain Model时，在url地址中传<strong>user.username</strong>=smalle的话，Struts2会自动根据User类中无参构造方法帮忙new一个对象</li>
<li>所以此时如果我们有自己的构造方法，则系统不会帮我们自动生成无参构造方法，则一定要自己写上这个无参构造方法供Struts2调用</li>
</ul>
</li>
<li>（3）使用模型驱动ModelDriven接收参数，此方式不常用，但涉及了MVC的概念<br>Struts2中的MVC概念：M是各种类似User的类，V是各种jsp页面，C是各种Action；通过Action控制请求的处理和请求的展现；因此将请求的发生、处理、展现进行了分离</li>
</ul>
<h3 id="strtus常量（乱码问题）"><a href="#strtus常量（乱码问题）" class="headerlink" title="strtus常量（乱码问题）"></a>strtus常量（乱码问题）</h3><ul>
<li>（1）struts2默认的常量都在struts2-core-2.3.24.1.jar-&gt;org.apache.struts2-&gt;default.properties中</li>
<li>（2）struts2默认编码是UTF-8，设置方法<constant name="struts.i18n.encoding" value="UTF-8"></constant></li>
<li>（3）internationalization(i18n，指的是i和n之间有18个字母)</li>
<li>（4）还可以在web.xml中定义一个编码拦截器，在struts2拦截之前做一次编码处理</li>
</ul>
<h3 id="数据校验和strtus2标签初步"><a href="#数据校验和strtus2标签初步" class="headerlink" title="数据校验和strtus2标签初步"></a>数据校验和strtus2标签初步</h3><ul>
<li>（1）在Action中使用<code>this.addFieldError(&quot;errname&quot;, &quot;errmsg&quot;);</code>设定字段错误信息，在JSP页面使用struts2标签<code>&lt;s:fielderror fieldName=&quot;errname&quot;/&gt;</code>获取errmsg</li>
<li>（2）<code>&lt;%@ taglib uri=&quot;/struts-tags&quot; prefix=&quot;s&quot; %&gt;</code>在jsp页面导入struts2标签；<ul>
<li>其中uri是文件(struts2-core-2.3.24.1.jar-&gt;META-INF-&gt;struts-tags.tld)中”<uri>/struts-tags</uri>“的值，prefix指标签前缀为s</li>
</ul>
</li>
<li>（3）<code>&lt;s:debug&gt;&lt;/s:debug&gt;</code><!-- 使用debug模式可查看很多可以获取的值 --></li>
<li>（4）<code>&lt;s:property value=&quot;...&quot;/&gt;</code><!-- 获取debug模式中的Value Stack(直接在value填写Property Name)和Stack Context(又称ActionContext，在value中填写"#key")中的值 --></li>
</ul>
<h3 id="action中访问web元素-request、session、application"><a href="#action中访问web元素-request、session、application" class="headerlink" title="action中访问web元素(request、session、application)**"></a>action中访问web元素(request、session、application)**</h3><ul>
<li>（1）context就是上下文，也可以认为是运行环境，如servletContext就只servlet运行的环境</li>
<li>（2）使用DI/IoC解决，即实现接口<code>RequestAware</code>、<code>SessionAware</code>、<code>ApplicationAware</code>（<strong>视频21-22</strong>）<ul>
<li><code>DI</code>: dependency injection依赖注入</li>
<li><code>IoC</code>: inverse of control控制反转</li>
</ul>
</li>
</ul>
<h3 id="包含模块配置文件"><a href="#包含模块配置文件" class="headerlink" title="包含模块配置文件"></a>包含模块配置文件</h3><ul>
<li><code>&lt;include file=&quot;/cn/aezo/others/xxx.xml&quot; /&gt;</code> xxx.xml相当于一个普通的struts.xml文件</li>
</ul>
<h3 id="默认action"><a href="#默认action" class="headerlink" title="默认action"></a>默认action</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">default-action-ref</span> <span class="attr">name</span>=<span class="string">"def"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-action-ref</span>&gt;</span><span class="comment">&lt;!-- 要写在此package的所有action之前 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"def"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span>&gt;</span>/default.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="result相关"><a href="#result相关" class="headerlink" title="result相关"></a>result相关</h3><ul>
<li><code>package&gt;action&gt;result&gt;type</code>(Result类型)<ul>
<li><code>dispatcher</code>    服务器端跳转，只能跳转到页面(jsp/html)，不能是action</li>
<li><code>redirect</code>    客户端跳转，只能跳转到页面(jsp/html)，不能是action</li>
<li><code>chain</code>        服务器端跳转，指forward到action,result中的action不要加/</li>
<li><code>redirectAction</code>    客户端跳转，可跳转到action,result中的action不要加/</li>
<li>freemarker</li>
<li>httpheader</li>
<li>stream</li>
<li>xslt</li>
<li>plaintext</li>
<li>tiles</li>
</ul>
</li>
<li>一次request只有一个值栈valueStack；以forward的形式跳转(dispatcher/chain)时，request没变，因此valueStack不变。而客户端跳转则值栈改变</li>
<li><p>全局结果集global-results</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">global-results</span>&gt;</span><span class="comment">&lt;!-- 相当于该包和该包的子包所有的action中都包含这条result --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"mainPage"</span>&gt;</span>/global/mainPage.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>动态结果集</p>
<ul>
<li>在action中使用属性定义结果集并动态赋值，在struts.xml中使用ognl表达式，如${属性}来获取valueStack中的这个属性(也是在action中定义的属性)</li>
</ul>
</li>
<li>带参数的结果集(request值栈：<strong>视频32</strong>)<ul>
<li>一次request只有一个值栈valueStack；以forward的形式跳转(dispatcher/chain)时，request没变，因此valueStack不变。而客户端跳转则值栈改变</li>
<li>valueStack是request对象中的相关信息，如果是客户端跳转到jsp页面，则url上的带的参数在request域对象中是取不到到，只能在上下文中通过parameters获取</li>
</ul>
</li>
</ul>
<h3 id="OGNL-表达式"><a href="#OGNL-表达式" class="headerlink" title="OGNL 表达式"></a>OGNL 表达式</h3><blockquote>
<p>OGNL表达式是通常要结合Struts2的标志一起使用，如<s:property value="#xx">，el表达式可以单独使用${sessionScope.username}。详细区别如：<a href="http://www.cnblogs.com/ycxyyzw/p/3493513.html" target="_blank" rel="external">http://www.cnblogs.com/ycxyyzw/p/3493513.html</a></s:property></p>
</blockquote>
<ul>
<li>ognl表达式：如果标签对应的value的属性类型是Object时，且value中的值可以从值栈中获取就视为ognl表达式<ul>
<li>如<s:property value="name">中s:property是struts2标签，而value中的字符串才是ognl表达式</s:property></li>
</ul>
</li>
<li>ognl访问值栈中action的普通属性 <code>&lt;s:property value=&quot;user.age&quot; /&gt;</code></li>
<li>ognl访问值栈中对象的普通属性 <code>&lt;s:property value=&quot;user.age&quot; /&gt;</code></li>
<li>ognl访问静态成员<ul>
<li>（1）格式为：”@类名@属性/方法”，而”@@方法”只适用于调用Math类中的方法</li>
<li>（2）访问静态方法需要设置常量struts.ognl.allowStaticMethodAccess=true</li>
</ul>
</li>
<li>ognl访问集合<ul>
<li>（1）访问集合<s:property value="users"></s:property></li>
<li>（2）访问集合中某个元素：List<s:property value="users[1]">，Map<s:property value="userMaps.userm1">(Set访问不到)</s:property></s:property></li>
<li>（3）访问List、Set中元素的所有属性的集合<s:property value="users.{age}"></s:property></li>
<li>（4）访问Map的所有Key和Value<s:property value="userMaps.keys"><s:property value="userMaps.values"></s:property></s:property></li>
<li>（5）访问容器大小<s:property value="users.size()">或者value=”users.size”</s:property></li>
</ul>
</li>
<li>ognl投影(过滤)<ul>
<li>（1）获取user集合中age&gt;1的子集合中的第一个元素<s:property value="users.{?#this.age==1}[1]"></s:property></li>
<li>（2）^表示获取开头的元素，$表示获取结尾的元素，如：<s:property value="users.{^#this.age>1}.{age}">、<s:property value="users.{$#this.age>1}.{age}"></s:property></s:property></li>
</ul>
</li>
<li>ognl中的<code>[0]</code><ul>
<li>使用[0]访问所有action和DefaultTextProvider组成集合的对象(只有服务器端跳转是才会有多个action),如：<s:property value="[0]"></s:property></li>
</ul>
</li>
</ul>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>jsp中引入 <code>&lt;%@ taglib uri=&quot;/struts-tags&quot; prefix=&quot;s&quot; %&gt;</code>。其中uri是文件(struts2-core-2.3.24.1.jar-&gt;META-INF-&gt;struts-tags.tld)中”<uri>/struts-tags</uri>“的值，prefix指标签前缀为s</p>
<ul>
<li><code>&lt;s:debug&gt;&lt;/debug&gt;</code> 查看值栈，但是debug这行代码的位置可能会影响查看到的结果。如定义set、bean等的属性var，则会把这个var的值当做是键，和真正的值放到Stack Context中</li>
<li><code>&lt;s:property value=&quot;&quot;/&gt;</code> 获取Value Stack中的值，其中的value前不需加#，获取Stack Context中的值，前面可加#也可不加#；但是当和Value Stack有重名时，不加#表示访问Value Stack，加#表示访问Stack Context；且获取Stack Context中的request必须加#。</li>
<li><code>&lt;s:set var=&quot;adminName&quot; value=&quot;username&quot;/&gt;</code> 设置变量，默认是设在request和actionContext/StackContext中</li>
<li><p>定义bean</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">s:bean</span> <span class="attr">name</span>=<span class="string">"cn.aezo.tags.model.Dog"</span> <span class="attr">var</span>=<span class="string">"myDog"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"'myDogName'"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">s:bean</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;s:include value=&quot;include.html&quot;/&gt;</code> 导入外部文件(尽量不要使用，可使用jsp的include)</p>
</li>
<li><p>if elseif else</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">s:set</span> <span class="attr">var</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"#parameters.age[0]"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:set</span>&gt;</span><span class="comment">&lt;!-- 此处要带上[0],即取第一个 --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">s:if</span> <span class="attr">test</span>=<span class="string">"#age &lt; 0"</span>&gt;</span>wrong age!<span class="tag">&lt;/<span class="name">s:if</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">s:elseif</span> <span class="attr">test</span>=<span class="string">"#age &lt; 20"</span>&gt;</span>too yong!<span class="tag">&lt;/<span class="name">s:elseif</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">s:else</span>&gt;</span>yeah!<span class="tag">&lt;/<span class="name">s:else</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>iterator遍历</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"&#123;1, 2, 3&#125;"</span> <span class="attr">var</span>=<span class="string">"item"</span> <span class="attr">status</span>=<span class="string">"status"</span>&gt;</span><span class="comment">&lt;!--status保存这循环的相关信息，如status.index表示下标--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#status.index"</span>/&gt;</span>: <span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#item"</span>/&gt;</span>,</div><div class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>%{}</code>，其中%可以将{}中的内容强制转换为ognl表达式</p>
</li>
<li><constant name="struts.ui.theme" value="simple">使用UI标签的主题（使用较少），默认是xhtml,还可以为simple等,也可自己定义,可通过查看源码得知他定义的一些html元素。自己定义的主题要在src目录下，最终才会被编译到classes下，且起名为”template.你的主题名”,其中的template是默认参数</constant></li>
</ul>
<h3 id="struts2拦截器interceptor"><a href="#struts2拦截器interceptor" class="headerlink" title="struts2拦截器interceptor"></a>struts2拦截器interceptor</h3><ul>
<li>（1）自定义的拦截器实现xwork2的<code>Interceptor</code>接口</li>
<li><p>（2）在struts.xml中进行配置</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"cn.aezo.others.MyInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>（3）在action中进行添加拦截器</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"interceptor"</span> <span class="attr">class</span>=<span class="string">"cn.aezo.others.MyInterceptorAction"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span>&gt;</span>/others/interceptor.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span><span class="comment">&lt;!-- 要加上默认的拦截器 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>（4）token拦截器：可以产生一个随机字符串，可防止重复提交</p>
<ul>
<li>jsp页面使用<code>&lt;s:token&gt;&lt;/s:token&gt;</code>生成随机数</li>
<li>action的配置中加入struts2提供的拦截器<code>&lt;interceptor-ref name=&quot;token&quot;/&gt;</code></li>
</ul>
</li>
<li>（5）类型转换：实际上市struts2内置拦截器起的作用。只要在URL传参设参数值为约定的格式即可</li>
</ul>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul>
<li>strut2的声明式异常是使用拦截器来实现的</li>
<li>声明式异常：在所有的action中都throws Exception，拦截到struts.xml文件中，寻找全局异常映射和结果集进行页面显示</li>
</ul>
<h3 id="i18n国际化"><a href="#i18n国际化" class="headerlink" title="i18n国际化"></a>i18n国际化</h3><ul>
<li>（1）原理：使用java.util包中的ResourceBundle和Locale类，如ResourceBundle rb = ResourceBundle.getBundle(“app”, Locale.CHINA);</li>
<li>（2）struts2资源文件(properties)级别<ul>
<li>Action级别的国际化，properties文件前缀要是此Action的类名</li>
<li>包级别的，properties文件前缀要是package</li>
<li>全局级别的，前缀随便取。比较常用</li>
</ul>
</li>
<li>（3）全局级别时，要设置properties的前缀，即常量<constant name="struts.custom.i18n.resources" value="testStruts2"></constant></li>
<li>（4）在JSP页面可通过标签取值。<s:property value="getText('welcome.string')"><!-- 调用的Action的方法，实际中是ActionSupport的方法 --></s:property></li>
<li>（5）处理资源文件中带参数的问题：properties文件中写成如：param.string=欢迎：{0} ，然后在页面用    <s:text name="param.string"><s:param value="username"></s:param></s:text>获取url中的参数值(或者post表单)</li>
<li>（6）点击链接国际化：在链接后加参数request_locale=en_US或者request_locale=zh_CN，这样之后</li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ssh </tag>
            
            <tag> mvc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python]]></title>
      <url>/2017/04/28/lang/python/</url>
      <content type="html"><![CDATA[<h2 id="python简介"><a href="#python简介" class="headerlink" title="python简介"></a>python简介</h2><ul>
<li>python有两个版本python2(最新的为python2.7)和python3，两个大版本同时在维护</li>
<li>Linux下默认有python环境</li>
</ul>
<h2 id="python基础-易混淆-常用"><a href="#python基础-易混淆-常用" class="headerlink" title="python基础(易混淆/常用)"></a>python基础(易混淆/常用)</h2><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ol>
<li>模块安装<ul>
<li>可在<code>/Scripts</code>和<code>/Lib/site-packages</code>中查看可执行文件和模块源码</li>
</ul>
</li>
<li><p>常用模块</p>
<ul>
<li><code>pip</code> 可用于安装管理python其他模块<ul>
<li>安装（windows默认已经安装）<ul>
<li>将<code>https://bootstrap.pypa.io/get-pip.py</code>中的内容保存到本地<code>get-pip.py</code>文件中</li>
<li>上传<code>get-pip.py</code>至服务器，并设置为可执行</li>
<li><code>python get-pip.py</code> 安装</li>
<li>检查是否安装成功：<code>pip list</code> 可查看已经被管理的模块</li>
</ul>
</li>
<li>常见问题<ul>
<li>安装成功后，使用<code>pip list</code>仍然报错。windows执行<code>where pip</code>查看那些目录有pip程序，如strawberry(perl语言相关)目录也存在pip.exe，一种方法是将strawberry卸载</li>
</ul>
</li>
</ul>
</li>
<li><code>ConfigParser</code> 配置文件读取(该模块ConfigParser在Python3中，已更名为configparser)<ul>
<li><code>pip install ConfigParser</code></li>
<li>介绍：<a href="http://www.cnblogs.com/snifferhu/p/4368904.html" target="_blank" rel="external">http://www.cnblogs.com/snifferhu/p/4368904.html</a></li>
</ul>
</li>
<li><p><code>MySQLdb</code> mysql操作库</p>
<ul>
<li><p><code>pip install MySQL-python</code></p>
<blockquote>
<p>报错<code>win8下 pip安装mysql报错_mysql.c(42) : fatal error C1083: Cannot open include file: ‘config-win.h’: No such file or director</code>。解决办法：安装<a href="https://pypi.python.org/pypi/MySQL-python/1.2.5" target="_blank" rel="external">MySQL-python-1.2.5.win32-py2.7.exe</a>（就相当于pip安装）</p>
</blockquote>
</li>
<li><p>工具类：<a href="http://www.cnblogs.com/snifferhu/p/4369184.html" target="_blank" rel="external">http://www.cnblogs.com/snifferhu/p/4369184.html</a></p>
</li>
</ul>
</li>
<li><code>pymongo</code> MongoDB操作库 <a href="[Python连接MongoDB操作](http://www.yiibai.com/mongodb/mongodb_python.html)">^2</a><ul>
<li><code>pip install pymongo</code></li>
</ul>
</li>
<li><code>fabric</code> 主要在python自动化运维中使用(能自动登录其他服务器进行各种操作)<ul>
<li><code>pip install fabric</code> 安装</li>
<li>常见问题<ul>
<li>报错<code>fatal error: Python.h: No such file or directory</code><ul>
<li>安装<code>yum install python-devel</code> 安装python-devel(或者<code>yum install python-devel3</code>)</li>
</ul>
</li>
<li>报错<code>fatal error: ffi.h: No such file or directory</code><ul>
<li><code>yum install libffi libffi-devel</code> 安装libffi libffi-devel</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>scrapy</code> 主要用在python爬虫。可以css的形式方便的获取html的节点数据<ul>
<li><code>pip install scrapy</code> 安装</li>
<li>文档：<a href="http://scrapy-chs.readthedocs.io/zh_CN/0.24/index.html" target="_blank" rel="external">0.24-Zh</a>、<a href="https://doc.scrapy.org/en/latest/index.html" target="_blank" rel="external">latest-En</a></li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
]]></content>
      
        <categories>
            
            <category> lang </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[freemarker]]></title>
      <url>/2017/04/28/lang/freemarker/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>官网：<a href="http://freemarker.org/" target="_blank" rel="external">http://freemarker.org/</a>、文档：<a href="http://freemarker.org/docs/index.html" target="_blank" rel="external">http://freemarker.org/docs/index.html</a></li>
</ul>
<h2 id="解析模板字符串"><a href="#解析模板字符串" class="headerlink" title="解析模板字符串"></a>解析模板字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtlU</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据模板文件输出内容到指定的输出流中(文件中)</div><div class="line">     * <span class="doctag">@param</span> name 模板文件的名称</div><div class="line">     * <span class="doctag">@param</span> path 模板文件的目录: 如ftl与此java文件同目录, 则此处为 ""</div><div class="line">     * <span class="doctag">@param</span> rootMap 模板的数据模型</div><div class="line">     * <span class="doctag">@param</span> outputStream 输出流</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rendToStream</span><span class="params">(String name, String path, Map&lt;String, Object&gt; rootMap, OutputStream outputStream)</span> <span class="keyword">throws</span> TemplateException, IOException </span>&#123;</div><div class="line">        Writer out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(outputStream, <span class="string">"UTF-8"</span>));</div><div class="line">        getTemplate(name, path).process(rootMap, out); <span class="comment">// 将模板文件内容以UTF-8编码输出到相应的流中</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != out) &#123;</div><div class="line">            out.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rendToStream</span><span class="params">(String sourceCode, Map&lt;String, Object&gt; rootMap, OutputStream outputStream)</span> <span class="keyword">throws</span></span></div><div class="line">            TemplateException, IOException &#123;</div><div class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_23);</div><div class="line">        cfg.setDefaultEncoding(<span class="string">"UTF-8"</span>);</div><div class="line"></div><div class="line">        Template template = <span class="keyword">new</span> Template(<span class="string">""</span>, sourceCode, cfg);</div><div class="line"></div><div class="line">        Writer out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(outputStream, <span class="string">"UTF-8"</span>));</div><div class="line">        template.process(rootMap, out);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != out) &#123;</div><div class="line">            out.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据模板文件输出内容到控制台</div><div class="line">     * <span class="doctag">@param</span> name       模板文件的名称</div><div class="line">     * <span class="doctag">@param</span> pathPrefix 模板文件的目录</div><div class="line">     * <span class="doctag">@param</span> rootMap    模板的数据模型</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rendToConsole</span><span class="params">(String name, String pathPrefix, Map&lt;String, Object&gt; rootMap)</span> <span class="keyword">throws</span></span></div><div class="line">            TemplateException, IOException &#123;</div><div class="line">        getTemplate(name, pathPrefix).process(rootMap, <span class="keyword">new</span> PrintWriter(System.out));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rendToConsole</span><span class="params">(String sourceCode, Map&lt;String, Object&gt; rootMap)</span> <span class="keyword">throws</span></span></div><div class="line">            TemplateException, IOException &#123;</div><div class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_23);</div><div class="line">        cfg.setDefaultEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">        Template template = <span class="keyword">new</span> Template(<span class="string">""</span>, sourceCode, cfg);</div><div class="line">        template.process(rootMap, <span class="keyword">new</span> PrintWriter(System.out));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取指定目录下的Ftl模板文件</div><div class="line">     * <span class="doctag">@param</span> name 模板文件的名称</div><div class="line">     * <span class="doctag">@param</span> path 模板文件的目录</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Template <span class="title">getTemplate</span><span class="params">(String name, String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_23); <span class="comment">//通过FreeMarker的Configuration对象可以读取ftl文件</span></div><div class="line">        cfg.setClassForTemplateLoading(FtlU.class, path); <span class="comment">// 设置模板文件的目录</span></div><div class="line">        cfg.setDefaultEncoding(<span class="string">"UTF-8"</span>);       <span class="comment">//Set the default charset of the template files</span></div><div class="line">        Template temp = cfg.getTemplate(name); <span class="comment">//在模板文件目录中寻找名为"name"的模板文件</span></div><div class="line">        <span class="keyword">return</span> temp; <span class="comment">//此时FreeMarker就会到类路径下的"path"文件夹中寻找名为"name"的模板文件</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试程序</div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TemplateException </span>&#123;</div><div class="line">        rendToConsole(<span class="string">"Hello $&#123;name&#125;"</span>, MiscU.Instance.toMap(<span class="string">"name"</span>, <span class="string">"smalle1"</span>));</div><div class="line"></div><div class="line">        rendToStream(<span class="string">"Hello $&#123;name&#125;"</span>, MiscU.Instance.toMap(<span class="string">"name"</span>, <span class="string">"smalle2"</span>), <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"D://temp/target0.ftl"</span>)));</div><div class="line"></div><div class="line">        rendToConsole(<span class="string">"test.ftl"</span>, <span class="string">"/mytpl"</span>, MiscU.Instance.toMap(<span class="string">"name"</span>, <span class="string">"smalle3"</span>)); <span class="comment">// mytpl为classpath根目录下文件夹</span></div><div class="line"></div><div class="line">        rendToStream(<span class="string">"test.ftl"</span>, <span class="string">"/mytpl"</span>, MiscU.Instance.toMap(<span class="string">"name"</span>, <span class="string">"smalle4"</span>), <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"D://temp/target.ftl"</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li>转义字符<code>${r&quot;...&quot;}</code>: 如：${r”${foo}”}、${r”C:\foo\bar”}</li>
</ul>
]]></content>
      
        <categories>
            
            <category> lang </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> template </tag>
            
            <tag> freemarker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm]]></title>
      <url>/2017/04/02/web/npm/</url>
      <content type="html"><![CDATA[<h2 id="npm介绍"><a href="#npm介绍" class="headerlink" title="npm介绍"></a>npm介绍</h2><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>安装node的时候会默认包含npm</li>
<li>安装<a href="http://npm.taobao.org/" target="_blank" rel="external">cnpm</a>镜像(淘宝镜像下载较快)：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><ul>
<li>安装模块则是<code>cnpm install &lt;module-name&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><code>npm install &lt;module-name&gt;</code> 安装xxx(在当前项目安装)，<strong>更新模块也是此命令</strong><ul>
<li><code>npm i &lt;module-name&gt;</code> 简写方式</li>
<li><code>-g</code> 全局安装<ul>
<li>如果以Windows管理员运行的命令行，则会安装在nodejs安装目录的node_modules目录下。如果以普通用户运行的命令行，则会安装在用户的AppData/Roaming/npm/node_modules的目录下。建议以管理员运行</li>
</ul>
</li>
<li><code>--save</code>(简写<code>-S</code>) 自动将依赖更新到package.json文件的dependencies(依赖)中</li>
<li><code>--save-dev</code>(简写<code>-D</code>) 自动将依赖更新到package.json文件的devDependencies(运行时依赖)中</li>
</ul>
</li>
<li><code>npm init</code> 初始化项目，生成<code>package.json</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> extend </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[firebase]]></title>
      <url>/2017/03/19/service/firebase/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Firebase是google提供的快速构件应用的云服务。简单的可以说通过引入Firebase，你可以通过api去构建实时性的应用。</li>
<li><a href="https://firebase.google.com/" target="_blank" rel="external">官网</a></li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="Firebase帐号注册"><a href="#Firebase帐号注册" class="headerlink" title="Firebase帐号注册"></a>Firebase帐号注册</h3><ul>
<li>可通过google账户登录，选择免费版，新建一个项目。</li>
<li>点击<code>Authentication</code> - <code>登录方法</code> - 启用Google登录</li>
<li>点击<code>overview</code> - <code>将 Firebase 添加到您的网页应用</code> - 复制代码供下面使用</li>
</ul>
<h3 id="下载web版示例"><a href="#下载web版示例" class="headerlink" title="下载web版示例"></a>下载web版示例</h3><ul>
<li><a href="https://github.com/firebase/quickstart-js" target="_blank" rel="external">quickstart-js</a></li>
<li>该文件中包含了auth验证、database数据库、storage存储、messaging消息等示例</li>
<li>找到database/index.html，将上文复制的代码放到head中</li>
</ul>
<h3 id="为开发运行本地-Web-服务器"><a href="#为开发运行本地-Web-服务器" class="headerlink" title="为开发运行本地 Web 服务器"></a>为开发运行本地 Web 服务器</h3><ul>
<li>安装firebase命令行工具：<code>npm install -g firebase-tools</code>(重新运行安装命令，可更新此工具)</li>
<li>cmd进入到下文的database文件夹</li>
<li>启动服务器 <code>firebase serve</code></li>
<li>访问：<code>http://localhost:5000</code></li>
<li>点击登录，就会自动调用google登录验证api</li>
<li>该示例登录进入可书写博文，数据可在控制面板的<code>Database</code>中查看</li>
</ul>
<h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><p>最终可在控制面板的Hosting中查看</p>
<ul>
<li>启动一个新的命令行，cmd进入到下文的database文件夹</li>
<li>登录Google并授权 <code>firebase login</code></li>
<li><p>初始化应用 <code>firebase init</code>，运行后确认 - 选择Hosting - 选择创建的项目，创建根目录（默认会在此目录创建一个public的目作为根目录）</p>
<ul>
<li>运行 firebase init 命令会在您的项目的根目录下创建 firebase.json</li>
<li>当您初始化应用时，系统将提示您指定用作公共根目录的目录（默认为”public”）。如果您的公共根目录下不存在有效的 index.html 文件，系统将为您创建一个。</li>
<li><p>如一个firebase.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"hosting"</span>: &#123;</div><div class="line">    <span class="attr">"public"</span>: <span class="string">"./"</span>,</div><div class="line">    <span class="attr">"rewrites"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"source"</span>: <span class="string">"**"</span>,</div><div class="line">        <span class="attr">"destination"</span>: <span class="string">"/index.html"</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"ignore"</span>: [</div><div class="line">      <span class="string">"firebase.json"</span>,</div><div class="line">      <span class="string">"**/.*"</span>,</div><div class="line">      <span class="string">"**/node_modules/**"</span>,</div><div class="line">      <span class="string">"functions"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"database"</span>: &#123;</div><div class="line">    <span class="attr">"rules"</span>: <span class="string">"database.rules.json"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>部署网站 <code>firebase deploy</code></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> service </category>
            
        </categories>
        
        
        <tags>
            
            <tag> google </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[atom]]></title>
      <url>/2017/03/19/extend/atom/</url>
      <content type="html"><![CDATA[<h2 id="atom安装"><a href="#atom安装" class="headerlink" title="atom安装"></a>atom安装</h2><h2 id="atom快捷键"><a href="#atom快捷键" class="headerlink" title="atom快捷键"></a>atom快捷键</h2><ol>
<li>快捷键查看：<code>File - Settings - Keybindings</code><ul>
<li>编辑用户快捷键：<code>File - Settings - Keymap</code>(编辑后无需重启)</li>
<li>插件快捷键可能会冲突。搜索某个快捷键时，后面表示会覆盖前面的</li>
</ul>
</li>
<li><p>常用快捷键设置</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">##### 我自己加的快捷键 START #####</span></div><div class="line"><span class="comment"># 打开命令Panel: ctrl-shift-p</span></div><div class="line"></div><div class="line"><span class="comment"># 删除一行(ctrl-d) / ctrl-shift-k(默认)</span></div><div class="line"><span class="string">'atom-text-editor:not([mini])'</span>:</div><div class="line">  <span class="string">'ctrl-d'</span>: <span class="string">'editor:delete-line'</span></div><div class="line"><span class="comment"># 上下移动一行 ctrl-up、ctrl-down</span></div><div class="line"></div><div class="line"><span class="comment"># html预览切换（插件atom-html-preview）</span></div><div class="line"><span class="string">'atom-text-editor[data-grammar~=html]'</span>:</div><div class="line">  <span class="string">'ctrl-shift-b'</span>: <span class="string">'atom-html-preview:toggle'</span></div><div class="line"><span class="comment">##### 我自己加的快捷键 END #####</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="atom插件"><a href="#atom插件" class="headerlink" title="atom插件"></a>atom插件</h2><ul>
<li><a href="https://atom.io/packages/list" target="_blank" rel="external">插件排行榜</a></li>
<li><code>minimap</code> 代码地图</li>
<li><code>atom-beautify</code> 代码美化，Ctrl+Alt+B</li>
<li><code>file-icons</code> 文件图标美化</li>
<li><code>script</code> 脚本运行器，可运行几乎所有语言(有些需要运行环境)，<strong><code>Ctrl+Shift+B</code> 运行脚本</strong></li>
<li><code>atom-html-preview</code> html预览<ul>
<li>可在Atom编辑器中启一个预览的Tab，在预览页右键-Open Devtools可打开控制台</li>
</ul>
</li>
<li><code>markdown-writer</code> 可快速markdown文件(结合jekyll写博客)</li>
<li><code>git-plus</code> git增强工具。在设置中配置<code>git path</code>为<code>git.exe</code>的路径(如：<code>D:\java\Git\cmd\git.exe</code>)</li>
<li><p><code>platformio-ide-terminal</code> 终端嵌入(安装前需要安装git，并将git配置到path中)</p>
</li>
<li><p><code>vue-autocomplete</code> vue.js自动补全</p>
</li>
<li><code>language-vue</code> .vue文件高亮</li>
<li><code>autocomplete-python</code> python自动补全. 需要将python的执行版本设置到python中</li>
<li><code>autocomplete-php</code> 自动补全php. 需要配置php.exe的执行位置</li>
<li><code>php-server</code> 启动php服务器</li>
</ul>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ol>
<li>win安装或更新插件时，报错：<code>gyp ERR! stack Error: EPERM: operation not permitted</code><ul>
<li>解决办法：以管理员身份运行atom</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> extend </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ide </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[亚马逊云(AWS)实践]]></title>
      <url>/2017/03/13/linux/aws/</url>
      <content type="html"><![CDATA[<h2 id="选购"><a href="#选购" class="headerlink" title="选购"></a>选购</h2><p>1.</p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>需要在数据库所在安全组中把应用服务器IP加入</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cloud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx]]></title>
      <url>/2017/01/16/arch/nginx/</url>
      <content type="html"><![CDATA[<h2 id="nginx使用"><a href="#nginx使用" class="headerlink" title="nginx使用"></a>nginx使用</h2><ul>
<li>安装<ul>
<li><code>yum install nginx</code> 安装<ul>
<li>默认可执行文件路径<code>/usr/sbin/nginx</code>(已加入到系统服务); 配置文件路径<code>/etc/nginx/nginx.conf</code></li>
</ul>
</li>
<li>程序包解压安装</li>
</ul>
</li>
<li>启动<ul>
<li><code>systemctl start nginx</code> 启动</li>
<li>进入到<code>nginx</code>执行文件目录，运行<code>sudo ./nginx</code></li>
</ul>
</li>
<li>停止<ul>
<li><code>systemctl stop nginx</code><ul>
<li>有时候启动失败可能是端口占用，<code>listen</code>对应的端口必须是空闲状态</li>
</ul>
</li>
<li><code>sudo ./nginx -s stop</code></li>
</ul>
</li>
<li>相关命令<ul>
<li><code>ps -ef | grep nginx</code> 查看nginx安装位置(nginx的配置文件.conf在此目录下)</li>
<li><code>sudo find / -name nginx.conf</code> 查看配置文件位置</li>
<li><strong>校验配置</strong>：<code>/usr/sbin/nginx -t</code> 检查配置文件的配置是否合法(也会返回配置文件位置)</li>
<li><strong>重载配置文件</strong>： <code>/usr/sbin/nginx -s reload</code> 无需重启nginx</li>
</ul>
</li>
</ul>
<h2 id="nginx配置-nginx-conf"><a href="#nginx配置-nginx-conf" class="headerlink" title="nginx配置(nginx.conf)"></a>nginx配置(nginx.conf)</h2><ul>
<li>文件默认是只读的，需要root权限编辑。<code>sudo vim nginx.conf</code></li>
<li><p>配置如下</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">   server &#123;</div><div class="line">       # 监听的端口，注意要在服务器后台开启80端口外网访问权限</div><div class="line">       listen   80;</div><div class="line">       # 服务器的地址              </div><div class="line">       server_name www.aezo.cn;</div><div class="line"></div><div class="line">       # 当直接访问www.aezo.cn时, 重定向到http://www.aezo.cn/hello(地址栏url会发生改变)</div><div class="line">	location = / &#123;</div><div class="line">		rewrite / http://$server_name/hello break;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       # 用于暴露静态文件，访问http://www.aezo.cn/static/logo.png，且无法访问到http://www.aezo.cn/static</div><div class="line">       # 文件实际路径为/home/aezocn/www/static/logo.png</div><div class="line">       location ^~ /static/ &#123;</div><div class="line">           root /home/aezocn/www;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       # 当直接访问www.aezo.cn下的任何地址时，都会转发到http://127.0.0.1:8080下对应的地址(内部重定向，地址栏url不改变)。如http://www.aezo.cn/admin等，会转发到http://127.0.0.1:8080/admin</div><div class="line">       # location后的地址可正则</div><div class="line">       location / &#123;</div><div class="line">		proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;</div><div class="line">		proxy_set_header Host $http_host;</div><div class="line">		proxy_redirect off;</div><div class="line">		if (!-f $request_filename) &#123;</div><div class="line">               # 不能包含/等uri地址, 如果匹配到上面的uri则转向http://127.0.0.1:8080/xxxUri</div><div class="line">			proxy_pass http://127.0.0.1:8080;</div><div class="line">			break;</div><div class="line">		&#125;</div><div class="line">       &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">   # 开启第二个站点监听</div><div class="line">   server &#123;</div><div class="line">       listen 80;</div><div class="line">       server_name hello.aezo.cn;</div><div class="line"></div><div class="line">       location = / &#123;</div><div class="line">           #判断是否为手机移动端</div><div class="line">           if ($http_user_agent ~* '(iPhone|ipod|iPad|Android|Windows Phone|Mobile|Nokia)') &#123;</div><div class="line">               rewrite . http://$server_name/wap break;</div><div class="line">           &#125;</div><div class="line">           rewrite . http://$server_name/pc break;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       location / &#123;</div><div class="line">           proxy_pass http://127.0.0.1:8090;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>多个server_name<ul>
<li><code>server_name www.aezo.cn baidu.com;</code></li>
<li>正则<code>server_name ~^.+-api-dev\.aezo\.cn$;</code> 匹配<code>xxx-api-dev.aezo.cn</code></li>
</ul>
</li>
</ul>
<h2 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h2><ul>
<li>语法规则： <code>location [=|~|~*|^~] /uri/ { … }</code> <a href="[location配置正则](http://blog.csdn.net/gzh0222/article/details/7845981)">^1</a><ul>
<li><code>=</code> 开头表示精确匹配</li>
<li><code>~</code> 开头表示区分大小写的正则匹配</li>
<li><code>~*</code> 开头表示不区分大小写的正则匹配</li>
<li><code>!~</code> 开头为区分大小写不匹配的正则</li>
<li><code>!~*</code> 开头为不区分大小写不匹配的正则</li>
<li><code>^~</code> 开头表示uri以某个常规字符串开头，理解为匹配url路径即可（如果路径匹配那么不测试正则表达式）。nginx不对url做编码，因此请求为<code>/static/20%/aa</code>，可以被规则<code>^~ /static/ /aa</code>匹配到（注意是空格）。</li>
<li><code>/</code> 通用匹配，任何请求都会匹配到。</li>
</ul>
</li>
<li>多个location配置的情况下匹配顺序为:首先匹配 =，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。</li>
<li><p>常用配置</p>
<ul>
<li><p>防盗链</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location ~* \.(gif|jpg|swf)$ &#123;</div><div class="line">    valid_referers none blocked www.aezo.cn blog.aezo.cn;</div><div class="line">    if ($invalid_referer) &#123;</div><div class="line">        rewrite ^/ http://$host/logo.png;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>根据文件类型设置过期时间</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location ~* \.(js|css|jpg|jpeg|gif|png|swf)$ &#123;</div><div class="line">    if (-f $request_filename) &#123;</div><div class="line">    expires 12h;</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>禁止访问某个目录</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location ~* \.(txt|doc)$&#123;</div><div class="line">    root /home/aezocn/www/doc;</div><div class="line">    deny all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="版本更新变化"><a href="#版本更新变化" class="headerlink" title="版本更新变化"></a>版本更新变化</h2><ul>
<li>v1.12.1<ul>
<li>当访问<code>http://www.aezo.cn/index.html</code>不进入对应的页面，而是显示默认的<code>/usr/share/nginx/html/index.html</code>。解决办法：注释掉此文件即可</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> arch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java相关脚本]]></title>
      <url>/2017/01/10/linux/shell-java/</url>
      <content type="html"><![CDATA[<ul>
<li>注意文件格式必须是Unix格式</li>
<li>执行<code>sh ./my.sh</code></li>
</ul>
<h2 id="jar包运行-停止"><a href="#jar包运行-停止" class="headerlink" title="jar包运行/停止"></a>jar包运行/停止</h2><pre><code><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash">该脚本为Linux下启动java程序的通用脚本。即可以作为开机自启动service脚本被调用，</span></div><div class="line"><span class="meta">#</span><span class="bash">也可以作为启动java程序的独立脚本来使用。</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash">Author: tudaxia.com, Date: 2011/6/7</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash">警告!!!：该脚本stop部分使用系统<span class="built_in">kill</span>命令来强制终止指定的java程序进程。</span></div><div class="line"><span class="meta">#</span><span class="bash">在杀死进程前，未作任何条件检查。在某些情况下，如程序正在进行文件或数据库写操作，</span></div><div class="line"><span class="meta">#</span><span class="bash">可能会造成数据丢失或数据不完整。如果必须要考虑到这类情况，则需要改写此脚本，</span></div><div class="line"><span class="meta">#</span><span class="bash">增加在执行<span class="built_in">kill</span>命令前的一系列检查。</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> 以下这些注释设置可以被chkconfig命令读取</span></div><div class="line"><span class="meta">#</span><span class="bash"> chkconfig: - 99 50</span></div><div class="line"><span class="meta">#</span><span class="bash"> description: Java程序启动脚本</span></div><div class="line"><span class="meta">#</span><span class="bash"> processname: <span class="built_in">test</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> config: 如果需要的话，可以配置</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash">环境变量及程序执行参数</span></div><div class="line"><span class="meta">#</span><span class="bash">需要根据实际环境以及Java程序名称来修改这些参数</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash">JDK所在路径(需要配置好<span class="variable">$JAVA_HOME</span>环境变量)</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$JAVA_HOME</span>=也可不使用系统jdk</span></div><div class="line">if [ -f "$JAVA_HOME/bin/java" ]; then</div><div class="line">  JAVA="$JAVA_HOME/bin/java"</div><div class="line">else</div><div class="line">  JAVA=java</div><div class="line">fi</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash">执行程序启动所使用的系统用户，考虑到安全，推荐不使用root帐号</span></div><div class="line">RUNNING_USER=root</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash">Java程序所在的目录（将此文件和jar放在统一目录）</span></div><div class="line">APP_HOME="$( cd -P "$( dirname "$0" )" &amp;&amp; pwd )"</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash">需要启动的Java主程序（main方法类）</span></div><div class="line">APP_JAR="grouphelp-0.0.1-SNAPSHOT.jar"</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> springboot参数</span></div><div class="line">PROFILES="--spring.profiles.active=prod"</div><div class="line">JAR_ARGS="$PROFILES"</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash">java虚拟机启动参数</span></div><div class="line"><span class="meta">#</span><span class="bash">DEBUG=<span class="string">"-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8091"</span></span></div><div class="line"><span class="meta">#</span><span class="bash">MEMIF=<span class="string">"-Xms128M -Xmx512M -XX:MaxPermSize=512m -Dfile.encoding=UTF-8"</span></span></div><div class="line">VM_ARGS="$MEMIF $DEBUG"</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"><span class="comment">##################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash">(函数)判断程序是否已启动</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash">说明：</span></div><div class="line"><span class="meta">#</span><span class="bash">使用JDK自带的JPS命令及grep命令组合，准确查找pid</span></div><div class="line"><span class="meta">#</span><span class="bash">jps 加 l 参数，表示显示java的完整包路径</span></div><div class="line"><span class="meta">#</span><span class="bash">使用awk，分割出pid (<span class="variable">$1</span>部分)，及Java程序名称(<span class="variable">$2</span>部分)</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash">初始化psid变量（全局）</span></div><div class="line">psid=0</div><div class="line"></div><div class="line">checkpid() &#123;</div><div class="line">   javaps=`$JAVA_HOME/bin/jps -l | grep $APP_JAR`</div><div class="line"></div><div class="line">   if [ -n "$javaps" ]; then</div><div class="line">      psid=`echo $javaps | awk '&#123;print $1&#125;'`</div><div class="line">   else</div><div class="line">      psid=0</div><div class="line">   fi</div><div class="line">&#125;</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"><span class="comment">##################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash">(函数)启动程序</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash">说明：</span></div><div class="line"><span class="meta">#</span><span class="bash">1. 首先调用checkpid函数，刷新<span class="variable">$psid</span>全局变量</span></div><div class="line"><span class="meta">#</span><span class="bash">2. 如果程序已经启动（<span class="variable">$psid</span>不等于0），则提示程序已启动</span></div><div class="line"><span class="meta">#</span><span class="bash">3. 如果程序没有被启动，则执行启动命令行</span></div><div class="line"><span class="meta">#</span><span class="bash">4. 启动命令执行后，再次调用checkpid函数</span></div><div class="line"><span class="meta">#</span><span class="bash">5. 如果步骤4的结果能够确认程序的pid,则打印[OK]，否则打印[Failed]</span></div><div class="line"><span class="meta">#</span><span class="bash">注意：<span class="built_in">echo</span> -n 表示打印字符后，不换行</span></div><div class="line"><span class="meta">#</span><span class="bash">注意: <span class="string">"nohup 某命令 &gt;/dev/null 2&gt;&amp;1 &amp;"</span> 的用法</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################################</span></span></div><div class="line">start() &#123;</div><div class="line">   checkpid</div><div class="line"></div><div class="line">   if [ $psid -ne 0 ]; then</div><div class="line">      echo "================================"</div><div class="line">      echo "warn: $APP_JAR already started! (pid=$psid)"</div><div class="line">      echo "================================"</div><div class="line">   else</div><div class="line">      echo -n "Starting $APP_JAR ..."</div><div class="line">      JAVA_CMD="nohup $JAVA_HOME/bin/java -jar $APP_HOME/$APP_JAR $JAR_ARGS &gt; console.log 2&gt;&amp;1 &amp;"</div><div class="line">      su - $RUNNING_USER -c "$JAVA_CMD"</div><div class="line">      checkpid</div><div class="line">      if [ $psid -ne 0 ]; then</div><div class="line">         echo "(pid=$psid) [OK]"</div><div class="line">      else</div><div class="line">         echo "[Failed]"</div><div class="line">      fi</div><div class="line">   fi</div><div class="line">&#125;</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"><span class="comment">##################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash">(函数)停止程序</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash">说明：</span></div><div class="line"><span class="meta">#</span><span class="bash">1. 首先调用checkpid函数，刷新<span class="variable">$psid</span>全局变量</span></div><div class="line"><span class="meta">#</span><span class="bash">2. 如果程序已经启动（<span class="variable">$psid</span>不等于0），则开始执行停止，否则，提示程序未运行</span></div><div class="line"><span class="meta">#</span><span class="bash">3. 使用<span class="built_in">kill</span> -9 pid命令进行强制杀死进程</span></div><div class="line"><span class="meta">#</span><span class="bash">4. 执行<span class="built_in">kill</span>命令行紧接其后，马上查看上一句命令的返回值: $?</span></div><div class="line"><span class="meta">#</span><span class="bash">5. 如果步骤4的结果$?等于0,则打印[OK]，否则打印[Failed]</span></div><div class="line"><span class="meta">#</span><span class="bash">6. 为了防止java程序被启动多次，这里增加反复检查进程，反复杀死的处理（递归调用stop）。</span></div><div class="line"><span class="meta">#</span><span class="bash">注意：<span class="built_in">echo</span> -n 表示打印字符后，不换行</span></div><div class="line"><span class="meta">#</span><span class="bash">注意: 在shell编程中，<span class="string">"$?"</span> 表示上一句命令或者一个函数的返回值</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################################</span></span></div><div class="line">stop() &#123;</div><div class="line">   checkpid</div><div class="line"></div><div class="line">   if [ $psid -ne 0 ]; then</div><div class="line">      echo -n "Stopping $APP_JAR ...(pid=$psid) "</div><div class="line">      su - $RUNNING_USER -c "kill -9 $psid"</div><div class="line">      if [ $? -eq 0 ]; then</div><div class="line">         echo "[OK]"</div><div class="line">      else</div><div class="line">         echo "[Failed]"</div><div class="line">      fi</div><div class="line"></div><div class="line">      checkpid</div><div class="line">      if [ $psid -ne 0 ]; then</div><div class="line">         stop</div><div class="line">      fi</div><div class="line">   else</div><div class="line">      echo "================================"</div><div class="line">      echo "warn: $APP_JAR is not running"</div><div class="line">      echo "================================"</div><div class="line">   fi</div><div class="line">&#125;</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"><span class="comment">##################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash">(函数)检查程序运行状态</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash">说明：</span></div><div class="line"><span class="meta">#</span><span class="bash">1. 首先调用checkpid函数，刷新<span class="variable">$psid</span>全局变量</span></div><div class="line"><span class="meta">#</span><span class="bash">2. 如果程序已经启动（<span class="variable">$psid</span>不等于0），则提示正在运行并表示出pid</span></div><div class="line"><span class="meta">#</span><span class="bash">3. 否则，提示程序未运行</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################################</span></span></div><div class="line">status() &#123;</div><div class="line">   checkpid</div><div class="line"></div><div class="line">   if [ $psid -ne 0 ];  then</div><div class="line">      echo "$APP_JAR is running! (pid=$psid)"</div><div class="line">   else</div><div class="line">      echo "$APP_JAR is not running"</div><div class="line">   fi</div><div class="line">&#125;</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"><span class="comment">##################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash">(函数)打印系统环境参数</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################################</span></span></div><div class="line">info() &#123;</div><div class="line">   echo "System Information:"</div><div class="line">   echo "****************************"</div><div class="line">   echo `head -n 1 /etc/issue`</div><div class="line">   echo `uname -a`</div><div class="line">   echo</div><div class="line">   echo "JAVA_HOME=$JAVA_HOME"</div><div class="line">   echo `$JAVA_HOME/bin/java -version`</div><div class="line">   echo</div><div class="line">   echo "APP_HOME=$APP_HOME"</div><div class="line">   echo "APP_JAR=$APP_JAR"</div><div class="line">   echo "****************************"</div><div class="line">&#125;</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"><span class="comment">##################################</span></span></div><div class="line"><span class="meta">#</span><span class="bash">读取脚本的第一个参数(<span class="variable">$1</span>)，进行判断</span></div><div class="line"><span class="meta">#</span><span class="bash">参数取值范围：&#123;start|stop|restart|status|info&#125;</span></div><div class="line"><span class="meta">#</span><span class="bash">如参数不在指定范围之内，则打印帮助信息</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################################</span></span></div><div class="line">case "$1" in</div><div class="line">   'start')</div><div class="line">      start</div><div class="line">      ;;</div><div class="line">   'stop')</div><div class="line">     stop</div><div class="line">     ;;</div><div class="line">   'restart')</div><div class="line">     stop</div><div class="line">     start</div><div class="line">     ;;</div><div class="line">   'status')</div><div class="line">     status</div><div class="line">     ;;</div><div class="line">   'info')</div><div class="line">     info</div><div class="line">     ;;</div><div class="line">  *)</div><div class="line">     echo "Usage: $0 &#123;start|stop|restart|status|info&#125;"</div><div class="line">     exit 1</div><div class="line">esac</div><div class="line">exit 0</div></pre></td></tr></table></figure>
</code></pre><hr>
<p><a href="http://blog.csdn.net/clerk0324/article/details/50593882" target="_blank" rel="external">http://blog.csdn.net/clerk0324/article/details/50593882</a></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS服务器使用指导]]></title>
      <url>/2017/01/10/linux/centos-server-guide/</url>
      <content type="html"><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul>
<li><code>yum install vsftpd</code> 安装软件vsftpd，一路y下去</li>
<li><code>yum search vsftpd</code> 查找软件vsftpd源</li>
<li><strong>如果服务器磁盘未挂载，最好先挂载后再进行软件安装</strong></li>
</ul>
<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>决定能否访问到服务器，或服务器能否访问其他服务，取决于<code>服务器防火墙</code>和<code>云服务器后台管理的安全组</code></p>
<ul>
<li>Centos 7使用firewalld代替了原来的iptables<ul>
<li>查看状态：<code>systemctl status firewalld</code></li>
<li>开放端口：<code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code>（–permanent永久生效，没有此参数重启后失效）</li>
<li>重新载入：<code>firewall-cmd --reload</code></li>
<li>查看端口：<code>firewall-cmd --zone= public --query-port=80/tcp</code></li>
<li>删除端口：<code>firewall-cmd --zone= public --remove-port=80/tcp --permanent</code></li>
</ul>
</li>
<li>云服务器一般有进站出站规则，端口开发除了系统的防火墙也要考虑进出站规则</li>
</ul>
<h2 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h2><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><h4 id="下载jdk文件"><a href="#下载jdk文件" class="headerlink" title="下载jdk文件"></a>下载jdk文件</h4><blockquote>
<p>默认登录时候在 root 目录，直接下载和解压，软件包和解压目录都默认在 root 目录，可以切换到 hoom 目录进行下载</p>
</blockquote>
<ol>
<li>下载rpm格式<ul>
<li>获取rpm链接（下载到本地后上传到服务器）： oracle -&gt; Downloads -&gt; Java SE -&gt; Java Archive -&gt; Java SE 7 -&gt; Java SE Development Kit 7u80 -&gt; Accept License Agreement -&gt; jdk-7u80-linux-x64.rpm</li>
<li>下载jdk，运行命令：<code>wget http://download.oracle.com/otn/java/jdk/7u80-b15/jdk-7u80-linux-x64.rpm</code>(这个链接会下载成html格式，<strong>不行</strong>)</li>
<li><code>rmp -ivh jdk-7u80-linux-x64.rpm</code> 安装rpm文件</li>
</ul>
</li>
<li>下载tar格式（推荐）<ul>
<li>下载tar文件 <code>wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz</code></li>
<li>解压tar <code>tar -zxvf jdk-7u79-linux-x64.tar.gz</code><blockquote>
<p>网上有很多深坑，如果报 gzip: stdin: not in gzip format 错请查看：<a href="http://www.cnblogs.com/gmq-sh/p/5380078.html" target="_blank" rel="external">http://www.cnblogs.com/gmq-sh/p/5380078.html</a></p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><ul>
<li><code>vi /etc/profile</code> 使用vi打开profile文件</li>
<li><p>在末尾输入并保存（注意JAVA_HOME需要按照实际路径）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/root/jdk1.7.0_79</div><div class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin</div></pre></td></tr></table></figure>
<blockquote>
<p><code>vi 文件名</code>打开某个文件进行编辑</p>
<ul>
<li>点击键盘<code>insert</code>，进入vi编辑模式，开始编辑；</li>
<li>点击<code>esc</code>退出编辑模式，进入到vi命令行模式；</li>
<li>输入<code>:x</code>/<code>ZZ</code>将刚刚修改的文件进行保存，退出编辑页面，回到初始命令行</li>
<li><code>Ctrl+z</code> 退出 vi 编辑器</li>
</ul>
</blockquote>
</li>
<li><p>运行命令 <code>. /etc/profile</code> 使profile立即生效(注意 . 和 / 之间有空格)</p>
</li>
<li><code>java -version</code> 打印版本号</li>
</ul>
<h3 id="安装vsftpd-1"><a href="#安装vsftpd-1" class="headerlink" title="安装vsftpd ^1"></a>安装vsftpd <a href="[vsftpd](http://www.cnblogs.com/hhuai/archive/2011/02/12/1952647.html)">^1</a></h3><blockquote>
<p>ftp/sftp是协议，vsftpd是ftp服务器(只支持ftp协议)<br><code>yum install ftp</code>安装后可执行ftp命令，此时ftp相当于一个客户端，和window下的xftp类似</p>
</blockquote>
<ol>
<li>安装<code>yum install vsftpd</code></li>
<li><p>修改默认配置文件<code>vim /etc/vsftpd/vsftpd.conf</code></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#不允许匿名登录(NO)</div><div class="line">anonymous_enable=NO</div><div class="line">#禁止匿名用户上传</div><div class="line">anon_upload_enable=NO</div><div class="line"></div><div class="line">#禁止用户登出自己的FTP主目录(YES表示禁止登出主目录，NO表示不做限制)</div><div class="line">chroot_list_enable=YES</div><div class="line">#如果chroot_list_enable=YES，那么凡是加在文件chroot_list中的用户都是受限止的用户，即不可浏览其主目录的上级目录</div><div class="line">chroot_list_file=/etc/vsftpd/chroot_list</div><div class="line"></div><div class="line">#设定20端口进行通信，对外默认是21端口。防火墙要开放20、21端口</div><div class="line">#connect_from_port_20=YES</div><div class="line">#监听端口</div><div class="line">#listen_port=2121</div><div class="line"></div><div class="line">##加在最后</div><div class="line">#开启pam模式，/etc/vsftpd/ftpusers中为禁止登录的用户 [^2]</div><div class="line">pam_service_name=vsftpd</div><div class="line">#对vsftpd有用，否则因home目录权限为root权限而无法登录</div><div class="line">allow_writeable_chroot=YES</div><div class="line">#开启pasv模式，否则有些客户端登录会有问题，同时在防火墙中必须开启设定的端口，防火墙要开放30000-30999的端口</div><div class="line">#pasv_enable=YES</div><div class="line">pasv_min_port=30000</div><div class="line">pasv_max_port=30999</div><div class="line">#限定可登录用户列表</div><div class="line">userlist_enable=YES</div><div class="line">userlist_file=/etc/vsftpd/user_list</div><div class="line">#表示默认所有用户都不能登录，只有列表中用户才可以；如果userlist_deny=YES，则user_list中的用户就不允许登录ftp服务器</div><div class="line">userlist_deny=NO</div></pre></td></tr></table></figure>
</li>
<li><p>设置用户</p>
<ul>
<li>法一(应用程序内部使用推荐)：设置vsftpd服务的宿主用户 <code>useradd ftpadmin -d /home/ftproot -s /sbin/nologin</code><ul>
<li><code>passwd ftpadmin</code> 给ftpadmin设置密码</li>
<li>默认的vsftpd的服务宿主用户是root，但是这不符合安全性的需要。这里建立名字为ftpadmin的用户，用他来作为支持vsftpd的服务宿主用户。由于该用户仅用来支持vsftpd服务用，因此没有许可他登陆系统的必要，并设定他为不能登陆系统的用户（-s /sbin/nologin）。并设置ftpadmin的家目录为/home/ftproot(做为ftp服务器的根目录)</li>
<li>将ftpadmin加到/etc/vsftpd/user_list中</li>
<li>将ftpadmin加到/etc/vsftpd/chroot_list中</li>
<li>文件/home/ftproot的所有者是ftpadmin，设置权限为755，包含子目录<ul>
<li><code>chown -R ftpadmin /home/ftproot</code></li>
<li><code>chmod -R 755 /home/ftproot</code></li>
</ul>
</li>
</ul>
</li>
<li>法二：设置vsftpd虚拟宿主用户 <code>useradd aezo -s /sbin/nologin</code><ul>
<li><code>-d /home/nowhere</code> 使用-d参数指定用户的主目录，用户主目录并不是必须存在的。如果不设置会在<code>home</code>目录下建一个aezo的文件夹</li>
<li><code>guest_username=aezo</code> 指定虚拟用户的宿主用户</li>
<li><code>virtual_use_local_privs=YES</code> 设定虚拟用户的权限符合他们的宿主用户</li>
<li><code>user_config_dir=/etc/vsftpd/vconf</code> 设定虚拟用户个人vsftp的配置文件存放路径</li>
</ul>
</li>
</ul>
</li>
<li>启动服务<code>systemctl start vsftpd</code></li>
<li>命令行ftp可以登录，但是xftp可以登录确无法获取目录列表，IE浏览器访问<code>ftp://192.168.1.1</code>失败。谷歌浏览器正常访问并使用，或者ftp客户端登录</li>
</ol>
<h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><ol>
<li>查看是否安装git/查看git是否安装成功：<code>git --version</code><ul>
<li><code>-bash: git: command not found</code> 表示尚未安装</li>
</ul>
</li>
<li>下载安装：<code>yum install git</code></li>
</ol>
<h3 id="htop安装"><a href="#htop安装" class="headerlink" title="htop安装"></a>htop安装</h3><ol>
<li>htop是比top功能更多的进程管理工具</li>
<li><code>yum install htop</code> 安装</li>
<li><code>htop</code>查看进程信息(命令行上显示的界面可直接鼠标点击操作)</li>
<li>小技巧<ul>
<li>点击Tree/Sorted可切换视图</li>
<li>选中一行，按下键可查看更多进程</li>
<li>Nice：指的是nice值，这样就可以提高/降低对应进程的优先级</li>
</ul>
</li>
</ol>
<hr>
<p>参考文章</p>
<p>[^2]: <a href="http://www.cnblogs.com/GaZeon/p/5393853.html" target="_blank" rel="external">ftp 530 Permission denied</a></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> server </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven]]></title>
      <url>/2016/12/29/arch/maven/</url>
      <content type="html"><![CDATA[<h2 id="maven简介"><a href="#maven简介" class="headerlink" title="maven简介"></a>maven简介</h2><h2 id="maven实战"><a href="#maven实战" class="headerlink" title="maven实战"></a>maven实战</h2><h3 id="maven镜像修改"><a href="#maven镜像修改" class="headerlink" title="maven镜像修改"></a>maven镜像修改</h3><pre><code>- 在~/.m2目录下的settings.xml文件中，（如果该文件不存在，则需要从maven/conf目录下拷贝一份），找到&lt;mirrors&gt;标签，添加如下子标签

    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>          </div><div class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre><h3 id="maven父子项目"><a href="#maven父子项目" class="headerlink" title="maven父子项目"></a>maven父子项目</h3><pre><code>- parents主要配置如下：`pom.xml`

    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>smtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 打包类型必须为pom --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>smtools<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>smtools<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">module</span>&gt;</span>utils<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">module</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--依赖形式一：父项目的依赖会被子项目自动继承--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--依赖形式二：该节点下的依赖关系只是为了统一版本号，不会被子项目自动继承，除非子项目主动引用--&gt;</span></div><div class="line"><span class="comment">&lt;!--好处是子项目可以不用写版本号 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>

- child

    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--声明父项目坐标--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>smtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- &lt;relativePath/&gt;的默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 建议写上，否则仅打包子项目的时候会出错 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--如果父项目使用了dependencyManagement, 如果此处添加的因子在其中则不用写版本号--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--依赖于此项目的其他模块:此时idea的Dependencies可看到相应的依赖关系--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--project.version表示当前项目(此pom文件所在的模块/项目)的版本--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>

- 子项目打包：进入到子项目目录，运行`mvn package`(注意要指明`relativePath`)
</code></pre><h3 id="maven项目依赖本地jar包"><a href="#maven项目依赖本地jar包" class="headerlink" title="maven项目依赖本地jar包"></a>maven项目依赖本地jar包</h3><ul>
<li>安装jar包到本地：<code>mvn install:install-file -Dfile=D:/test-1.0.0.jar -DgroupId=cn.aezo -DartifactId=test -Dversion=1.0.0 -Dpackaging=jar</code><ul>
<li>如果jar包包含pom信息则可直接安装<code>mvn install:install-file -Dfile=D:/test-1.0.0.jar</code></li>
</ul>
</li>
<li><p>再按照常规的方式应用</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">   	<span class="tag">&lt;<span class="name">version</span>&gt;</span>=1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>以下两种方法不推荐：这样添加之后，编译是可以通过的，但是打包还会会从本地maven库里取相应的jar（如果你本地maven库里没有，则不会打包到工程里），而不是把你配置的jar文件打包进去，所以需要打包完成后将对应的jar添加到项目jar的lib目录中</p>
</blockquote>
<ul>
<li><p>法一：依赖写法(只能一个jar一个jar的添加)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--groupId等是从jar包的META-INF中获得; 其中scope必须加; $&#123;basedir&#125;为maven内置参数--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/lib/smtools-utils-0.0.1-SNAPSHOT.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>法二：在<code>build-plugins</code>节点加以下插件(可获取到目录下所有jar)(未测试通过)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">        &lt;source&gt;1.8&lt;/source&gt;</div><div class="line">        &lt;target&gt;1.8&lt;/target&gt;</div><div class="line">        &lt;encoding&gt;UTF-8&lt;/encoding&gt;</div><div class="line">        --&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">extdirs</span>&gt;</span>src/main/resources/lib<span class="tag">&lt;/<span class="name">extdirs</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="利用github创建仓库-1"><a href="#利用github创建仓库-1" class="headerlink" title="利用github创建仓库 ^1"></a>利用github创建仓库 <a href="[利用github搭建个人maven仓库](http://blog.csdn.net/hengyunabc/article/details/47308913)">^1</a></h3><ul>
<li>github新建项目maven-repo，并下载到本地目录，如<code>D:/GitRepositories/maven-repo</code></li>
<li>进入到项目pom.xml所在目录，运行命令：<ul>
<li><code>mvn deploy -DaltDeploymentRepository=oldinaction-maven-repo::default::file:D:/GitRepositories/maven-repo -DskipTests</code></li>
<li>将项目部署到<code>D:/GitRepositories/maven-repo</code>目录，项目id为<code>oldinaction-maven-repo</code>，<code>-DskipTests</code>跳过测试进行部署</li>
</ul>
</li>
<li>提交到github(<strong>注意jar包不要习惯性的ignore</strong>)</li>
<li><p>配置maven远程仓库</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">repository</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>oldinaction-maven-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://raw.github.com/oldinaction/maven-repo/master/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!--或者访问本地--&gt;</span></div><div class="line">		<span class="comment">&lt;!--&lt;url&gt;file:D:/GitRepositories/maven-repo/&lt;/url&gt;--&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>maven的repository并没有优先级的配置，也不能单独为某些依赖配置repository。所以如果项目配置了多个repository，在首次编绎时会依次尝试下载依赖，如果没有找到，尝试下一个</li>
<li>其中<code>&lt;url&gt;https://raw.github.com/{github-username}/{github-repository}/{github-branch}/&lt;/url&gt;</code>，<a href="https://raw.github.com" target="_blank" rel="external">https://raw.github.com</a> 是github的raw站点，浏览器不能访问目录只能访问单个文件</li>
</ul>
</li>
<li><p>配置依赖(会自动将仓库中的数据再下载到本地仓库<code>.m2</code>目录)</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>sm-minions-1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装和打包"><a href="#安装和打包" class="headerlink" title="安装和打包"></a>安装和打包</h2><ul>
<li>安装：<ul>
<li>基于源码安装：<code>mvn install</code> (需要进入到源码的pom.xml目录)</li>
<li>基于jar包安装：<code>mvn install:install-file -Dfile=D:/test-1.0.0.jar -DgroupId=cn.aezo -DartifactId=test -Dversion=1.0.0 -Dpackaging=jar</code><ul>
<li>如果jar包包含pom信息则可直接安装<code>mvn install:install-file -Dfile=D:/test-1.0.0.jar</code></li>
</ul>
</li>
<li>说明<ul>
<li>执行安装命令后，会自动将项目打包后放到maven本地的home目录(.m2)。之后其他项目可进行引用(按照常规方式引用)</li>
<li>如果有pom.xml建议安装到本地再进行引用，(下面两种方式)否则编译的时候不会报错，但是运行时这些本地jar依赖就找不到(如：<code>nested exception is java.lang.NoClassDefFoundError</code>)</li>
<li>有些install时则运行单元测试时候会报错，导致安装/打包失败。可尝试跳过测试进行安装(<code>mvn install -DskipTests</code>)。如：阿里云SMS服务aliyun-java-sdk-core:3.2.3就是如此</li>
</ul>
</li>
</ul>
</li>
<li>打包命令：<code>mvn package</code></li>
<li><p>跳过测试进行打包：<code>mvn install -DskipTests</code> / <code>mvn package -DskipTests</code>.</p>
<ul>
<li><p>方式二:</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>在idea中使用<code>Terminal</code>进行项目打包(<code>mvn package</code>)需要注意环境变量的java版本. 版本过低容易报错如：<code>maven Unsupported major.minor version 52.0</code>. 修改版本后可进行重启idea. (修改idea配置中的maven编译版本不能影响命令行)</p>
</li>
<li>mvn编译是根据pom.xml配置来的. 而idea的编译/语法校验等, 是根据Libraries中的jar包来的. <strong>idea默认会根据pom.xml中的依赖找到对应的jar(.m2路径下)并应用到Libraries中(只会加本地maven库中的).</strong> 如果手动加入了一些jar包, 有可能出现本地可正常编译, maven却编译打包失败, 具体参考上述”maven项目依赖本地jar包”.</li>
</ul>
<h2 id="maven语法"><a href="#maven语法" class="headerlink" title="maven语法"></a>maven语法</h2><h3 id="maven项目基本结构"><a href="#maven项目基本结构" class="headerlink" title="maven项目基本结构"></a>maven项目基本结构</h3><pre><code>- pom.xml

    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.aezo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minions<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 打包类型可以是jar、war、pom等 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>minions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Delegated the code to all minions<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>

- maven文件结构

    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- src</div><div class="line">	- main</div><div class="line">		- java</div><div class="line">			- xxx</div><div class="line">		- resources</div><div class="line">		- WEB-INFO</div><div class="line">			- web.xml</div><div class="line">	- test</div></pre></td></tr></table></figure>
</code></pre><h3 id="标签介绍"><a href="#标签介绍" class="headerlink" title="标签介绍"></a>标签介绍</h3><ul>
<li><code>scope</code>：取值有compile、runtime、test、provided、system和import。<ul>
<li><code>compile</code>：这是依赖项的默认作用范围，即当没有指定依赖项的scope时默认使用compile。compile范围内的依赖项在所有情况下都是有效的，包括运行、测试和编译时。</li>
<li><code>runtime</code>：表示该依赖项只有在运行时才是需要的，在编译的时候不需要。这种类型的依赖项将在运行和test的类路径下可以访问。</li>
<li><code>test</code>：表示该依赖项只对测试时有用，包括测试代码的编译和运行，对于正常的项目运行是没有影响的。</li>
<li><code>provided</code>：表示该依赖项将由JDK或者运行容器在运行时提供，也就是说由Maven提供的该依赖项我们只有在编译和测试时才会用到，而在运行时将由JDK或者运行容器提供。</li>
<li><code>system</code>：当scope为system时，表示该依赖项是我们自己提供的，不需要Maven到仓库里面去找。指定scope为system需要与另一个属性元素systemPath一起使用，它表示该依赖项在当前系统的位置，使用的是绝对路径。</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> arch </category>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[derby]]></title>
      <url>/2016/12/11/db/derby/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol>
<li>Apache Derby是一个完全用java编写的数据库，非常小巧，核心部分derby.jar只有2M，所以既可以做为单独的数据库服务器使用，也可以内嵌在应用程序中使用。</li>
<li>Derby数据库有两种运行模式<ul>
<li>内嵌模式：Derby数据库与应用程序共享同一个JVM，通常由应用程序负责启动和停止，对除启动它的应用程序外的其它应用程序不可见，即其它应用程序不可访问它。如ofbiz自带的数据库即为derby</li>
<li>网络模式：Derby数据库独占一个JVM，做为服务器上的一个独立进程运行。在这种模式下，允许有多个应用程序来访问同一个Derby数据库</li>
</ul>
</li>
<li>官方网址：<a href="http://db.apache.org/derby/" target="_blank" rel="external">http://db.apache.org/derby/</a>。目前最新版本为<code>10.13.1.1</code>(需要jdk1.8)</li>
</ol>
<h2 id="安装与运行"><a href="#安装与运行" class="headerlink" title="安装与运行"></a>安装与运行</h2><ol>
<li>下载压缩包到本地解压即可，如根目录为：<code>D:\java\db-derby-10.13.1.1-bin</code></li>
<li>设置<code>DERBY_HOME</code>：<code>set DERBY_HOME=D:\java\db-derby-10.13.1.1-bin</code></li>
<li>运行<code>setEmbeddedCP.bat</code>设置<code>CLASSPATH</code>：<code>D:\derby\db-derby-10.X.Y.0-bin\bin&gt;setEmbeddedCP.bat</code></li>
<li>运行<code>ij.bat</code>查看ij版本：<code>D:\derby\db-derby-10.X.Y.0-bin\bin&gt;ij.bat</code>（退出ij：<code>ij&gt; quit;</code>）</li>
<li>启动derby服务：<code>D:\derby\db-derby-10.X.Y.0-bin\bin&gt;startNetworkServer.bat</code>（默认使用端口1527）</li>
</ol>
<h2 id="基本sql举例"><a href="#基本sql举例" class="headerlink" title="基本sql举例"></a>基本sql举例</h2><blockquote>
<p>文档：%DERBY_HOME%/docs/html/getstart/index.html 中 Creating a Derby database and running SQL statements</p>
</blockquote>
<ol>
<li>运行<code>ij.bat</code></li>
<li>创建数据库：<code>connect &#39;jdbc:derby:mytest;create=true;user=root;password=root&#39;;</code><ul>
<li><code>create=true</code>表示当数据库mytest不存在时自动创建一个。（此时会看到bin目录下多一个mytest文件夹，里面即为数据文件）</li>
<li><code>user=root;password=root</code>表示创建数据库后，登录该数据库的用户名密码。derby的用户名密码是在创建数据库的时候设置的。如果不填则不需用户名也可登录</li>
</ul>
</li>
<li>创建表：<code>create table mytable (id int primary key, name varchar(12));</code></li>
<li>新增数据：<code>insert into mytable values (10,&#39;ten&#39;),(20,&#39;twenty&#39;),(30,&#39;thirty&#39;);</code></li>
<li>查询数据：<code>select * from mytable where id=20;</code></li>
</ol>
<h2 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h2><ol>
<li>使用客户端时，需要的jar包为：<code>%DERBY_HOME%/lib/derbyclient.jar</code></li>
<li>迷你型客户端：<code>sqleonardo</code> 纯java编写，并开源。<a href="/data/download/sqleonardo.zip">客户端和源码</a></li>
<li>增强版：<code>squirrel-sql-3.7.1-standard.jar</code> <a href="http://www.squirrelsql.org/#installation" target="_blank" rel="external">官网下载</a>，<a href="http://www.jb51.net/database/467890.html" target="_blank" rel="external">jb51</a><ul>
<li>driver使用上述jar包</li>
<li>url：<code>jdbc:derby://127.0.0.1:1527/mytest</code></li>
</ul>
</li>
</ol>
<hr>
]]></content>
      
        <categories>
            
            <category> extend </category>
            
        </categories>
        
        
        <tags>
            
            <tag> db </tag>
            
            <tag> apache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu]]></title>
      <url>/2016/11/20/linux/ubuntu/</url>
      <content type="html"><![CDATA[<h2 id="Ubuntu介绍"><a href="#Ubuntu介绍" class="headerlink" title="Ubuntu介绍"></a>Ubuntu介绍</h2><ol>
<li><code>Ubuntu</code>（乌班图）是一个以桌面应用为主的<code>Linux</code>操作系统，是比较流行的一款linux桌面系统，还有如：<code>Ubuntu</code>是属于<code>Debian</code>系列、<code>CentOS</code>则是属于<code>Redhat</code>系列</li>
<li>Ubuntu下载地址：<a href="http://releases.ubuntu.com/" target="_blank" rel="external">http://releases.ubuntu.com/</a></li>
<li>本文以<code>Ubuntu 16.04.1 LTS</code>为例记录U盘、硬盘安装方法(windows安装类似)</li>
</ol>
<h2 id="Bios、分区、MBR"><a href="#Bios、分区、MBR" class="headerlink" title="Bios、分区、MBR"></a>Bios、分区、MBR</h2><ol>
<li>设置电脑U盘启动<ul>
<li>我在电脑启动时按F12即可进入Bios界面（进入Bios的快捷键一般为ESC/F1/F11/F12等，可以网上查询电脑型号对应的启动Bios快捷键）</li>
<li>找到<code>Boot</code>选项(或者<code>启动选项</code>等字眼)，调整<code>USB</code>相关的选项到顶部(即优先U盘或者移动硬盘启动)</li>
</ul>
</li>
<li>电脑分区 <a href="[https://zhidao.baidu.com/question/512380327.html](https://zhidao.baidu.com/question/512380327.html)">^1</a><ul>
<li>windows进入分区界面：右键我的电脑 -&gt; 管理 -&gt; 存储 -&gt; 磁盘管理<ul>
<li>扩展卷：将未使用的磁盘扩展到当前卷</li>
<li>压缩卷：将当前卷未使用的空间压缩一定大小为未使用磁盘</li>
</ul>
</li>
<li>硬盘分区一般只能有4个主分区，其他都为逻辑分区，打开磁盘管理，根据图示，一般可从做到右获取到分区的表达方式<ul>
<li><code>(hd0, 1)</code> 表示第一块硬盘第二主分区; <code>(hd1, 4)</code> 表示第二块硬盘的第一逻辑分区(如移动硬盘，不论硬盘是否达到了4个主分区，逻辑分区都是从4开始计算)</li>
</ul>
</li>
<li>linux上对磁盘和分区的命名<ul>
<li><code>hda</code> 一般是指IDE接口的硬盘，hda一般指第一块硬盘，类似的有hdb,hdc等</li>
<li><code>sda</code> 一般是指SATA接口的硬盘，sda一般指第一块硬盘，类似的有sdb,sdc等</li>
<li>现在的内核都会把硬盘，移动硬盘，U盘之类的识别为sdX的形式</li>
<li>分区同上，4个主分区，其他为逻辑分区。但是linux上<code>sda1</code>才表示为第一主分区，以此类推</li>
</ul>
</li>
</ul>
</li>
<li><code>MBR</code>: Master Boot Record. 即主引导记录，常被叫做引导程序 <a href="[http://www.2cto.com/os/201202/120564.html](http://www.2cto.com/os/201202/120564.html)">^2</a><ul>
<li>操作系统启动过程中有 一个很重要的引导程序——MBR。MBR是由三段组成的其中最重要的两段：是由446个字节组成的boot locader（引导加载器），和64个字节的分区表。在MBR的446字节也就是boot locader这段程序对于引导操作系统很重要。Linux中有两种boot locader可选，一种是LILO,一种就是GRUB。LILO现在已不用了。现在主要是使用GRUB来引导</li>
<li>GRUB是两段式的引导，第一阶段称为stage1,是存放在MBR中，主要来引导第二阶段stage2 这段主要放在/boot/grub/中的执行程序，主要是grub.conf这个文件</li>
</ul>
</li>
<li>文件系统<ul>
<li><code>NTFS</code> 为windows专用文件，具有良好的加密性，由于<code>FAT</code>、<code>FAT32</code>(linux可以失败)</li>
<li><code>EXT4</code> 为Linux系统下的日志文件系统，是ext2、ext3的后续版本</li>
</ul>
</li>
</ol>
<h2 id="Ubuntu安装"><a href="#Ubuntu安装" class="headerlink" title="Ubuntu安装"></a>Ubuntu安装</h2><p>Ubuntu安装方式分为两种：物理安装和虚拟安装。</p>
<ul>
<li>物理安装：LiveCD、U盘、硬盘(包括移动硬盘)</li>
<li>虚拟安装：WUBI、虚拟机。缺点：需要依赖于主系统，如windows</li>
</ul>
<h3 id="U盘安装-3"><a href="#U盘安装-3" class="headerlink" title="U盘安装 ^3"></a>U盘安装 <a href="[http://www.linuxidc.com/Linux/2014-10/108402.htm](http://www.linuxidc.com/Linux/2014-10/108402.htm)">^3</a></h3><ol>
<li>首先下载好ubuntu64位镜像文件<code>ubuntu-16.04.1-desktop-amd64.iso</code>（进入<a href="http://releases.ubuntu.com/16.04/" target="_blank" rel="external">http://releases.ubuntu.com/16.04/</a>，找到<code>64-bit PC (AMD64) desktop image</code>）</li>
<li>MD5校验：防止下载文件损坏（找到上述网址中的<code>MD5SUMS</code>文件，即可看到<code>17643c29e3c4609818f26becf76d29a3 *ubuntu-16.04.1-desktop-amd64.iso</code>）</li>
<li>下载安装<code>UltraISO</code>，无需注册可以一直试用</li>
<li>打开<code>UltraISO</code> -&gt; 文件 -&gt; 打开 -&gt; 选择ubuntu的iso镜像文件 -&gt; 启动 -&gt; 写入硬盘映像(硬盘驱动器选择U盘，写入方式USB-HDD+) -&gt; 写入(2分钟左右)。此时U盘已经刻录好系统</li>
<li>将硬盘腾出一个未使用的空间，大小自己定义</li>
<li>Bios启动 -&gt; 进入到刻录的U盘系统 -&gt; <code>Install Ubuntu</code>（或者选择使用而不安装，进入之后还是可以安装） -&gt; 点击桌面的<code>安装Ubuntu 16.04.1 LTS</code>进行安装 -&gt; 前面一直下一步，到安装类型选择“其他选项”（可以自己创建调整分区）</li>
<li>选择“空闲”的磁盘，双击进行分区，主要分3个区<code>/</code>、<code>swap</code>、<code>/home</code>（还有其他分区方案）<ul>
<li><code>/</code>：根据磁盘大小，我500G的磁盘 / 设置成200G。主分区，文件类型为EXT4，挂载点<code>/</code></li>
<li><code>swap</code>：大小&lt;2G。逻辑分区，文件类型为交换空间，挂载点无</li>
<li><code>/home</code>：大小为剩余磁盘。逻辑分区，文件类型为EXT4，挂载点<code>/home</code></li>
</ul>
</li>
<li>安装启动引导的设备：选择<code>/</code>分区，如果有<code>/boot</code>分区则选择<code>/boot</code>分区</li>
<li>一路下一步即可安装完成，重新启动即可。</li>
</ol>
<h3 id="硬盘安装-4"><a href="#硬盘安装-4" class="headerlink" title="硬盘安装 ^4"></a>硬盘安装 <a href="[http://v.youku.com/v_show/id_XMzEwODg2Njk2.html?f=16157628&amp;from=y1.2-3.2](http://v.youku.com/v_show/id_XMzEwODg2Njk2.html?f=16157628&amp;from=y1.2-3.2)">^4</a></h3><ol>
<li><p>下载<code>EasyBCD</code> -&gt; 安装后打开 -&gt; 添加新条目 -&gt; NeoGrub -&gt; 安装 -&gt; 配置 -&gt; 在打开的配置文件（C:/NST/menu.lst）中写入如下代码。其中ro只读，splash显示启动画面；reboot重启；halt关机；<a href="[http://www.njliaohua.com/lhd_01ng13y9qv7k6x46aj4e_11.html](http://www.njliaohua.com/lhd_01ng13y9qv7k6x46aj4e_11.html)">^6</a> (hd0,0) 一般会是表示C盘，实际按照上述知识自行配置</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">title Install Ubuntu</div><div class="line">root (hd0,0)</div><div class="line">kernel (hd0,0)/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-16.04.1-desktop-amd64.iso ro splash  locale=zh_CN.UTF-8</div><div class="line">initrd (hd0,0)/initrd.lz</div><div class="line">title reboot</div><div class="line">reboot</div><div class="line">title halt</div><div class="line">halt</div></pre></td></tr></table></figure>
</li>
<li><p>将<code>ubuntu-16.04.1-desktop-amd64.iso</code>中casper文件夹下的initrd.lz和vmlinuz.efi复制到C盘根目录，并将镜像也复制进去。</p>
</li>
<li>重启电脑，启动界面选择<code>NeoGrub</code></li>
<li>如果成功则会进入到buntu的桌面，首先<code>Ctrl+Alt+T</code>打开终端打开终端，运行<code>sudo umount -l /isodevice</code>去掉挂载的镜像文件</li>
<li>安装U盘安装进行后续操作</li>
</ol>
<h3 id="移动硬盘安装-7"><a href="#移动硬盘安装-7" class="headerlink" title="移动硬盘安装 ^7"></a>移动硬盘安装 <a href="[http://forum.ubuntu.org.cn/viewtopic.php?p=149124#149124](http://forum.ubuntu.org.cn/viewtopic.php?p=149124#149124)">^7</a></h3><p>实况记录</p>
<ol>
<li>可用U盘中刻录的系统进行移动硬盘安装</li>
<li>移动硬盘如果已经分区了，则最后留出前面一段装Ubuntu系统，防止启动时引导不成功，</li>
<li>如第一段500G未分配，第二段1500G为NTFS文件系统，且电脑只有一块内置硬盘，分区按照上述分区<ul>
<li>分好区后，<code>/</code>显示为<code>/dev/sdb2</code>；<code>swap</code>显示为<code>/dev/sdb5</code>；<code>/home</code>显示为<code>/dev/sdb6</code></li>
<li>于是将安装启动引导的设备选择为<code>/dev/sdb2</code>。如果选择内置硬盘，则标识通过Grub来启动Ubuntu或者windows，当拔掉移动硬盘可以windows无法启动。选择<code>/dev/sdb2</code>则需要按照通过EasyBCD等程序进行引导启动Ubuntu</li>
<li>此时使用电脑<code>compac 14</code>启动无法直接进入Ubuntu系统，需要按<code>F9</code>选择启动项(已经在Bios中设置了启动优先级也无效)<ul>
<li>选择Efi启动可以（Efi -&gt; ubuntu -&gt; grubx64.efi）</li>
<li>此时启动项中还会多出一个ubuntu(TS…..)，直接选择即可启动</li>
<li>选择移动硬盘无法启动，按照文章 <a href="[http://forum.ubuntu.org.cn/viewtopic.php?p=149124#149124](http://forum.ubuntu.org.cn/viewtopic.php?p=149124#149124)">^7</a> 可以解决此问题，但是仍然需要按<code>ESC -&gt; F9</code>进行选择 (结合文章 <a href="[http://www.educity.cn/linux.1589874.html](http://www.educity.cn/linux.1589874.html)">^8</a> )。测试时必须将<code>grldr</code>放在<code>NTFS</code>那个分区，<code>menu.lst</code>可放在<code>NTFS</code>分区或者<code>sdb2</code>即根分区</li>
</ul>
</li>
<li>按照文章 <a href="[http://forum.ubuntu.org.cn/viewtopic.php?p=149124#149124](http://forum.ubuntu.org.cn/viewtopic.php?p=149124#149124)">^7</a> <code>三、为移动使用做准备</code> 操作失败，且附加中的<code>grldr</code>文件不适用，可下载此文件 <a href="http://download.csdn.net/detail/hcx25909/5464025" target="_blank" rel="external">http://download.csdn.net/detail/hcx25909/5464025</a></li>
</ul>
</li>
<li><p>(2017-02-16已解决，见下文) 使用电脑<code>Tinkpad E425</code>都未安装成功，U盘安装卡在logo页面；硬盘安装则报错<code>Error 13 invalid or unsupported executable format</code>；对于已经安装好的移动硬盘也是无法启动，于是利用U盘镜像进入到<code>Grub</code>命令行(也连接了移动硬盘)，运行一下命令仍然卡在命令行启动的最后一步。其中进入命令行后可输入<code>root (hd</code>，按<code>Tab</code>键进行提示磁盘</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root (hd1,1)</div><div class="line">kernel (hd1,1)/vmlinuz root=/dev/sdb2 ro splash</div><div class="line">initrd (hd1,1)/initrd.img</div><div class="line">boot</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>2017-02-16解决ThinkPad E425在安装Ubuntu卡在安装界面的问题 [^9]<ul>
<li>原因：主板BIOS设置中设置为双显卡切换的模式的时候，会出现这个问题</li>
<li>解决方案：开机长按F1，进入BIOS设置。在config-&gt;Display-&gt;Graphics Device 设置显卡的模式为集成显卡 Integrated Graphics</li>
</ul>
</li>
<li>2017-04-24解决ubuntu启动长时间黑屏问题<ul>
<li>自己的笔记本是thinkpad e425，双显卡，装ubuntu一直卡在启动页面上，后来在bios中关闭了独显，所以成功将ubuntu装上<br>之后，开机时候直至显示用户登陆的页面时，屏幕都是黑屏</li>
<li>安装 v86d 和 hwinfo，然后查看显卡支持的分辨率<ul>
<li><code>sudo apt-get install v86d hwinfo</code></li>
<li><code>sudo hwinfo --framebuffer</code></li>
</ul>
</li>
<li>编辑<code>/etc/default/grub</code>，添加<code>GRUB_GFXPAYLOAD_LINUX=1024×768x24</code></li>
<li>启用framebuffer：<code>echo FRAMEBUFFER=y | sudo tee /etc/initramfs-tools/conf.d/splash</code></li>
<li>更新设置<ul>
<li><code>sudo update-grub</code></li>
<li><code>sudo update-grub2</code></li>
<li><code>sudo update-initramfs -u</code></li>
</ul>
</li>
<li>重启</li>
</ul>
</li>
</ol>
<hr>
<p>参考文章</p>
<p>[^9]: <a href="http://blog.csdn.net/u014466412/article/details/53666122" target="_blank" rel="external">ThinkPad E425在安装Ubuntu卡在安装界面</a></p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> system </tag>
            
            <tag> install </tag>
            
            <tag> disk </tag>
            
            <tag> bois </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gitlab]]></title>
      <url>/2016/11/20/arch/gitlab/</url>
      <content type="html"><![CDATA[<h2 id="gitlab介绍"><a href="#gitlab介绍" class="headerlink" title="gitlab介绍"></a>gitlab介绍</h2><p><a href="https://docs.gitlab.com/omnibus/README.html" target="_blank" rel="external">gitlab官方文档</a>。如<a href="https://about.gitlab.com/downloads/#centos7" target="_blank" rel="external">centos7安装</a></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>重新启动：<code>sudo gitlab-ctl restart</code></li>
<li>重新配置：<code>sudo gitlab-ctl reconfigure</code>（运行中的项目，重新配置后，数据也不会丢失）</li>
</ul>
<h2 id="问题集锦"><a href="#问题集锦" class="headerlink" title="问题集锦"></a>问题集锦</h2><ul>
<li>访问项目首页(如：<a href="http://114.55.888.888/)，结果页面不显示，地址栏的地址变成" target="_blank" rel="external">http://114.55.888.888/)，结果页面不显示，地址栏的地址变成</a> <a href="http://gitlab/users/sign_in" target="_blank" rel="external">http://gitlab/users/sign_in</a><ul>
<li>尝试方法：首先确保<code>/etc/gitlab/gitlab.rb</code>中的设置了<code>external_url</code>（如：<code>external_url &quot;http://www.example.com&quot;</code>），如果设置了，运行命令重新配置（<code>sudo gitlab-ctl reconfigure</code>，无需重启）。</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> arch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[wiki]]></title>
      <url>/2016/10/27/extend/wiki/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原文地址：<a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="external">https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md</a> <strong>branch:</strong> <code>2e467c3</code></p>
</blockquote>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#语言无关">语言无关</a><ul>
<li><a href="#ide">IDE</a></li>
<li><a href="#mysql">MySQL</a></li>
<li><a href="#nosql">NoSQL</a></li>
<li><a href="#postgresql">PostgreSQL</a></li>
<li><a href="#web">Web</a></li>
<li><a href="#web服务器">WEB服务器</a></li>
<li><a href="#其它">其它</a></li>
<li><a href="#函数式概念">函数式概念</a></li>
<li><a href="#分布式系统">分布式系统</a></li>
<li><a href="#在线教育">在线教育</a></li>
<li><a href="#大数据">大数据</a></li>
<li><a href="#操作系统">操作系统</a></li>
<li><a href="#数据库">数据库</a></li>
<li><a href="#智能系统">智能系统</a></li>
<li><a href="#正则表达式">正则表达式</a></li>
<li><a href="#版本控制">版本控制</a></li>
<li><a href="#程序员杂谈">程序员杂谈</a></li>
<li><a href="#管理和监控">管理和监控</a></li>
<li><a href="#编程艺术">编程艺术</a></li>
<li><a href="#编译原理">编译原理</a></li>
<li><a href="#编辑器">编辑器</a></li>
<li><a href="#计算机图形学">计算机图形学</a></li>
<li><a href="#设计模式">设计模式</a></li>
<li><a href="#软件开发方法">软件开发方法</a></li>
<li><a href="#项目相关">项目相关</a></li>
</ul>
</li>
<li><a href="#语言相关">语言相关</a><ul>
<li><a href="#android">Android</a></li>
<li><a href="#awk">AWK</a></li>
<li><a href="#c">C</a></li>
<li><a href="#c-sharp">C#</a></li>
<li><a href="#c-1">C++</a></li>
<li><a href="#coffeescript">CoffeeScript</a></li>
<li><a href="#dart">Dart</a></li>
<li><a href="#elasticsearch">Elasticsearch</a></li>
<li><a href="#elixir">Elixir</a></li>
<li><a href="#erlang">Erlang</a></li>
<li><a href="#fortran">Fortran</a></li>
<li><a href="#golang">Golang</a></li>
<li><a href="#haskell">Haskell</a></li>
<li><a href="#html--css">HTML / CSS</a></li>
<li><a href="#http">HTTP</a></li>
<li><a href="#ios">iOS</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#javascript">JavaScript</a></li>
<li><a href="#latex">LaTeX</a></li>
<li><a href="#lisp">LISP</a></li>
<li><a href="#lua">Lua</a></li>
<li><a href="#markdown">Markdown</a></li>
<li><a href="#nodejs">Node.js</a></li>
<li><a href="#perl">Perl</a></li>
<li><a href="#php">PHP</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#r">R</a></li>
<li><a href="#restructuredtext">reStructuredText</a></li>
<li><a href="#ruby">Ruby</a></li>
<li><a href="#rust">Rust</a></li>
<li><a href="#scala">Scala</a></li>
<li><a href="#scheme">Scheme</a></li>
<li><a href="#shell">Shell</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#vim">Vim</a></li>
<li><a href="#visual-prolog">Visual Prolog</a></li>
</ul>
</li>
</ul>
<h2 id="语言无关"><a href="#语言无关" class="headerlink" title="语言无关"></a>语言无关</h2><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ul>
<li><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a></li>
</ul>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul>
<li><a href="http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html" target="_blank" rel="external">21分钟MySQL入门教程</a></li>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="external">MySQL索引背后的数据结构及算法原理</a></li>
</ul>
<h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><ul>
<li><a href="http://disquebook.com" target="_blank" rel="external">Disque 使用教程</a></li>
<li><a href="http://neo4j.tw" target="_blank" rel="external">Neo4j .rb 中文資源</a></li>
<li><a href="http://docs.neo4j.org.cn" target="_blank" rel="external">Neo4j 简体中文手册 v1.8</a></li>
<li><a href="http://redisdoc.com" target="_blank" rel="external">Redis 命令参考</a></li>
<li><a href="http://redisbook.com" target="_blank" rel="external">Redis 设计与实现</a></li>
<li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md" target="_blank" rel="external">The Little MongoDB Book</a></li>
<li><a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md" target="_blank" rel="external">The Little Redis Book</a></li>
<li><a href="https://github.com/huangz1990/annotated_redis_source" target="_blank" rel="external">带有详细注释的 Redis 2.6 代码</a></li>
<li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="external">带有详细注释的 Redis 3.0 代码</a></li>
</ul>
<h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><ul>
<li><a href="http://works.jinbuguo.com/postgresql/menu823/index.html" target="_blank" rel="external">PostgreSQL 8.2.3 中文文档</a></li>
<li><a href="http://www.postgres.cn/docs/9.3/index.html" target="_blank" rel="external">PostgreSQL 9.3.1 中文文档</a></li>
</ul>
<h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><ul>
<li><a href="https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details" target="_blank" rel="external">3 Web Designs in 3 Weeks</a></li>
<li><a href="https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools" target="_blank" rel="external">Chrome 开发者工具中文手册</a></li>
<li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="external">Chrome扩展开发文档</a></li>
<li><a href="https://github.com/phodal/growth-ebook" target="_blank" rel="external">Growth: 全栈增长工程师指南</a></li>
<li><a href="http://www.gruntjs.net" target="_blank" rel="external">Grunt中文文档</a></li>
<li><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="external">Gulp 入门指南</a></li>
<li><a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="external">gulp中文文档</a></li>
<li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="external">HTTP 接口设计指北</a></li>
<li><a href="http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1" target="_blank" rel="external">HTTP/2.0 中文翻译</a></li>
<li><a href="https://www.gitbook.com/book/ye11ow/http2-explained/details" target="_blank" rel="external">http2讲解</a></li>
<li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external">JSON风格指南</a></li>
<li><a href="http://man.lupaworld.com/content/network/wireshark/index.html" target="_blank" rel="external">Wireshark用户手册</a></li>
<li><a href="https://community.emc.com/thread/194901" target="_blank" rel="external">一站式学习Wireshark</a></li>
<li><a href="http://www.20thingsilearned.com/zh-CN/home" target="_blank" rel="external">关于浏览器和网络的 20 项须知</a></li>
<li><a href="http://coderlmn.github.io/code-standards/" target="_blank" rel="external">前端代码规范 及 最佳实践</a></li>
<li><a href="https://github.com/fouber/blog/issues/2" target="_blank" rel="external">前端开发体系建设日记</a></li>
<li><a href="https://github.com/hacke2/hacke2.github.io/issues/1" target="_blank" rel="external">前端资源分享（一）</a></li>
<li><a href="https://github.com/hacke2/hacke2.github.io/issues/3" target="_blank" rel="external">前端资源分享（二）</a></li>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
<li><a href="http://jinlong.github.io/2013/08/29/devtoolsecrets/" target="_blank" rel="external">浏览器开发工具的秘密</a></li>
<li><a href="https://github.com/AlloyTeam/Mars" target="_blank" rel="external">移动Web前端知识库</a></li>
<li><a href="https://github.com/hoosin/mobile-web-favorites" target="_blank" rel="external">移动前端开发收藏夹</a></li>
</ul>
<h3 id="WEB服务器"><a href="#WEB服务器" class="headerlink" title="WEB服务器"></a>WEB服务器</h3><ul>
<li><a href="http://works.jinbuguo.com/apache/menu22/index.html" target="_blank" rel="external">Apache 中文手册</a></li>
<li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="external">Nginx开发从入门到精通</a> (淘宝团队出品)</li>
<li><a href="http://www.ttlsa.com/nginx/nginx-stu-pdf/" target="_blank" rel="external">Nginx教程从入门到精通</a> (PDF版本，运维生存时间出品)</li>
</ul>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul>
<li><a href="https://softwaredownload.gitbooks.io/openwrt-fanqiang/content/" target="_blank" rel="external">OpenWrt智能、自动、透明翻墙路由器教程</a></li>
<li><a href="https://community.emc.com/docs/DOC-16067" target="_blank" rel="external">SAN 管理入门系列</a></li>
<li><a href="http://sketchcn.com/sketch-chinese-user-manual.html#introduce" target="_blank" rel="external">Sketch 中文手册</a></li>
<li><a href="http://ifeve.com/perfbook/" target="_blank" rel="external">深入理解并行编程</a></li>
</ul>
<h3 id="函数式概念"><a href="#函数式概念" class="headerlink" title="函数式概念"></a>函数式概念</h3><ul>
<li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="external">傻瓜函数编程</a></li>
</ul>
<h3 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h3><ul>
<li><a href="http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf" target="_blank" rel="external">走向分布式</a> (PDF)</li>
</ul>
<h3 id="在线教育"><a href="#在线教育" class="headerlink" title="在线教育"></a>在线教育</h3><ul>
<li><a href="http://edu.51cto.com" target="_blank" rel="external">51CTO学院</a></li>
<li><a href="https://www.codecademy.com/?locale_code=zh" target="_blank" rel="external">Codecademy</a></li>
<li><a href="https://www.codeschool.com" target="_blank" rel="external">CodeSchool</a></li>
<li><a href="https://www.coursera.org/courses?orderby=upcoming&amp;lngs=zh" target="_blank" rel="external">Coursera</a></li>
<li><a href="https://learnxinyminutes.com" target="_blank" rel="external">Learn X in Y minutes</a> (数十种语言快速入门教程)</li>
<li><a href="https://www.shiyanlou.com" target="_blank" rel="external">shiyanlou</a></li>
<li><a href="https://teamtreehouse.com" target="_blank" rel="external">TeamTreeHouse</a></li>
<li><a href="https://www.udacity.com" target="_blank" rel="external">Udacity</a></li>
<li><a href="https://www.xuetangx.com" target="_blank" rel="external">xuetangX</a></li>
<li><a href="http://www.imooc.com/course/list" target="_blank" rel="external">慕课网</a> (丰富的移动端开发、php开发、web前端、html5教程以及css3视频教程等课程资源)</li>
<li><a href="http://www.jikexueyuan.com" target="_blank" rel="external">极客学院</a></li>
<li><a href="http://www.jisuanke.com" target="_blank" rel="external">计蒜客</a></li>
</ul>
<h3 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h3><ul>
<li><a href="https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/" target="_blank" rel="external">Spark 编程指南简体中文版</a></li>
<li><a href="https://code.csdn.net/CODE_Translation/spark_matei_phd" target="_blank" rel="external">大型集群上的快速和通用数据处理架构</a></li>
<li><a href="https://github.com/Flowerowl/Big-Data-Resources" target="_blank" rel="external">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li>
<li><a href="https://github.com/linyiqun/DataMiningAlgorithm" target="_blank" rel="external">数据挖掘中经典的算法实现和详细的注释</a></li>
<li><a href="http://dataminingguide.books.yourtion.com" target="_blank" rel="external">面向程序员的数据挖掘指南</a></li>
</ul>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul>
<li><a href="http://man.chinaunix.net/linux/debian/reference/reference.zh-cn.html" target="_blank" rel="external">Debian 参考手册 </a></li>
<li><a href="https://github.com/yeasy/docker_practice" target="_blank" rel="external">Docker —— 从入门到实践</a></li>
<li><a href="https://github.com/widuu/chinese_docker" target="_blank" rel="external">Docker中文指南</a></li>
<li><a href="http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1" target="_blank" rel="external">Docker入门实战</a></li>
<li><a href="http://www.freebsd.org/doc/zh_CN.UTF-8/books/handbook/" target="_blank" rel="external">FreeBSD 使用手册</a></li>
<li><a href="http://freeradius.akagi201.org" target="_blank" rel="external">FreeRADIUS新手入门</a></li>
<li><a href="https://tinylab.gitbooks.io/linux-doc/content/zh-cn/" target="_blank" rel="external">Linux Documentation (中文版)</a></li>
<li><a href="http://happypeter.github.io/LGCB/book/" target="_blank" rel="external">Linux Guide for Complete Beginners</a></li>
<li><a href="http://works.jinbuguo.com/lfs/lfs62/index.html" target="_blank" rel="external">Linux 构建指南</a></li>
<li><a href="http://sourceforge.net/projects/elpi/" target="_blank" rel="external">Linux 系统高级编程</a></li>
<li><a href="https://github.com/me115/linuxtools_rst" target="_blank" rel="external">Linux工具快速教程</a></li>
<li><a href="https://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="external">Mac 开发配置手册</a></li>
<li><a href="http://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="external">Operating Systems: Three Easy Pieces</a></li>
<li><a href="http://billie66.github.io/TLCL/index.html" target="_blank" rel="external">The Linux Command Line</a> (中英文版)</li>
<li><a href="http://wiki.ubuntu.org.cn/UbuntuManual" target="_blank" rel="external">Ubuntu 参考手册 </a></li>
<li><a href="https://www.gitbook.com/book/objectkuan/ucore-docs/details" target="_blank" rel="external">uCore Lab: Operating System Course in Tsinghua University</a></li>
<li><a href="http://cb.vu/unixtoolbox_zh_CN.xhtml" target="_blank" rel="external">UNIX TOOLBOX</a></li>
<li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="external">命令行的艺术</a></li>
<li><a href="https://tinylab.gitbooks.io/elinux/content/zh/" target="_blank" rel="external">嵌入式 Linux 知识库 (eLinux.org 中文版)</a></li>
<li><a href="http://i.linuxtoy.org/docs/guide/index.html" target="_blank" rel="external">开源世界旅行手册</a></li>
<li><a href="http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html" target="_blank" rel="external">深入分析Linux内核源码</a></li>
<li><a href="https://github.com/tobegit3hub/understand_linux_process" target="_blank" rel="external">理解Linux进程</a></li>
<li><a href="http://vbird.dic.ksu.edu.tw/linux_basic/linux_basic.php" target="_blank" rel="external">鸟哥的 Linux 私房菜 基础学习篇</a></li>
<li><a href="http://vbird.dic.ksu.edu.tw/linux_server/" target="_blank" rel="external">鸟哥的 Linux 私房菜 服务器架设篇</a></li>
</ul>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li><a href="http://redisbook.com" target="_blank" rel="external">Redis 设计与实现</a></li>
<li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn" target="_blank" rel="external">The Little MongoDB Book 中文版</a></li>
</ul>
<h3 id="智能系统"><a href="#智能系统" class="headerlink" title="智能系统"></a>智能系统</h3><ul>
<li><a href="https://github.com/phodal/designiot" target="_blank" rel="external">一步步搭建物联网系统</a></li>
</ul>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a></li>
</ul>
<h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">Git - 简易指南</a></li>
<li><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="external">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li>
<li><a href="http://gitbook.liuhui998.com" target="_blank" rel="external">Git Community Book 中文版</a></li>
<li><a href="http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="external">git-flow 备忘清单</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="external">Git magic</a></li>
<li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/" target="_blank" rel="external">Git Magic</a></li>
<li><a href="http://gitref.justjavac.com" target="_blank" rel="external">Git 参考手册</a></li>
<li><a href="https://github.com/waylau/github-help" target="_blank" rel="external">Github帮助文档</a></li>
<li><a href="https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/" target="_blank" rel="external">GitHub秘籍</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a> （本文由 <a href="http://weibo.com/liaoxuefeng" target="_blank" rel="external">@廖雪峰</a> 创作，如果觉得本教程对您有帮助，可以去 <a href="https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437" target="_blank" rel="external">iTunes</a> 购买）</li>
<li><a href="https://github.com/gotgit/gotgithub" target="_blank" rel="external">Got GitHub</a></li>
<li><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="external">GotGitHub</a></li>
<li><a href="http://bucunzai.net/hginit/" target="_blank" rel="external">HgInit (中文版)</a></li>
<li><a href="https://www.mercurial-scm.org/wiki/ChineseTutorial" target="_blank" rel="external">Mercurial 使用教程</a></li>
<li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Pro Git</a></li>
<li><a href="https://www.gitbook.com/book/0532/progit/details" target="_blank" rel="external">Pro Git 中文版</a> (整理在gitbook上)</li>
<li><a href="http://svnbook.red-bean.com/nightly/zh/index.html" target="_blank" rel="external">svn 手册</a></li>
<li><a href="http://pcottle.github.io/learnGitBranching/" target="_blank" rel="external">学习 Git 分支</a> (点击右下角按钮可切换至简体及正体中文)</li>
<li><a href="http://igit.linuxtoy.org/index.html" target="_blank" rel="external">沉浸式学 Git</a></li>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">猴子都能懂的GIT入门</a></li>
</ul>
<h3 id="程序员杂谈"><a href="#程序员杂谈" class="headerlink" title="程序员杂谈"></a>程序员杂谈</h3><ul>
<li><a href="http://www.kancloud.cn/kancloud/a-programmer-prepares" target="_blank" rel="external">程序员的自我修养</a></li>
</ul>
<h3 id="管理和监控"><a href="#管理和监控" class="headerlink" title="管理和监控"></a>管理和监控</h3><ul>
<li><a href="https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details" target="_blank" rel="external">ElasticSearch 权威指南</a></li>
<li><a href="http://es.xiaoleilu.com" target="_blank" rel="external">Elasticsearch 权威指南（中文版）</a></li>
<li><a href="http://kibana.logstash.es" target="_blank" rel="external">ELKstack 中文指南</a></li>
<li><a href="https://github.com/chenryn/logstash-best-practice-cn" target="_blank" rel="external">Logstash 最佳实践</a></li>
<li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="external">Mastering Elasticsearch(中文版)</a></li>
<li><a href="http://bbs.konotes.org/workdoc/puppet-27/" target="_blank" rel="external">Puppet 2.7 Cookbook 中文版</a></li>
</ul>
<h3 id="编程艺术"><a href="#编程艺术" class="headerlink" title="编程艺术"></a>编程艺术</h3><ul>
<li><a href="http://read.douban.com/ebook/4972883/" target="_blank" rel="external">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)</li>
<li><a href="http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print" target="_blank" rel="external">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-by-July" target="_blank" rel="external">程序员编程艺术</a></li>
<li><a href="http://www.kancloud.cn/kancloud/intro-to-prog/52592" target="_blank" rel="external">编程入门指南</a></li>
</ul>
<h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><ul>
<li><a href="https://github.com/DeathKing/Learning-SICP" target="_blank" rel="external">《计算机程序的结构和解释》公开课 翻译项目</a></li>
</ul>
<h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ul>
<li><a href="http://exvim.github.io/docs-zh/intro/" target="_blank" rel="external">exvim–vim 改良成IDE项目</a></li>
<li><a href="https://github.com/vimcn/vimcdoc" target="_blank" rel="external">Vim中文文档</a></li>
<li><a href="https://github.com/yangyangwithgnu/use_vim_as_ide" target="_blank" rel="external">所需即所获：像 IDE 一样使用 vim</a></li>
<li><a href="http://learnvimscriptthehardway.onefloweroneworld.com" target="_blank" rel="external">笨方法学Vimscript 中译本</a></li>
</ul>
<h3 id="计算机图形学"><a href="#计算机图形学" class="headerlink" title="计算机图形学"></a>计算机图形学</h3><ul>
<li><a href="https://github.com/zilongshanren/opengl-tutorials" target="_blank" rel="external">OpenGL 教程</a></li>
</ul>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul>
<li><a href="http://blog.csdn.net/lovelion/article/details/17517213" target="_blank" rel="external">史上最全设计模式导学目录</a></li>
<li><a href="https://github.com/me115/design_patterns" target="_blank" rel="external">图说设计模式</a></li>
</ul>
<h3 id="软件开发方法"><a href="#软件开发方法" class="headerlink" title="软件开发方法"></a>软件开发方法</h3><ul>
<li><a href="https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn" target="_blank" rel="external">傻瓜函数编程</a> (《Functional Programming For The Rest of Us》中文版)</li>
<li><a href="http://www.infoq.com/cn/minibooks/scrum-xp-from-the-trenches" target="_blank" rel="external">硝烟中的 Scrum 和 XP</a></li>
</ul>
<h3 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h3><ul>
<li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external">GNU make 指南</a></li>
<li><a href="https://github.com/waylau/Gradle-2-User-Guide" target="_blank" rel="external">Gradle 2 用户指南</a></li>
<li><a href="http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2" target="_blank" rel="external">Gradle 中文使用文档</a></li>
<li><a href="http://local.joelonsoftware.com/wiki/Chinese_(Simplified" target="_blank" rel="external">Joel谈软件</a>)</li>
<li><a href="https://github.com/fool2fish/selenium-doc" target="_blank" rel="external">selenium 中文文档</a></li>
<li><a href="http://www.ituring.com.cn/book/1143" target="_blank" rel="external">开源软件架构</a></li>
<li><a href="http://article.yeeyan.org/view/2251/94882" target="_blank" rel="external">持续集成（第二版）</a> (译言网)</li>
<li><a href="http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81" target="_blank" rel="external">約耳談軟體(Joel on Software)</a></li>
<li><a href="https://github.com/ecomfe/spec" target="_blank" rel="external">编码规范</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-ap/" target="_blank" rel="external">让开发自动化系列专栏</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-cq/" target="_blank" rel="external">追求代码质量</a></li>
</ul>
<h2 id="语言相关"><a href="#语言相关" class="headerlink" title="语言相关"></a>语言相关</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><ul>
<li><a href="http://www.apkbus.com/design/index.html" target="_blank" rel="external">Android Design(中文版)</a></li>
<li><a href="https://github.com/CharonChui/AndroidNote" target="_blank" rel="external">Android Note(开发过程中积累的知识点)</a></li>
<li><a href="http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">Android6.0新特性详解</a></li>
<li><a href="http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android学习之路</a></li>
<li><a href="https://github.com/bboyfeiyu/android-tech-frontier" target="_blank" rel="external">Android开发技术前线(android-tech-frontier)</a></li>
<li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Google Android官方培训课程中文版</a></li>
<li>Google Material Design 正體中文版 (<a href="https://wcc723.gitbooks.io/google_design_translate/content/style-icons.html" target="_blank" rel="external">译本一</a> <a href="https://github.com/1sters/material_design_zh" target="_blank" rel="external">译本二</a>)</li>
<li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external">Material Design 中文版</a></li>
<li><a href="https://github.com/FX-Max/Point-of-Android" target="_blank" rel="external">Point-of-Android</a> Android 一些重要知识点解析整理</li>
</ul>
<h3 id="AWK"><a href="#AWK" class="headerlink" title="AWK"></a>AWK</h3><ul>
<li><a href="http://awk.readthedocs.org/en/latest/index.html" target="_blank" rel="external">awk中文指南</a></li>
<li><a href="https://github.com/wuzhouhui/awk" target="_blank" rel="external">awk程序设计语言</a></li>
</ul>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><ul>
<li><a href="http://c-faq-chn.sourceforge.net/ccfaq/ccfaq.html" target="_blank" rel="external">C 语言常见问题集</a></li>
<li><a href="http://doc.lellansin.com" target="_blank" rel="external">C/C++ 学习教程</a></li>
<li><a href="http://docs.linuxtone.org/ebooks/C&amp;CPP/c/" target="_blank" rel="external">Linux C 编程一站式学习</a></li>
<li><a href="https://github.com/limingth/NCCL" target="_blank" rel="external">新概念 C 语言教程</a></li>
</ul>
<h3 id="C-Sharp"><a href="#C-Sharp" class="headerlink" title="C Sharp"></a>C Sharp</h3><ul>
<li><a href="http://book.douban.com/subject/24827879/" target="_blank" rel="external">精通C#(第6版) </a></li>
</ul>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><ul>
<li><a href="https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md" target="_blank" rel="external">100个gcc小技巧</a></li>
<li><a href="https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md" target="_blank" rel="external">100个gdb小技巧</a></li>
<li><a href="https://tinylab.gitbooks.io/cbook/content/" target="_blank" rel="external">C 语言编程透视</a></li>
<li><a href="https://github.com/andycai/cprimer" target="_blank" rel="external">C/C++ Primer</a> - @andycai</li>
<li><a href="http://www.sunistudio.com/cppfaq/" target="_blank" rel="external">C++ FAQ LITE(中文版)</a></li>
<li><a href="https://github.com/Mooophy/Cpp-Primer" target="_blank" rel="external">C++ Primer 5th Answers</a></li>
<li><a href="https://github.com/wuye9036/CppTemplateTutorial" target="_blank" rel="external">C++ Template 进阶指南</a></li>
<li><a href="http://www.prglab.com/cms/" target="_blank" rel="external">C++ 基础教程</a></li>
<li><a href="https://chenxiaowei.gitbooks.io/cpp_concurrency_in_action/content/" target="_blank" rel="external">C++ 并发编程(基于C++11)</a></li>
<li><a href="https://github.com/forhappy/Cplusplus-Concurrency-In-Practice" target="_blank" rel="external">C++ 并发编程指南</a></li>
<li><a href="https://github.com/leeyiw/cgdb-manual-in-chinese" target="_blank" rel="external">CGDB中文手册</a></li>
<li><a href="http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf" target="_blank" rel="external">Cmake 实践</a> (PDF版)</li>
<li><a href="http://docs.huihoo.com/gnu/linux/gmake.html" target="_blank" rel="external">GNU make 指南</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="external">Google C++ 风格指南</a></li>
<li><a href="http://www.kuqin.com/qtdocument/tutorial.html" target="_blank" rel="external">QT 教程</a></li>
<li><a href="https://github.com/anjuke/zguide-cn" target="_blank" rel="external">ZMQ 指南</a></li>
<li><a href="http://www.ituring.com.cn/book/1203" target="_blank" rel="external">像计算机科学家一样思考（C++版)</a> (《How To Think Like a Computer Scientist: C++ Version》中文版)</li>
<li><a href="http://www.nowamagic.net/librarys/books/contents/c" target="_blank" rel="external">简单易懂的C魔法</a></li>
<li><a href="http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf" target="_blank" rel="external">跟我一起写Makefile(PDF)</a> (PDF)</li>
</ul>
<h3 id="CoffeeScript"><a href="#CoffeeScript" class="headerlink" title="CoffeeScript"></a>CoffeeScript</h3><ul>
<li><a href="http://coffee-script.org" target="_blank" rel="external">CoffeeScript 中文</a></li>
<li><a href="https://github.com/elrrrrrrr/coffeescript-style-guide/blob/master/README-ZH.md" target="_blank" rel="external">CoffeeScript 编程风格指南</a></li>
</ul>
<h3 id="Dart"><a href="#Dart" class="headerlink" title="Dart"></a>Dart</h3><ul>
<li><a href="http://dart.lidian.info/wiki/Language_Tour" target="_blank" rel="external">Dart 语言导览</a></li>
</ul>
<h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><ul>
<li><a href="https://github.com/looly/elasticsearch-definitive-guide-cn" target="_blank" rel="external">Elasticsearch 权威指南</a> （《Elasticsearch the definitive guide》中文版）</li>
<li><a href="http://kibana.logstash.es" target="_blank" rel="external">ELKstack 中文指南</a></li>
<li><a href="http://udn.yyuap.com/doc/mastering-elasticsearch/" target="_blank" rel="external">Mastering Elasticsearch(中文版)</a></li>
</ul>
<h3 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h3><ul>
<li><a href="https://github.com/Ljzn/ElixrGettingStartedChinese" target="_blank" rel="external">Elixir Getting Started 中文翻译</a></li>
<li><a href="https://elixirschool.com/cn/" target="_blank" rel="external">Elixir 编程语言教程</a> (Elixir School)</li>
<li><a href="https://github.com/Ljzn/MetaProgrammingInElixirChinese" target="_blank" rel="external">Elixir元编程与DSL 中文翻译</a></li>
<li><a href="https://mydearxym.gitbooks.io/phoenix-doc-in-chinese/content/" target="_blank" rel="external">Phoenix 框架中文文档</a></li>
</ul>
<h3 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h3><ul>
<li><a href="https://github.com/liancheng/cpie-cn" target="_blank" rel="external">Erlang 并发编程</a> (《Concurrent Programming in Erlang (Part I)》中文版)</li>
</ul>
<h3 id="Fortran"><a href="#Fortran" class="headerlink" title="Fortran"></a>Fortran</h3><ul>
<li><a href="http://micro.ustc.edu.cn/Fortran/ZJDing/" target="_blank" rel="external">Fortran77和90/95编程入门</a></li>
</ul>
<h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><ul>
<li><a href="http://www.hellogcc.org/effective_go.html" target="_blank" rel="external">Effective Go</a></li>
<li><a href="https://github.com/astaxie/build-web-application-with-golang" target="_blank" rel="external">Go Web 编程</a></li>
<li><a href="https://github.com/Unknwon/the-way-to-go_ZH_CN" target="_blank" rel="external">Go 入门指南</a> (《The Way to Go》中文版)</li>
<li><a href="https://github.com/golang-china/golangdoc.translations" target="_blank" rel="external">Go 官方文档翻译</a></li>
<li><a href="http://go-tour-zh.appsp0t.com" target="_blank" rel="external">Go 指南</a> (《A Tour of Go》中文版)</li>
<li><a href="https://github.com/songleo/the-little-go-book_ZH_CN" target="_blank" rel="external">Go 简易教程</a> (《<a href="https://github.com/karlseguin/the-little-go-book" target="_blank" rel="external">The Little Go Book</a>》中文版)</li>
<li><a href="https://github.com/Unknwon/go-fundamental-programming" target="_blank" rel="external">Go 编程基础</a></li>
<li><a href="https://github.com/polaris1119/The-Golang-Standard-Library-by-Example" target="_blank" rel="external">Go 语言标准库</a></li>
<li><a href="https://github.com/hyper-carrot/go_command_tutorial" target="_blank" rel="external">Go命令教程</a></li>
<li><a href="https://github.com/astaxie/Go-in-Action" target="_blank" rel="external">Go实战开发</a></li>
<li><a href="https://github.com/achun/Go-Blog-In-Action" target="_blank" rel="external">Go语言博客实践</a></li>
<li><a href="http://blog.csdn.net/dc_726/article/details/46565241" target="_blank" rel="external">Java程序员的Golang入门指南</a></li>
<li><a href="https://github.com/astaxie/NPWG_zh" target="_blank" rel="external">Network programming with Go 中文翻译版本</a></li>
<li><a href="http://gorevel.cn/docs/manual/index.html" target="_blank" rel="external">Revel 框架手册</a></li>
<li><a href="http://mikespook.com/learning-go/" target="_blank" rel="external">学习Go语言</a></li>
</ul>
<h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><ul>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-pg/" target="_blank" rel="external">实战 Groovy 系列</a></li>
</ul>
<h3 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h3><ul>
<li><a href="http://learnyoua.haskell.sg" target="_blank" rel="external">Haskell 趣学指南</a></li>
<li><a href="http://cnhaskell.com" target="_blank" rel="external">Real World Haskell 中文版</a></li>
</ul>
<h3 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML / CSS"></a>HTML / CSS</h3><ul>
<li><a href="https://github.com/waylau/css3-tutorial" target="_blank" rel="external">CSS3 Tutorial 《CSS3 教程》</a></li>
<li><a href="http://css.doyoe.com" target="_blank" rel="external">CSS参考手册</a></li>
<li><a href="http://yanxyz.github.io/emmet-docs/" target="_blank" rel="external">Emmet 文档</a></li>
<li><a href="http://www.w3school.com.cn/html5/" target="_blank" rel="external">HTML5 教程</a></li>
<li><a href="http://codeguide.bootcss.com" target="_blank" rel="external">HTML和CSS编码规范</a></li>
<li><a href="http://sass-guidelin.es/zh/" target="_blank" rel="external">Sass Guidelines 中文</a></li>
<li><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="external">前端代码规范</a> (腾讯 AlloyTeam 团队)</li>
<li><a href="http://zh.learnlayout.com" target="_blank" rel="external">学习CSS布局</a></li>
<li><a href="https://github.com/chadluo/CSS-Guidelines/blob/master/README.md" target="_blank" rel="external">通用 CSS 笔记、建议与指导</a></li>
</ul>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><ul>
<li><a href="http://nilsun.github.io/apple-watch/" target="_blank" rel="external">Apple Watch开发初探</a></li>
<li><a href="http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/" target="_blank" rel="external">Google Objective-C Style Guide 中文版</a></li>
<li><a href="http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html" target="_blank" rel="external">iOS7人机界面指南</a></li>
<li><a href="https://github.com/qinjx/30min_guides/blob/master/ios.md" target="_blank" rel="external">iOS开发60分钟入门</a></li>
<li><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="external">iPhone 6 屏幕揭秘</a></li>
<li><a href="https://github.com/jkyin/Subtitle" target="_blank" rel="external">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li>
</ul>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul>
<li><a href="https://github.com/waylau/activiti-5.x-user-guide" target="_blank" rel="external">Activiti 5.x 用户指南</a></li>
<li><a href="https://github.com/waylau/apache-mina-2.x-user-guide" target="_blank" rel="external">Apache MINA 2 用户指南</a></li>
<li><a href="https://github.com/waylau/apache-shiro-1.2.x-reference" target="_blank" rel="external">Apache Shiro 用户指南</a></li>
<li><a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="external">Google Java编程风格指南</a></li>
<li><a href="https://github.com/waylau/h2-database-doc" target="_blank" rel="external">H2 Database 教程</a></li>
<li><a href="https://github.com/waylau/servlet-3.1-specification" target="_blank" rel="external">Java Servlet 3.1 规范</a></li>
<li><a href="https://github.com/waylau/java-code-conventions" target="_blank" rel="external">Java 编码规范</a></li>
<li><a href="https://github.com/waylau/Jersey-2.x-User-Guide" target="_blank" rel="external">Jersey 2.x 用户指南</a></li>
<li><a href="https://github.com/waylau/jsse-reference-guide" target="_blank" rel="external">JSSE 参考指南</a></li>
<li><a href="http://mybatis.github.io/mybatis-3/zh/index.html" target="_blank" rel="external">MyBatis中文文档</a></li>
<li><a href="https://github.com/waylau/netty-4-user-guide" target="_blank" rel="external">Netty 4.x 用户指南</a></li>
<li><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="external">Netty 实战(精髓)</a></li>
<li><a href="https://github.com/waylau/rest-in-action" target="_blank" rel="external">REST 实战</a></li>
<li><a href="https://github.com/qibaoguang/Spring-Boot-Reference-Guide" target="_blank" rel="external">Spring Boot参考指南</a> (翻译中)</li>
<li><a href="https://github.com/waylau/spring-framework-4-reference" target="_blank" rel="external">Spring Framework 4.x参考文档</a></li>
<li><a href="https://github.com/waylau/RestDemo" target="_blank" rel="external">用jersey构建REST服务</a></li>
</ul>
<h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><ul>
<li><a href="https://github.com/adamlu/javascript-style-guide" target="_blank" rel="external">Airbnb JavaScript 规范</a></li>
<li>AngularJS<ul>
<li><a href="https://github.com/peiransun/angularjs-cn" target="_blank" rel="external">AngularJS中译本</a></li>
<li><a href="https://github.com/zensh/AngularjsTutorial_cn" target="_blank" rel="external">AngularJS入门教程</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="external">AngularJS最佳实践和风格指南</a></li>
<li><a href="http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/" target="_blank" rel="external">在Windows环境下用Yeoman构建AngularJS项目</a></li>
<li><a href="https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md" target="_blank" rel="external">构建自己的AngularJS</a></li>
</ul>
</li>
<li>backbone.js<ul>
<li><a href="http://www.css88.com/doc/backbone/" target="_blank" rel="external">backbone.js中文文档</a></li>
<li><a href="http://www.the5fire.com/backbone-js-tutorials-pdf-download.html" target="_blank" rel="external">backbone.js入门教程</a> (PDF)</li>
<li><a href="https://github.com/the5fire/backbonejs-learning-note" target="_blank" rel="external">Backbone.js入门教程第二版</a></li>
<li><a href="http://feliving.github.io/developing-backbone-applications" target="_blank" rel="external">Developing Backbone.js Applications(中文版)</a></li>
</ul>
</li>
<li><a href="http://www.ituring.com.cn/minibook/950" target="_blank" rel="external">Chrome扩展及应用开发</a></li>
<li>CoffeeScript<ul>
<li><a href="https://github.com/geekplux/coffeescript-style-guide" target="_blank" rel="external">CoffeeScript 编码风格指南</a></li>
</ul>
</li>
<li>D3.js<ul>
<li><a href="http://www.ourd3js.com/wordpress/?cat=2" target="_blank" rel="external">D3.js 入门系列</a> (还有进阶、高级等系列)</li>
<li><a href="https://github.com/mbostock/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C" target="_blank" rel="external">官方API文档</a></li>
<li><a href="http://blog.csdn.net/zhang__tianxu/article/category/1623437" target="_blank" rel="external">张天旭的D3教程</a></li>
<li><a href="http://www.cnblogs.com/winleisure/tag/D3.js/" target="_blank" rel="external">楚狂人的D3教程</a></li>
</ul>
</li>
<li><a href="http://es6.ruanyifeng.com" target="_blank" rel="external">ECMAScript 6 入门</a> (作者：阮一峰)</li>
<li>ExtJS<ul>
<li><a href="http://extjs-doc-cn.github.io/ext4api/" target="_blank" rel="external">Ext4.1.0 中文文档</a></li>
</ul>
</li>
<li><a href="http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html" target="_blank" rel="external">Google JavaScript 代码风格指南</a></li>
<li><a href="https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md" target="_blank" rel="external">Google JSON 风格指南</a></li>
<li>impress.js<ul>
<li><a href="https://github.com/kokdemo/impress.js-tutorial-in-Chinese" target="_blank" rel="external">impress.js的中文教程</a></li>
</ul>
</li>
<li><a href="http://liubin.github.io/promises-book/" target="_blank" rel="external">JavaScript Promise迷你书</a></li>
<li><a href="http://typeof.net/s/jsmech/" target="_blank" rel="external">Javascript 原理</a></li>
<li><a href="http://javascript.ruanyifeng.com" target="_blank" rel="external">JavaScript 标准参考教程（alpha）</a></li>
<li><a href="https://github.com/jayli/javascript-patterns" target="_blank" rel="external">《JavaScript 模式》</a> “JavaScript patterns”中译本</li>
<li><a href="https://github.com/justjavac/12-javascript-quirks" target="_blank" rel="external">javascript 的 12 个怪癖</a></li>
<li><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">JavaScript 秘密花园</a></li>
<li><a href="http://icodeit.org/jsccp/" target="_blank" rel="external">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</li>
<li><a href="http://pij.robinqu.me" target="_blank" rel="external">Javascript编程指南</a> (<a href="https://github.com/RobinQu/Programing-In-Javascript" target="_blank" rel="external">源码</a>)</li>
<li>jQuery<ul>
<li><a href="http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html" target="_blank" rel="external">How to write jQuery plugin</a></li>
<li><a href="http://www.nowamagic.net/librarys/books/contents/jquery" target="_blank" rel="external">简单易懂的JQuery魔法</a></li>
</ul>
</li>
<li>Meteor<ul>
<li><a href="http://zh.discovermeteor.com" target="_blank" rel="external">Discover Meteor</a></li>
</ul>
</li>
<li>Node.js<ul>
<li><a href="http://expressjs.jser.us" target="_blank" rel="external">express.js 中文文档</a></li>
<li><a href="http://javascript.ruanyifeng.com/nodejs/express.html" target="_blank" rel="external">Express框架</a></li>
<li><a href="https://github.com/guo-yu/koa-guide" target="_blank" rel="external">koa 中文文档</a></li>
<li><a href="https://www.npmjs.com/package/learnyounode-zh-cn" target="_blank" rel="external">Learn You The Node.js For Much Win! (中文版)</a></li>
<li><a href="http://i5ting.github.io/node-debug-tutorial/" target="_blank" rel="external">Node debug 三法三例</a></li>
<li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="external">Node.js 包教不包会</a></li>
<li><a href="https://github.com/nodejs-tw/nodejs-wiki-book" target="_blank" rel="external">Nodejs Wiki Book</a> (繁体中文)</li>
<li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="external">nodejs中文文档</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node入门</a></li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a></li>
<li><a href="https://github.com/nswbmw/N-blog" target="_blank" rel="external">使用 Express + MongoDB 搭建多人博客</a></li>
</ul>
</li>
<li>React.js<ul>
<li><a href="https://github.com/theJian/build-a-hn-front-page" target="_blank" rel="external">Learn React &amp; Webpack by building the Hacker News front page</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/react-native/" target="_blank" rel="external">React Native 中文文档(含最新Android内容)</a></li>
<li><a href="https://github.com/fakefish/react-webpack-cookbook" target="_blank" rel="external">React webpack-cookbook</a></li>
<li><a href="http://fraserxu.me/intro-to-react/" target="_blank" rel="external">React 入门教程</a></li>
<li><a href="http://reactjs.cn" target="_blank" rel="external">React.js 中文文档</a></li>
</ul>
</li>
<li>underscore.js<ul>
<li><a href="http://learningcn.com/underscore/" target="_blank" rel="external">Underscore.js中文文档</a></li>
</ul>
</li>
<li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You-Dont-Know-JS</a> (深入JavaScript语言核心机制的系列图书)</li>
<li>Zepto.js<ul>
<li><a href="http://mweb.baidu.com/zeptoapi/" target="_blank" rel="external">Zepto.js 中文文档</a></li>
</ul>
</li>
<li><a href="http://justjavac.com/named-function-expressions-demystified.html" target="_blank" rel="external">命名函数表达式探秘</a>  (注:原文由<a href="http://www.cn-cuckoo.com" target="_blank" rel="external">为之漫笔</a> 翻译，原始地址无法打开，所以此处地址为我博客上的备份)</li>
<li><a href="http://www.oschina.net/translate/learning-javascript-design-patterns" target="_blank" rel="external">学用 JavaScript 设计模式</a> (开源中国)</li>
<li><a href="http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html" target="_blank" rel="external">深入理解JavaScript系列</a></li>
</ul>
<h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><ul>
<li><a href="http://www.dralpha.com/zh/tech/tech.htm" target="_blank" rel="external">LaTeX 笔记</a></li>
<li><a href="http://ctan.org/pkg/lshort-zh-cn" target="_blank" rel="external">一份不太简短的 LaTeX2ε 介绍</a></li>
<li><a href="https://github.com/49951331/graduate-project-102pj/blob/master/docs/latex123.pdf" target="_blank" rel="external">大家來學 LaTeX</a> (PDF)</li>
</ul>
<h3 id="LISP"><a href="#LISP" class="headerlink" title="LISP"></a>LISP</h3><ul>
<li><a href="http://acl.readthedocs.org/en/latest/" target="_blank" rel="external">ANSI Common Lisp 中文翻译版</a></li>
<li><a href="http://www.ituring.com.cn/minibook/862" target="_blank" rel="external">Common Lisp 高级编程技术</a> (《On Lisp》中文版)</li>
</ul>
<h3 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h3><ul>
<li><a href="http://www.w3cschool.cc/manual/lua53doc/contents.html" target="_blank" rel="external">Lua 5.3 参考手册</a></li>
</ul>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul>
<li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="external">Markdown 快速入门</a></li>
<li><a href="http://www.jianshu.com/p/7bd23251da0a" target="_blank" rel="external">Markdown 简明教程</a></li>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 语法说明</a></li>
<li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">献给写作者的 Markdown 新手指南</a></li>
</ul>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="external">Node 入门</a></li>
<li><a href="https://www.gitbook.com/book/0532/nodejs/details" target="_blank" rel="external">The NodeJS 中文文档</a>（社区翻译）</li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a> 阿里出品，很好的入门资料</li>
</ul>
<h3 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h3><ul>
<li><a href="https://github.com/fayland/chinese-perl-book" target="_blank" rel="external">Master Perl Today</a></li>
<li><a href="https://github.com/horus/modern_perl_book" target="_blank" rel="external">《Modern Perl》中文版</a></li>
<li><a href="http://www.cbi.pku.edu.cn/chinese/documents/perl/index.htm" target="_blank" rel="external">Perl 5 教程</a></li>
<li><a href="http://www.yiibai.com/perl" target="_blank" rel="external">Perl 教程</a></li>
</ul>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><ul>
<li><a href="http://wulijun.github.io/php-the-right-way/" target="_blank" rel="external">PHP 之道</a></li>
<li><a href="http://php.net/manual/zh/" target="_blank" rel="external">PHP5中文手册</a></li>
<li><a href="http://www.walu.cc/phpbook/preface.md" target="_blank" rel="external">PHP扩展开发及内核应用</a></li>
<li><a href="https://wusuopu.gitbooks.io/symfony2_tutorial/content" target="_blank" rel="external">Symfony2 实例教程</a></li>
<li><a href="http://www.php-internals.com/book/" target="_blank" rel="external">深入理解 PHP 内核</a></li>
</ul>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul>
<li><a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="external">Django book 2.0</a></li>
<li><a href="http://docspy3zh.readthedocs.org/en/latest/" target="_blank" rel="external">Python 3 文档(简体中文) 3.2.2 documentation</a></li>
<li><a href="http://www.pythondoc.com" target="_blank" rel="external">Python 中文学习大本营</a></li>
<li><a href="https://github.com/jiechic/diveintopython3" target="_blank" rel="external">深入 Python 3</a></li>
<li><a href="http://old.sebug.net/paper/books/LearnPythonTheHardWay/" target="_blank" rel="external">笨办法学 Python</a></li>
</ul>
<h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><ul>
<li><a href="http://cran.r-project.org/doc/contrib/Liu-FAQ.pdf" target="_blank" rel="external">153分钟学会 R</a> (PDF)</li>
<li><a href="http://www.biosino.org/R/R-doc/files/R4beg_cn_2.0.pdf" target="_blank" rel="external">《R for beginners》中文版</a> (PDF)</li>
<li><a href="http://cran.r-project.org/doc/contrib/Ding-R-intro_cn.pdf" target="_blank" rel="external">R 导论</a> (《An Introduction to R》中文版) (PDF)</li>
<li><a href="http://yanping.me/shiny-tutorial/" target="_blank" rel="external">用 R 构建 Shiny 应用程序</a> (《Building ‘Shiny’ Applications with R》中文版)</li>
<li><a href="http://cran.r-project.org/doc/contrib/Xu-Statistics_and_R.pdf" target="_blank" rel="external">统计学与 R 读书笔记</a> (PDF)</li>
</ul>
<h3 id="reStructuredText"><a href="#reStructuredText" class="headerlink" title="reStructuredText"></a>reStructuredText</h3><ul>
<li><a href="http://www.pythondoc.com/sphinx/rest.html" target="_blank" rel="external">reStructuredText 入门</a></li>
<li><a href="http://jwch.sdut.edu.cn/book/rst.html" target="_blank" rel="external">reStructuredText 简明教程</a></li>
</ul>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><ul>
<li><a href="https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">Rails 风格指南</a></li>
<li><a href="http://railstutorial-china.org" target="_blank" rel="external">Ruby on Rails Tutorial 原书第 2 版</a></li>
<li><a href="https://ihower.tw/rails4/" target="_blank" rel="external">Ruby on Rails 实战圣经</a></li>
<li><a href="https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md" target="_blank" rel="external">Ruby 风格指南</a></li>
<li><a href="http://lrthw.github.io" target="_blank" rel="external">笨方法学 Ruby</a></li>
</ul>
<h3 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h3><ul>
<li><a href="https://github.com/KaiserY/rust-book-chinese" target="_blank" rel="external">Rust 官方教程</a></li>
<li><a href="https://github.com/photino/rust-notes" target="_blank" rel="external">Rust 语言学习笔记</a></li>
<li><a href="https://github.com/rustcc/RustPrimer" target="_blank" rel="external">RustPrimer</a></li>
<li><a href="https://github.com/rustcc/rust-by-example/" target="_blank" rel="external">通过例子学习 Rust</a></li>
</ul>
<h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul>
<li><a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="external">Effective Scala</a></li>
<li><a href="https://www.gitbook.com/book/windor/beginners-guide-to-scala/details" target="_blank" rel="external">Scala 初学者指南</a> (The Neophyte’s Guide to Scala)</li>
<li><a href="http://twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="external">Scala 课堂</a> (Twitter的Scala中文教程)</li>
</ul>
<h3 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h3><ul>
<li><a href="http://deathking.github.io/yast-cn/" target="_blank" rel="external">Scheme 入门教程</a> (《Yet Another Scheme Tutorial》中文版)</li>
</ul>
<h3 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h3><ul>
<li><a href="http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80" target="_blank" rel="external">Shell 编程基础</a></li>
<li><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="external">Shell 脚本编程30分钟入门</a></li>
<li><a href="http://billie66.github.io/TLCL/book/zh" target="_blank" rel="external">The Linux Command Line 中文版</a></li>
</ul>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul>
<li><a href="https://www.gitbook.com/book/numbbbbb/-the-swift-programming-language-/details" target="_blank" rel="external">《The Swift Programming Language》中文版</a></li>
</ul>
<h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><ul>
<li><a href="http://man.chinaunix.net/newsoft/vi/doc/help.html" target="_blank" rel="external">Vim Manual(中文版)</a></li>
<li><a href="http://www.study-area.org/tips/vim/index.html" target="_blank" rel="external">大家來學 VIM</a></li>
</ul>
<h3 id="Visual-Prolog"><a href="#Visual-Prolog" class="headerlink" title="Visual Prolog"></a>Visual Prolog</h3><ul>
<li><a href="http://wiki.visual-prolog.com/index.php?title=A_Beginners_Guide_to_Visual_Prolog_in_Chinese" target="_blank" rel="external">Visual Prolog 7初学指南</a></li>
<li><a href="http://wiki.visual-prolog.com/index.php?title=Visual_Prolog_for_Tyros_in_Chinese" target="_blank" rel="external">Visual Prolog 7边练边学</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> extend </category>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wiki </tag>
            
            <tag> book </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[oracleDBA]]></title>
      <url>/2016/10/12/db/oracle-dba/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>注：本文中 aezo/aezo 一般指用户名/密码，local_orcl指配置的本地数据库服务名，remote_orcl指配置的远程数据库服务名。以11g为例</p>
</blockquote>
<h3 id="oracle相关名词和原理"><a href="#oracle相关名词和原理" class="headerlink" title="oracle相关名词和原理"></a>oracle相关名词和原理</h3><ol>
<li>数据库名(DB_NAME)、实例名(INSTANCE_NAME)、以及操作系统环境变量(ORACLE_SID) <a href="http://www.cnblogs.com/advocate/archive/2010/08/20/1804063.html" target="_blank" rel="external">^1</a><ul>
<li><code>DB_NAME</code>: 在每一个运行的oracle数据库中都有一个数据库名(如: orcl)，如果一个服务器程序中创建了两个数据库，则有两个数据库名。</li>
<li><code>INSTANCE_NAME</code>: 数据库实例名则用于和操作系统之间的联系，用于对外部连接时使用。在操作系统中要取得与数据库之间的交互，必须使用数据库实例名(如: orcl)。与数据库名不同，在数据安装或创建数据库之后，实例名可以被修改。例如，要和某一个数据库server连接，就必须知道其数据库实例名，只知道数据库名是没有用的。用户和实例相连接。</li>
<li><code>ORACLE_SID</code>: 有时候简称为SID。在实际中，对于数据库实例名的描述有时使用实例名(instance_name)参数，有时使用ORACLE_SID参数。这两个都是数据库实例名。instance_name参数是ORACLE数据库的参数，此参数可以在参数文件中查询到，而ORACLE_SID参数则是操作系统环境变量，用于和操作系统交互，也就是说在操作系统中要想得到实例名就必须使用ORACLE_SID。此参数与ORACLE_BASE、<code>ORACLE_HOME</code>等用法相同。在数据库安装之后，ORACLE_SID被用于定义数据库参数文件的名称。如：$ORACLE_BASE/admin/DB_NAME/pfile/init$ORACLE_SID.ora。</li>
</ul>
</li>
<li><code>SERVICE_NAME</code>：是网络服务名(如：local_orcl)，可以随意设置。相当于某个数据库实例的别名方便记忆和访问。<code>tnsnames.ora</code>文件中设置的名称（如：<code>local_orcl=(...)</code>），也是登录pl/sql是填写的Database。</li>
</ol>
<h2 id="oracle及pl-sql安装和使用"><a href="#oracle及pl-sql安装和使用" class="headerlink" title="oracle及pl/sql安装和使用"></a>oracle及pl/sql安装和使用</h2><ul>
<li>ORACLE_HOME为<code>D:/java/oracle/product/11.2.0/dbhome_1</code>，<code>%ORACLE_HOME%/bin</code>中为一些可执行程序（如：导入imp.exe、导出exp.exe）</li>
<li>这个只是服务器端才会使用的到</li>
</ul>
<h3 id="pl-sql安装"><a href="#pl-sql安装" class="headerlink" title="pl/sql安装"></a>pl/sql安装</h3><p>Oracle需要装client才能让第三方工具(如pl/sql)通过OCI(Oracle Call Interface)来连接，安装包可以去oracle官网下载Instant Client。</p>
<ul>
<li>将<code>instantclient_10_2</code>(oracle的客户端)，复制到oracle安装目录</li>
<li>安装<code>pl/sql developer</code></li>
<li>配置<code>pl/sql developer</code>首选项中连接项。设置oracle_home为instantclient_10_2的路径，oci为instantclient_10_2下的oci.dll</li>
<li>环境变量中设置<code>TNS_ADMIN=D:\java\oracle\product\instantclient_10_2</code>，并在path末尾加入<code>%TNS_ADMIN%;</code>(否则容易报<code>TNS-12541</code>)</li>
</ul>
<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><ol>
<li>Net Manager的使用<ul>
<li><code>本地-监听程序-LISTENER</code>中的主机要为计算机全名(如：ST-008)。对应文件<code>listener.ora</code></li>
<li><code>本地-服务命名</code>下的都为<code>网络服务名</code>。对应文件<code>tnsnames.ora</code></li>
</ul>
</li>
<li><p>文本操作</p>
<ul>
<li>使用sqlplus登录时，可直接修改<code>$ORACLE_HOME/NETWORK/ADMIN/tnsnames.ora</code></li>
<li>安装了pl/sql，可能需要修改tnsnames.ora的文件路径类似与<code>D:\java\oracle\product\instantclient_10_2\tnsnames.ora</code>。此时oracle自带的tnsnames.ora将会失效</li>
<li><p>配置实例：HOST/PORT分别为远程ip地址和端口，SERVICE_NAME为远程服务名，aezocn为远程服务名别名(本地服务名)</p>
  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">aezocn =</div><div class="line">  (DESCRIPTION =</div><div class="line">    (ADDRESS_LIST =</div><div class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.1.1)(PORT = 1521))</div><div class="line">    )</div><div class="line">    (CONNECT_DATA =</div><div class="line">      (SERVER = DEDICATED)</div><div class="line">      (SERVICE_NAME = orcl)</div><div class="line">    )</div><div class="line">  )</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="创建表空间-2"><a href="#创建表空间-2" class="headerlink" title="创建表空间 ^2"></a>创建表空间 <a href="http://blog.csdn.net/starnight_cbj/article/details/6792364" target="_blank" rel="external">^2</a></h2><p>oracle和mysql不同，此处的创建表空间相当于mysql的创建数据库。创建了表空间并没有创建数据库实例</p>
<ol>
<li>登录：<code>sqlplus / as sysdba</code></li>
<li>创建表空间：<code>create tablespace aezocn datafile &#39;d:/tablespace/aezo&#39; size 800m extent management local segment space management auto;</code> ，要先建好路径 d:/tablespace ，最终会在该目录下建一个 AEZO 的文件(表空间之后可以修改)<ul>
<li>删除表空间：<code>drop tablespace aezocn including contents and datafiles;</code></li>
</ul>
</li>
<li>创建用户：<code>create user aezo identified by aezo default tablespace aezocn;</code></li>
<li>授权<ul>
<li><code>grant create session to aezo;</code></li>
<li><code>grant unlimited tablespace to aezo;</code></li>
<li><code>grant dba to aezo;</code></li>
</ul>
</li>
</ol>
<h2 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h2><p><code>.dmp</code>适合大数据导出，<code>.sql</code>适合小数据导出(表中含有CLOB类型字段则不能导出)</p>
<h3 id="命令行-4"><a href="#命令行-4" class="headerlink" title="命令行 ^4"></a>命令行 <a href="http://blog.csdn.net/studyvcmfc/article/details/5679235" target="_blank" rel="external">^4</a></h3><blockquote>
<ul>
<li>输入 <code>imp/exp 用户名/密码</code> 可根据提示导入导出。<strong>直接cmd运行</strong>。</li>
<li>成功提示 <code>Export terminated successfully [with/without warnings]</code>；失败提示 <code>Export terminated unsuccessfully [with/without warnings]</code></li>
</ul>
</blockquote>
<ol>
<li><p>导出</p>
<ul>
<li><strong>用户模式</strong>：<code>exp system/manager file=d:/exp.dmp owner=scott</code> 导出scott用户的所有对象，前提是system有相关权限<ul>
<li><strong>远程导出</strong>：此时system/manager默认连接的是本地数据库。如果使用<code>exp system/manager@remote_orcl file=d:/exp.dmp owner=scott</code>(remote_orcl为在本地建立的远程数据库网络服务名)则可导出远程数据库的相关数据，下同。</li>
<li>加上 <code>compress=y</code> 表示压缩数据</li>
<li>加上 <code>rows=n</code> 表示不导出数据行，只导出结构</li>
</ul>
</li>
<li>表模式：<code>exp scott/tiger file=d:/exp.dmp tables=emp</code> 导出scott的emp表<ul>
<li>导出其他用户的表：<code>exp system/manager file=d:/exp.dmp tables=scott.emp, scott.dept</code> 导出scott的emp、dept表，用户system需要相关权限</li>
<li>导出部分表数据：<code>exp scott/tiger file=d:/exp.dmp tables=emp query=\&quot; where ename like &#39;%AR%&#39;\&quot;</code></li>
<li>常见错误(EXP-00011)：原因为11g默认创建一个表时不分配segment，只有在插入数据时才会产生。 <a href="http://www.cnblogs.com/yzy-lengzhu/archive/2013/03/11/2953500.html" target="_blank" rel="external">^3</a></li>
</ul>
</li>
<li>导出全部：<code>exp system/manager file=d:/exp.dmp full=y</code><ul>
<li>用户 system/manager 必须具有相关权限</li>
<li>导出的是整个数据库，包括所有的表空间</li>
</ul>
</li>
</ul>
</li>
<li><p>导入</p>
<ul>
<li><strong>用户模式</strong>：<code>imp system/manager file=d:/exp.dmp fromuser=scott touser=aezo ignore=y</code><ul>
<li><code>ignore=y</code>忽略创建错误</li>
<li>不少情况下要先将表彻底删除，然后导入</li>
</ul>
</li>
<li>表模式：<code>imp system/manager file=d:/exp.dmp fromuser=scott tables=emp, dept touser=aezo ignore=y</code><ul>
<li>将scott的表emp、dept导入到用户aezo</li>
<li>此处 file/fromuser/touser 都可以指定多个</li>
</ul>
</li>
<li>导入全部：<code>imp system/manager file=d:/exp.dmp full=y ignore=y</code><ul>
<li>用户 system/manager 必须具有相关权限</li>
<li>导入的是整个数据库，包括所有的表空间</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="pl-sql"><a href="#pl-sql" class="headerlink" title="pl/sql"></a>pl/sql</h3><ul>
<li>pl/sql提供dmp、sql(不支持CLOB类型字段)、pde(pl/sql提供)格式的数据导入导出</li>
<li>方法：<code>Tools - Export Tables/Import Tablse - 选择表导出</code></li>
<li>其中Executable路径为 <code>%ORACLE_HOME%/BIN/exp.exe</code> 和 <code>%ORACLE_HOME%/BIN/imp.exe</code> 如：<code>D:/java/oracle/product/11.2.0/dbhome_1/BIN/exp.exe</code></li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="操作相关"><a href="#操作相关" class="headerlink" title="操作相关"></a>操作相关</h3><ol>
<li>系统<ul>
<li><code>lsnrctl start</code> 启动监听程序(shell命令行运行)。<code>lsnrctl status</code> 查看服务状态</li>
<li><code>sqlplus /nolog</code> 以nolog身份登录，进入sql命令行</li>
<li><code>startup;</code> 正常启动（1启动实例，2打开控制文件，3打开数据文件）</li>
<li><code>shutdown immediate</code> 大多数情况下使用。迫使每个用户执行完当前SQL语句后断开连接<ul>
<li><code>shutdown;</code> 有用户连接就不关闭，直到所有用户断开连接</li>
</ul>
</li>
<li><code>exit;</code> 退出sqlplus</li>
</ul>
</li>
<li>管理员登录<ul>
<li>sqlplus本地登录：<code>sqlplus / as sysdba</code>，以sys登录。sys为系统管理员，拥有最高权限；system为本地管理员，次高权限</li>
<li>sqlplus远程登录：<code>sqlplus aezo/aezo@192.168.1.1:1521/orcl</code> (orcl为远程服务名)，失败可尝试如下命令：<ul>
<li><code>sqlplus /nolog</code></li>
<li><code>connect aezo/aezo@192.168.1.1:1521/orcl;</code>，或者使用配置好的服务名连接<code>conn aezo/aezo@remote_orcl</code></li>
</ul>
</li>
<li>pl/slq管理员登录：用户名密码留空，Connect as 选择 SYSDBA 则默认以sys登录。登录远程只需要在tnsnames.ora进行网络配置即可</li>
</ul>
</li>
<li>用户相关<ul>
<li>创建用户：<code>create user aezo identified by aezo;</code><ul>
<li>默认使用的表空间是<code>USERS</code>，使用<code>create user aezo identified by aezo default tablespace aezocn;</code>可设定默认表空间</li>
<li>删除用户：<code>drop user aezo cascade;</code></li>
</ul>
</li>
<li>修改用户密码：<code>alter user scott identified by tiger;</code></li>
<li>修改用户表空间：<code>alter user aezo default tablespace aezocn;</code></li>
<li>解锁用户：<code>alter user scott account unlock;</code> (新建数据库scott默认未解锁)</li>
<li>密码过期：(1) 重新设置密码即可<code>alter user aezo identified by aezo;</code> (2)设置永久不过期<code>alter profile default limit password_life_time unlimited;</code></li>
</ul>
</li>
<li><p>授权</p>
<ul>
<li><code>grant create session to aezo;</code> 授予aezo用户创建session的权限，即登陆权限</li>
<li><code>grant unlimited tablespace to aezo;</code> 授予aezo用户使用表空间的权限</li>
<li><code>grant dba to aezo;</code> 授予管理权限(有dba角色就有建表等权限)</li>
</ul>
</li>
<li><p>连接数</p>
<ul>
<li>查询数据库最大连接数：<code>select value from v$parameter where name = &#39;processes;&#39;</code>、<code>show parameter processes</code></li>
<li>查询数据库当前连接数：<code>select count(*) from v$session;</code></li>
<li>修改数据库最大连接数：<code>alter system set processes = 500 scope = spfile;</code> 需要重启数据库</li>
</ul>
</li>
</ol>
<h3 id="查询相关"><a href="#查询相关" class="headerlink" title="查询相关"></a>查询相关</h3><ol>
<li>系统<ul>
<li>查看服务是否启动：<code>tnsping local_orcl</code> cmd直接运行<ul>
<li>远程查看(cmd运行)：<code>tnsping 192.168.1.1:1521/orcl</code>、或者<code>tnsping remote_orcl</code>(其中remote_orcl已经在本地建立好了监听映射，如配置在tnsnames.ora)</li>
<li>如果能够ping通，则说明客户端能解析listener的机器名，而且lister也已经启动，但是并不能说明数据库已经打开，而且tsnping的过程与真正客户端连接的过程也不一致。但是如果不能用tnsping通，则肯定连接不到数据库</li>
</ul>
</li>
<li>查看表空间数据文件位置：<code>select file_name, tablespace_name from dba_data_files;</code></li>
</ul>
</li>
<li>用户相关查询<ul>
<li>查看当前用户默认表空间：<code>select username, default_tablespace from user_users;</code>(以dba登录则结果为SYS和SYSTEM)</li>
<li>查看当前用户角色：<code>select * from user_role_privs;</code></li>
<li>查看当前用户系统权限：<code>select * from user_sys_privs;</code></li>
<li>查看当前用户表级权限：<code>select * from user_tab_privs;</code></li>
<li>查看用户下所有表：<code>select * from user_tables;</code></li>
<li>DBA相关查询见数据库字典</li>
</ul>
</li>
<li>数据字典 <a href="http://blog.csdn.net/yitian20000/article/details/6256716" target="_blank" rel="external">^5</a><ul>
<li><code>user_</code>：记录用户对象的信息，如user_tables包含用户创建的所有表，user_views，user_constraints等</li>
<li><code>all_</code>：记录用户对象的信息及被授权访问的对象信息</li>
<li><code>DBA_</code>：记录数据库实例的所有对象的信息，如DBA_USERS包含数据库实例中所有用户的信息。DBA的信息包含USER和ALL的信息。大部分是视图</li>
<li><code>V$</code>：当前实例的动态视图，包含系统管理和优化使用的视图</li>
<li><code>GV_</code>：分布环境下所有实例的动态视图，包含系统管理和优化使用的视图，这里的GV表示 Global v$的意思</li>
</ul>
</li>
<li>基本数据字典<ul>
<li>常用<ul>
<li><code>DICT</code> 构成数据字典的所有表的信息</li>
<li><code>DBA_USERS</code> 所有的用户信息（oracle密码是加密的，忘记密码只能修改）</li>
<li><code>DBA_TABLES</code> 所有用户的所有表的信息</li>
<li><code>DBA_TABLESPACES</code> 记录系统表空间的基本信息；</li>
<li><code>DBA_DATA_FILES</code> 记录系统数据文件及表空间的基本信息；</li>
<li><code>DBA_FREE_SPACE</code> 记录系统表空间的剩余空间的信息；</li>
</ul>
</li>
<li>其他<ul>
<li><code>CAT</code> 当前用户可以访问的所有的基表</li>
<li><code>TAB</code> 当前用户创建的所有基表，视图，同义词等</li>
<li><code>DBA_VIEWS</code> 所有用户的所有视图信息</li>
<li><code>DBA_CONSTRAINTS</code> 所有用户的表约束信息</li>
<li><code>DBA_INDEXES</code> 所有用户索引的简要信息</li>
<li><code>DBA_IND_COLUMNS</code> 所有用户索引的列信息</li>
<li><code>DBA_TRIGGERS</code> 所有用户触发器信息</li>
<li><code>DBA_SOURCE</code> 所有用户存储过程源代码信息</li>
<li><code>DBA_PROCEDUS</code> 所有用户存储过程</li>
<li><code>DBA_SEGMENTS</code> 所有用户段（表，索引，Cluster）使用空间信息</li>
<li><code>DBA_TAB_COLUMNS</code> 所有用户的表的列（字段）信息</li>
<li><code>DBA_SYNONYMS</code> 所有用户同义词信息</li>
<li><code>DBA_SEQUENCES</code> 所有用户序列信息</li>
<li><code>DBA_EXTENTS</code> 所有用户段的扩展段信息</li>
<li><code>DBA_OBJECTS</code> 所有用户对象的基本信息（包括素引，表，视图，序列等）</li>
</ul>
</li>
</ul>
</li>
<li>数据库组件相关的数据字典(<code>v$</code>代表视图)<ul>
<li>数据库：<ul>
<li><code>V$DATABASE</code> 同义词V_$DATABASE，记录系统的运行情况</li>
</ul>
</li>
<li>控制文件：<ul>
<li><code>V$CONTROLFILE</code> 记录系统控制文件的路径信息</li>
<li><code>v$parameter</code> 记录系统各参数的基本信息</li>
<li><code>V$CONTROLFILE_RECORD_SECTION</code> 记录系统控制运行的基本信息</li>
</ul>
</li>
<li>数据文件：<ul>
<li><code>V$DATAFILE</code> 记录来自控制文件的数据文件信息</li>
<li><code>V$FILESTAT</code> 记录数据文件读写的基本信息</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><ol>
<li><p>常用技巧</p>
<ul>
<li>常看日志文件目录 <code>show parameter background_dump_dest</code></li>
<li>在ORACLE 11g 以及ORACLE 12c中，告警日志文件的位置有了变化。主要是因为引入了ADR(Automatic Diagnostic Repository:一个存放数据库诊断日志、跟踪文件的目录)，关于ADR对应的目录位置可以通过查看v$diag_info系统视图。<code>select * from v$diag_info;</code></li>
<li><code>alert_orcl.log</code> 该目录下的日志文件</li>
<li>在日志文件目录列举文件：<code>ll -rt *.trc</code><ul>
<li><code>*.trc</code>：Sql Trace Collection file，<code>*.trm</code>：Trace map (.trm) file.Trace files(.trc) are sometimes accompanied by corresponding trace map (.trm) files, which contain structural information about trace files and are used for searching and navigation.（<strong>主要看*.trc文件</strong>）</li>
<li>如：<code>dbcloud_cjq0_22515.trc</code> dbcloud为实例名，cjq0_22515为自动生成的索引</li>
</ul>
</li>
</ul>
</li>
<li><p>表空间数据文件丢失，删除表空间报错ORA-02449、ORA-01115 <a href="[强制删除表空间](http://blog.chinaunix.net/uid-11570547-id-59108.html)">^6</a></p>
<ul>
<li>oracle数据文件(datafile)被误删除后，只能把该数据文件offline后drop掉</li>
<li><code>sqlplus / as sysdba</code></li>
<li><code>shutdown abort</code> 强制关闭oracle</li>
<li><code>startup mount</code> 启动挂载</li>
<li><code>alter database datafile &#39;/home/oracle/xxx&#39; offline drop;</code> 从数据库删除该表空间的数据文件<ul>
<li><code>select file_name, tablespace_name from dba_data_files;</code> 查看表空间数据文件位置</li>
</ul>
</li>
<li><code>alter database open;</code></li>
<li><code>drop tablespace 表空间名</code></li>
</ul>
</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>- 数据库安装包：[oracle](http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html)
- oracle静默安装, 关闭客户端后再次以oracle用户登录无法运行sql命名, 需要执行`source ~/.bash_profile`
</code></pre>]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
        <tags>
            
            <tag> oracle </tag>
            
            <tag> dba </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA]]></title>
      <url>/2016/09/17/extend/intellij-idea/</url>
      <content type="html"><![CDATA[<h2 id="IntelliJ-IDEA简介"><a href="#IntelliJ-IDEA简介" class="headerlink" title="IntelliJ IDEA简介"></a>IntelliJ IDEA简介</h2><h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><h3 id="java-web项目配置-1"><a href="#java-web项目配置-1" class="headerlink" title="java web项目配置 [^1]"></a>java web项目配置 [^1]</h3><ol>
<li>进入到Project Structure：<code>File - Project Structure</code></li>
<li>配置步骤<ul>
<li><code>Project</code> 项目级别<ul>
<li>主要是project compiler output的位置(src的编译位置)：如<code>\myproject\WebRoot\WEB-INF\classes</code>，为对应WEB-INF下的classes目录</li>
</ul>
</li>
<li><code>Modules</code> 模块级别，项目可能包含多个模块，不同的模块可设置对应的编译输入路径和依赖。一般项目就一个模块<ul>
<li><code>Sources</code> 将src目录标记成Sources目录</li>
<li><code>Paths</code> 使用modules compiler output path，设置路径为<code>\myproject\WebRoot\WEB-INF\classes</code></li>
<li><code>Dependencies</code> 加入jdk、tomcat、其他依赖jar(如<code>\WEB-INF\lib</code>中的jar)</li>
</ul>
</li>
<li><code>Libraries</code> 如将<code>\WEB-INF\lib</code>中的所有jar定义一个目录，直接加入到<code>Dependencies</code>中</li>
<li><code>Facets</code><ul>
<li>点击<code>+</code> - <code>web</code></li>
<li><code>Web Module Deployment Descriptor</code>为<code>\myproject\WebRoot\WEB-INF\web.xml</code></li>
<li><code>Web Resource</code>为<code>\myproject\WebRoot</code></li>
<li>勾选<code>Source Roots</code></li>
</ul>
</li>
<li><code>Artifacts</code> 根据上面的配置，最终打包成一个war包部署到tomcat中<ul>
<li>点击<code>+</code> - <code>Web Application: Exploded</code> - <code>From Modules</code></li>
<li><code>Output directory</code>为<code>\testStruts2\WebRoot</code></li>
</ul>
</li>
</ul>
</li>
<li><code>Run configuration</code>配置tomcat<ul>
<li><code>JRE</code>填写jdk路径</li>
<li><code>Deployment</code>中将刚刚的war配置进入</li>
<li>在<code>Before launch</code>中加入Build这个war包</li>
</ul>
</li>
</ol>
<h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><ul>
<li><code>jrebel</code> java热部署. <strong>修改代码后使用<code>Ctrl+Shif+F9</code>进行热部署</strong><ul>
<li>jrebel破解可使用<code>myJRebel</code></li>
</ul>
</li>
<li><code>Lombox</code> 简化代码工具 <a href="https://projectlombok.org/" target="_blank" rel="external">https://projectlombok.org/</a></li>
</ul>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li><p>常用快捷键</p>
<ul>
<li><code>Ctrl + Shif + F9</code> 热部署</li>
<li><code>Ctrl + Shifg + Space</code> 智能补全</li>
<li><code>Ctrl + P</code> 查看方法参数</li>
<li><code>Ctrl + E</code> 最近访问文件</li>
<li><code>Ctrl + W</code> 语句感知</li>
<li><code>Ctrl + B</code> 跳转到声明</li>
<li><code>Ctrl + N</code> 跳转到类</li>
<li><code>Ctrl + Shift + Entry</code> 完成整句</li>
<li><code>Ctrl + Alt + &lt;-或-&gt;</code> 回退(退到上次浏览位置)/前进</li>
<li><code>Alt + Insert</code> 自动生成(Getter/Setter等)</li>
<li><code>Ctrl + Shift + F7</code> 高亮所用之处：把光标放在某元素上，类似与快速查找此文件此元素出现处</li>
</ul>
</li>
<li><p>快捷键图片</p>
</li>
</ul>
<p><img src="/data/images/2016/09/idea-keys.png" alt="php-xdebug"></p>
<h2 id="IDEA开发PHP程序"><a href="#IDEA开发PHP程序" class="headerlink" title="IDEA开发PHP程序"></a>IDEA开发PHP程序</h2><h3 id="安装php插件-2"><a href="#安装php插件-2" class="headerlink" title="安装php插件 [^2]"></a>安装php插件 [^2]</h3><ol>
<li>setting -&gt; plugins -&gt; browse repositories -&gt; 输入php</li>
<li>没看到的话，往下翻几页看看，找到PHP(LANGUAGES)，安装次数较多的那个</li>
</ol>
<h3 id="xdebug使用"><a href="#xdebug使用" class="headerlink" title="xdebug使用"></a>xdebug使用</h3><ol>
<li>找到php.ini，搜索xdebug</li>
<li>下载xdebug的dll文件，并在php.ini中设置。wamp已经含有这个功能</li>
<li><p>替换下面代码</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[xdebug]  </div><div class="line">xdebug.remote_enable=on  </div><div class="line">xdebug.remote_host=localhost  </div><div class="line">xdebug.remote_port=9000  </div><div class="line">;下面两项和Intellij idea里的对应  </div><div class="line">xdebug.idekey=idekey  </div><div class="line">xdebug.remote_handler=dbgp  </div><div class="line">xdebug.remote_mode=req  </div><div class="line">;下面这句很关键，不设置intellij idea无法调试  </div><div class="line">xdebug.remote_autostart=1  </div><div class="line">;调试配置，详细的可以参考phpinfo页面进行配置  </div><div class="line">xdebug.auto_trace=on  </div><div class="line">xdebug.collect_params=on  </div><div class="line">xdebug.collect_return=on  </div><div class="line">xdebug.trace_output_dir="../xdebug"  </div><div class="line">xdebug.profiler_enable=on  </div><div class="line">xdebug.profiler_enable_trigger = on</div><div class="line">xdebug.profiler_output_name = cachegrind.out.%t.%p</div><div class="line">xdebug.profiler_output_dir="../xdebug"  </div><div class="line">xdebug.collect_vars=on  </div><div class="line">xdebug.cli_color=on</div></pre></td></tr></table></figure>
</li>
<li><p>在idea中设置php的安装路径</p>
<p> 添加php interpreters指向php的主目录，点击这边的show info按钮，在Loaded extensions里应该可以看到xDebug</p>
<p> <img src="/data/images/2016/09/php-xdebug.png" alt="php-xdebug"></p>
</li>
<li><p>启动xdebug调试</p>
<ul>
<li>点击intellij idea工具栏里的 start listen php debug connections.开启调试模式。</li>
<li><p>点击工具栏里向下的小三角-&gt;edit configuration-&gt;add new configuartion-&gt;php web Application Server里选aezo.cn</p>
<p><img src="/data/images/2016/09/php-xdebug2.png" alt="php-xdebug"></p>
</li>
</ul>
</li>
<li><p>打断点，运行程序即可进行调试</p>
</li>
</ol>
<hr>
<p>参考文章</p>
<p>[^1]: <a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial/blob/newMaster/eclipse-java-web-project-introduce.md" target="_blank" rel="external">java web项目配置</a><br>[^2]: <a href="http://blog.csdn.net/ysjjovo/article/details/13292787" target="_blank" rel="external">intellij idea12 搭建php开发环境</a></p>
]]></content>
      
        <categories>
            
            <category> extend </category>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java web相关概念(名词)汇总]]></title>
      <url>/2016/09/01/others/javaconception/</url>
      <content type="html"><![CDATA[<h2 id="未分类"><a href="#未分类" class="headerlink" title="未分类"></a>未分类</h2><ul>
<li><p><code>EJB</code>(Enterprise JavaBean)是sun的JavaEE服务器端组件模型。</p>
<p>设计目标与核心应用是部署分布式应用程序。简单来说就是把已经编写好的程序（即：类）打包放在服务器上执行。 在J2EE里，EJB 称为Java 企业Bean，是Java的核心代码，分别是会话Bean（Session Bean），实体Bean（Entity Bean）和消息驱动Bean（MessageDriven Bean）</p>
<ul>
<li>SessionBean用于实现业务逻辑，它可以是有状态的，也可以是无状态的。每当客户端请求时，容器就会选择一个SessionBean来为客户端服务。Session Bean可以直接访问数据库，但更多时候，它会通过Entity Bean实现数据访问</li>
<li>Entity Bean是域模型对象，用于实现O/R映射，负责将数据库中的表记录映射为内存中的Entity对象，事实上，创建一个Entity Bean对象相当于新建一条记录。</li>
<li>MessageDriven Bean是EJB2.0中引入的新的企业Bean，它基于JMS消息，只能接收客户端发送的JMS消息然后处理。MDB实际上是一个异步的无状态SessionBean，客户端调用MDB后无需等待，立刻返回，MDB将异步处理客户请求。这适合于需要异步处理请求的场合，比如订单处理，这样就能避免客户端长时间的等待一个方法调用直到返回结果。</li>
</ul>
</li>
<li><p><code>ORM</code>(Object Relational Mapping)对象关系映射。</p>
<p>是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换</p>
<ul>
<li>O/R映射层是持久层的一个特例，它的数据模型是对象模型（Object），存储模型是关系模型（Relational）</li>
</ul>
</li>
<li><p><code>JMS</code>(Java Message Service) Java消息服务应用程序接口。</p>
<p>是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信</p>
</li>
<li><p><code>JDBC</code>(Java Data Base Connectivity) java数据库连接。</p>
<p>是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成</p>
</li>
<li><p><code>API</code>(Application Programming Interface)应用程序编程接口。</p>
<p>是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p>
</li>
<li><p><code>Netty</code> 是由JBOSS提供的一个java开源框架。</p>
<p>Netty提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。Netty相当简化和流线化了网络应用的编程开发过程，例如，TCP和UDP的socket服务开发。</p>
</li>
<li><p><code>Mina</code> Apache Mina</p>
<p>是一个能够帮助用户开发高性能和高伸缩性网络应用程序的框架。它通过Java nio技术基于TCP/IP和UDP/IP协议提供了抽象的、事件驱动的、异步的API。</p>
</li>
<li><p><code>NIO</code>(non-blocking，New IO)</p>
<p>jdk1.4中引入的新输入输出 (NIO) 库在标准 Java 代码中提供了高速的、面向块的 I/O。Sun 官方标榜的特性如下： 为所有的原始类型提供(Buffer)缓存支持。字符集编码解码解决方案。 Channel ：一个新的原始I/O 抽象。 支持锁和内存映射文件的文件访问接口。 提供多路(non-bloking) 非阻塞式的高伸缩性网络I/O 。</p>
<ul>
<li>IO：面向流、阻塞IO</li>
<li>NIO：面向缓冲、非阻塞IO、有选择器</li>
</ul>
</li>
<li><p>EL、OGNL、JSTL</p>
<ul>
<li><code>EL</code>(Expression Language)：是为了使JSP写起来更加简单，语法如${expression}</li>
<li><code>OGNL</code>(Object-Graph Navigation Language)，主要有#%$三种符号，常与Struts2结合使用</li>
<li><code>JSTL</code>：JSP 标准标签库。如：<code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code>，<code>&lt;c:if&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><ul>
<li><p><code>OSI</code>(Open System Interconnection)开放式系统互联。</p>
<p>国际标准化组织（ISO）制定了OSI模型，该模型定义了不同计算机互联的标准，是设计和描述计算机网络通信的基本框架。OSI模型把网络通信的工作分为7层，分别是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。</p>
</li>
<li><p><code>RPC</code>(Remote Procedure Call Protocol)远程过程调用协议</p>
<p>它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。</p>
</li>
<li><p>同步、异步、阻塞、非阻塞</p>
<ul>
<li>在进行网络编程时，我们常常见到同步、异步、阻塞和非阻塞四种调用方式。</li>
<li>同步(sync)就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。</li>
<li>异步(async)的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。</li>
<li>阻塞调用是指调用结果返回之前，当前线程会被挂起，函数只有在得到结果之后才会返回。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。</li>
<li>非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。简单的说：阻塞就是干不完不准回来，非阻塞就是你先干，我看看有其他事没有，完了告诉我一声</li>
</ul>
</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li><p><code>OLTP/OLAP</code></p>
<p>数据处理大致可以分成两大类：联机事务处理OLTP(On-Line Transaction Processing)、联机分析处理OLAP(（On-Line Analytical Processing)。OLTP是传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。</p>
<ul>
<li><p><code>CAP</code>理论、<code>ACID</code>、<code>BASE</code></p>
<ul>
<li><p><code>CAP</code>理论</p>
<p>Web服务无法同时满足以下3个属性</p>
<ul>
<li>Consistency(一致性)，数据一致更新，所有数据变动都是同步的</li>
<li>Availability(可用性)，每个操作都必须以可预期的响应结束</li>
<li>Partition tolerance(分区容错性)，即使出现单个组件无法可用,操作依然可以完成</li>
</ul>
<p>在任何数据库设计中,一个Web应用至多只能同时支持上面的两个属性，不可能三者兼顾。对于分布式系统来说，分区容错是基本要求，所以必然要放弃一致性。对于大型网站来说， 分区容错和可用性的要求更高，所以一般都会选择适当放弃一致性。对应CAP理论，NoSQL追求的是AP，而传统数据库追求的是CA，这也可以解释为什么 传统数据库的扩展能力有限的原因。</p>
</li>
<li><p><code>ACID</code>解决方案</p>
<p>ACID数据库事务极大地简化了应用开发人员的工作.正如其缩写标识所示,ACID事务提供以下几种保证:</p>
<ul>
<li>Atomicity（原子性），事务中的所有操作,要么全部成功,要么全部不做.</li>
<li>Consistency（一致性）在事务开始与结束时,数据库处于一致状态.</li>
<li>Isolation（隔离性） 事务如同只有这一个操作在被数据库所执行一样.</li>
<li>Durability（持久性）. 在事务结束时,此操作将不可逆转.(也就是只要事务提交,系统将保证数据不会丢失,即使出现系统Crash,译者补充).</li>
</ul>
<p>数据库厂商在很久以前就认识到数据库分区的必要性,并引入了一种称为2PC(两阶段提交)的技术来提供跨越多个数据库实例的ACID保证</p>
</li>
<li><p><code>BASE</code>解决方案</p>
<ul>
<li>Basically Available（基本可用）</li>
<li>Soft-state（ 软状态/柔性事务）</li>
<li>Eventual Consistency（最终一致性）</li>
</ul>
<p>BASE模型是传统ACID模型的反面，不同与ACID，BASE强调牺牲高一致性，从而获得可用性，数据允许在一段时间内的不一致，只要保证最终一致就可以了。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><code>CLI</code> 命令行界面（command-line interface）</p>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> conception </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sharding-jdbc 源码学习]]></title>
      <url>/2016/08/31/db/shading-jdbc-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>文档来源：胡翔宇。此处仅作存档学习！</p>
</blockquote>
<ol>
<li><p>ShardingDataSource<br> 类图<br> <img src="http://i.imgur.com/3bajMxv.png" alt=""><br> 类解析（由父类向下）</p>
<pre><code>WrapperAdapter：Wrapper适配类主要作用是额外记录jdbc方法调用以及回放。
    /**
     * 记录方法调用.
     *
     * @param targetClass 目标类
        * @param methodName 方法名称
     * @param argumentTypes 参数类型
     * @param arguments 参数
     */
    protected final void recordMethodInvocation(final Class&lt;?&gt; targetClass, final String methodName, final Class&lt;?&gt;[] argumentTypes, final Object[] arguments) {
        try {
            jdbcMethodInvocations.add(new JdbcMethodInvocation(targetClass.getMethod(methodName, argumentTypes), arguments));
        } catch (final NoSuchMethodException ex) {
            throw new ShardingJdbcException(ex);
        }
    }

    /**
     * 回放记录的方法调用.
     *
     * @param target 目标对象
     */
    protected final void replayMethodsInvocation(final Object target) {
        for (JdbcMethodInvocation each : jdbcMethodInvocations) {
            each.invoke(target);
        }
    }

AbstractUnsupportedOperationDataSource ： 声明不支持操作的数据源对象。
AbstractDataSourceAdapter ： 适配基类没有实际的业务操作，拓展使用（如图后加入的读写分离就是最好的例子）。
</code></pre><p> ShardingDataSource ： 支持分片的数据源。</p>
<pre><code>重点内容  
ShardingProperties 变量 ： 主要是jdbc的配置
shardingContext :  数据源运行期上下文。   此处要注意的是上下文是分库分表规则的持有者，也是路由引擎，执行引擎的持有者
方法  
getDatabaseProductName ： 根据分库分表规则获取数据库类型（有主从的时候，与其他区分处理）。
getConnection()： 获取数据库连接 返回 ShardingConnection 连接。
</code></pre><p> 使用方法</p>
<pre><code> DataSourceRule dataSourceRule = new DataSourceRule(createDataSourceMap());
//order 分表
TableRule orderTableRule = TableRule.builder(&quot;t_order&quot;).actualTables(Arrays.asList(&quot;t_order_0&quot;, &quot;t_order_1&quot;)).dataSourceRule(dataSourceRule).build();
// order_iterm 分表
TableRule orderItemTableRule = TableRule.builder(&quot;t_order_item&quot;).actualTables(Arrays.asList(&quot;t_order_item_0&quot;, &quot;t_order_item_1&quot;)).dataSourceRule(dataSourceRule).build();
ShardingRule shardingRule = ShardingRule.builder().dataSourceRule(dataSourceRule).tableRules(Arrays.asList(orderTableRule, orderItemTableRule))
        .bindingTableRules(Collections.singletonList(new BindingTableRule(Arrays.asList(orderTableRule, orderItemTableRule))))
        .databaseShardingStrategy(new DatabaseShardingStrategy(&quot;user_id&quot;, new ModuloDatabaseShardingAlgorithm()))
        .tableShardingStrategy(new TableShardingStrategy(&quot;order_id&quot;, new ModuloTableShardingAlgorithm())).build();
//同时会new 一个 ShardingProperties初始化
return new ShardingDataSource(shardingRule);

//设置分库 ds_0,ds_1
 private static Map&lt;String, DataSource&gt; createDataSourceMap() {
    Map&lt;String, DataSource&gt; result = new HashMap&lt;&gt;(2);
    result.put(&quot;ds_0&quot;, createDataSource(&quot;ds_0&quot;));
    result.put(&quot;ds_1&quot;, createDataSource(&quot;ds_1&quot;));
    return result;
}
</code></pre></li>
<li><p>ShardingConnection<br>类图<br><img src="http://i.imgur.com/KFTd9ZT.png" alt=""><br>类解析（由父类向下）</p>
<pre><code> AbstractUnsupportedOperationConnection： 声明不支持操作的数据库连接对象.主要就是自定义不支持异常抛出
AbstractConnectionAdapter :  数据库连接适配器，公共方法（可拓展）。
    setAutoCommit（） ： 设置分库分表自动提交。
    commit（）： 提交操作
    rollback（） ： 回滚

ShardingConnection ： 分库分表connection
    connectionMap 变量 connection的持有者（一个库对应一个connection）
    shardingContext : 略
    getConnectionInternal（）：getConnection（）实际调用该方法。
         private Connection getConnectionInternal(final String dataSourceName, final SQLStatementType sqlStatementType) throws SQLException {
            //已经生成的connection直接返回
            if (connectionMap.containsKey(dataSourceName)) {
                return connectionMap.get(dataSourceName);
            }
            //用到 guava [http://ifeve.com/google-guava/](http://ifeve.com/google-guava/ &quot;guava&quot;),计时
            Context metricsContext = MetricsContext.start(Joiner.on(&quot;-&quot;).join(&quot;ShardingConnection-getConnection&quot;, dataSourceName));
            DataSource dataSource = shardingContext.getShardingRule().getDataSourceRule().getDataSource(dataSourceName);
            if (dataSource instanceof MasterSlaveDataSource) {
                dataSource = ((MasterSlaveDataSource) dataSource).getDataSource(sqlStatementType);
            }
            Connection result = dataSource.getConnection();
            MetricsContext.stop(metricsContext);
            connectionMap.put(dataSourceName, result);
            return result;
        }

    close（）： 连接关闭
         @Override
        public void close() throws SQLException {
            super.close();
            //清理线索分片管理器的本地线程持有者.（此处是一个问题，接下来要仔细分析一下）
            HintManagerHolder.clear();
            //此处是个问题
            MasterSlaveDataSource.resetDMLFlag();
        }
</code></pre><p>使用</p>
<pre><code>Connection conn = dataSource.getConnection();
</code></pre></li>
<li><p>ShardingStatement ： 支持分片的静态语句对象（不支持存储过程）.<br> 类图<br> <img src="http://i.imgur.com/Gd6DBKS.png" alt=""><br>  类解析（由父类向下）</p>
<pre><code>AbstractStatementAdapter：静态语句对象适配类.
    closed : 关闭标识
    poolable ： 暂未看
    fetchSize ： 条数
    //获取更新条数
     @Override
    public final int getUpdateCount() throws SQLException {
        int result = 0;
        for (Statement each : getRoutedStatements()) {
            result += each.getUpdateCount();
        }
        return result;
    }
    其他方法略

    ShardingStatement ： 支持分片的静态语句对象.
        shardingConnection：
        resultSetType：
        resultSetConcurrency ：
        resultSetHoldability：
        cachedRoutedStatements ： statemnets持有者
        mergeContext ： 结果归并上下文.
         currentResultSet ：
        //执行查询
         @Override
        public ResultSet executeQuery(final String sql) throws SQLException {
            if (null != currentResultSet &amp;&amp; !currentResultSet.isClosed()) {
                currentResultSet.close();
            }
            //先生成执行器，然后执行查询（归并mergeContext页作为参数传过去以便最后归并），整个过程下面会详细说
            currentResultSet = ResultSetFactory.getResultSet(generateExecutor(sql).executeQuery(), mergeContext);
            return currentResultSet;
        }

        private StatementExecutor generateExecutor(final String sql) throws SQLException {
            StatementExecutor result = new StatementExecutor(shardingConnection.getShardingContext().getExecutorEngine());
            //路由sql 下面详细讲解
            SQLRouteResult sqlRouteResult = shardingConnection.getShardingContext().getSqlRouteEngine().route(sql);
            mergeContext = sqlRouteResult.getMergeContext();
            //将路由结果放置到执行器中，以便后面执行（
            for (SQLExecutionUnit each : sqlRouteResult.getExecutionUnits()) {
                Statement statement = getStatement(shardingConnection.getConnection(each.getDataSource(), sqlRouteResult.getSqlStatementType()), each.getSql());
                replayMethodsInvocation(statement);
                //StatementExecutorWrapper 执行单位，和 statement组合放入执行器中
                result.addStatement(new StatementExecutorWrapper(statement, each));
            }
            return result;
        }
</code></pre></li>
</ol>
<ol>
<li>ShardingPreparedStatement ：  支持分片的预编译语句对象.</li>
<li>解析</li>
<li><p>路由<br> 类图<br> <img src="http://i.imgur.com/xeGFWga.png" alt=""></p>
<pre><code> /**
 * SQL路由.非预编译
 *
 * @param logicSql 逻辑SQL
 * @return 路由结果
 * @throws SQLParserException SQL解析失败异常
 */
public SQLRouteResult route(final String logicSql) throws SQLParserException {
    return route(logicSql, Collections.emptyList());
}
/**
 * SQL路由.
 *
 * @param logicSql 逻辑SQL
 * @param parameters 参数列表
 * @return 路由结果
 * @throws SQLParserException SQL解析失败异常
 */
public SQLRouteResult route(final String logicSql, final List&lt;Object&gt; parameters) throws SQLParserException {
    //先执行一遍，解析（接下载解析模块说明），解析的时候会设置SqlStatementType
    return routeSQL(parseSQL(logicSql, parameters), parameters);
}
 SQLRouteResult routeSQL(final SQLParsedResult parsedResult, final List&lt;Object&gt; parameters) {
    //计时
    Context context = MetricsContext.start(&quot;Route SQL&quot;);
    SQLRouteResult result = new SQLRouteResult(parsedResult.getRouteContext().getSqlStatementType(), parsedResult.getMergeContext());
    //遍历解析结果
    for (ConditionContext each : parsedResult.getConditionContexts()) {
        //将实际路由的   执行单元加入路由结果中
        result.getExecutionUnits().addAll(routeSQL(each, Sets.newLinkedHashSet(Collections2.transform(parsedResult.getRouteContext().getTables(), new Function&lt;Table, String&gt;() {

            @Override
            public String apply(final Table input) {
                return input.getName();
            }
        })), parsedResult.getRouteContext().getSqlBuilder(), parsedResult.getRouteContext().getSqlStatementType()));
    }
    //判断是否有限定结果集计算.
    processLimit(result.getExecutionUnits(), parsedResult, parameters);
    //计时
    MetricsContext.stop(context);
    log.debug(&quot;final route result:{}&quot;, result.getExecutionUnits());
    log.debug(&quot;merge context:{}&quot;, result.getMergeContext());
    return result;
}

SQLParsedResult parseSQL(final String logicSql, final List&lt;Object&gt; parameters) {
        Context context = MetricsContext.start(&quot;Parse SQL&quot;);
        SQLParsedResult result = SQLParserFactory.create(databaseType, logicSql, parameters, shardingRule.getAllShardingColumns()).parse();
        MetricsContext.stop(context);
        return result;
    }

private Collection&lt;SQLExecutionUnit&gt; routeSQL(final ConditionContext conditionContext, final Set&lt;String&gt;     logicTables, final SQLBuilder sqlBuilder, final SQLStatementType type) {
    RoutingResult result;
    //判断逻辑表数量，就是看看是否是单表操作
    if (1 == logicTables.size()) {
        result = new SingleTableRouter(shardingRule, logicTables.iterator().next(), conditionContext, type).route();
    }
    //判断逻辑表名称集合是否全部属于Binding表.(绑定表代表一组表，这组表的逻辑表与实际表之间的映射关系是相同的。比如t_order与t_order_item就是这样一组绑定表关系,它们的分库与分表策略是完全相同的,那么可以使用它们的表规则将它们配置成绑定表)
    else if (shardingRule.isAllBindingTables(logicTables)) {
        result = new BindingTablesRouter(shardingRule, logicTables, conditionContext, type).route();
    } else {
        // TODO 可配置是否执行笛卡尔积
        result = new MixedTablesRouter(shardingRule, logicTables, conditionContext, type).route();
    }
    if (null == result) {
        throw new ShardingJdbcException(&quot;Sharding-JDBC: cannot route any result, please check your sharding rule.&quot;);
    }
    return result.getSQLExecutionUnits(sqlBuilder);
}

单表路由
/**
 * 路由.
 *
 * @return 路由结果
 */
public SingleRoutingResult route() {
    //多库则返回多个库名称
    Collection&lt;String&gt; routedDataSources = routeDataSources();
    Collection&lt;String&gt; routedTables = routeTables(routedDataSources);
    return generateRoutingResult(routedDataSources, routedTables);
}

//路由数据库
private Collection&lt;String&gt; routeDataSources() {
    DatabaseShardingStrategy strategy = shardingRule.getDatabaseShardingStrategy(tableRule);
    List&lt;ShardingValue&lt;?&gt;&gt; shardingValues;
    if (HintManagerHolder.isUseShardingHint()) {
        shardingValues = getDatabaseShardingValuesFromHint(strategy.getShardingColumns());
    } else {
        //[ShardingValue(logicTableName=t_order, columnName=user_id, value=10, values=[], valueRange=null)]
        //* @param logicTable 逻辑表名称 * @param shardingColumn 分片键  * @param value 分片值
        shardingValues = getShardingValues(strategy.getShardingColumns());
    }
    logBeforeRoute(&quot;database&quot;, logicTable, tableRule.getActualDatasourceNames(), strategy.getShardingColumns(), shardingValues);
    Collection&lt;String&gt; result = new HashSet&lt;&gt;(strategy.doStaticSharding(sqlStatementType, tableRule.getActualDatasourceNames(), shardingValues));
    logAfterRoute(&quot;database&quot;, logicTable, result);
    Preconditions.checkState(!result.isEmpty(), &quot;no database route info&quot;);
    return result;
}
 /**
 * 计算静态分片.
 *
 * @param sqlStatementType SQL语句的类型
 * @param availableTargetNames 所有的可用分片资源集合
 * @param shardingValues 分片值集合
 * @return 分库后指向的数据源名称集合
 */
public Collection&lt;String&gt; doStaticSharding(final SQLStatementType sqlStatementType, final Collection&lt;String&gt; availableTargetNames, final Collection&lt;ShardingValue&lt;?&gt;&gt; shardingValues) {
    if (shardingValues.isEmpty()) {
        Preconditions.checkState(!isInsertMultiple(sqlStatementType, availableTargetNames), &quot;INSERT statement should contain sharding value.&quot;);
        return availableTargetNames;
    }
    //分片算法是这边调用的，返回路由结果（实际表，实际数据库）
    return doSharding(shardingValues, availableTargetNames);
}
//路由实际表
 private Collection&lt;String&gt; routeTables(final Collection&lt;String&gt; routedDataSources) {
    TableShardingStrategy strategy = shardingRule.getTableShardingStrategy(tableRule);
    List&lt;ShardingValue&lt;?&gt;&gt; shardingValues;
    if (HintManagerHolder.isUseShardingHint()) {
        shardingValues = getTableShardingValuesFromHint(strategy.getShardingColumns());
    } else {
        shardingValues = getShardingValues(strategy.getShardingColumns());
    }
    logBeforeRoute(&quot;table&quot;, logicTable, tableRule.getActualTables(), strategy.getShardingColumns(), shardingValues);
    Collection&lt;String&gt; result;
    if (tableRule.isDynamic()) {
        result = new HashSet&lt;&gt;(strategy.doDynamicSharding(shardingValues));
    } else {
        result = new HashSet&lt;&gt;(strategy.doStaticSharding(sqlStatementType, tableRule.getActualTableNames(routedDataSources), shardingValues));    
    }
    logAfterRoute(&quot;table&quot;, logicTable, result);
    Preconditions.checkState(!result.isEmpty(), &quot;no table route info&quot;);
    return result;
}

private SingleRoutingResult generateRoutingResult(final Collection&lt;String&gt; routedDataSources, final             Collection&lt;String&gt; routedTables) {
    SingleRoutingResult result = new SingleRoutingResult();
    //[DataNode(dataSourceName=ds_0, tableName=t_order_1), DataNode(dataSourceName=ds_1, tableName=t_order_1), DataNode(dataSourceName=ds_0, tableName=t_order_0), DataNode(dataSourceName=ds_1, tableName=t_order_0)]（第一次生成4个）
    //该方法会调用多次
    for (DataNode each : tableRule.getActualDataNodes(routedDataSources, routedTables)) {
        result.put(each.getDataSourceName(), new SingleRoutingTableFactor(logicTable, each.getTableName()));
    }
    return result;
}
</code></pre></li>
<li><p>执行<br> 类图<br> <img src="http://i.imgur.com/b1XLRum.png" alt=""></p>
<pre><code>首先executeQuery 由 ShardingStatement（ShardingPreparedStatement）调用
 @Override
public ResultSet executeQuery(final String sql) throws SQLException {
    if (null != currentResultSet &amp;&amp; !currentResultSet.isClosed()) {
        currentResultSet.close();
    }
    currentResultSet = ResultSetFactory.getResultSet(generateExecutor(sql).executeQuery(), mergeContext);
    return currentResultSet;
}

private StatementExecutor generateExecutor(final String sql) throws SQLException {
    StatementExecutor result = new StatementExecutor(shardingConnection.getShardingContext().getExecutorEngine());
    //路由sql
    SQLRouteResult sqlRouteResult = shardingConnection.getShardingContext().getSqlRouteEngine().route(sql);
    mergeContext = sqlRouteResult.getMergeContext();
    for (SQLExecutionUnit each : sqlRouteResult.getExecutionUnits()) {
        Statement statement = getStatement(shardingConnection.getConnection(each.getDataSource(), sqlRouteResult.getSqlStatementType()), each.getSql());
        replayMethodsInvocation(statement);
        //SQLExecutionUnit，statement 组装成发给StatementExecutorWrapper 给执行器执行
        result.addStatement(new StatementExecutorWrapper(statement, each));
    }
    return result;
}

可以看出 generateExecutor 方法生成 StatementExecutor 执行器 接着调用 executeQuery
 /**
 * 执行SQL查询.
 *
 * @return 结果集列表
 */
public List&lt;ResultSet&gt; executeQuery() {
    //计时
    Context context = MetricsContext.start(&quot;ShardingStatement-executeQuery&quot;);
    postExecutionEvents();//（此处是一个问题，接下来要仔细分析一下）
    final boolean isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();
    final Map&lt;String, Object&gt; dataMap = ExecutorDataMap.getDataMap();
    List&lt;ResultSet&gt; result;
    try {
        if (1 == statementExecutorWrappers.size()) {
            return Collections.singletonList(executeQueryInternal(statementExecutorWrappers.iterator().next(), isExceptionThrown, dataMap));
        }
        result = executorEngine.execute(statementExecutorWrappers, new ExecuteUnit&lt;StatementExecutorWrapper, ResultSet&gt;() {

            @Override
            public ResultSet execute(final StatementExecutorWrapper input) throws Exception {
                return executeQueryInternal(input, isExceptionThrown, dataMap);
            }
        });
    } finally {
        MetricsContext.stop(context);
    }
    return result;
}

/**
 * 多线程执行任务.（运用谷歌com.google.common.util.concurrent）
 *
 * @param inputs 输入参数
 * @param executeUnit 执行单元
 * @param &lt;I&gt; 入参类型
 * @param &lt;O&gt; 出参类型
 * @return 执行结果
 */
public &lt;I, O&gt; List&lt;O&gt; execute(final Collection&lt;I&gt; inputs, final ExecuteUnit&lt;I, O&gt; executeUnit) {
    ListenableFuture&lt;List&lt;O&gt;&gt; futures = submitFutures(inputs, executeUnit);
    addCallback(futures);
    return getFutureResults(futures);
}

private ResultSet executeQueryInternal(final StatementExecutorWrapper statementExecutorWrapper, final boolean isExceptionThrown, final Map&lt;String, Object&gt; dataMap) {
    ResultSet result;
    ExecutorExceptionHandler.setExceptionThrown(isExceptionThrown);
    ExecutorDataMap.setDataMap(dataMap);
    try {
        //statementExecutorWrapper.getSqlExecutionUnit().getSql() 要参考 SqlExecutionUnit 里面的 sql参数生成过程
        result = statementExecutorWrapper.getStatement().executeQuery(statementExecutorWrapper.getSqlExecutionUnit().getSql());
    } catch (final SQLException ex) {
        postExecutionEventsAfterExecution(statementExecutorWrapper, EventExecutionType.EXECUTE_FAILURE, Optional.of(ex));
        ExecutorExceptionHandler.handleException(ex);
        return null;
    }
    postExecutionEventsAfterExecution(statementExecutorWrapper);
    return result;
}
</code></pre></li>
<li><p>归并<br> 类图<br> <img src="http://i.imgur.com/czM6sto.png" alt=""></p>
<pre><code>ResultSetFactory ： 分片结果集归并工厂.
 /**
 * 获取结果集.
 *
 * @param resultSets 结果集列表
 * @param mergeContext 结果归并上下文
 * @return 结果集包装
 */
public static ResultSet getResultSet(final List&lt;ResultSet&gt; resultSets, final MergeContext mergeContext) throws SQLException {
    ShardingResultSets shardingResultSets = new ShardingResultSets(resultSets);
    log.trace(&quot;Sharding-JDBC: Sharding result sets type is &apos;{}&apos;&quot;, shardingResultSets.getType().toString());
    switch (shardingResultSets.getType()) {
        case EMPTY:
            return buildEmpty(resultSets);
        case SINGLE:
            return buildSingle(shardingResultSets, mergeContext);
        case MULTIPLE:
            return buildMultiple(shardingResultSets, mergeContext);
        default:
            throw new UnsupportedOperationException(shardingResultSets.getType().toString());
    }
}
//直接看buildMultiple 上面比较简单直接返回即可
private static ResultSet buildMultiple(final ShardingResultSets shardingResultSets, final MergeContext mergeContext) throws SQLException {
    //实例化 ResultSetMergeContext
    ResultSetMergeContext resultSetMergeContext = new ResultSetMergeContext(shardingResultSets, mergeContext);
    return buildCoupling(buildReducer(resultSetMergeContext), resultSetMergeContext);
  }
public ResultSetMergeContext(final ShardingResultSets shardingResultSets, final MergeContext mergeContext) throws SQLException {
    this.shardingResultSets = shardingResultSets;
    this.mergeContext = mergeContext;
    currentOrderByKeys = new LinkedList&lt;&gt;();
    init();
}

private void init() throws SQLException {
    //初始化 AbstractResultSetAdapter 一个实例  看下 AbstractResultSetAdapter 初始化干了什么
    setColumnIndex(((AbstractResultSetAdapter) shardingResultSets.getResultSets().get(0)).getColumnLabelIndexMap());
    currentOrderByKeys.addAll(mergeContext.getOrderByColumns());
}

private void setColumnIndex(final Map&lt;String, Integer&gt; columnLabelIndexMap) {
    for (IndexColumn each : getAllFocusedColumns()) {
        if (each.getColumnIndex() &gt; 0) {
            continue;
        }
        Preconditions.checkState(
                columnLabelIndexMap.containsKey(each.getColumnLabel().orNull()) || columnLabelIndexMap.containsKey(each.getColumnName().orNull()), String.format(&quot;%s has not index&quot;, each));
        if (each.getColumnLabel().isPresent() &amp;&amp; columnLabelIndexMap.containsKey(each.getColumnLabel().get())) {
            each.setColumnIndex(columnLabelIndexMap.get(each.getColumnLabel().get()));
        } else if (each.getColumnName().isPresent() &amp;&amp; columnLabelIndexMap.containsKey(each.getColumnName().get())) {
            each.setColumnIndex(columnLabelIndexMap.get(each.getColumnName().get()));
        }
    }
}
</code></pre></li>
</ol>
]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shading </tag>
            
            <tag> shading-jdbc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shading-jdbc]]></title>
      <url>/2016/08/31/db/shading-jdbc/</url>
      <content type="html"><![CDATA[<h2 id="Shading介绍"><a href="#Shading介绍" class="headerlink" title="Shading介绍"></a>Shading介绍</h2><table>
<thead>
<tr>
<th>功能</th>
<th>Cobar</th>
<th>Mycat</th>
<th>Heisenberg</th>
<th>TDDL</th>
<th>Sharding-JDBC</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否开源</td>
<td>开源</td>
<td>开源</td>
<td>开源</td>
<td>部分开源</td>
<td>开源</td>
</tr>
<tr>
<td>架构模型</td>
<td>Proxy架构</td>
<td>Proxy架构</td>
<td>Proxy架构</td>
<td>应用集成架构</td>
<td>应用集成架构</td>
</tr>
<tr>
<td>数据库支持</td>
<td>MySQL</td>
<td>任意</td>
<td>任意</td>
<td>任意</td>
<td>MySQL(计划Oracle)</td>
</tr>
<tr>
<td>外围依赖</td>
<td>无</td>
<td>无</td>
<td>无</td>
<td>Diamond</td>
<td>无</td>
</tr>
<tr>
<td>使用复杂度</td>
<td>一般</td>
<td>一般</td>
<td>一般</td>
<td>复杂</td>
<td>一般</td>
</tr>
<tr>
<td>技术文档支持</td>
<td>较少</td>
<td>付费</td>
<td>较少</td>
<td>无</td>
<td>一般</td>
</tr>
<tr>
<td>开源组织</td>
<td>阿里</td>
<td>社区(Cobar衍生)</td>
<td>社区(Cobar衍生)</td>
<td>阿里</td>
<td>当当</td>
</tr>
</tbody>
</table>
<ol>
<li>其中TDDL是文档较少，github上代码还是4年前更新。现在TDDL已经在阿里云上架，名为DRDS(Distribute Relational Database Service 分布式关系型数据库服务)</li>
<li>基于Proxy的架构的缺点：网络消耗会产生性能问题，并且多一个外围系统依赖就意味着需要多增加和承担一份风险</li>
</ol>
<h2 id="Shading-JDBC简介"><a href="#Shading-JDBC简介" class="headerlink" title="Shading-JDBC简介"></a>Shading-JDBC简介</h2><ul>
<li>Sharding-JDBC是当当开源的数据库分库分表中间件。Sharding-JDBC直接封装JDBC协议，可以理解为增强版的JDBC驱动，旧代码迁移成本几乎为零。Sharding-JDBC定位为轻量级java框架，使用客户端直连数据库，以jar包形式提供服务，无proxy代理层，无需额外部署，无其他依赖，DBA也无需改变原有的运维方式。</li>
<li>主要特点<ul>
<li>可适用于任何基于java的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。</li>
<li>理论上可支持任意实现JDBC规范的数据库。虽然目前仅支持MySQL，但已有支持Oracle，SQLServer，DB2等数据库的计划。</li>
<li>分片策略灵活，可支持=，BETWEEN，IN等多维度分片，也可支持多分片键共用。</li>
<li>SQL解析功能完善，支持聚合，分组，排序，Limit，OR等查询，并且支持Binding Table以及笛卡尔积的表查询。</li>
<li>支持柔性事务(目前仅完成最大努力送达型)。支持读写分离。</li>
<li>性能高。单库查询QPS为原生JDBC的99.8%；双库查询QPS比单库增加94%。</li>
</ul>
</li>
<li><a href="https://github.com/dangdangdotcom/Sharding-JDBC/" target="_blank" rel="external">GitHub源码</a> 、 <a href="http://dangdangdotcom.github.io/sharding-jdbc/" target="_blank" rel="external">官方文档</a></li>
</ul>
<h2 id="整体架构图"><a href="#整体架构图" class="headerlink" title="整体架构图"></a>整体架构图</h2><p><img src="/data/images/2016/08/shading-jdbc-architecture.png" alt="shading-jdbc架构图"></p>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="逻辑表与实际表映射关系"><a href="#逻辑表与实际表映射关系" class="headerlink" title="逻辑表与实际表映射关系"></a>逻辑表与实际表映射关系</h3><p>配置分库分表的目的是将原有一张表的数据分散到不同库不同表中，且不改变原有SQL语句的情况下来使用这一张表。那么从一张表到多张的映射关系需要使用逻辑表与实际表这两种概念。下面通过一个例子来解释一下。假设在使用PreparedStatement访问数据库，SQL如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_order <span class="keyword">where</span> user_id = ? <span class="keyword">and</span> order_id = ?;</div></pre></td></tr></table></figure>
<p>当<code>user_id=0</code>且<code>order_id=0</code>时，Sharding-JDBC将会将SQL语句转换为如下形式：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> db0.t_order_0 <span class="keyword">where</span> user_id = ? <span class="keyword">and</span> order_id = ?;</div></pre></td></tr></table></figure>
<p>其中原始SQL中的t_order就是逻辑表，而转换后的db0.t_order_0就是实际表。</p>
<p>那么，为什么当<code>user_id=0</code>且<code>order_id=0</code>时会进行这样的转换，如果当<code>user_id=1</code>且<code>order_id=1</code>时又会是什么情况？<code>user_id</code>和<code>order_id</code>这两个字段有什么特殊含义吗？</p>
<h3 id="分片键"><a href="#分片键" class="headerlink" title="分片键"></a>分片键</h3><p>官方解释：分片键是分片策略的第一个参数。分片键表示的是SQL语句中WHERE中的条件列。</p>
<p>方言：分片键就是逻辑sql语句中的某个字段，通过某个字段(或者某几个字段)可以将逻辑sql语句转换成实际运行的sql语句。上例中的<code>user_id</code>和<code>order_id</code>就是分片键。</p>
<h3 id="分片策略和分片算法"><a href="#分片策略和分片算法" class="headerlink" title="分片策略和分片算法"></a>分片策略和分片算法</h3><p>我将上面的分片键定义一个算法(如<code>user_id</code>对2取余<code>user_id % 2</code>的结果就是实际表的尾数，当然可以自己定义更复杂的算法)，对数据库或者表加上了如上的分片算法就属于分片策略。</p>
<h2 id="柔性事物"><a href="#柔性事物" class="headerlink" title="柔性事物"></a>柔性事物</h2><ul>
<li>柔性事务（遵循BASE理论）是指相对于ACID刚性事务而言的。柔性事务分为：两阶段型、补偿型、异步确保型、最大努力通知型几种。</li>
</ul>
<h2 id="其他-略"><a href="#其他-略" class="headerlink" title="其他(略)"></a>其他(略)</h2><ul>
<li><p><code>CAP</code>理论、<code>ACID</code>、<code>BASE</code></p>
<ul>
<li><p><code>CAP</code>理论</p>
<p>Web服务无法同时满足以下3个属性</p>
<ul>
<li>Consistency(一致性)，数据一致更新，所有数据变动都是同步的</li>
<li>Availability(可用性)，每个操作都必须以可预期的响应结束</li>
<li>Partition tolerance(分区容错性)，即使出现单个组件无法可用,操作依然可以完成</li>
</ul>
<p>在任何数据库设计中,一个Web应用至多只能同时支持上面的两个属性，不可能三者兼顾。对于分布式系统来说，分区容错是基本要求，所以必然要放弃一致性。对于大型网站来说， 分区容错和可用性的要求更高，所以一般都会选择适当放弃一致性。对应CAP理论，NoSQL追求的是AP，而传统数据库追求的是CA，这也可以解释为什么 传统数据库的扩展能力有限的原因。</p>
</li>
<li><p><code>ACID</code>解决方案</p>
<p>ACID数据库事务极大地简化了应用开发人员的工作.正如其缩写标识所示,ACID事务提供以下几种保证:</p>
<ul>
<li>Atomicity（原子性），事务中的所有操作,要么全部成功,要么全部不做.</li>
<li>Consistency（一致性）在事务开始与结束时,数据库处于一致状态.</li>
<li>Isolation（隔离性） 事务如同只有这一个操作在被数据库所执行一样.</li>
<li>Durability（持久性）. 在事务结束时,此操作将不可逆转.(也就是只要事务提交,系统将保证数据不会丢失,即使出现系统Crash,译者补充).</li>
</ul>
<p>数据库厂商在很久以前就认识到数据库分区的必要性,并引入了一种称为2PC(两阶段提交)的技术来提供跨越多个数据库实例的ACID保证</p>
</li>
<li><p><code>BASE</code>解决方案</p>
<ul>
<li>Basically Available（基本可用）</li>
<li>Soft-state（ 软状态/柔性事务）</li>
<li>Eventual Consistency（最终一致性）</li>
</ul>
<p>BASE模型是传统ACID模型的反面，不同与ACID，BASE强调牺牲高一致性，从而获得可用性，数据允许在一段时间内的不一致，只要保证最终一致就可以了。</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>参考文章</p>
<ul>
<li><p>[sharding-jdbc Wiki] <a href="http://dangdangdotcom.github.io/sharding-jdbc/" target="_blank" rel="external">http://dangdangdotcom.github.io/sharding-jdbc/</a></p>
</li>
<li><p>[柔性事物] <a href="http://www.zhihu.com/question/31813039/answer/53437637" target="_blank" rel="external">http://www.zhihu.com/question/31813039/answer/53437637</a></p>
</li>
<li><p>[CAP理论、ACID和BASE] <a href="http://blog.itpub.net/58054/viewspace-660826/" target="_blank" rel="external">http://blog.itpub.net/58054/viewspace-660826/</a></p>
</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shading </tag>
            
            <tag> shading-jdbc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ofbiz单元测试]]></title>
      <url>/2016/08/31/java/ofbiz/ofbiz-test/</url>
      <content type="html"><![CDATA[<h2 id="测试方法书写"><a href="#测试方法书写" class="headerlink" title="测试方法书写"></a>测试方法书写</h2><ul>
<li>在ofbiz-component.xml中加入<code>&lt;test-suite loader=&quot;main&quot; location=&quot;testdef/AezoTests.xml&quot; /&gt;</code>运行测试方法的入口文件</li>
<li><p>在入口文件AezoTests.xml中加入一个测试案例smPerson-tests</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">test-suite</span> <span class="attr">suite-name</span>=<span class="string">"Aezotests"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ofbiz.apache.org/dtds/test-suite.xsd"</span>&gt;</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 测试用例1：测试方法使用minilang实现 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">test-case</span> <span class="attr">case-name</span>=<span class="string">"smPerson-tests"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">simple-method-test</span> <span class="attr">name</span>=<span class="string">"smPersonTests"</span> <span class="attr">location</span>=<span class="string">"component://aezo/script/cn/aezo/test/AezoTestMethod.xml"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">test-case</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">test-suite</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>smPersonTests测试方法的内容</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">simple-methods</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">        <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ofbiz.apache.org/dtds/simple-methods-v2.xsd"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">simple-method</span>  <span class="attr">method-name</span>=<span class="string">"smPersonTests"</span> <span class="attr">short-description</span>=<span class="string">"测试smPerson新增改查"</span> <span class="attr">login-required</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entity-one</span> <span class="attr">entity-name</span>=<span class="string">"UserLogin"</span> <span class="attr">value-field</span>=<span class="string">"userLogin"</span> <span class="attr">auto-field-map</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">field-map</span> <span class="attr">field-name</span>=<span class="string">"userLoginId"</span> <span class="attr">value</span>=<span class="string">"system"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">entity-one</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">field</span>=<span class="string">"createSmPersonCtx.userLogin"</span> <span class="attr">from-field</span>=<span class="string">"userLogin"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">field</span>=<span class="string">"createSmPersonCtx.username"</span> <span class="attr">value</span>=<span class="string">"smalleTest"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">field</span>=<span class="string">"createSmPersonCtx.password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">field</span>=<span class="string">"createSmPersonCtx.description"</span> <span class="attr">value</span>=<span class="string">"这是实现OFBiz的Test功能产生的记录!"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">call-service</span> <span class="attr">service-name</span>=<span class="string">"createSmPersonOfTest"</span> <span class="attr">in-map-name</span>=<span class="string">"createSmPersonCtx"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">result-to-field</span> <span class="attr">result-name</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">call-service</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">log</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">message</span>=<span class="string">"========  新增SmPerson记录 [$&#123;id&#125;] ======="</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">entity-one</span> <span class="attr">entity-name</span>=<span class="string">"SmPerson"</span> <span class="attr">value-field</span>=<span class="string">"smPersonList"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">assert</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">not</span>&gt;</span><span class="tag">&lt;<span class="name">if-empty</span> <span class="attr">field</span>=<span class="string">"smPersonList"</span>/&gt;</span><span class="tag">&lt;/<span class="name">not</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if-compare-field</span> <span class="attr">field</span>=<span class="string">"smPersonList.id"</span> <span class="attr">to-field</span>=<span class="string">"id"</span> <span class="attr">operator</span>=<span class="string">"equals"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">assert</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">check-errors</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">simple-method</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">simple-methods</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>测试方法中调用的是我们需要进行测试的功能createSmPersonOfTest(实际开发中的某个功能)</p>
</li>
</ul>
<h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><ul>
<li>如果framework/entity/config/entityengine.xml中的<code>&lt;delegator name=&quot;test&quot; ...</code>使用的数据源和默认的delegator（<code>&lt;delegator name=&quot;default&quot; ...</code>）使用的数据源（datasource）一样，则需要先运行ant的<code>load-demo</code></li>
<li>找到ant命令的<code>run-test</code>，右键<code>Run As</code>，选择<code>Ant Build...</code>。其他几个test相关的ant命令<ul>
<li><code>run-test-debug</code> 开启test时的debug。先运行此命令建立端口监听，再运行debug中该项目的远程调试命令</li>
<li><code>run-test-list</code> 运行一系列test-cast（需在runtime/test-list-build.xml中配置）</li>
<li><code>run-test-suite</code> 运行一个test-suite，如上面的suite-name=”Aezotests”，需要配置参数<code>-Dtest.suiteName=Aezotests</code></li>
<li><code>run-tests</code> 运行所有的test-cast，包括ofbiz自带的application，耗时较长</li>
</ul>
</li>
<li><p>如果选择<code>run-test</code>，则在配置<code>Main</code>选项卡中的<code>Arguments</code>，内容为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-Dtest.component=aezo</div><div class="line">-Dtest.case=smPerson-tests</div></pre></td></tr></table></figure>
<ul>
<li>参数分别标识ofbiz的component名称和testCase名称</li>
</ul>
</li>
<li>点击<code>Apply</code>，<code>Run</code>运行测试</li>
</ul>
<h2 id="测试结果分析"><a href="#测试结果分析" class="headerlink" title="测试结果分析"></a>测试结果分析</h2><p>测试结果会在控制台和<code>runtime/logs/test-results</code>中进行显示</p>
<h2 id="使用java方法写测试方法，并加载默认数据"><a href="#使用java方法写测试方法，并加载默认数据" class="headerlink" title="使用java方法写测试方法，并加载默认数据"></a>使用java方法写测试方法，并加载默认数据</h2><ul>
<li><p>在入口文件AezoTests.xml中加入一个测试案例</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">test-suite</span> <span class="attr">suite-name</span>=<span class="string">"Aezotests"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ofbiz.apache.org/dtds/test-suite.xsd"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">test-group</span> <span class="attr">case-name</span>=<span class="string">"smPersonTest"</span>&gt;</span></div><div class="line">  	<span class="comment">&lt;!-- 加载测试需要的数据到数据库 --&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">entity-xml</span> <span class="attr">action</span>=<span class="string">"load"</span> <span class="attr">entity-xml-url</span>=<span class="string">"component://aezo/testdef/data/SmPersonTestData.xml"</span>/&gt;</span></div><div class="line">  	<span class="comment">&lt;!-- 测试方法使用java实现 --&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">junit-test-suite</span> <span class="attr">class-name</span>=<span class="string">"cn.aezo.mytest.SmPersonTest"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">test-group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">test-suite</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>SmPersonTestData.xml的数据为</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">entity-engine-xml</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">SmPerson</span> <span class="attr">username</span>=<span class="string">"smalleTestJava"</span> <span class="attr">password</span>=<span class="string">"123456"</span> <span class="attr">description</span>=<span class="string">"这是ofbiz test测试需要提前放到数据库的数据"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">entity-engine-xml</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>SmPersonTest.java中的测试方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.aezo.mytest; <span class="comment">// 包名最好不要起名为test，可能生成jar包失败</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> org.ofbiz.base.util.UtilMisc;</div><div class="line"><span class="keyword">import</span> org.ofbiz.entity.GenericValue;</div><div class="line"><span class="keyword">import</span> org.ofbiz.service.testtools.OFBizTestCase;</div><div class="line"></div><div class="line"><span class="comment">// 继承的OFBizTestCase中含有dispatcher和delegator两个对象，且最终继承了Junit的TestCase类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmPersonTest</span> <span class="keyword">extends</span> <span class="title">OFBizTestCase</span> </span>&#123;</div><div class="line">	<span class="keyword">protected</span> GenericValue userLogin = <span class="keyword">null</span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SmPersonTest</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(name);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// 在测试方法运行之前运行</span></div><div class="line">    userLogin = delegator.findOne(<span class="string">"UserLogin"</span>, UtilMisc.toMap(<span class="string">"userLoginId"</span>, <span class="string">"system"</span>), <span class="keyword">false</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// 在测试方法运行之后运行</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 测试方法命名必须以test开头。程序进到该测试类后会运行所有test开头的方法</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateSmPerson</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  	Map&lt;String, Object&gt; ctx = UtilMisc.&lt;String, Object&gt;toMap(<span class="string">"username"</span>, <span class="string">"smalleTestJava"</span>, <span class="string">"password"</span>, <span class="string">"12345678"</span>, <span class="string">"description"</span>, <span class="string">"这是ofbiz test的测试数据"</span>);</div><div class="line">    ctx.put(<span class="string">"userLogin"</span>, userLogin);</div><div class="line">    </div><div class="line">    Map&lt;String, Object&gt; resp = dispatcher.runSync(<span class="string">"createSmPersonOfTestJava"</span>, ctx);</div><div class="line">    </div><div class="line">    String flag = (String) resp.get(<span class="string">"flag"</span>);</div><div class="line">    assertNotNull(flag);</div><div class="line">    assertEquals(<span class="string">"false"</span>, flag);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> test </tag>
            
            <tag> ofbiz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongodb]]></title>
      <url>/2016/08/14/db/mongodb/</url>
      <content type="html"><![CDATA[<h2 id="mongodb简介"><a href="#mongodb简介" class="headerlink" title="mongodb简介"></a>mongodb简介</h2><ul>
<li>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</li>
<li>官网：<a href="https://www.mongodb.com" target="_blank" rel="external">https://www.mongodb.com</a></li>
</ul>
<h2 id="mongodb安装"><a href="#mongodb安装" class="headerlink" title="mongodb安装"></a>mongodb安装</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><ul>
<li><a href="https://www.mongodb.com/dr/fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-3.2.8-signed.msi/download" target="_blank" rel="external">下载地址</a></li>
<li>运行.msi文件，选择custom模式后可以选择安装位置(如：D:/software/mongodb)</li>
<li>进入到安装目录D:/software/mongodb</li>
<li>新建 <code>log</code> 和 <code>db</code> 两个文件夹</li>
</ul>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">sudo curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz    # 下载（下载到了当前目录）</div><div class="line">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz                                        # 解压（解压到了当前目录）</div><div class="line">sudo mv mongodb-linux-x86_64-3.0.6/ /usr/local/mongodb                          # 将解压包拷贝到指定目录</div><div class="line">export PATH=/usr/local/mongodb/bin:$PATH                                        # 将其添加到 PATH 路径</div><div class="line">sudo mkdir -p /data/db                                                          # 创建数据库目录 /data/db 是 MongoDB 默认的启动的数据库路径(--dbpath可指定数据库目录)</div><div class="line"><span class="meta"></span></div><div class="line"># 运行测试</div><div class="line">cd /usr/local/mongodb/bin</div><div class="line">sudo ./mongod                                                                   # 启动服务</div><div class="line">sudo ./mongo                                                                    # 登录后台管理</div><div class="line"><span class="meta"></span></div><div class="line">## 启动web服务</div><div class="line"><span class="meta">#</span> sudo ./mongod --dbpath=/data/db --rest                                        # 访问 http://localhost:28017 可进入web界面</div></pre></td></tr></table></figure>
<h2 id="运行mongodb"><a href="#运行mongodb" class="headerlink" title="运行mongodb"></a>运行mongodb</h2><ol>
<li>法一：命令行运行<ul>
<li>cmd进入到安装目录的bin目录下</li>
<li>运行 <code>mongod.exe --dbpath D:\software\mongodb\db --auth</code><ul>
<li>其中参数<code>--auth</code>表示开启安全验证。如若不开启，则admin无密码登录可以查看admin下其他用户的数据</li>
</ul>
</li>
</ul>
</li>
<li>法二：将MongoDB服务器作为Windows服务运行<ul>
<li>(以管理员运行)cmd进入到安装目录的<code>D:\software\mongodb\bin</code>目录下</li>
<li>运行(注意参数说明) <code>mongod.exe --logpath &quot;D:\software\mongodb\log\mongodb.log&quot; --logappend --dbpath &quot;D:\software\mongodb\db&quot; --port 27018 --serviceName &quot;mongodb&quot; --serviceDisplayName &quot;mongodb&quot; --install</code><ul>
<li>参数描述<ul>
<li><code>--bind_ip 127.0.0.1</code>    绑定服务IP，若绑定127.0.0.1，数据库实例将只监听127.0.0.1的请求，即只能本机访问，不指定默认本地所有IP</li>
<li><code>--logpath</code>    定MongoDB日志文件，注意是指定文件不是目录</li>
<li><code>--logappend</code>    使用追加的方式写日志</li>
<li><code>--dbpath</code>    指定数据库路径</li>
<li><code>--port</code>    指定服务端口号(默认端口27017)</li>
<li><code>--serviceName</code>    指定服务名称</li>
<li><code>--serviceDisplayName</code>    指定服务名称，有多个mongodb服务时执行。</li>
<li><code>--install</code>    指定作为一个Windows服务安装。</li>
</ul>
</li>
<li><code>mongod.exe --auth --logpath &quot;D:\software\mongodb\log\mongodb.log&quot; --logappend --dbpath &quot;D:\software\mongodb\db&quot; --port 27018 --serviceName &quot;mongodb&quot; --serviceDisplayName &quot;mongodb&quot; --reinstall</code> 其中<code>--auth</code>表示开启安全验证、<code>--reinstall</code>表示重新注册服务</li>
</ul>
</li>
<li>卸载：管理员运行<code>sc delete 服务名称</code></li>
</ul>
</li>
</ol>
<h2 id="MongoDB牛刀小试"><a href="#MongoDB牛刀小试" class="headerlink" title="MongoDB牛刀小试"></a>MongoDB牛刀小试</h2><p>MongoDB Shell是MongoDB自带的交互式Javascript shell,用来对MongoDB进行操作和管理的交互式环境。</p>
<ul>
<li>重启一个dos窗口，进入到安装目录的bin目录下</li>
<li>运行命令 <code>mongo</code>, 看到版本号则运行成功。当你进入mongoDB后台后，它默认会链接到 test 文档（数据库），mongodb默认内置有两个数据库，一个名为admin，一个名为local<ul>
<li><code>mongo --port 27018</code> 指定端口进行连接</li>
</ul>
</li>
<li>牛刀小试<ul>
<li>输入 <code>2+2</code> 回车，会打印 4</li>
<li>运行 <code>db</code> 查看当前数据库(test)</li>
<li>运行 <code>db.myvar.insert({&quot;num&quot;:10})</code> 表示将10插入到集合myvar的num字段中(直接运行后如果没有myvar的集合则新建一个)</li>
<li>运行 <code>db.myvar.find()</code> 会打印集合myvar的情况</li>
</ul>
</li>
</ul>
<h2 id="MongoDB使用"><a href="#MongoDB使用" class="headerlink" title="MongoDB使用"></a>MongoDB使用</h2><h3 id="设置用户名密码"><a href="#设置用户名密码" class="headerlink" title="设置用户名密码"></a>设置用户名密码</h3><ul>
<li><code>use admin</code> 切换到admin数据库</li>
<li><code>db.createUser({user:&quot;root&quot;,pwd:&quot;root&quot;,roles:[&quot;root&quot;]})</code> 创建管理员账号</li>
<li><code>db.auth(&quot;root&quot;,&quot;root&quot;)</code> 验证登录</li>
<li><code>exit</code> 退出</li>
<li>重新启动，并以<code>--auth</code>模式启动</li>
<li><code>mongo --port 27018 -u root -p root admin</code> 使用root/root登录admin数据库</li>
</ul>
<h3 id="MongoDB管理工具robomongo"><a href="#MongoDB管理工具robomongo" class="headerlink" title="MongoDB管理工具robomongo"></a>MongoDB管理工具robomongo</h3><ol>
<li>下载地址 <code>https://robomongo.org/download</code> (<code>Download portable version for Windows 64-bit</code>为免安装版)</li>
</ol>
<blockquote>
<p>参考文章</p>
<ul>
<li>[MongoDB 教程] <a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="external">http://www.runoob.com/mongodb/mongodb-tutorial.html</a></li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
        <tags>
            
            <tag> db </tag>
            
            <tag> mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RabbitMQ]]></title>
      <url>/2016/08/14/arch/rabbitmq/</url>
      <content type="html"><![CDATA[<h2 id="RabbitMQ简介"><a href="#RabbitMQ简介" class="headerlink" title="RabbitMQ简介"></a>RabbitMQ简介</h2><ul>
<li>rabbitMQ是一个在AMQP协议(高级消息队列协议)标准基础上完整的，可服用的企业消息系统。他遵循Mozilla Public License开源协议。采用 Erlang 实现的工业级的消息队列(MQ)服务器。</li>
<li>RabbitMQ的官方站：<a href="http://www.rabbitmq.com/" target="_blank" rel="external">http://www.rabbitmq.com/</a></li>
</ul>
<h2 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h2><p>Rabbit MQ 是建立在强大的Erlang OTP平台上，因此安装Rabbit MQ的前提是安装Erlang。通过下面两个连接下载安装3.2.3 版本：</p>
<ul>
<li>安装 <a href="http://www.erlang.org/download/otp_win32_R16B03.exe" target="_blank" rel="external">Eralng OTP For Windows (vR16B03)</a></li>
<li>安装 <a href="https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5.exe" target="_blank" rel="external">RabbitMQ Server (3.6.5)</a></li>
<li>默认监听<code>5672</code>端口(客户端连接使用此端口)，后台使用端口<code>15672</code></li>
</ul>
<h2 id="RabbitMQ启动"><a href="#RabbitMQ启动" class="headerlink" title="RabbitMQ启动"></a>RabbitMQ启动</h2><ul>
<li>激活Rabbit MQ’s Management Plugin(可激活管理插件)<ul>
<li>CMD进入RabbitMQ安装目录，进入到rabbitmq_server-3.6.5/sbin目录</li>
<li>运行 <code>rabbitmq-plugins.bat enable rabbitmq_management</code></li>
</ul>
</li>
<li>运行 <code>rabbitmq-service.bat start</code> 启动RabbitMQ服务</li>
<li>运行 <code>rabbitmq-service.bat stop</code> 停止服务</li>
<li>查看用户<ul>
<li>运行 <code>rabbitmqctl.bat list_users</code> 查看用户(有一个guest默认用户)</li>
</ul>
</li>
<li>登录管理后台<ul>
<li><code>http://localhost:15672</code> 使用guest/guest登录</li>
</ul>
</li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> arch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mq </tag>
            
            <tag> rabbitMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux系统命令]]></title>
      <url>/2016/07/21/linux/linu-system/</url>
      <content type="html"><![CDATA[<h2 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h2><h3 id="信息查询"><a href="#信息查询" class="headerlink" title="信息查询"></a>信息查询</h3><ul>
<li><p>查看系统信息</p>
<ul>
<li><p>查看操作系统版本 <code>cat /proc/version</code></p>
<blockquote>
<p>如腾讯云服务器 <code>Linux version 3.10.0-327.36.3.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC) ) #1 SMP Mon Oct 24 16:09:20 UTC 2016</code> 中的 <code>3.10.0</code> 表示内核版本 <code>x86_64</code> 表示是64位系统</p>
</blockquote>
</li>
<li><p>查看CentOS版本 <code>cat /etc/redhat-release</code> 如：CentOS Linux release 7.2.1511 (Core)</p>
</li>
<li>查看内存 <code>grep MemTotal /proc/meminfo</code></li>
<li><code>df -hl</code> 查看磁盘使用情况</li>
<li>查看内网ip <code>ip addr</code></li>
<li>检查网络连接 <code>ping 192.168.1.1</code>(或者<code>ping www.baidu.com</code>)，检查端口：<code>telnet 192.168.1.1 8080</code></li>
</ul>
</li>
<li><p>查询程序信息</p>
<ul>
<li>查看安装程序(支持模糊查询) <code>rpm -qa | grep vsftpd</code> 查看是否安装vsftpd(一款ftp服务器软件)</li>
<li><code>netstat -lnp</code> 查看所有进程信息(端口、PID)<ul>
<li>root运行：<code>sudo netstat -lnp</code> 可查看使用root权限运行的进程PID(否则PID隐藏)</li>
<li><code>ss -ant</code> CentOS 7 查看所有监听端口</li>
<li><code>netstat -tnl</code> 查看开放的端口</li>
<li><code>netstat -lnp | grep tomcat</code> 查看含有tomcat相关的进程</li>
</ul>
</li>
<li>查看进程信息<ul>
<li><code>ps -ef | grep java | grep -v grep</code>(其中java可换成run.py等)<ul>
<li>结果如：<code>root   23672 22596  0 20:36 pts/1    00:00:02 python -u main.py</code>. 运行用户、进场id、…</li>
</ul>
</li>
<li>自带程序<code>top</code>查看, 推荐安装功能更强大的<code>htop</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="强制关闭重启"><a href="#强制关闭重启" class="headerlink" title="强制关闭重启"></a>强制关闭重启</h3><ul>
<li><code>shutdown -r now</code> root登录可立刻重启</li>
<li>关闭某个PID进程 <code>kill PID</code><ul>
<li><code>netstat -lnp</code> 查看所有进场信息(端口、PID)</li>
<li>强制杀进程 <code>kill -s 9 PID</code></li>
</ul>
</li>
</ul>
<h3 id="程序-服务"><a href="#程序-服务" class="headerlink" title="程序/服务"></a>程序/服务</h3><ul>
<li>类似<code>produce_0.0.1_linux_amd64.tar.gz</code>压缩包安装<ul>
<li>解压<code>tar -xvf produce_0.0.1_linux_amd64.tar.gz</code>, 会在当前目录生成一个<code>produce_0.0.1_linux_amd64</code>的文件夹</li>
<li>进入文件加运行相应的二进制文件即可<code>./mybash</code></li>
</ul>
</li>
<li>安装程序包 <code>rpm -ivh 安装包名</code></li>
</ul>
<h3 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h3><ul>
<li>运行sh文件：进入到该文件目录，运行<code>./xxx.sh</code></li>
<li>脱机后台运行sh文件：<code>nohup bash startofbiz.sh &gt; my.log 2&gt;&amp;1 &amp;</code><ul>
<li>运行二进制文件：<code>nohup ./mybash &gt; my.log 2&gt;&amp;1 &amp;</code> 其中mybash为可执行的二进制文件</li>
<li>sudo形式运行：<code>nohup sudo -b ./mybash &gt; my.log 2&gt;&amp;1 &amp;</code></li>
<li>可解决利用客户端连接服务器，执行的程序当客户端退出后，服务器的程序也停止了</li>
<li><code>nohup</code>这个表示脱机执行，默认在当前目录生成一个<code>nohup.out</code>的日志文件</li>
<li><code>&amp;</code> 最后面的&amp;表示放在后台执行</li>
<li><code>startofbiz.sh &gt; my.log</code> 表示startofbiz.sh的输出重定向到my.log</li>
<li><code>2&gt;&amp;1</code> 表示将错误输出重定向到标准输出<ul>
<li><code>0</code>：键盘输入；<code>1</code>：标准输入；<code>2</code>：错误输出</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="自定义服务-8"><a href="#自定义服务-8" class="headerlink" title="自定义服务 ^8"></a>自定义服务 <a href="[自定义服务](https://segmentfault.com/a/1190000009723940)">^8</a></h3><ul>
<li>nginx安装一般会自动注册到服务中取，有些手动安装可能需要自己注册.以nginx手动注册成服务为例</li>
<li><p>方法：建立服务文件<code>vim /usr/lib/systemd/system/nginx.service</code>(注意路径)，文件内容如下：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=nginx - high performance web server</div><div class="line">After=network.target remote-fs.target nss-lookup.target</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=forking</div><div class="line">ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</div><div class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</div><div class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
</code></pre><ul>
<li>说明  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[Unit] 服务的说明</div><div class="line">Description 描述服务</div><div class="line">After 依赖，当依赖的服务启动之后再启动自定义的服务</div><div class="line"></div><div class="line">[Service] 服务运行参数的设置</div><div class="line">Type=forking 是后台运行的形式; Type=oneshot适用于只执行一项任务、随后立即退出的服务。</div><div class="line">ExecStart 为服务的具体运行命令</div><div class="line">ExecReload 为重启命令</div><div class="line">ExecStop 为停止命令</div><div class="line">PrivateTmp=True 表示给服务分配独立的临时空间</div><div class="line">注意：启动、重启、停止命令全部要求使用绝对路径</div><div class="line"></div><div class="line">[Install] 服务安装的相关设置，可设置为多用户</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>命令：</p>
<ul>
<li>启动：<code>systemctl start nginx.service</code></li>
<li>查看状态：<code>systemctl status nginx.service</code></li>
<li>重启服务：<code>systemctl restart nginx.service</code></li>
<li>停止服务：<code>systemctl stop nginx.service</code></li>
<li>查看所有服务：<code>systemctl list-units --type=service</code><ul>
<li>查看所有：<code>systemctl list-unit-files</code></li>
</ul>
</li>
<li>设置开机启动：<code>systemctl enable nginx.service</code></li>
<li>停止开机启动：<code>systemctl disable nginx.service</code></li>
</ul>
</li>
</ul>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><ol>
<li>查看磁盘使用情况 <code>df -hl</code></li>
<li>查看数据盘 <code>fdisk -l</code>(如：Disk：/dev/vda … Disk：/dev/vdb表示有两块磁盘)</li>
<li>格式化磁盘 <code>mkfs.ext4 /dev/vdb</code> (一般云服务器买的磁盘未进行格式化文件系统和挂载)</li>
<li>挂载磁盘 <code>mount /dev/vdb /home/</code> 挂载磁盘到<code>/home</code>目录</li>
<li>修改fstab以便系统启动时自动挂载磁盘 <code>echo &#39;/dev/vdb  /home ext4    defaults    0  0&#39; &gt;&gt; /etc/fstab</code> 重新挂载了磁盘需要重启(<code>reboot</code>)</li>
</ol>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul>
<li><code>cat &lt;fileName&gt;</code> 查看文件</li>
<li><code>touch &lt;fileName&gt;</code> 新建文件</li>
<li><code>vi &lt;fileName&gt;</code> 编辑文件<ul>
<li><code>vim &lt;fireName&gt;</code> 编辑文件，有的可能默认没有安装vim</li>
</ul>
</li>
<li><code>rm &lt;file&gt;</code> 删除文件<ul>
<li>提示 <code>rm: remove regular file &#39;test&#39;?</code> 时，在后面输入 <code>yes</code> 回车</li>
</ul>
</li>
<li><code>cp xxx.txt /usr/local/xxx</code> 复制文件(将xxx.txt移动到/usr/local/xxx)<ul>
<li>复制文件到远程服务器：<code>scp /home/test root@192.168.1.1:/home</code> 将本地linux系统的test文件或者文件夹复制到远程的home目录下</li>
</ul>
</li>
<li>重命名文件或目录、将文件由一个目录移入另一个目录中<ul>
<li><code>mv a.txt b.txt</code> (将a.txt重命名为b.txt)</li>
<li><code>mv a.txt /home/b.txt</code> 移动并重名名</li>
</ul>
</li>
<li><p><code>ls</code> 列举文件 <a href="[Linux文件属性](http://www.cnblogs.com/kzloser/articles/2673790.html)">^3</a></p>
<ul>
<li><code>ll</code> 列举文件详细<ul>
<li><code>ls *.txt</code>、<code>ll test*</code> 模糊查询</li>
<li><code>ll -rt *.txt</code> 按时间排序 (<code>-r</code>表示逆序、<code>-t</code>按时间排序)</li>
<li><code>ll -Sh</code> 按文件大小排序 (<code>-S</code>按文件大小排序、<code>-h</code>将文件大小按1024进行转换显示)</li>
</ul>
</li>
<li><code>ls -al</code> 列举所有文件详细<blockquote>
<p>文件详细如下图</p>
<p><img src="/data/images/2017/02/文件详细.gif" alt="文件详细"></p>
<p>类型与权限如下图</p>
<p><img src="//data/images/2017/02/类型与权限.gif" alt="类型与权限"></p>
<ul>
<li>第一个字符代表这个文件的类型(如目录、文件或链接文件等等)：<ul>
<li>[ d ]则是目录、[ - ]则是文件、[ l ]则表示为连结档(link file)、[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)、[ c ]则表示为装置文件里面的串行端口设备,例如键盘、鼠标(一次性读取装置)</li>
</ul>
</li>
<li>接下来的字符中,以三个为一组,且均为『rwx』 的三个参数的组合&lt; [ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute) 要注意的是,这三个权限的位置不会改变,如果没有权限,就会出现减号[ - ]而已&gt;<ul>
<li>第一组为『文件拥有者的权限』、第二组为『同群组的权限』、第三组为『其他非本群组的权限』</li>
<li>当 s 标志出现在文件拥有者的 x 权限上时即为特殊权限。特殊权限如 SUID, SGID, SBIT</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li><p><code>file &lt;fileName&gt;</code> 查看文件属性</p>
</li>
<li><code>whereis &lt;fileName&gt;</code> 查询文件<ul>
<li><code>which &lt;exeName&gt;</code> 查询可执行文件位置 (在PATH路径中寻找)</li>
</ul>
</li>
<li><code>sudo find / -name nginx.conf</code> 查询文件位置(查看<code>nginx.conf</code>文件所在位置)</li>
</ul>
<h3 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h3><ul>
<li><code>vim my.txt</code> 打开编辑界面(命令模式)</li>
<li><code>insert</code> 进入编辑模式；<code>esc</code>退出编辑模式(进入命令模式)</li>
<li>命令：<ul>
<li><code>wq</code>/<code>:x</code> 保存并退出</li>
<li><code>dd</code> 删除光标所在行<ul>
<li><code>Ndd</code> 删除光标以下N行</li>
</ul>
</li>
<li><code>u</code> 撤销上一步操作</li>
<li><code>Ctrl+r</code> 恢复上一步被撤销的操作</li>
<li><code>Ctrl+v</code> 进入列编辑模式</li>
</ul>
</li>
<li>批量注释<ul>
<li><code>Ctrl+v</code> 进入列编辑模式，在需要注释处移动光标选中需要注释的行</li>
<li><code>Shift+i</code></li>
<li>再插入注释符，比如按<code>//</code>或者<code>#</code></li>
<li>按<code>Esc</code>即可全部注释</li>
</ul>
</li>
<li>批量删除注释：<code>ctrl+v</code>进入列编辑模式，横向选中列的个数(如”//“注释符号需要选中两列)，然后按<code>d</code>就会删除注释符号</li>
</ul>
<h3 id="文件夹-目录"><a href="#文件夹-目录" class="headerlink" title="文件夹/目录"></a>文件夹/目录</h3><ol>
<li>新建文件夹 <strong><code>mkdir [DirName]</code></strong> (或者用绝对路径 <code>mkdir /usr/local/DirName</code>)</li>
<li><p>删除文件夹</p>
<ul>
<li>删除文件夹 <code>rmdir [DirName]</code> (如果文件夹不为空则无法删除)</li>
<li>强制删除文件夹和其子文件夹 <strong><code>rm -rf [DirName]</code></strong><blockquote>
<p>-r 就是向下递归，不管有多少级目录，一并删除<br>-f 就是直接强行删除，不作任何提示的意思</p>
</blockquote>
</li>
</ul>
</li>
<li><p>切换目录</p>
<ul>
<li>进入目录 <strong><code>cd</code> DirName</strong></li>
<li>返回上一级目录 <code>cd ..</code></li>
<li>返回某一级目录 <strong><code>cd</code> /usr/local/xxx</strong></li>
<li>返回根目录 <code>cd ~</code> 或者 <code>cd $HOME</code></li>
</ul>
</li>
<li><p>查看当前目录绝对路径 <code>pwd</code></p>
</li>
<li>查看目录结构 <code>ls</code><ul>
<li>查看目录结构包括隐藏文件 <code>ls -a</code></li>
</ul>
</li>
</ol>
<h3 id="压缩包-推荐tar-1"><a href="#压缩包-推荐tar-1" class="headerlink" title="压缩包(推荐tar) ^1"></a>压缩包(推荐tar) <a href="[文件压缩与解压](http://www.jb51.net/LINUXjishu/43356.html)">^1</a></h3><ol>
<li><p>解压</p>
<ul>
<li><p><code>tar -xvf archive.tar</code> 解压tar包(tar不存在乱码问题)</p>
<ul>
<li><p>参数说明</p>
<ul>
<li>独立命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个<ul>
<li><code>-c</code>: 建立压缩档案</li>
<li><code>-x</code>：解压</li>
<li><code>-t</code>：查看 tarfile 里面的文件</li>
<li><code>-r</code>：向压缩归档文件末尾追加文件</li>
<li><code>-u</code>：更新原压缩包中的文件</li>
</ul>
</li>
<li>必须<ul>
<li><code>-f</code>：使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名</li>
</ul>
</li>
<li>可选<ul>
<li><code>-z</code>：有gzip属性的</li>
<li><code>-j</code>：有bz2属性的</li>
<li><code>-Z</code>：有compress属性的</li>
<li><code>-v</code>：显示所有过程</li>
<li><code>-O</code>：将文件解开到标准输出    </li>
<li><code>-p</code> 使用原文件的原来属性（属性不会依据使用者而变）</li>
<li><code>-P</code> 可以使用绝对路径来压缩        </li>
</ul>
</li>
</ul>
</li>
<li><p>常用命令</p>
<ul>
<li><code>tar -xvf archive.tar -C /tmp</code> 将压缩包释放到 /tmp目录下</li>
<li><code>tar -xzvf archive.tar.gz</code> 解压tar.gz</li>
<li><code>tar -xjvf archive.tar.bz2</code> 解压tar.bz2</li>
<li><code>tar -xZvf archive.tar.Z</code> 解压tar.Z</li>
</ul>
</li>
</ul>
</li>
<li><code>unzip file.zip</code> 解压zip</li>
<li><code>unrar e archive.rar</code> 解压rar</li>
</ul>
</li>
<li>压缩<ul>
<li><strong><code>tar -czf aezocn.tar.gz *.jpg dir1</code></strong> 将此目录所有jpg文件和dir1目录打包成aezocn.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为aezocn.tar.gz(体积会小很多：1/10)</li>
<li><code>tar -cvf aezocn.tar file1 file2 dir1</code> 同时压缩 file1, file2 以及目录 dir1。windows可使用7-zip</li>
<li><code>tar -cvf aezocn.tar *.jpg</code> 将目录里所有jpg文件打包成aezocn.jpg</li>
<li><code>tar -cjf aezocn.tar.bz2 *.jpg</code> 将目录里所有jpg文件打包成aezocn.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</li>
<li><code>tar -cZf aezocn.tar.Z *.jpg</code> 将目录里所有jpg文件打包成aezocn.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</li>
<li><code>rar a aezocn.rar *.jpg</code> rar格式的压缩，需要先下载rar for linux</li>
<li><code>zip aezocn.zip *.jpg</code> zip格式的压缩，需要先下载zip for linux</li>
</ul>
</li>
<li><p>unzip乱码</p>
<ul>
<li><p>使用python解决(只能解决部分问题)</p>
<ul>
<li><code>vi pyzip</code> 新建文件pyzip</li>
<li><p>加入代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># pyzip.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> zipfile</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"Processing File "</span> + sys.argv[<span class="number">1</span>]</div><div class="line"></div><div class="line">file=zipfile.ZipFile(sys.argv[<span class="number">1</span>],<span class="string">"r"</span>);</div><div class="line"><span class="keyword">for</span> name <span class="keyword">in</span> file.namelist():</div><div class="line">    utf8name=name.decode(<span class="string">'gbk'</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"Extracting "</span> + utf8name</div><div class="line">    pathname = os.path.dirname(utf8name)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(pathname) <span class="keyword">and</span> pathname!= <span class="string">""</span>:</div><div class="line">        os.makedirs(pathname)</div><div class="line">    data = file.read(name)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(utf8name):</div><div class="line">        fo = open(utf8name, <span class="string">"w"</span>)</div><div class="line">        fo.write(data)</div><div class="line">        fo.close</div><div class="line">file.close()</div></pre></td></tr></table></figure>
</li>
<li><p><code>chmod +x pyzip</code> 将pyzip设置成可执行文件</p>
</li>
<li><code>./uzip /home/xxxx.zip</code></li>
</ul>
</li>
</ul>
</li>
<li><p>rar安装问题，unzip乱码问题</p>
</li>
</ol>
<h2 id="权限系统"><a href="#权限系统" class="headerlink" title="权限系统"></a>权限系统</h2><h3 id="用户-6"><a href="#用户-6" class="headerlink" title="用户 ^6"></a>用户 <a href="[用户配置](http://www.cnblogs.com/zutbaz/p/4248845.html)">^6</a></h3><ul>
<li>添加用户(和设置宿主目录)<code>useradd -d /home/aezo -m aezo</code><ul>
<li>修改用户宿主目录<code>usermod -d /home/home_dir -U aezo</code></li>
</ul>
</li>
<li>设置密码<code>passwd aezo</code></li>
<li>查看用户<code>cat /etc/passwd</code></li>
<li>删除用户<code>userdel -rf aezo</code></li>
</ul>
<h3 id="文件-1"><a href="#文件-1" class="headerlink" title="文件"></a>文件</h3><ul>
<li>文件属性<code>chgrp</code>、<code>chown</code>、<code>chmod</code>、<code>umask</code> <a href="[Linux文件属性](http://www.cnblogs.com/kzloser/articles/2673790.html)">^3</a><ul>
<li><code>chgrp</code> 改变文件所属群组。<code>chgrp [-R] 组名 文件或目录</code><ul>
<li><code>-R</code> 递归设置子目录下所有文件和目录</li>
</ul>
</li>
<li><code>chown</code> 改变文件/目录拥有者。如：<code>chown [-R] aezo /home/aezo</code></li>
<li><code>chmod</code> 改变文件的权限。<ul>
<li>数字类型改变文件权限 <code>chmod [-R] xyzw 文件或目录</code> 如：<code>chmod -R 755 /home/ftproot</code><ul>
<li>x : 可有可无,代表的是特殊权限,即 SUID/SGID/SBIT。yzw : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加</li>
<li>各权限的分数对照表为：r:4、w:2、x:1、SUID:4、SGID:2、SBIT:1。如rwx = 4+2+1 = 7，r-s = 4+1 = 5</li>
</ul>
</li>
<li>符号类型改变文件权限 <code>chmod 对象 操作符 文件/目录</code><ul>
<li>对象取值为<code>ugoa</code>：u=user, g=group, o=others, a=all</li>
<li>操作符取值为：<code>+-=</code>：+ 为增加，- 为除去，= 为设定</li>
<li>如：<code>chmod u=rwx,go=rx test</code>、<code>chmod g+s,o+t test</code></li>
</ul>
</li>
</ul>
</li>
<li><code>umask</code> 创建文件时的默认权限<ul>
<li><code>umask</code> 查看umask分数值。如0022(一般umask分数值指后面三个数字)<ul>
<li><code>umask -S</code> 查看umask。如u=rwx,g=rx,o=rx</li>
</ul>
</li>
<li>系统默认新建文件的权限为666(3个rw)，文件夹为777(3个rwx)。最终新建文件的默认权限为系统默认权限减去umask分数值。如umask为002，新建的文件为-rw-r–r–，文件夹为drw-r-xr-x</li>
</ul>
</li>
<li>常用命令<ul>
<li><code>find . -type d -exec chmod 755 {} \;</code> 修改当前目录的所有目录为775</li>
<li><code>find . -type f -exec chmod 644 {} \;</code> 修改当前目录的所有文件为644</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="ssh-2"><a href="#ssh-2" class="headerlink" title="ssh ^2"></a>ssh <a href="[ssh登录](http://www.linuxidc.com/Linux/2016-03/129204.htm)">^2</a></h2><h3 id="ssh介绍"><a href="#ssh介绍" class="headerlink" title="ssh介绍"></a>ssh介绍</h3><ol>
<li>SSH是建立在传输层和应用层上面的一种安全的传输协议。SSH目前较为可靠，专为远程登录和其他网络提供的安全协议。在主机远程登录的过程中有两种认证方式：<ul>
<li><code>基于口令认证</code>：只要你知道自己帐号和口令，就可以登录到远程主机。所有传输的数据都会被加密，但是不能保证你正在连接的服务器就是你想连接的服务器。可能会有别的服务器在冒充真正的服务器，也就是受到“中间人”这种方式的攻击。</li>
<li><code>基于秘钥认证</code>：需要依靠秘钥，也就是你必须为自己创建一对秘钥，并把公用的秘钥放到你要访问的服务器上，客户端软件就会向服务器发出请求，请求用你的秘钥进行安全验证。服务器收到请求之后，现在该服务器你的主目录下寻找你的公用秘钥，然后吧它和你发送过来的公用秘钥进行比较。弱两个秘钥一致服务器就用公用秘钥加密“质询”并把它发送给客户端软件，客户端软件收到质询之后，就可以用你的私人秘钥进行解密再把它发送给服务器。</li>
</ul>
</li>
<li>用基于秘钥认证，你必须要知道自己的秘钥口令。但是与第一种级别相比，这种不需要再网络上传输口令。第二种级别不仅加密所有传送的数据，而且“中间人”这种攻击方式也是不可能的（因为他没有你的私人密匙）。但是整个登录的过程可能需要10秒。</li>
</ol>
<h3 id="查看SSH服务"><a href="#查看SSH服务" class="headerlink" title="查看SSH服务"></a>查看SSH服务</h3><p>CentOS 7.1安装完之后默认已经启动了ssh服务我们可以通过以下命令来查看ssh服务是否启动</p>
<ol>
<li>查看开放的端口 <code>netstat -tnl</code> ssh默认端口为22</li>
<li>查看服务是否启动 <code>systemctl status sshd.service</code> 查看ssh服务是否启动</li>
</ol>
<h3 id="SSH客户端连接服务器（口令认证）"><a href="#SSH客户端连接服务器（口令认证）" class="headerlink" title="SSH客户端连接服务器（口令认证）"></a>SSH客户端连接服务器（口令认证）</h3><ol>
<li>直接连接到对方的主机，这样登录服务器的默认用户<ul>
<li><code>ssh 192.168.1.1</code> 回车输入密码即可</li>
<li><code>exit</code> 退出登录</li>
</ul>
</li>
<li>使用账号登录对方主机aezocn用户<ul>
<li><code>ssh aezocn@192.168.1.1</code></li>
</ul>
</li>
</ol>
<h3 id="SSH客户端连接服务器（秘钥认证）"><a href="#SSH客户端连接服务器（秘钥认证）" class="headerlink" title="SSH客户端连接服务器（秘钥认证）"></a>SSH客户端连接服务器（秘钥认证）</h3><ol>
<li>命令行生成<ul>
<li>生成公钥(.pub)和私钥(.ppk)<ul>
<li><code>ssh-keygen</code> 运行命令后再按三次回车会看到<code>RSA</code>（生成的秘钥默认路径为<code>/root/.ssh/</code>，会包括<code>id_rsa</code>(密钥)、<code>id_rsa.pub</code>(公钥)、<code>known_hosts</code> 3 个文件）</li>
</ul>
</li>
<li>把生成的公钥发送到对方的主机上去（在本地为服务器生成公钥）<ul>
<li><code>ssh-copy-id -i /root/.ssh/id_rsa.pub root@192.168.1.1</code> （自动保存在对方主机的<code>/root/.ssh/authorized_keys</code>文件中去）</li>
<li>输入该服务器密码实现发送</li>
</ul>
</li>
<li>登录该服务器：<code>ssh 192.168.1.1</code> 此时不需要输入密码（默认生成密钥的服务器已经有了私钥）</li>
<li><strong>注：</strong> 如果是为了让root用户登录则将公钥放入到/root/.ssh目录；如果密钥提供给其他用户登录，可将公钥放在对应的家目录，如/home/aezo/.ssh/下。<code>.ssh</code>目录默认已经存在（可通过<code>ll -al</code>查看）</li>
<li>阿里云服务器root用户的authorized_keys和普通用户的不能一致 <a href="[阿里云服务器ssh设置](https://www.douban.com/doulist/44111547/)">^5</a></li>
</ul>
</li>
<li>Putty/WinSCP 和 xshell/xftp<ul>
<li>Putty是一个Telnet、SSH、rlogin、纯TCP以及串行接口连接软件。它包含Puttygen等工具，Puttygen可用于生成公钥和密钥（还可以将如AWS亚马逊云的密钥文件.pem转换为.ppk的通用密钥文件）<ul>
<li>在知道密钥文件时，可以通过Putty连接到服务器(命令行)，通过WinSCP连接到服务器的文件系统(FTP形式显示)</li>
<li>Puttygen使用：<code>类型选择RSA，大小2048</code> - <code>点击生成</code> - <code>鼠标在空白处滑动</code> - <code>保存公钥和密钥</code></li>
<li>Putty使用：<code>Session的Host Name输入username@ip，端口22</code> - <code>Connection-SSH-Auth选择密钥文件</code> - <code>回到Session，在save session输入一个会话名称</code> - <code>点击保存会话</code> - <code>点击open登录服务器</code> - <code>下次可直接点击会话名称登录</code></li>
</ul>
</li>
<li>xshell/xftp是一个连接ssh的客户端<ul>
<li>登录方法：连接 - 用户身份验证 - 方法选择”public key” 公钥 - 用户名填入需要登录的用户 - 用户密钥可点击浏览生成(需要将生成的公钥保存到对应用户的.ssh目录<code>mv /home/aezo/id_rsa.pub /home/aezo/.ssh/authorized_keys</code>)。必须使用自己生成的公钥和密钥，如果AWS亚马逊云转换后的ppk文件无法直接登录。</li>
</ul>
</li>
<li><code>cat /var/log/secure</code>查看登录日志</li>
</ul>
</li>
<li>ssh配置 <a href="[服务器安全ssh配置](https://www.xiaohui.com/dev/server/linux-centos-ssh-security.htm)">^7</a><ul>
<li><code>cat /etc/ssh/sshd_config</code> 查看配置<ul>
<li><code>PermitRootLogin no</code> 是否允许root用户登陆(no不允许)</li>
<li><code>PasswordAuthentication no</code> 是否允许使用用户名密码登录(no不允许，此时只能使用证书登录)</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="定时任务-4"><a href="#定时任务-4" class="headerlink" title="定时任务 ^4"></a>定时任务 <a href="[定时任务](http://www.360doc.com/content/16/1013/10/15398874_598063092.shtml)">^4</a></h2><ol>
<li><p>配置式</p>
<ul>
<li><p>添加定时配置：<code>sudo vim /etc/crontab</code>，配置说明如下，如：<code>30 2 1 * * root /sbin/reboot</code>表示每月第一天的第2个小时的第30分钟，使用root执行命令/sbin/reboot(重启)</p>
  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> Example of job definition:</span></div><div class="line"><span class="meta">#</span><span class="bash"> .---------------- minute (0 - 59)</span></div><div class="line"><span class="meta">#</span><span class="bash"> |  .------------- hour (0 - 23)</span></div><div class="line"><span class="meta">#</span><span class="bash"> |  |  .---------- day of month (1 - 31)</span></div><div class="line"><span class="meta">#</span><span class="bash"> |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></div><div class="line"><span class="meta">#</span><span class="bash"> |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></div><div class="line"><span class="meta">#</span><span class="bash"> |  |  |  |  |</span></div><div class="line"><span class="meta">#</span><span class="bash"> *  *  *  *  * user-name  <span class="built_in">command</span> to be executed</span></div><div class="line"><span class="meta">#</span><span class="bash"> (1) 其中用户名一般可以省略</span></div><div class="line"><span class="meta">#</span><span class="bash"> (2) 精确到秒解决方案, 以下3行表示每20秒执行一次</span></div><div class="line"><span class="meta">#</span><span class="bash"> * * * * * user-name my-command</span></div><div class="line"><span class="meta">#</span><span class="bash"> * * * * * sleep 20; user-name my-command</span></div><div class="line"><span class="meta">#</span><span class="bash"> * * * * * sleep 40; user-name my-command</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>systemctl reload crond</code> 重新加载配置</p>
</li>
<li><code>systemctl restart crond</code> 重启crond</li>
</ul>
</li>
</ol>
<hr>
<p>参考文章</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UML]]></title>
      <url>/2016/07/17/design/uml/</url>
      <content type="html"><![CDATA[<h2 id="UML介绍"><a href="#UML介绍" class="headerlink" title="UML介绍"></a>UML介绍</h2><ol>
<li><p><code>UML</code>(Unified Modeling Language): 统一建模语言，是一种图形化的语言，它可以帮助我们在OOAD过程中标识元素、构建模块、分析过程并可通过文档说明系统中的重要细节。</p>
<blockquote>
<ul>
<li><code>OO</code>(Object Oriented)：面向对象</li>
<li><code>OOAD</code>(OOA&amp;D)：面向对象的分析与设计</li>
<li><code>OOP</code>(Object Oriented Programming)：面向对象编程</li>
<li>OOP的主要特征：<code>抽象</code>(abstract)、<code>封装</code>(encapsulation)、<code>继承</code>(inheritance)、<code>多态</code>(polymorphism)、<code>关联</code>(association)、<code>聚合</code>(aggregation)、<code>组合</code>(composition)、<code>内聚与耦合</code>(cohesion &amp; coupling)</li>
<li><code>RUP</code>(Rational Unified Process)：统一过程，是一个采用面向对象思想，使用UML作为软件分析设计语言，并结合了项目管理、质量管理等软件工程知识综合而成的软件方法。RUP分为四个阶段：<code>初始</code>，<code>精化</code>，<code>构建</code>（编码），<code>交付</code>（使用部署图）。RUP拥抱了需求的变化，好于瀑布式开发（照搬建筑模型，需求变化后修改很麻烦）</li>
</ul>
</blockquote>
</li>
<li>UML包括：事物、关系、图、扩展机制</li>
<li>事物包括：<ul>
<li>结构：类、接口、构件、节点等</li>
<li>行为：交互（消息）、状态等</li>
<li>分组：包、子系统等</li>
<li>注释：注释</li>
</ul>
</li>
<li><strong>关系</strong> 包括：<code>依赖</code>、<code>关联</code>、<code>泛化</code>(extend、继承)、<code>实现</code></li>
<li><strong>九种建模图</strong> 即：<code>用例图</code>(User Case)、<code>类图</code>、<code>对象图</code>、<code>顺序图</code>(Sequence)、<code>协作图</code>(Collaboration)、<code>状态图</code>(Statechart)、<code>活动图</code>(Activity)、<code>组件图</code>、<code>配置图</code></li>
<li>使用UML完成项目顺序<ol>
<li>完成User Case以及document</li>
<li>对于比较复杂的User Case 使用Activity活动图辅助说明或者Sequence顺序图</li>
<li>根据User Case Document和Activity 分析业务领域的概念，抽象出概念模型</li>
<li>根据概念模型抽象出类</li>
<li>分析类的职责与关系做出类图，通常先不做方法，制作属性然后做6，然后根据这抽象出方法</li>
<li>根据类图制作出Sequence顺序图、Collaboration协作图、Statechart状态图等各种图示</li>
<li>根据图示重复迭代5-6，直至“完美”，没有完美，够用就行了</li>
<li>Coding编码</li>
<li>测试并修改，必要从前面开始改起，或从1，或从5（内部测试）</li>
<li>部署并与用户一起测试</li>
<li>从实施与测试的反馈驱动下一次的1-&gt;11（交付用户测试）</li>
</ol>
</li>
</ol>
<h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>UML中的关系包括：依赖、关联、泛化(extend)、实现</p>
<ol>
<li><p><code>依赖</code>(Dependence)：虚线箭头</p>
<p> <img src="/data/images/2016/07/依赖.png" alt="依赖关系"></p>
<p> 低耦合：表示要降低跟不稳定的对象之间的依赖关系</p>
</li>
<li><p><code>关联</code>(Associations)：实线箭头</p>
<p> 相关概念：关联名、导航(单向关联/双向关联)、角色、多重性、聚合、组合</p>
<ul>
<li><p>导航性：</p>
<p>  <img src="/data/images/2016/07/导航性.png" alt="导航性"></p>
</li>
<li><p>角色：</p>
<p>  <img src="/data/images/2016/07/角色.png" alt="角色"></p>
</li>
<li><p>多重性：</p>
<p>  <img src="/data/images/2016/07/多重性.png" alt="多重性"></p>
</li>
<li><p>聚合和组合（聚合是一种关联，组合是一种聚合）</p>
<p>  <img src="/data/images/2016/07/聚合和组合.png" alt="聚合和组合"></p>
</li>
</ul>
</li>
<li><p><code>泛化</code>(Extend、继承)：实线三角箭头</p>
<p> <img src="/data/images/2016/07/泛化.png" alt="泛化"></p>
</li>
<li><p><code>实现</code>(Implement/Realize)：虚线三角箭头</p>
<p> <img src="/data/images/2016/07/实现.png" alt="实现"></p>
</li>
</ol>
<h2 id="建模图"><a href="#建模图" class="headerlink" title="建模图"></a>建模图</h2><ul>
<li>用于描述系统结构：<ul>
<li>用例图：需求捕获，测试依据</li>
<li>类图：静态系统架构</li>
<li>对象图：对象之间的关联</li>
<li>构件图：构件之间的关联</li>
<li>部署图：构件的物理部署</li>
</ul>
</li>
<li>用于描述系统行为：<ul>
<li>顺序图：不活User Case 在某个时间场景上时间执行顺序</li>
<li>协作图：强调对象之间的写作（顺序图与协作图之间可以互相转换，而其中的信息不会丢失）</li>
<li>状态图：描述关键类生命周期的转化</li>
<li>活动图：流程图，描述某个方法或User Case的执行过程。</li>
</ul>
</li>
</ul>
<p>通常合在一块使用，如下图：</p>
<p><img src="/data/images/2016/07/UML建模图.png" alt="UML建模图"></p>
<h3 id="用例图-user-case-diagram"><a href="#用例图-user-case-diagram" class="headerlink" title="用例图(user case diagram)"></a>用例图(user case diagram)</h3><ul>
<li>用例(Use Case)是文本形式的情节描述，用于需求的发现和记录，用例会影响后续的OOA/D工作。用例是一组相关的成功或失败的集合</li>
<li><p>用例的编写</p>
<ul>
<li>用例编号</li>
<li>用例名</li>
<li>用例描述</li>
<li>参与者</li>
<li>前置条件 //必须满足条件</li>
<li>后置条件 //用例做完后，对系统的影响</li>
<li>基本路径(1、2、3、) //最重要，主功能场景，只描述正常成功的场景，不要出现如果….;参与者动作，系统响应</li>
<li>扩展点(2.a、3.a)</li>
<li>补充说明 //对基本路径和扩展点的未尽事宜进行描述</li>
</ul>
<p><img src="/data/images/2016/07/用例图.png" alt="用例图"></p>
<p><img src="/data/images/2016/08/用例图.png" alt="用例图"></p>
</li>
</ul>
<h3 id="类图-class-diagram"><a href="#类图-class-diagram" class="headerlink" title="类图(class diagram)"></a>类图(class diagram)</h3><ul>
<li>UML中使用最多的图形，可用于对概念建模（领域模型）、分析类图</li>
<li><p>领域模型(domain model)：包括概念、关系、属性，业务领域的概念名词。可用于现实世界与软件实现之间的过渡。</p>
<p><img src="/data/images/2016/07/类图.png" alt="类图"></p>
</li>
</ul>
<h3 id="顺序图-sequence-diagram-与协作图-collaboration-diagram"><a href="#顺序图-sequence-diagram-与协作图-collaboration-diagram" class="headerlink" title="顺序图(sequence diagram)与协作图(collaboration diagram)"></a>顺序图(sequence diagram)与协作图(collaboration diagram)</h3><ul>
<li><p>顺序图强调消息时间顺序的交互图</p>
<p>  <img src="/data/images/2016/07/顺序图.png" alt="顺序图"></p>
</li>
<li><p>协作图则是强调发送和接收消息对象的结构组件的交互图</p>
<p>  <img src="/data/images/2016/07/协作图.png" alt="协作图"></p>
</li>
<li><p>Rational Rose中顺序图转协作图：Browse -&gt; Go To Collaboration Diagram</p>
</li>
<li>Rational Rose中协作图转顺序图：Browse -&gt; Go To Sequence Diagram</li>
</ul>
<h3 id="状态图-statechart-diagram"><a href="#状态图-statechart-diagram" class="headerlink" title="状态图(statechart diagram)"></a>状态图(statechart diagram)</h3><p>  <img src="/data/images/2016/08/状态图.png" alt="状态图"></p>
<h3 id="活动图-activity-diagram"><a href="#活动图-activity-diagram" class="headerlink" title="活动图(activity diagram)"></a>活动图(activity diagram)</h3><p>  <img src="/data/images/2016/08/活动图.png" alt="活动图"></p>
<h2 id="StarUML使用-1"><a href="#StarUML使用-1" class="headerlink" title="StarUML使用 ^1"></a>StarUML使用 <a href="[StarUML工具介绍.ppt](https://wenku.baidu.com/view/bfc2d0d610a6f524ccbf85f2.html)">^1</a></h2><ul>
<li><code>Model Explorer</code> 模型浏览区</li>
<li><code>Diagram Explorer</code> 建模图浏览区</li>
<li><code>Properties</code> 设置属性区域，可以修改某个元素的属性，如名称</li>
<li><code>Documentation</code> 文档注释区域，可以为某个元素添加注释</li>
<li><code>Attachments</code> 附件区，可以为某个元素添加附件，如图片说明等</li>
<li>时序图<ul>
<li>时序图中形如<code>:MyClass</code>的对象可以理解为<code>MyClass</code>的一个实例</li>
<li>时序图中虚线返回线怎么画?<ul>
<li>选中这个线，在右下角有个设置属性区域，把ActionKind的值由CALL改为RETURN</li>
</ul>
</li>
<li><code>Combined Fragment</code> 交互片段<ul>
<li><code>alt</code> 选择性片段，多条件分支；用虚线分割(<code>Interaction Operand</code>)，每个区域代表一个分支</li>
<li><code>opt</code> 满足条件则执行分支</li>
<li><code>loop</code> 循环</li>
<li><code>par</code> 并行执行</li>
<li><code>region</code> 只能执行一个线程的临界片段</li>
<li><code>break</code> 中断</li>
<li><code>assert</code> 断言</li>
<li><code>ignore</code> 忽略</li>
</ul>
</li>
<li><code>Interaction Operand</code> 结合Combined Fragment使用</li>
<li><code>Frame</code> 框图，简化时序图复杂度<ul>
<li><code>sd</code> 框图定义</li>
<li><code>ref</code> 框图引用</li>
</ul>
</li>
</ul>
</li>
<li>导出PDF：<code>File</code>-<code>Print</code>-<code>Size(Tile:1-1)</code></li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> design </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery插件开发]]></title>
      <url>/2016/07/12/web/jquery/jquery-plugin/</url>
      <content type="html"><![CDATA[<h2 id="纯js插件"><a href="#纯js插件" class="headerlink" title="纯js插件"></a>纯js插件</h2><p>优点是依赖性小，不依赖于jQuery等函数库；缺点是比较繁琐；一般不涉及到Dom树的可使用纯js写插件（如：日期库插件moment.js）</p>
<h2 id="基于jquery编写插件"><a href="#基于jquery编写插件" class="headerlink" title="基于jquery编写插件"></a>基于jquery编写插件</h2><p>jQuery插件开发方式主要有三种：</p>
<ol>
<li>通过$.extend()来扩展jQuery</li>
<li>通过$.fn 向jQuery添加新的方法</li>
<li>通过$.widget()应用jQuery UI的部件工厂方式创建</li>
</ol>
<p>第一种方式太简单，仅仅是在jQuery命名空间或者理解成jQuery身上添加了一个静态方法而以，通常我们使用第二种方法来进行简单插件开发，说简单是相对于第三种方式。第三种方式是用来开发更高级jQuery部件的，这里不细说。</p>
<h3 id="extend-用法"><a href="#extend-用法" class="headerlink" title="$.extend()用法"></a>$.extend()用法</h3><ul>
<li><p>给extend方法传递单个对象的情况下，这个对象会合并到jQuery身上，所以我们就可以在jQuery身上调用新合并对象里包含的方法了<code>$.extend(Object)</code></p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.extend(&#123;</div><div class="line">  <span class="attr">log</span>: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(str ? str : <span class="string">'Good!'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//调用</span></div><div class="line">$.log(); <span class="comment">// Good!</span></div><div class="line">$.log(<span class="string">'Hello!'</span>); <span class="comment">// Hello!</span></div></pre></td></tr></table></figure>
</li>
<li><p>当给extend方法传递一个以上的参数时，它会将所有参数对象合并到第一个里。同时，如果对象中有同名属性时，合并的时候后面的会覆盖前面的（经常用于$.fn写法的参数处理上）<code>$.extend(target,object1,[objectN])</code>、<code>$.extend([deep],target,object1,[objectN])</code>（deep:如果设为true，则递归合并。target:待修改对象。object1和objectN:待合并到第一个对象的对象）</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用法一</span></div><div class="line"><span class="keyword">var</span> defaults = &#123;<span class="string">'name'</span>: <span class="string">'smalle'</span>, <span class="string">'age'</span>: <span class="number">18</span>&#125;;</div><div class="line"><span class="keyword">var</span> options = &#123;<span class="string">'name'</span>: <span class="string">'aezo'</span>, <span class="string">'sex'</span>: <span class="string">'boy'</span>&#125;;</div><div class="line"><span class="comment">//</span></div><div class="line"><span class="keyword">var</span> settings = $.extend(&#123;&#125;, defaults, options);</div><div class="line"><span class="built_in">console</span>.log(settings); <span class="comment">// Object &#123;name: "aezo", age: 18, sex: "boy"&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// 用法二</span></div><div class="line"><span class="keyword">var</span> result = $.extend( <span class="literal">true</span>, &#123;&#125;,</div><div class="line">    &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">location</span>: &#123;<span class="attr">city</span>: <span class="string">"Boston"</span>, <span class="attr">county</span>:<span class="string">"USA"</span>&#125; &#125;,</div><div class="line">    &#123; <span class="attr">name</span>: <span class="string">"smalle"</span>, <span class="attr">last</span>: <span class="string">"Resig"</span>, <span class="attr">location</span>: &#123;<span class="attr">state</span>: <span class="string">"MA"</span>, <span class="attr">county</span>:<span class="string">"China"</span>&#125; &#125; );</div><div class="line"><span class="comment">// deep为true，结果为：&#123;name: "smalle", last: "Resig", location:&#123;city:"Boston", state:"MA", county:"China"&#125;&#125; // name覆盖了，但是county没有覆盖</span></div><div class="line"><span class="comment">// deep为false时则为：&#123;name: "smalle", last: "Resig", location:&#123;city:"Boston", county:"China"&#125;&#125; // state未拷贝</span></div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="fn用法"><a href="#fn用法" class="headerlink" title="$.fn用法"></a>$.fn用法</h3><ul>
<li><p>基本格式：</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// $.fn. 后面接为插件名</span></div><div class="line">$.fn.pluginName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//your code goes here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>this说明：<strong>在插件名字定义的这个函数内部</strong> ，this指代的是我们在调用该插件时，用jQuery选择器选中的元素，一般是一个 <strong>jQuery类型</strong> 的集合。</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.css(<span class="string">'color'</span>, <span class="string">'red'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 如：$('a').myPlugin(); 则 this = $('a')</span></div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>比如 $(‘a’) 返回的是页面上所有 a 标签的集合，且这个集合已经是 jQuery 包装类型了，也就是说，在对其进行操作的时候可以直接调用jQuery的其他方法而不需要再用美元符号来包装一下。</li>
<li>那么通过调用 jQuery 的 .each() 方法就可以处理合集中的每个元素了，但此刻要注意的是，在 each 方法内部，this 指带的是普通的 DOM 元素了，如果需要调用 jQuery 的方法那就需要用$来重新包装一下。</li>
</ul>
</blockquote>
</li>
<li><p>参数处理：包括默认参数和传入参数，可以使用<code>$.extend()</code>进行处理</p>
</li>
<li><p>支持链式调用：jQuery的一个特性是支持链式调用，选择好DOM元素后可以不断地调用其他方法。要让插件不打破这种链式调用，只需return一下即可。</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> defaults = &#123;</div><div class="line">      <span class="string">'color'</span>: <span class="string">'red'</span>,</div><div class="line">      <span class="string">'fontSize'</span>: <span class="string">'12px'</span></div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">var</span> settings = $.extend(&#123;&#125;, defaults, options);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      $(<span class="keyword">this</span>).css(&#123;</div><div class="line">        <span class="string">'color'</span>: settings.color,</div><div class="line">        <span class="string">'fontSize'</span>: settings.fontSize</div><div class="line">      &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>面向对象(方便维护、代码清晰)</p>
<blockquote>
<p>如果将需要的重要变量定义到对象的属性上，函数变成对象的方法，当我们需要的时候通过对象来获取，一来方便管理，二来不会影响外部命名空间，因为所有这些变量名还有方法名都是在对象内部。以后要加新功能新方法，只需向对象添加新变量及方法即可，然后在插件里实例化后即可调用新添加的东西。</p>
</blockquote>
</li>
<li><p>命名空间</p>
<ul>
<li>不仅仅是jQuery插件的开发，我们在写任何JS代码时都应该注意的一点是不要污染全局命名空间。因为随着你代码的增多，如果有意无意在全局范围内定义一些变量的话，最后很难维护，也容易跟别人写的代码有冲突。</li>
<li>比如你在代码中向全局window对象添加了一个变量status用于存放状态，同时页面中引用了另一个别人写的库，也向全局添加了这样一个同名变量，最后的结果肯定不是你想要的。所以不到万不得已，一般我们不会将变量定义成全局的。</li>
<li><p>一个好的做法是始终用<code>自调用匿名函数</code>包裹你的代码，这样就可以完全放心，安全地将它用于任何地方了，绝对没有冲突。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$, window, document, undefined</span>) </span>&#123;</div><div class="line">  <span class="comment">//定义Beautifier的构造函数</span></div><div class="line">  <span class="keyword">var</span> Beautifier = <span class="function"><span class="keyword">function</span>(<span class="params">ele, opt</span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.$element = ele,</div><div class="line">      <span class="keyword">this</span>.defaults = &#123;</div><div class="line">          <span class="string">'color'</span>: <span class="string">'red'</span>,</div><div class="line">          <span class="string">'fontSize'</span>: <span class="string">'12px'</span>,</div><div class="line">          <span class="string">'textDecoration'</span>: <span class="string">'none'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="keyword">this</span>.options = $.extend(&#123;&#125;, <span class="keyword">this</span>.defaults, opt)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//定义Beautifier的方法</span></div><div class="line">  Beautifier.prototype = &#123;</div><div class="line">      <span class="attr">beautify</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.$element.css(&#123;</div><div class="line">              <span class="string">'color'</span>: <span class="keyword">this</span>.options.color,</div><div class="line">              <span class="string">'fontSize'</span>: <span class="keyword">this</span>.options.fontSize,</div><div class="line">              <span class="string">'textDecoration'</span>: <span class="keyword">this</span>.options.textDecoration</div><div class="line">          &#125;);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//在插件中使用Beautifier对象</span></div><div class="line">  $.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">      <span class="comment">//创建Beautifier的实体</span></div><div class="line">      <span class="keyword">var</span> beautifier = <span class="keyword">new</span> Beautifier(<span class="keyword">this</span>, options);</div><div class="line">      <span class="comment">//调用其方法</span></div><div class="line">      <span class="keyword">return</span> beautifier.beautify();</div><div class="line">  &#125;</div><div class="line">&#125;)(jQuery, <span class="built_in">window</span>, <span class="built_in">document</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>开头的 <code>;</code> 防止别人的代码没有以分号结尾，导致我们的代码编译出错</p>
</li>
<li>传入系统变量，那么window等系统变量在插件内部就有了一个局部的引用，对访问速度有些许提升</li>
<li>关于参数<code>undefined</code>：为了得到没有被修改的undefined，我们并没有传递这个参数，但却在接收时接收了它，因为实际并没有传，所以undefined那个位置接收到的就是真实的undefined了</li>
</ul>
</li>
<li><p>jQuery选择器</p>
<ul>
<li><p>尽量使用Id选择器。jQuery的选择器使用的API都是基于getElementById或getElementsByTagName，因此可以知道 效率最高的是Id选择器，因为jQuery会直接调用getElementById去获取dom，而通过样式选择器获取jQuery对象时往往会使用 getElementsByTagName去获取然后筛选。</p>
</li>
<li><p>样式选择器应该尽量明确指定tagName, 如果开发人员使用样式选择器来获取dom，且这些dom属于同一类型，例如获取所有className为jquery的div，那么我们应该使用的写法 是<code>$(&#39;div.jquery&#39;)</code>而不是$(‘.jquery’)，这样写的好处非常明显，在获取dom时jQuery会获取div然后进行筛选，而不是 获取所有dom再筛选。</p>
</li>
<li><p>避免迭代，很多同学在使用jQuery获取指定上下文中的dom时喜欢使用迭代方式，如$(‘.jquery .child’)，获取className为jquery的dom下的所有className为child的节点，其实这样编写代码付出的代价是非常大 的，jQuery会不断的进行深层遍历来获取需要的元素，即使确实需要，我们也应该使用诸如<code>$(selector, context)</code>, <code>$(&#39;selector1&gt;selector2&#39;)</code>, <code>$(selector1).children(selector2)</code>, <code>$(selctor1).find(selector2)</code>之类的方式。</p>
</li>
</ul>
</li>
</ul>
<h3 id="插件开发注意事项"><a href="#插件开发注意事项" class="headerlink" title="插件开发注意事项"></a>插件开发注意事项</h3><ul>
<li><p>变量定义：好的做法是把将要使用的变量名用一个var关键字一并定义在代码开头，变量名间用逗号隔开。原因有二</p>
<ul>
<li>一是便于理解，同时代码显得整洁且有规律，也方便管理，变量定义与逻辑代码分开；</li>
<li>二是因为JavaScript中所有变量及函数名会自动提升，也称之为JavaScript的Hoist特性，即使你将变量的定义穿插在逻辑代码中，在代码解析运行期间，这些变量的声明还是被提升到了当前作用域最顶端的，所以我们将变量定义在一个作用域的开头是更符合逻辑的一种做法。当然，再次说明这只是一种约定，不是必需的。</li>
</ul>
</li>
<li><p>变量及函数命名：一般使用驼峰命名法（CamelCase）。对于常量，所有字母采用大写，多个单词用下划线隔开；当变量是jQuery类型时，建议以$开头。</p>
</li>
<li><p>插件文件的命名：<code>.min</code> 表示压缩版；大小写字母敏感；如果基于 jquery 或者 bootstrap 等插件开发的，一般会以<code>jquery.</code> 开头（如：jquery.PluginName.js）；</p>
</li>
<li><p>插件的压缩：去掉换行、空格、注释，可以将进场出现的单词用某个字母代替，压缩后文件名一般加上<code>.min</code></p>
</li>
<li><p>插件相关的样式（或主题）文件：好处：用户可直接看到很好的效果，拿来即用；坏处：对用户局限太大（如果我们插件中使用bootstrap样式，那么用户向去掉这个风格会很麻烦）</p>
</li>
<li><p>插件的国际化</p>
</li>
<li><p>单元测试：一些最常见的JavaScript单元测试工具：QUnit(是jQuery团队开发并使用的单元测试框架)、YUI Test和JSTestDriver</p>
</li>
</ul>
<blockquote>
<p>参考文章</p>
<ul>
<li><a href="http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html#home" target="_blank" rel="external">http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html#home</a></li>
</ul>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[RocketMQ]]></title>
      <url>/2016/07/11/arch/rocketmq/</url>
      <content type="html"><![CDATA[<h2 id="RocketMQ简介"><a href="#RocketMQ简介" class="headerlink" title="RocketMQ简介"></a>RocketMQ简介</h2><ul>
<li>RocketMQ是阿里巴巴开源的分布式、队列模型的消息中间件。</li>
<li><a href="https://github.com/alibaba/RocketMQ" target="_blank" rel="external">【GitHub源码】</a> <a href="https://github.com/alibaba/RocketMQ/releases/download/v3.2.6/alibaba-rocketmq-3.2.6.tar.gz" target="_blank" rel="external">【下载地址(v3.2.6)】</a></li>
<li>文档：<a href="/data/doc/middleware/RocketMQ Developer Guide.pdf">RocketMQ Developer Guide.pdf</a></li>
</ul>
<h2 id="启动RocketMQ服务"><a href="#启动RocketMQ服务" class="headerlink" title="启动RocketMQ服务"></a>启动RocketMQ服务</h2><ol>
<li>启动mqnamesrv.exe（在bin目录下，也有对应Linux的启动程序）</li>
<li>启动mqbroker.exe<ul>
<li>最好不要直接双击，而是应该在CMD中输入<code>mqbroker.exe -n localhost:9876</code></li>
<li><code>mqbroker.exe -h</code>查看相关命令帮助</li>
</ul>
</li>
</ol>
<blockquote>
<p>关于命令行</p>
<ol>
<li>可启动mqadmin.exe查看相关命令（不能直接双击，要在cmd命令行中启动）<ul>
<li>启动mqadmin.exe后可运行一些命令，如<code>mqadmin topicList -n 192.168.0.1:9876</code>查看该NameServer所有的topic</li>
<li>可运行<code>mqadmin help 命令</code>或者某个命令的更多帮助</li>
<li>mqadmin.exe启动后可以新增/更新Topic（因为Broker默认关闭了自动创建Topic功能，可能会导致Producer向Broker发送消息，服务器校验不通过，<a href="https://github.com/alibaba/RocketMQ/issues/38" target="_blank" rel="external">详细issure</a>）</li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="Producer生产者"><a href="#Producer生产者" class="headerlink" title="Producer生产者"></a>Producer生产者</h2><h3 id="Producer启动"><a href="#Producer启动" class="headerlink" title="Producer启动"></a>Producer启动</h3><ul>
<li>一个应用创建一个Producer，由应用来维护此对象，可以设置为全局对象或者单例。</li>
<li>ProducerGroupName需要由应用来保证唯一。ProducerGroup这个概念发送普通的消息时，作用不大，但是发送分布式事务消息时，比较关键，因为服务器会回查这个Group下的任意一个Producer</li>
<li>Producer对象在使用之前必须要调用start初始化，初始化一次即可。可伴随应用启动而启动。切记不可以在每次发送消息时，都调用start方法</li>
<li>代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"UniqueProducerGroupName"</span>); <span class="comment">// 保证UniqueProducerGroupName唯一</span></div><div class="line">producer.setNamesrvAddr(<span class="string">"127.0.0.1:9876"</span>); <span class="comment">// 设置NameServer地址</span></div><div class="line">producer.setInstanceName(<span class="string">"Producer"</span>); <span class="comment">// 客户端实例名称</span></div><div class="line">producer.start();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Producer发送消息"><a href="#Producer发送消息" class="headerlink" title="Producer发送消息"></a>Producer发送消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Message msg = <span class="keyword">new</span> Message(<span class="string">"TopicTest1"</span>, <span class="string">"TagA"</span>, <span class="string">"OrderID2016061001"</span>, (<span class="string">"Hello"</span>).getBytes());</div><div class="line">msg.putUserProperty(<span class="string">"orderId"</span>, <span class="string">"OrderID2016061001"</span>); <span class="comment">// 设置参数</span></div><div class="line">SendResult sendResult = producer.send(msg);</div><div class="line">System.out.println(sendResult);</div></pre></td></tr></table></figure>
<ul>
<li>此示例中实例化Message的参数分别为Topic(主题，必填唯一)、Tag(该主题下的细化类型，可选)、Key(可选唯一)、Body(消息的body)</li>
<li>一个应用尽可能用一个 Topic，消息子类型用 tags 来标识</li>
<li>如果是第一次发送/接收某主题的消息，broker中无此topic，可能会报错(No topic route info in name server for the topic:XXX，无此topic的路由信息)，第二次就不会报错。可以尝试发送消息前就将此topic加到broker中(如运行命令<code>mqadmin updateTopic -b 192.168.0.1:10911 -n 192.168.0.1:9876 -t NewTopicName</code>)</li>
</ul>
<h3 id="Producer关闭"><a href="#Producer关闭" class="headerlink" title="Producer关闭"></a>Producer关闭</h3><ul>
<li>应用退出时，要调用shutdown来清理资源，关闭网络连接，从MetaQ(RocketMQ前身)服务器上注销自己</li>
<li>建议应用在JBOSS、Tomcat等容器的退出钩子里调用shutdown方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">producer.shutdown();</div></pre></td></tr></table></figure>
<h2 id="Consumer消费者"><a href="#Consumer消费者" class="headerlink" title="Consumer消费者"></a>Consumer消费者</h2><ul>
<li>一个应用创建一个Consumer，由应用来维护此对象，可以设置为全局对象或者单例</li>
<li>ConsumerGroupName需要由应用来保证唯一</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"UniqueConsumerGroupName"</span>);</div><div class="line">consumer.setNamesrvAddr(<span class="string">"127.0.0.1:9876"</span>);</div><div class="line">consumer.setInstanceName(<span class="string">"Consumber"</span>);</div><div class="line">consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET); <span class="comment">// 设置Consumer第一次启动是从队列头部开始消费还是队列尾部开始消费，如果非第一次启动，那么按照上次消费的位置继续消费</span></div><div class="line">  consumer.subscribe(<span class="string">"TopicTest1"</span>, <span class="string">"TagA"</span>); <span class="comment">// 订阅指定topic为TopicTest1下TagA类型的消息。一个consumer可订阅多个主题</span></div><div class="line">  consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span></div><div class="line">              ConsumeConcurrentlyContext context) &#123;</div><div class="line">          <span class="comment">// 开始消费</span></div><div class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">" Receive New Messages: "</span> + msgs);</div><div class="line">          String orderId = msg.getUserProperty(<span class="string">"orderId"</span>); <span class="comment">// 获取参数值</span></div><div class="line">          <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</div><div class="line">      &#125;</div><div class="line">  &#125;);</div><div class="line">  consumer.start();</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> arch </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mq </tag>
            
            <tag> alibaba </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目开发规范]]></title>
      <url>/2016/07/07/others/projectrule/</url>
      <content type="html"><![CDATA[<h2 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h2><h3 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h3><p>针对一个功能的前台页面(ftl/jsp)应该以名词开头，如果功能名称为”设置用户信息”，可起名为”userInfoSet”而不用”setUserInfo”(这一般像是方法名)</p>
<h3 id="查询选项"><a href="#查询选项" class="headerlink" title="查询选项"></a>查询选项</h3><ol>
<li>input输入，主键外键的字段查询条件为等于，其他字段无特殊要求为左右模糊；下拉框为等于</li>
</ol>
<h3 id="查询结果"><a href="#查询结果" class="headerlink" title="查询结果"></a>查询结果</h3><h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol>
<li>参数验证<ul>
<li>方法内部需要对必须的参数进行验证，如方法有个形参username，内部拿到username的值去操作数据时，当username为空时报错，则此时在方法开始代码块中需对username进行非空判断</li>
<li>验证一般包括：非空验证、类型验证(项目实践中一般会遇到Long和String的验证)等</li>
</ul>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rule </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javacodestyle - Java开发规范]]></title>
      <url>/2016/07/06/others/javacodestyle/</url>
      <content type="html"><![CDATA[<h2 id="源文件基础"><a href="#源文件基础" class="headerlink" title="源文件基础"></a>源文件基础</h2><ol>
<li>文件名：源文件以其最顶层的类名来命名，大小写敏感，文件扩展名为 .java</li>
<li>文件编码：UTF-8</li>
<li>特殊字符：注释明确</li>
</ol>
<h2 id="源文件结构"><a href="#源文件结构" class="headerlink" title="源文件结构"></a>源文件结构</h2><ol>
<li><p>一个源文件包含(按顺序地，以下每个部分之间用一个空行隔开)：</p>
<ul>
<li>许可证或版权信息(如有需要)</li>
<li>package语句：package语句不换行</li>
<li>import语句</li>
<li>一个顶级类(只有一个)</li>
</ul>
</li>
<li><p>import语句</p>
<ul>
<li>import不要使用通配符，即，不要出现类似这样的import语句：<code>import java.util.*;</code></li>
<li>每个import语句独立成行</li>
<li>文件中不能含有无用的import语句</li>
</ul>
</li>
<li><p>类声明</p>
<ul>
<li>只有一个顶级类声明：每个顶级类都在一个与它同名的源文件中</li>
<li>类成员顺序<ul>
<li>成员属性</li>
<li>构造方法</li>
<li>普通方法（按照某中逻辑顺序而非时间顺序）</li>
</ul>
</li>
<li>重载永不分离：当一个类有多个构造函数，或是多个同名方法，这些函数/方法应该按顺序出现在一起，中间不要放进其它函数/方法。</li>
</ul>
</li>
</ol>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><ol>
<li>大括号<ul>
<li>使用大括号(即使是可选的)：大括号与if, else, for, do, while语句一起使用，即使只有一条语句(或是空)，也应该把大括号写上。</li>
<li>非空块：遵循Kernighan和Ritchie风格<ul>
<li>左大括号前不换行</li>
<li>左大括号后换行</li>
<li>右大括号前换行</li>
<li>如果右大括号是一个语句、函数体或类的终止，则右大括号后换行; 否则不换行。例如，如果右大括号后面是else或逗号，则不换行。</li>
</ul>
</li>
<li>空块：一个空的块状结构里什么也不包含，大括号可以简洁地写成{}，不需要换行。例外：如果它是一个多块语句的一部分(if/else 或 try/catch/finally) ，即使大括号内没内容，右大括号也要换行。Eg: void doNothing() {}</li>
</ul>
</li>
<li>缩进：一个Tab为一次缩进</li>
<li>一行一个语句</li>
<li>具体结构<ul>
<li>枚举类：枚举常量间用逗号隔开，换行可选。</li>
<li>变量声明：<ul>
<li>每次只声明一个变量，不要使用组合声明，比如int a, b;。</li>
<li>需要时才声明，并尽快进行初始化：不要在一个代码块的开头把局部变量一次性都声明了(这是c语言的做法)，而是在第一次需要使用它时才声明。</li>
</ul>
</li>
<li>注解(Annotations)：注解紧跟在文档块后面，应用于类、方法和构造函数，一个注解独占一行。单个的注解可以和签名的第一行出现在同一行。应用于字段的多个注解允许与字段出现在同一行。Eg：@Partial @Mock DataLoader loader;</li>
<li>modifiers：类和成员的modifiers如果存在，则按Java语言规范中推荐的顺序出现：<ul>
<li>public protected private abstract static final transient volatile synchronized native strictfp</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol>
<li>注释尽可能详细</li>
<li>成员变量和成员方法要有javadoc注释</li>
<li>前台获取的变量最好写上注释</li>
<li>方法中逻辑比较复杂的，应该写相应的业务注释</li>
<li>javadoc注释：统一格式（方法说明、参数、返回值、作者、时间）</li>
</ol>
<h2 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h2><ol>
<li>标识符只能使用ASCII字母和数字，并以字母开头。</li>
<li>包名：包名全部小写，连续的单词只是简单地连接起来，不使用下划线。</li>
<li>类名：首字母大写，使用驼峰命名</li>
<li>方法名：首字母小写，使用驼峰命名</li>
<li>常量名：全部字母大写，用下划线分隔单词</li>
</ol>
<h2 id="编程实践"><a href="#编程实践" class="headerlink" title="编程实践"></a>编程实践</h2><ol>
<li>只要是合法的，就把@Override注解给用上。</li>
<li>捕获的异常：不能忽视</li>
<li>静态成员：使用类进行调用</li>
</ol>
<h2 id="代码注释模版"><a href="#代码注释模版" class="headerlink" title="代码注释模版"></a>代码注释模版</h2><p>新增一个xml文件，将以下代码复制进去。Eclipse -&gt; Window -&gt; Preference -&gt; Java -&gt; Code Style -&gt; Code Template –&gt; Import 导入模版文件并保存。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;<span class="tag">&lt;<span class="name">templates</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"false"</span> <span class="attr">context</span>=<span class="string">"typecomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"创建的类型的注释"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.typecomment"</span> <span class="attr">name</span>=<span class="string">"typecomment"</span>&gt;</span>/**</div><div class="line"> * @ClassName: $&#123;type_name&#125;</div><div class="line"> * @Description: $&#123;todo&#125;</div><div class="line"> * @author $&#123;user&#125;</div><div class="line"> * @date $&#123;date&#125; $&#123;time&#125;</div><div class="line"> * $&#123;tags&#125;</div><div class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"false"</span> <span class="attr">context</span>=<span class="string">"filecomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"已创建的 Java 文件的注释"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.filecomment"</span> <span class="attr">name</span>=<span class="string">"filecomment"</span>&gt;</span>/**  </div><div class="line"> * @Title $&#123;file_name&#125;</div><div class="line"> * @Package $&#123;package_name&#125;</div><div class="line"> * @Description $&#123;todo&#125;</div><div class="line"> * @author $&#123;user&#125;</div><div class="line"> * @date $&#123;date&#125; $&#123;time&#125;</div><div class="line"> * @version v1.0</div><div class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"false"</span> <span class="attr">context</span>=<span class="string">"fieldcomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"字段的注释"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.fieldcomment"</span> <span class="attr">name</span>=<span class="string">"fieldcomment"</span>&gt;</span>/**</div><div class="line"> * @Description $&#123;todo&#125;</div><div class="line"> * $&#123;field&#125;</div><div class="line"> */  </div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"false"</span> <span class="attr">context</span>=<span class="string">"settercomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"setter 方法的注释"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.settercomment"</span> <span class="attr">name</span>=<span class="string">"settercomment"</span>&gt;</span>/**    </div><div class="line"> * 设置 $&#123;bare_field_name&#125; 的值    </div><div class="line"> * @param $&#123;param&#125;  </div><div class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"false"</span> <span class="attr">context</span>=<span class="string">"delegatecomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"代表方法的注释"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.delegatecomment"</span> <span class="attr">name</span>=<span class="string">"delegatecomment"</span>&gt;</span>/**</div><div class="line"> * $&#123;tags&#125;</div><div class="line"> * $&#123;see_to_target&#125;</div><div class="line"> */</div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"false"</span> <span class="attr">context</span>=<span class="string">"constructorcomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"创建的构造函数的注释"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.constructorcomment"</span> <span class="attr">name</span>=<span class="string">"constructorcomment"</span>&gt;</span>/**</div><div class="line"> * &amp;lt;p&amp;gt;Title: &amp;lt;/p&amp;gt;</div><div class="line"> * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;</div><div class="line"> * $&#123;tags&#125;</div><div class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"false"</span> <span class="attr">context</span>=<span class="string">"methodcomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"非覆盖方法的注释"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.methodcomment"</span> <span class="attr">name</span>=<span class="string">"methodcomment"</span>&gt;</span>/**</div><div class="line"> * @Description $&#123;todo&#125;</div><div class="line"> * $&#123;tags&#125;</div><div class="line"> * @author $&#123;user&#125;</div><div class="line"> * @date $&#123;date&#125; $&#123;time&#125;</div><div class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"false"</span> <span class="attr">context</span>=<span class="string">"gettercomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"getter 方法的注释"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.gettercomment"</span> <span class="attr">name</span>=<span class="string">"gettercomment"</span>&gt;</span>/**</div><div class="line"> * 返回 $&#123;bare_field_name&#125; 的值     </div><div class="line"> * @return $&#123;bare_field_name&#125;</div><div class="line"> */   </div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"false"</span> <span class="attr">context</span>=<span class="string">"overridecomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"覆盖方法的注释"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.overridecomment"</span> <span class="attr">name</span>=<span class="string">"overridecomment"</span>&gt;</span>/* (非 Javadoc)</div><div class="line"> * 覆盖方法</div><div class="line"> * &amp;lt;p&amp;gt;Title: $&#123;enclosing_method&#125;&amp;lt;/p&amp;gt;</div><div class="line"> * &amp;lt;p&amp;gt;Description: &amp;lt;/p&amp;gt;</div><div class="line"> * $&#123;tags&#125;</div><div class="line"> * $&#123;see_to_overridden&#125;</div><div class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">templates</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>参考文章：</p>
<p>[1] <a href="https://github.com/google/styleguide" target="_blank" rel="external">https://github.com/google/styleguide</a></p>
<p>[2] <a href="http://www.hawstein.com/posts/google-java-style.html#Practice" target="_blank" rel="external">http://www.hawstein.com/posts/google-java-style.html#Practice</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> rule </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[redis]]></title>
      <url>/2016/07/02/db/redis/</url>
      <content type="html"><![CDATA[<h2 id="redis简介"><a href="#redis简介" class="headerlink" title="redis简介"></a>redis简介</h2><p>Redis 是一款开源的，基于 BSD 许可的，高级键值 (key-value) 缓存 (cache) 和存储 (store) 系统。由于 Redis 的键包括 string，hash，list，set，sorted set，bitmap 和 hyperloglog，所以常常被称为数据结构服务器。</p>
<ul>
<li>官网：<a href="http://redis.io/" target="_blank" rel="external">http://redis.io/</a></li>
<li>redis源码：<a href="https://github.com/antirez/redis" target="_blank" rel="external">redis Github</a></li>
<li>redis windows客户端(64x，官网不提供window安装包)：<a href="https://github.com/MSOpenTech/redis" target="_blank" rel="external">https://github.com/MSOpenTech/redis</a></li>
<li>redis客户端连接管理软件：<code>RedisDesktopManager</code></li>
<li>java操作redis(jar)：<a href="https://github.com/xetorthio/jedis" target="_blank" rel="external">jedis Github</a></li>
</ul>
<h2 id="安装Redis服务"><a href="#安装Redis服务" class="headerlink" title="安装Redis服务"></a>安装Redis服务</h2><ol>
<li>Windows<ul>
<li>下载redis windows客户端（3.2.100）</li>
<li>直接启动解压目录下的：<code>redis-server.exe</code>服务程序；<code>redis-cli.exe</code>客户端程序，即可在客户端使用命令行进行新增和查看数据（默认没有设置密码）</li>
<li>设置密码<ul>
<li>修改<code>redis.windows.conf</code>，将<code># requirepass foobared</code> 改成 <code>requirepass yourpassword</code>(行前不能有空格)</li>
<li>cmd进入到redis解压目录，运行<code>redis-server redis.windows.conf</code>，之后登录则需要密码</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="springboot使用redis"><a href="#springboot使用redis" class="headerlink" title="springboot使用redis"></a>springboot使用redis</h2><ul>
<li><p>引入依赖</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</div><div class="line"></div><div class="line"><span class="comment">// 存储Value</span></div><div class="line">redisTemplate.opsForValue().set(<span class="string">"myRedisKey"</span>, <span class="string">"hello world"</span>);</div><div class="line">redisTemplate.opsForValue().get(<span class="string">"myRedisKey"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 存储Map</span></div><div class="line">redisTemplate.opsForHash().put(<span class="string">"myRedisKey"</span>, <span class="string">"myMapKey"</span>, <span class="string">"hello world"</span>);</div><div class="line">redisTemplate.opsForHash().get(<span class="string">"myRedisKey"</span>, <span class="string">"myMapKey"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="java中操作Redis"><a href="#java中操作Redis" class="headerlink" title="java中操作Redis"></a>java中操作Redis</h2><ul>
<li><p>引入jar包</p>
<ul>
<li>使用Java操作Redis需要jedis-2.1.0.jar，下载地址：<a href="http://files.cnblogs.com/liuling/jedis-2.1.0.jar.zip" target="_blank" rel="external">http://files.cnblogs.com/liuling/jedis-2.1.0.jar.zip</a></li>
<li>如果需要使用Redis连接池的话，还需commons-pool-1.5.4.jar，下载地址:<a href="http://files.cnblogs.com/liuling/commons-pool-1.5.4.jar.zip" target="_blank" rel="external">http://files.cnblogs.com/liuling/commons-pool-1.5.4.jar.zip</a></li>
</ul>
</li>
<li><p>使用连接池实例</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 构建redis连接池</div><div class="line"> * <span class="doctag">@return</span> JedisPool</div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JedisPool <span class="title">getPool</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (pool == <span class="keyword">null</span>) &#123;  </div><div class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();  </div><div class="line">        <span class="comment">//控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；  </span></div><div class="line">        <span class="comment">//如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。  </span></div><div class="line">        config.setMaxActive(<span class="number">500</span>);  </div><div class="line">        <span class="comment">//控制一个pool最多有多少个状态为idle(空闲的)的jedis实例。  </span></div><div class="line">        config.setMaxIdle(<span class="number">5</span>);  </div><div class="line">        <span class="comment">//表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；  </span></div><div class="line">        config.setMaxWait(<span class="number">1000</span> * <span class="number">100</span>);  </div><div class="line">        <span class="comment">//在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；  </span></div><div class="line">        config.setTestOnBorrow(<span class="keyword">true</span>);  </div><div class="line">        pool = <span class="keyword">new</span> JedisPool(config, <span class="string">"localhost"</span>, <span class="number">6379</span>);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> pool;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 返还到连接池</div><div class="line"> * <span class="doctag">@param</span> pool  </div><div class="line"> * <span class="doctag">@param</span> redis</div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">returnResource</span><span class="params">(JedisPool pool, Jedis redis)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (redis != <span class="keyword">null</span>) &#123;  </div><div class="line">        pool.returnResource(redis);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取字符串数据示例</div><div class="line"> * <span class="doctag">@param</span> key</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String key)</span></span>&#123;  </div><div class="line">    String value = <span class="keyword">null</span>;  </div><div class="line"></div><div class="line">    JedisPool pool = <span class="keyword">null</span>;  </div><div class="line">    Jedis jedis = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        pool = getPool();  </div><div class="line">        jedis = pool.getResource();  </div><div class="line"></div><div class="line">        value = jedis.get(key);  </div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">        <span class="comment">//释放redis对象  </span></div><div class="line">        pool.returnBrokenResource(jedis);  </div><div class="line">        e.printStackTrace();  </div><div class="line">    &#125; <span class="keyword">finally</span> &#123;  </div><div class="line">        <span class="comment">//返还到连接池  </span></div><div class="line">        returnResource(pool, jedis);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">return</span> value;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="redis对模糊查询的缺陷及解决方案"><a href="#redis对模糊查询的缺陷及解决方案" class="headerlink" title="redis对模糊查询的缺陷及解决方案"></a>redis对模糊查询的缺陷及解决方案</h2><blockquote>
<p>redis本身适合作为缓存工具，不建议使用模糊查询等操作</p>
</blockquote>
<p>使用<a href="redis-search4j">https://code.google.com/archive/p/redis-search4j/</a> ，使用了分词，解决了中文的模糊查询。（效果不好，测试发现会在服务器中存储大量无用的key）</p>
<hr>
<p>参考文章：</p>
<p>[^1] <a href="菜鸟教程">http://www.runoob.com/redis/redis-tutorial.html</a><br>[^2] <a href="极客学院 Wiki">http://wiki.jikexueyuan.com/project/redis-guide/</a><br>[^3] <a href="java对redis的基本操作">http://www.cnblogs.com/edisonfeng/p/3571870.html</a></p>
]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
        <tags>
            
            <tag> db </tag>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lightstreamer]]></title>
      <url>/2016/06/25/service/lightstreamer/</url>
      <content type="html"><![CDATA[<h2 id="Lightstreamer简介"><a href="#Lightstreamer简介" class="headerlink" title="Lightstreamer简介"></a>Lightstreamer简介</h2><ul>
<li>Lightstreamer可用于即时通讯(web聊天室、客服聊天)、实时新闻推送、实时股价行情等需要服务器一致给用户推送消息的场景。支持多平台(windows/unix/mac等)，支持多种语言(java、.NET、nodejs等)，支持多种设备(web端、移动端等)。提供免费版和商业版。</li>
<li>官网：<a href="http://www.lightstreamer.com/" target="_blank" rel="external">lightstreamer</a></li>
</ul>
<h3 id="Ajax推送与拉取方式"><a href="#Ajax推送与拉取方式" class="headerlink" title="Ajax推送与拉取方式"></a>Ajax推送与拉取方式</h3><p>使用Ajax可以开发出基于浏览器的具有高用户交互性和几乎不易觉察到延迟的web应用。实时的动态数据比如新闻标题、证券报价和拍卖行情都需要尽快地发送给用户。然而，AJAX仍然受限于web请求/响应架构的弱点，使得服务器不能推送实时动态的web数据。</p>
<ol>
<li>可以实现基于web的实时事件通知的方法有：<ul>
<li><code>HTTP拉取方式</code>：在这种传统的方法中，客户端以用户可定义的时间间隔去检查服务器上的最新数据。</li>
<li><code>HTTP流</code>：这种方法由存在于不间断的HTTP连接响应中或某个XMLHttpRequest连接中的服务器数据流所组成。</li>
<li><code>反转AJAX</code>：服务流应用到AJAX，就是所谓的反转AJAX 或者<a href="https://en.wikipedia.org/wiki/Comet_%28programming%29" target="_blank" rel="external"><code>COMET</code></a> 。它使得服务器在某事件发生时可以发送消息给客户端，而不需要客户端显式的请求。目标在于达到状态变化的实时更新。COMET使用了HTTP/1.1中的持续连接的特性。通过HTTP/1.1，除非另作说明，服务器和浏览器之间的TCP连接会一直保持连接状态，直到其中一方发送了一条明显的“关闭连接”的消息，或者有超时以及网络错误发生。</li>
<li><code>长时间轮询</code>：也就是所谓的异步轮询，这种方式是纯服务器端推送方式和客户端拉取方式的混合。它是基于BAYEUX协议的。 这个协议遵循基于主题的发布——订阅机制。在订阅了某个频道后，客户端和服务器间的连接会保持打开状态，并保持一段事先定义好的时间。如果服务器端没有事 件发生，而发生了超时，服务器端就会请求客户端进行异步重新连接。如果有事件发生，服务器端会发送数据到客户端，然后客户端重新连接。</li>
</ul>
</li>
<li>一些其他Comet Ajax服务器推送模型的实现：<ul>
<li>Orbited ：一种开源的分布式Comet服务器</li>
<li>AjaxMessaging ：Ruby on Rails的Comet插件</li>
<li>Pushlets ：一个开源框架，可以让服务器端java对象推送事件到浏览器端javascript，java applet，或者flash应用程序</li>
<li>Lightstreamer ：提供基于AJAX-COMET模式的HTTP流的商业实现</li>
<li>Pjax ：Ajax的推送技术</li>
</ul>
</li>
</ol>
<h2 id="Lightstreamer之HelloWorld"><a href="#Lightstreamer之HelloWorld" class="headerlink" title="Lightstreamer之HelloWorld"></a>Lightstreamer之HelloWorld</h2><h3 id="官方实例"><a href="#官方实例" class="headerlink" title="官方实例"></a>官方实例</h3><p>参考官方文章：<a href="http://www.lightstreamer.com/docs/baseparent/GETTING_STARTED.TXT" target="_blank" rel="external">http://www.lightstreamer.com/docs/baseparent/GETTING_STARTED.TXT</a></p>
<ul>
<li>下载Lightstreamer并解压：<a href="http://www.lightstreamer.com/download/" target="_blank" rel="external">Lightstreamer Allegro/Presto/Vivace Editions或者Lightstreamer Moderato Edition的ZIP</a></li>
<li>设置TCP端口<ul>
<li>默认使用的TCP端口有：8080 和 8888</li>
<li>可修改 <code>conf/lightstreamer_conf.xml</code>的<port> (在<http_server>代码块处) 和 <port> (在<rmi_connector> 代码块处)</rmi_connector></port></http_server></port></li>
</ul>
</li>
<li>配置JAVA_HOME<ul>
<li>Windows系统中：编辑<code>bin/windows/LS.bat</code>（第10行附近）</li>
<li>在Linux, Mac, or Unix系统中，编辑<code>bin/unix-like/LS.sh</code></li>
</ul>
</li>
<li>运行服务<ul>
<li>Windows系统中，运行<code>Start_LS_as_Application.bat</code>（本质是运行了LS.bat）</li>
<li>在Linux, Mac, or Unix系统中，运行<code>start.sh</code></li>
</ul>
</li>
<li>访问应用<ul>
<li>访问：<code>http://localhost:8080</code>（可以看到股票浮动，也可尝试开多个网页聊天和踢球）</li>
<li>仪表盘监控：<code>http://localhost:8080/dashboard</code></li>
</ul>
</li>
</ul>
<h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><p><a href="https://github.com/oldinaction/Git/tree/master/src/demo/Lightstreamer" target="_blank" rel="external"><strong>GIT源码</strong></a></p>
<p>前台使用Web Client (Web端)，后台使用Java Data Adapter (java数据适配器)</p>
<ul>
<li>下载官方源码：<a href="https://github.com/Lightstreamer/Lightstreamer-example-HelloWorld-client-javascript" target="_blank" rel="external">Web Client</a>、<a href="https://github.com/Lightstreamer/Lightstreamer-example-HelloWorld-adapter-java" target="_blank" rel="external">Java Data Adapter</a></li>
<li>Web Client<ul>
<li>在Lightstreamer的pages目录下新建HelloWorld文件夹（html页面来自Web Client的源码，注意引入<code>require.js</code>和<code>lightstreamer.js</code>）</li>
</ul>
</li>
<li><p>Java Data Adapter</p>
<ul>
<li>在Lightstreamer的adapters目录下新建HelloWorld文件夹，在此目录新建src、lib、classes三个文件夹，和一个adapters.xml文件</li>
<li>将Java Data Adapter中的源码HelloWorldDataAdapter.java放在src目录下；将Lightstreamer/DOCS-SDKs/sdk_adapter_java_inprocess/lib中的ls-adapter-interface.jar复制到lib目录。</li>
<li>编译<ul>
<li>命令行进到adapters/HelloWorld目录</li>
<li>运行<code>javac -classpath lib/ls-adapter-interface.jar -d classes -sourcepath src src/HelloWorldDataAdapter.java</code></li>
<li>运行<code>jar cvf HelloWorldDataAdapter.jar -C tmp_classes .</code></li>
<li>将生成的HelloWorldDataAdapter.jar复制到adapters/HelloWorld/lib目录</li>
</ul>
</li>
<li>在adapters.xml写入<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">adapters_conf</span> <span class="attr">id</span>=<span class="string">"HELLOWORLD"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">metadata_provider</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">adapter_class</span>&gt;</span>com.lightstreamer.adapters.metadata.LiteralBasedProvider<span class="tag">&lt;/<span class="name">adapter_class</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">metadata_provider</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">data_provider</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">adapter_class</span>&gt;</span>HelloWorldDataAdapter<span class="tag">&lt;/<span class="name">adapter_class</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">data_provider</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">adapters_conf</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>运行<code>Start_LS_as_Application.bat</code></p>
<ul>
<li>也可在eclipse中启动项目，参考：<a href="http://forums.lightstreamer.com/showthread.php?4875-Developing-amp-Running-an-Adapter-Set-Using-Eclipse-Java" target="_blank" rel="external">官方论坛文章</a>（文章中的${LS_HOME}指的是Lightstreamer安装目录）</li>
</ul>
</li>
<li>访问：<code>http://localhost:8080/HelloWorld</code>即可看到Hello、World交替显示</li>
</ul>
<h3 id="一台机器运行多个Lightstreamer"><a href="#一台机器运行多个Lightstreamer" class="headerlink" title="一台机器运行多个Lightstreamer"></a>一台机器运行多个Lightstreamer</h3><p>修改两个默认使用的TCP端口：8080 和 8888</p>
<blockquote>
<p>参考文章</p>
<ul>
<li><a href="http://www.lightstreamer.com/doc" target="_blank" rel="external">http://www.lightstreamer.com/doc</a></li>
<li><a href="http://www.infoq.com/cn/news/2007/07/pushvspull" target="_blank" rel="external">http://www.infoq.com/cn/news/2007/07/pushvspull</a></li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> service </category>
            
        </categories>
        
        
        <tags>
            
            <tag> im </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LoadRunner自动化测试工具]]></title>
      <url>/2016/05/22/extend/load-runner/</url>
      <content type="html"><![CDATA[<h2 id="LoadRunner简介"><a href="#LoadRunner简介" class="headerlink" title="LoadRunner简介"></a>LoadRunner简介</h2><ol>
<li>LoadRunner，是一种预测系统行为和性能的负载测试工具。通过以模拟上千万用户实施并发负载及实时性能监测的方式来确认和查找问题，LoadRunner能够对整个企业架构进行测试。</li>
<li>Web性能测试常用指标<ul>
<li>响应时间：2-5-8原则（2-5秒用户可以接受，5-8秒用户会感觉很慢）</li>
<li>吞吐量：指单位时间内客户端和服务器成功传送数据的数量</li>
<li>资源使用率：常见的资源有CPU占用率、内存使用率、磁盘I/O、网络I/O</li>
<li>每秒点击数：指客户端每秒钟向服务器端提交的请求数量</li>
<li>并发用户数：指在客户端的一批用户同时执行一个操作的数量。（两种错误的理解：使用系统的全部用户数、全部在线用户数）</li>
</ul>
</li>
</ol>
<h2 id="Virtual-User-Generator"><a href="#Virtual-User-Generator" class="headerlink" title="Virtual User Generator"></a>Virtual User Generator</h2><p>录制 - 验证 - 增强 - 设置负载</p>
<h3 id="测试脚本中的Actions"><a href="#测试脚本中的Actions" class="headerlink" title="测试脚本中的Actions"></a>测试脚本中的Actions</h3><ul>
<li>init：录制的一般是业务流程开始之前的初始化工作（如服务器初始化、登录）</li>
<li>action：录制的一般是业务流程操作的事件</li>
<li>end：录制的一般是退出的时候执行的操作（用户退出、注销）</li>
</ul>
<blockquote>
<p>init 和 end 不能迭代多次，只能运行一次；action可以迭代多次运行</p>
</blockquote>
<h3 id="测试需求"><a href="#测试需求" class="headerlink" title="测试需求"></a>测试需求</h3><p>测试需求：登录WebTours订票网站，预定一张机票后退出<br>脚本录制步骤：</p>
<ol>
<li>启动Web服务器</li>
<li>打开Virtual User Generator界面</li>
<li>选择脚本协议</li>
<li>进行页面操作</li>
<li>回放验证</li>
<li>增强脚本</li>
</ol>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2>]]></content>
      
        <categories>
            
            <category> extend </category>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> test </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html]]></title>
      <url>/2016/04/16/web/html/</url>
      <content type="html"><![CDATA[<h1 id="HTML日积月累"><a href="#HTML日积月累" class="headerlink" title="HTML日积月累"></a>HTML日积月累</h1><ol>
<li><p>缩略语<code>&lt;abbr title=&quot;attribute&quot;&gt;attr&lt;/abbr&gt;</code> <abbr title="省略的话">…</abbr></p>
</li>
<li><p>缩进 <code>&amp;emsp;</code>全角缩进；<code>&amp;ensp;</code>半角缩进</p>
</li>
<li><p>引用标记 <code>&lt;blockquote&gt;&lt;/blockquote&gt;</code></p>
 <blockquote><br> 这是引用标记的示例<br> </blockquote>
</li>
<li><p>带描述的无序列表</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>ABC<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>123<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>456<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>DEF<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>789<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div></pre></td></tr></table></figure>
<dl><br>    <dt>ABC</dt><br>    <dd>123</dd><br>    <dd>456</dd><br>    <dt>DEF</dt><br>    <dd>789</dd><br></dl>

<ol>
<li><p>键盘输入效果<code>&lt;kbd&gt;&lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;,&lt;/kbd&gt;&lt;/kbd&gt;</code><kbd><kbd>ctrl</kbd> + <kbd>S</kbd></kbd></p>
</li>
<li><p><code>&lt;code&gt;&lt;/code&gt;</code>和<code>&lt;pre&gt;&lt;/pre&gt;</code>的区别</p>
<p> <code>&lt;code&gt;</code></p>
 <pre>&lt;pre&gt;</pre></li>
</ol>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenShift空间]]></title>
      <url>/2016/04/16/extend/open-shift/</url>
      <content type="html"><![CDATA[<h2 id="OpenShift空间介绍"><a href="#OpenShift空间介绍" class="headerlink" title="OpenShift空间介绍"></a>OpenShift空间介绍</h2><blockquote>
<p>OpenShift空间是红帽RedHat旗下的，支持多种语言环境(如java、php、nodejs等)，每个注册用户可以免费创建3个应用，<a href="https://www.openshift.com/" target="_blank" rel="external">进入官网</a></p>
</blockquote>
<h2 id="关于远程登录"><a href="#关于远程登录" class="headerlink" title="关于远程登录"></a>关于远程登录</h2><h3 id="安装-PuTTY-和-WinSCP"><a href="#安装-PuTTY-和-WinSCP" class="headerlink" title="安装 PuTTY 和 WinSCP"></a>安装 PuTTY 和 WinSCP</h3><p>安装包下载见上面链接</p>
<h3 id="设置密钥"><a href="#设置密钥" class="headerlink" title="设置密钥"></a>设置密钥</h3><ul>
<li>打开 PuTTY 点击 Generate 按钮生成一个密钥</li>
<li>点击下面的 <code>save public key</code> 和 <code>save private key</code> 保存公钥和私钥到本地文件</li>
<li>登录 OpenShift 后台进入到 setting，在 public keys 处添加一个公钥。名字随便取，公钥内容为 Putty 最顶部生成的一大段代码</li>
</ul>
<h3 id="远程SSH登录-两种都可尝试一下"><a href="#远程SSH登录-两种都可尝试一下" class="headerlink" title="远程SSH登录(两种都可尝试一下)"></a>远程SSH登录(两种都可尝试一下)</h3><ul>
<li><p>在PuTTY上登录</p>
<ol>
<li>打开PuTTY，点击Session</li>
<li>Host Name填写OpenShift提供的ssh登录网址，如：<code>8888f31389f5cf0b1d0000ff@app-oldinaction.rhcloud.com</code></li>
<li>Saved Session 随便取名，再点击 Save</li>
<li>点击 Connection - SSH - Auth，再点击Browse，选择刚刚保存的私钥文件</li>
<li>点击Open进行登录</li>
<li>输入私钥文件密码即可登录，但是界面是命令行的</li>
</ol>
</li>
<li><p>在WinSCP上登录</p>
<ol>
<li>打开WinSCP新建会话</li>
<li>协议：SFTP，主机名：如app-oldinaction.rhcloud.com，端口：22，用户名：8888f31389f5cf0b1d0000ff</li>
<li>高级 - SSH - 验证 - 密钥文件：为刚刚保存的私钥文件</li>
<li>点击登录，输入私钥文件密码即可看到相应的目录</li>
</ol>
</li>
</ul>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>我们的项目文件应该放在 <code>/var/lib/openshift/8888f31389f5cf0b1d0000ff/app-root/runtime/repo/</code> 下。</p>
<ul>
<li>少量文件可以使用WinSCP上传，可见即可得</li>
<li>较大的文件压缩成zip<ul>
<li>将文件压缩成zip后利用 WinSCP 上传到 repo 目录下</li>
<li>登录PuTTY(默认在8888f31389f5cf0b1d0000ff目录)，使用 cd 命令进入到 repo 目录下 (ls 查看目录文件)</li>
<li>使用命令 <code>unzip XXX.zip</code> 解压文件 XXX.zip</li>
<li>如果要移动位置，再使用 WinSCP 进行移动</li>
</ul>
</li>
<li>在线文件上传：使用 <code>wget 文件下载地址(http://www.xxx.comg/XXX.zip)</code></li>
</ul>
]]></content>
      
        <categories>
            
            <category> extend </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hosts </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jekyll]]></title>
      <url>/2016/04/16/extend/jekyll/</url>
      <content type="html"><![CDATA[<ul>
<li>目录<br>{:toc}</li>
</ul>
<h2 id="jekyll-介绍-1"><a href="#jekyll-介绍-1" class="headerlink" title="jekyll 介绍 ^1"></a>jekyll 介绍 <a href="[jekyll官方文档](http://jekyllrb.com/docs/home/)">^1</a></h2><p><a href="http://jekyllrb.com/" target="_blank" rel="external">Jekyll</a>（发音/‘dʒiːk əl/，”杰克尔”）是一个静态站点生成器，它会根据网页源码生成静态文件。它提供了模板、变量、插件等功能，所以实际上可以用来编写整个网站。</p>
<blockquote>
<p>Github Pages</p>
<ul>
<li>github Pages 是 GitHub 提供给用户展示项目主页的静态网页。因此利用 jekyll 搭建网站的话，我们只需要编写好网页文件(或者md文件)上传到 Github 即可（上传的文件会经过 jekyll 程序处理，最终得到我们可以浏览的网页）<br><strong><a href="https://github.com/oldinaction/Git/tree/master/demo/jekyll" target="_blank" rel="external">本教程源码下载</a></strong></li>
</ul>
</blockquote>
<h2 id="利用-jekyll-搭建博客初步-2"><a href="#利用-jekyll-搭建博客初步-2" class="headerlink" title="利用 jekyll 搭建博客初步 ^2"></a>利用 jekyll 搭建博客初步 <a href="[Github搭建jekyll博客](http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html)">^2</a></h2><h3 id="新建GitHub项目"><a href="#新建GitHub项目" class="headerlink" title="新建GitHub项目"></a>新建GitHub项目</h3><blockquote>
<p>在搭建之前，你必须已经安装了 <a href="https://git-scm.com/" target="_blank" rel="external">git</a>，并且有 <a href="https://github.com/" target="_blank" rel="external">github</a> 账户。</p>
</blockquote>
<ol>
<li>假如 github 主页是 <code>https://github.com/oldinaction</code>, 那么新建一个仓库 (repository), 仓库起名为 <code>oldinaction.github.io</code>(一定要为<code>用户名.github.io</code>)</li>
<li>克隆到本地仓库：<code>git clone https://github.com/oldinaction/oldinaction.github.io.git</code></li>
</ol>
<h3 id="在本地仓库创建相关文件"><a href="#在本地仓库创建相关文件" class="headerlink" title="在本地仓库创建相关文件"></a>在本地仓库创建相关文件</h3><ol>
<li>创建配置文件：在项目根目录下，建立一个名为 <code>_config.yml</code> 的文本文件。它是jekyll的设置文件，我们暂时不需要加任何内容，有关配置可参考<a href="http://jekyllrb.com/docs/configuration/" target="_blank" rel="external">官方文档</a>。</li>
<li><p>创建模板文件</p>
<ul>
<li>在项目根目录下，创建一个<code>_layouts</code>目录，用于存放模板文件</li>
<li><p>进入该目录，创建一个<code>default.html</code>文件，作为Blog的默认模板。并在该文件中填入以下内容</p>
<p><img src="/data/images/2016/07/jekyll-0.png" alt="创建模版文件"></p>
<blockquote>
<p>Jekyll使用<a href="https://github.com/shopify/liquid/wiki/liquid-for-designers" target="_blank" rel="external">Liquid模板语言</a>，更多模板变量请参考<a href="https://jekyllrb.com/docs/templates/" target="_blank" rel="external">官方文档</a>。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>创建文章</p>
<ul>
<li>回到项目根目录，创建一个<code>_posts</code>目录，用于存放blog文章</li>
<li>新建文件 <code>2016-04-10-hello-world.html</code>(注意，文件名必须为”年-月-日-文章标题.后缀名”的格式。也支持 markdown 格式)。 在该文件中，填入以下内容：（注意，行首不能有空格）<br><img src="/data/images/2016/07/jekyll-1.png" alt="创建文章"></li>
</ul>
<blockquote>
<ul>
<li>每篇文章的头部，必须有一个yaml文件头，用来设置一些元数据。它用三根短划线”—“，标记开始和结束，里面每一行设置一种元数据。”layout:default”，表示该文章的模板使用_layouts目录下的default.html文件；”title: 你好，世界”，表示该文章的标题是”你好，世界”，如果不设置这个值，默认使用嵌入文件名的标题，即”hello world”。</li>
<li>这里要注意的是，Liquid模板语言规定，<strong>输出内容使用两层大括号，单纯的命令使用一层大括号</strong></li>
</ul>
</blockquote>
</li>
<li><p>创建首页</p>
<ul>
<li>回到根目录，创建一个 <code>index.html</code> 文件，填入以下内容<br><img src="/data/images/2016/07/jekyll-2.png" alt="创建首页"></li>
</ul>
</li>
</ol>
<h3 id="提交到-github"><a href="#提交到-github" class="headerlink" title="提交到 github"></a>提交到 github</h3><ol>
<li>添加内容到本地仓库: 先执行命令 <code>$ git add .</code> ，再执行命令 <code>$ git commit -am &#39;jekyll demo&#39;</code></li>
<li>访问：打开 <code>http://oldinaction.github.io/</code> 即可看到我们的博客</li>
</ol>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>如果你不想用<a href="http://oldinaction.github.io/这个域名，可以换成自己的域名。具体方法是：" target="_blank" rel="external">http://oldinaction.github.io/这个域名，可以换成自己的域名。具体方法是：</a></p>
<ul>
<li>在仓库的根目录下面，新建一个名为 <code>CNAME</code> 的文本文件，里面写入你要绑定的域名，比如 <code>example.com</code> 或者 <code>xxx.example.com</code>。</li>
<li>如果绑定的是顶级域名，则DNS要新建一条A记录，指向 <code>204.232.175.78</code>。如果绑定的是二级域名，则DNS要新建一条CNAME记录，指向<code>username.github.com</code>（请将username换成你的用户名）；如果是组织类pages，则指向<code>username.github.io</code></li>
<li>在_config.yml文件中写入<code>baseurl=&quot;&quot;</code></li>
</ul>
<hr>
<h2 id="windows-在本地搭建jekyll博客-3"><a href="#windows-在本地搭建jekyll博客-3" class="headerlink" title="windows 在本地搭建jekyll博客 ^3"></a>windows 在本地搭建jekyll博客 <a href="[Windows本地安装jekyll](http://blog.csdn.net/itmyhome1990/article/details/41982625)">^3</a></h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><h4 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h4><ul>
<li>下载地址：<a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external">Ruby</a></li>
<li>安装时勾选<code>Add Ruby executables to your PATH</code> （将ruby加到环境变量的Path中）</li>
<li>检测安装：在命令行运行 <code>ruby -v</code> 显示版本号则成功</li>
</ul>
<h4 id="安装Ruby的DevKit"><a href="#安装Ruby的DevKit" class="headerlink" title="安装Ruby的DevKit"></a>安装Ruby的DevKit</h4><ul>
<li>下载地址：<a href="http://rubyinstaller.org/downloads/" target="_blank" rel="external">DEVELOPMENT KIT</a> 选择合适的版本</li>
<li>运行解压到某目录，如 <code>D:\software\RubyDevKit</code></li>
<li>初始化devkit并将其绑定到Ruby安装<ul>
<li>在命令行cd到DevKit的安装目录RubyDevKit</li>
<li>运行 <code>ruby dk.rb init</code></li>
<li>运行 <code>ruby dk.rb install</code></li>
</ul>
</li>
</ul>
<h4 id="安装jekyll"><a href="#安装jekyll" class="headerlink" title="安装jekyll"></a>安装jekyll</h4><p>打开命令行，运行 <code>gem install jekyll</code> ， 得一会运行</p>
<h4 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h4><ul>
<li>下载地址： <a href="https://www.python.org/downloads/" target="_blank" rel="external">python</a> 我下的是2.7.11</li>
<li>勾选<code>Add python.exe to Path</code>（将python加到环境变量的Path中）</li>
<li>检测安装：在命令行运行 <code>python -v</code>（如果运行失败，看环境变量中是否有python的安装目录）</li>
</ul>
<h4 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h4><p>pip是一个Python包的安装和管理工具。你会需要它的安装pygments,pygments.rb突出你的代码,使用Python包。</p>
<p>如果Python 2 &gt;=2.7.9 or Python 3 &gt;=3.4，只需在命令行运行 <code>python -m pip install -U pip</code> 即可。此处是2.7.11，所有运行命令即可</p>
<h3 id="运行jekyll"><a href="#运行jekyll" class="headerlink" title="运行jekyll"></a>运行jekyll</h3><ul>
<li>打开命令行，cd 到 d:/note 目录（博客的目录将会在此处生成）</li>
<li>运行 <code>jekyll new blog</code>，此时d:/note会产生一个blog目录</li>
<li>cd到此目录</li>
<li>运行 <code>jekyll serve</code> ，这是本地博客服务器的启动命令<ul>
<li><code>Ctrl+C</code> 停止服务</li>
</ul>
</li>
<li>访问 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 即可看到博客欢迎界面</li>
</ul>
<hr>
<h2 id="jekyll使用笔记"><a href="#jekyll使用笔记" class="headerlink" title="jekyll使用笔记"></a>jekyll使用笔记</h2><h3 id="文章编写"><a href="#文章编写" class="headerlink" title="文章编写"></a>文章编写</h3><ol>
<li>在atom中使用插件mdwriter写文章</li>
<li>文章元信息中的categories可以有多个分类，如<code>categories: [web, js]</code></li>
<li><code>_posts</code>中目录层级不限，文章的显示只根据元信息获取</li>
<li>jekyll代码和markdown代码需要使用：\{% raw %\}代码\{% endraw %\}</li>
</ol>
<h3 id="jekyll博客主题样式"><a href="#jekyll博客主题样式" class="headerlink" title="jekyll博客主题样式"></a>jekyll博客主题样式</h3><ul>
<li><p>主页文章分页 <a href="[jekyll文章分类](http://www.52ij.com/jishu/99014.html)">^4</a></p>
<ul>
<li><p><code>_config.yml</code>中加入</p>
  
            paginate: 10
            paginate_path: "page:num"
        
</li>
<li><p>见根目录下<code>index.xml</code></p>
</li>
</ul>
</li>
<li>文章分类：见<code>categories.html</code></li>
<li>查看分类下的文章 [^5] (<strong>？？？</strong>)</li>
<li><p>markdown文章标题生成目录 <a href="[markdown文章标题生成目录](http://www.111cn.net/sys/linux/70052.htm)">^6</a></p>
  

        * 目录(星号必须有，标题可随便取)
        {:toc} // {:toc #myid} 则会生成id，默认是markdown-toc

        ## 标题一

            如果要把某标题从目录树中排除，则在该标题的下一行写上 {:.no_toc}

    </li>
<li>代码高亮<ul>
<li>法一：常用<ul>
<li><code>_config.yml</code>中加入<code>highlighter: rouge</code></li>
<li>配上css样式文件</li>
</ul>
</li>
<li>法二：使用原生高亮代码，如：{% highlight html %}代码{% endhighlight %}</li>
</ul>
</li>
<li>文章搜索(<strong>？？？</strong>)</li>
<li>页面新建<ul>
<li>方法一：在根目录建立<code>pagetest.html</code>的文件，访问<code>http://localhost:4000/pagetest</code>即可看到该页面</li>
<li>方法二：在根目录新建<code>pages</code>的目录，在里面新建<code>test1</code>目录，在test1目录新建<code>index.html</code>文件，访问<code>http://localhost:4000/pages/test1</code>即可看到该页面。注意test1目录只有名为index.html的文件才生效。同理在pages目录新建test2，亦可访问test2的链接</li>
</ul>
</li>
</ul>
<h3 id="jekyll语法"><a href="#jekyll语法" class="headerlink" title="jekyll语法"></a>jekyll语法</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>本地运行的jekyll，修改了<code>_config.yml</code>需要重新启动，修改了所有的<code>.hmtl</code>，<code>.md</code>文件可以直接看到效果</li>
</ol>
<hr>
<p>参考文章</p>
]]></content>
      
        <categories>
            
            <category> extend </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jekyll </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git]]></title>
      <url>/2016/04/16/arch/git/</url>
      <content type="html"><![CDATA[<h2 id="git入门-1"><a href="#git入门-1" class="headerlink" title="git入门 ^1"></a>git入门 <a href="[Git入门视频](http://edu.51cto.com/course/course_id-1838.html)">^1</a></h2><blockquote>
<p>临时记录</p>
<ul>
<li><code>git add/rm</code> 、 <code>git cimmit</code> 时报错【fatal: Unable to create ‘D:/git/demo/.git/index.lock’: File exists.】，解决办法为删除本地仓库中的此文件（<code>rm -f ./.git/index.lock</code>）。</li>
<li>运行命令<code>git commit --amend</code>、<code>git diff</code>后、打开vi编辑器出错，退出快捷键<code>Ctrl+Z</code></li>
<li><code>ls</code>或者<code>dir</code>都可以查看当前目录结构</li>
<li>删除文件git rm、git add、git commit、git push</li>
<li>网址<ul>
<li><a href="http://www.jianshu.com/p/e2a15d01284c" target="_blank" rel="external">http://www.jianshu.com/p/e2a15d01284c</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/06/git_remote.html</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></li>
<li><a href="http://blog.csdn.net/oldinaction/article/details/49704969" target="_blank" rel="external">http://blog.csdn.net/oldinaction/article/details/49704969</a></li>
</ul>
</li>
</ul>
<p>第二集有几个命令</p>
</blockquote>
<h3 id="git全局配置"><a href="#git全局配置" class="headerlink" title="git全局配置"></a>git全局配置</h3><ul>
<li><code>git config --global user.name smalle</code> 设置用户名</li>
<li><code>git config --global user.email oldinaction@qq.com</code> 设置邮箱</li>
<li><code>git config --global color.ui true</code> 设置在命令行打印的代码带颜色</li>
<li><code>git config --list</code>  列出所有配置</li>
</ul>
<p>以上操作其实是对git的根目录下.gitconfig（<code>~/.gitconfig</code>，<code>~</code>代表根目录，<code>cat  ~/.gitconfig</code>查看此文件）进行的操作，也可直接对这个文件进行修改</p>
<blockquote>
<p><code>cat 文件路径名</code>查看某个文件，如：<strong>cat ~/.gitconfig</strong>（<code>~</code>代表根目录）<br><code>vi 文件名</code>打开某个文件进行编辑</p>
<ul>
<li>点击键盘<code>insert</code>，进入vi编辑模式，开始编辑；</li>
<li>点击<code>esc</code>退出编辑模式，进入到vi命令行模式；</li>
<li>输入<code>:x</code>/<code>ZZ</code>将刚刚修改的文件进行保存，退出编辑页面，回到初始命令行<br><code>ls</code>查看当前目录结构，<code>ls -A</code>可以显示隐藏的目录</li>
</ul>
</blockquote>
<h3 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h3><ol>
<li><p>创建repository(并关联远程仓库)</p>
<ul>
<li><p><code>cd d:/git/demo/</code>进入到项目文件夹（可使用<code>mkdir 文件夹名</code>在当前目录创建文件夹或者手动创建）</p>
<blockquote>
<ul>
<li>此时git bash上显示<code>smalle@ST-008 MINGW64 /d/git/demo</code>（直接在demo目录<code>右键-Git Bash Here</code>也是这个显示）</li>
<li>如果直接点击桌面上的git图标进入命令行显示的是<code>smalle@ST-008 MINGW64 ~</code></li>
<li>创建之后，d:/git/demo/目录就是后面提到到 working 区（其实就是本地磁盘）</li>
</ul>
</blockquote>
</li>
<li><p><code>git init</code> 初始化项目，提示 Initialized empty Git repository in D:/git/demo/.git/</p>
<ul>
<li>此时就产生了后面提到的 staging 和 history 区</li>
</ul>
</li>
<li><code>git add .</code> 添加所有文件到本地索引</li>
<li><code>git commit -am &#39;初始化提交&#39;</code> 提交修改到本地仓库</li>
<li><code>git remote add origin https://github.com/oldinaction/jekyll_demo.git</code> 添加远程仓库地址，保存在origin变量中</li>
<li><code>git push origin master</code> 按照前一条命令中origin给定的git远程地址推送到远程仓库的master分支（容易和远程产生冲突）</li>
</ul>
</li>
<li>克隆repository<ul>
<li><code>git clone https://github.com/UserName/ProjectName</code>，这是利用https方式克隆，还有其他如git、ssh等方式（克隆后git会在当前目录新建一个文件夹为 “ProjectName” 的项目）</li>
<li><code>git clone -b &lt;remote branch&gt; &lt;remote address&gt;</code> 克隆远程仓库的某个分支（如：<code>git clone -b master http://192.168.1.1/test.git</code>）</li>
</ul>
</li>
<li>克隆远程仓库的某个文件夹<ul>
<li>建立本地仓库<ul>
<li><code>mkdir project_folder</code></li>
<li><code>cd project_folder</code></li>
<li><code>git init</code></li>
<li><code>git remote add -f origin &lt;url&gt;</code></li>
</ul>
</li>
<li><code>git config core.sparsecheckout true</code> 允许使用Sparse Checkout模式</li>
<li>保存需要下载的文件夹名到<code>.git/info/sparse-checkout</code>文件中。如<code>echo &quot;src&quot; &gt;&gt; .git/info/sparse-checkout</code></li>
<li><code>git pull origin master</code> 拉取相应分支</li>
</ul>
</li>
</ol>
<h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ol>
<li>查看分支<ul>
<li><code>git branch</code> 查看本地分支（<code>*</code>代表当前所处的分支）</li>
<li><code>git branch -a</code> 查看本地和运程所有分支</li>
</ul>
</li>
<li>创建分支<ul>
<li><code>git branch 分支名</code> 创建一个新的分支。如果此分支和 master 是同一级分支（及在处于 master 时创建的分支），那么他们指向同一个 commit 对象</li>
<li><code>git checkout -b &lt;localBranchName&gt;</code> 创建一个本地分支并且换到此分支（是<code>git branch 分支名</code> 和 <code>git checkout 分支名</code>的合并命令）</li>
<li><code>git checkout -b &lt;localBranchName&gt; &lt;remotesBranchName&gt;</code> 相当于检出远程的某个分支到本地，远程分支名如origin/b1(使用 <code>git branch -a</code> 查看时显示为remotes/origin/b1)<ul>
<li><strong><code>git checkout -b &lt;localBranchName&gt; --track &lt;remotesBranchName&gt;</code></strong> 检出分支并创建本地分支与远程分支的追踪</li>
<li>勿使用 <code>git checkout 远程分支名</code> 命令会是当前HEAD变为一个游离的HEAD（即现在HEAD指向的是一个没有分支名字的修订版本，游离于已知的所有分支之外，如<code>HEAD detached at origin/b1</code>）</li>
</ul>
</li>
<li><code>git push origin &lt;branch&gt;</code> 创建远程分支</li>
</ul>
</li>
<li>切换分支<ul>
<li><code>git checkout 分支名</code> 切换到此分支（<em>Switched to branch ‘分支名’</em>），此时 HEAD 指向此分支；并且本地磁盘（working 区）的内容会显示此分支的文件</li>
</ul>
</li>
<li>合并分支<ul>
<li><code>git merge 子分支名</code> 将子分支名合并到主分支，合并前必须切换到主分支。（子分支的文件会替换掉主分支的文件）</li>
</ul>
</li>
<li>跟踪分支 <code>git branch --set-upstream-to=&lt;remotesBranchName&gt; &lt;localBranchName&gt;</code> 之后可以使用<code>git push/pull</code>直接对相应分支进行操作</li>
<li>删除分支<ul>
<li><code>git branch -d 分支名</code> 删除此分支（只能删除除当前分支以外的分支；如果当前分支有一次提交，则需要将此分支合并到主分支之后再进行删除）</li>
<li>删除远程分支：<code>git branch -r -d origin/branch-name</code>或者<code>git push origin :branch-name</code></li>
</ul>
</li>
<li>重命名分支：<code>git branch -m old-branch-name new-branch-name</code><ul>
<li>在git中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支</li>
</ul>
</li>
</ol>
<h3 id="添加、提交文件"><a href="#添加、提交文件" class="headerlink" title="添加、提交文件"></a>添加、提交文件</h3><p>利用<code>git add &lt;file&gt;</code> / <code>git add .</code>将 working 中此文件或者所有文件添加到 staging 区（<strong>&lt;file&gt;</strong> 为必输的文件名）</p>
<p>利用<code>git commit -m &#39;提交时的备注&#39;</code> 将 staging 区中的此文件提交到 history 区（如果不加<code>-m</code>则命令行会打开一个vi编辑器供用户填写提交时的备注）</p>
<p>利用<code>git commit -a</code> 将 working 中此文件直接提交到文件到history 区（此时一般加上参数<code>-m</code>，即<code>git commit -am &#39;提交时的备注&#39;</code>）</p>
<blockquote>
<p>git运行流程图</p>
<p><img src="/data/images/2016/04/git流程图.png" alt="git运行流程图"></p>
</blockquote>
<h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><ul>
<li><code>git checkout .</code> #本地所有修改的。没有的提交的，都返回到原来的状态（删除不了请参考下方的<code>git clean</code>用法）<ul>
<li><code>git checkout test.txt</code> 丢弃修改</li>
</ul>
</li>
<li><code>git stash</code> #把所有没有提交的修改暂存到stash里面。可用git stash pop恢复。</li>
<li><code>git reset --hard HASH</code> #返回到某个节点，不保留修改。如：<code>git reset --hard HEAD</code>，<code>git reset --hard 8a222ba</code></li>
<li><code>git reset --soft HASH</code> #返回到某个节点。保留修改</li>
</ul>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p><strong>在用使用 <code>git clean</code> 前，强烈建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删</strong></p>
<ul>
<li><code>git clean -nf</code> <strong>查看删除文件</strong><ul>
<li><code>git clean -f</code> 删除 untracked files</li>
</ul>
</li>
<li><code>git clean -nfd</code><ul>
<li><code>git clean -fd</code> 连 untracked 的目录也一起删掉</li>
</ul>
</li>
<li><code>git clean -nxfd</code><ul>
<li><code>git clean -xfd</code> 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的文件用的）</li>
</ul>
</li>
</ul>
<h3 id="与远程仓库同步"><a href="#与远程仓库同步" class="headerlink" title="与远程仓库同步"></a>与远程仓库同步</h3><ul>
<li><code>git fetch 远程仓库地址</code> 下载远程仓库的变动到当前分支的历史区</li>
<li><code>git pull 远程仓库地址</code> 取回远程仓库的变化到当前分支的工作区<ul>
<li><code>git pull</code> 获取本分支追踪的远程分支</li>
<li><code>git pull origin develop</code> 获取远程develop分支(使用 <code>git branch -a</code> 查看时显示为remotes/origin/develop)</li>
<li><code>git pull origin master:master</code> 取回远程的master分支到本地master分支</li>
</ul>
</li>
<li><code>git push 远程仓库地址</code> 将本地仓库内容同步到远程仓库，回车后输入用户名和密码即可</li>
</ul>
<h3 id="查看git状态和文件差别"><a href="#查看git状态和文件差别" class="headerlink" title="查看git状态和文件差别"></a>查看git状态和文件差别</h3><ul>
<li>利用<code>git status</code>查看文件状态，<code>git status -s</code>显示文件扼要信息<ul>
<li>Git内部只有三个状态，分别是未修改unmodified、修改modified、暂存staged。对于没有加入Git控制的文件，可以视为第四种状态未跟踪untracked</li>
<li>提示 <em>Untracked files</em> 表示没有向 git 进行登记，需要增加到 git 进行版本控制（下面文件显示红色）。使用<code>git add &lt;file&gt;</code> / <code>git add .</code></li>
<li>提示 <em>Changes to be committed</em> 表示文件被修改，等待提交（下面文件显示绿色）。使用<code>git commit -m &#39;提交时的备注&#39;</code></li>
<li>提示 <em>nothing to commit, working directory clean</em> 表示没有文件需要提交</li>
<li>运行<code>git status -s</code>命令，显示的标识位信息分别表示staging 和 working两个区<ul>
<li><code>A_</code>其中 A 表示 staging 中新加的文件，空格表示 working 没有变化（其中<code>_</code>表示空格）</li>
<li><code>_M</code>其中空格表示 staging 中没有改变，M 表示 working 做了修改</li>
<li><code>MM</code>表示 staging 和 working 都发生了变化</li>
<li><code>D_</code>表示 staging 中此文件被删除了</li>
<li><code>R_</code>表示 staging 中此文件进行了重命名</li>
<li><code>??</code>表示此文件没有被 git 进行版本控制</li>
</ul>
</li>
</ul>
</li>
<li>利用<code>git diff</code>查看文件差别，<code>git diff --stat</code>是对文件差别的扼要描述<ul>
<li><code>-红色字体</code>表示删除的</li>
<li><code>+绿色字体</code>表示增加的</li>
<li><code>git diff</code>默人对<code>git status -s</code>的第二个标识位（working）进行详细描述；</li>
<li>使用<code>git diff --staged</code> / <code>git diff --cached</code>则是对第一个标识位（staging）进行详细描述；</li>
<li>使用<code>git diff HEAD</code>则是对 history 区此文件的描述</li>
</ul>
</li>
<li>注意事项<ul>
<li>git不监控文件权限属性变化</li>
</ul>
</li>
</ul>
<h3 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h3><p><code>git rm &lt;file&gt;</code> 将此文件从 repository 中删除</p>
<p><code>git rm --cached &lt;file&gt;</code> 将此文件从 staging 区中删除，此时 working 区中还有</p>
<h3 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h3><p><code>git reset &lt;file&gt;</code> 撤销对此文件的 commit 操作，他会从 history 区中将此文件取出并还原到 staging 区</p>
<p><code>git checkout -- &lt;file&gt;</code> 撤销对文件的 add 操作，他会从 staging 区中将此文件取出并还原到 working 区</p>
<p><code>git checkout HEAD &lt;file&gt;</code> 撤销对文件的 add 操作，他会从 history 区中将此文件取出并还原到 working 区（其中文件名为相对.git文件夹的路径名）</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="查看日志和帮助"><a href="#查看日志和帮助" class="headerlink" title="查看日志和帮助"></a>查看日志和帮助</h4><ul>
<li><p><code>git help</code> 查看帮助。<code>[]</code>为可选，<code>&lt;&gt;</code>为必输</p>
</li>
<li><p><code>git log</code>查看提交日志，<code>Ctrl+Z</code> 退出查看</p>
<ul>
<li><code>git log --oneline</code> 可以显示更加短小的提交ID</li>
<li><code>git log --graph</code> 显示何时出现了分支和合并等信息</li>
<li><code>git log --pretty=raw</code> 显示所有提交对象的parent属性</li>
<li><code>git reflog</code> 查看每个提交版本信息(排在上面的为最新版本)</li>
</ul>
</li>
<li><p><code>git cat-file -p 哈希码(或简写)或者对象名</code> 展示此对象的详细信息</p>
</li>
<li><p><code>git cat-file -t 哈希码(或简写)</code> 查看Git对象的类型，主要的git对象包括tree，commit，parent，和blob等</p>
<ul>
<li>如：<code>git cat-file -t HEAD</code>的结果是commit表示此HEAD指向一个commit 对象</li>
</ul>
</li>
<li><p><code>cat .git/HEAD</code> 查看HEAD指向(当前分支)。如打印 <code>.git/refs/heads/master</code></p>
</li>
<li><code>cat .git/refs/heads/master</code> 查看HEAD的哈希码(简写取前7位)</li>
<li><code>git rev-parse HEAD</code> 获取 HEAD 对象的哈希码</li>
</ul>
<h4 id="忽略控制文件"><a href="#忽略控制文件" class="headerlink" title="忽略控制文件"></a>忽略控制文件</h4><ol>
<li><code>.gitignore</code> 文件创建和设置<ul>
<li>git根目录运行命令：<code>touch .gitignore</code></li>
<li>使用 vi 编辑器进行文件配置</li>
</ul>
</li>
<li>配置语法<ul>
<li>以斜杠<code>/</code>开头表示目录</li>
<li>以星号<code>*</code>通配多个字符</li>
<li>以问号<code>?</code>通配单个字符</li>
<li>以方括号<code>[]</code>包含单个字符的匹配列表</li>
<li>以叹号<code>!</code>表示不忽略(跟踪)匹配到的文件或目录</li>
</ul>
</li>
<li><code>echo &#39;*~&#39; &gt; .gitignore</code>将文本<code>*~</code>保存到文件 .gitignore 中，再将此文件 add 并 commit 到 git 中即可，表示进行 git 相关操作时忽略以<code>~</code>结尾的文件</li>
<li>已经提交的文件(git已经管理了此文件，仓库已经存在此文件)无法忽略解决办法：<ul>
<li>将此文件加到.gitignore中</li>
<li><code>git rm -r --cached my.txt</code> 将此文件的缓存在A分支删除并提交，如果my.txt有被修改则A分支还会保存此文件否则本地也会删除，远程将无此文件</li>
<li>法一：切换到B分支，将my.txt备份，将A分支提交拉取到B分支，此时B分支也会没有此文件，再将my.txt加入进来</li>
<li>法二：切换到B分支，修改my.txt，执行<code>git rm -r --cached my.txt</code>即可(拉取B进来也不会冲突)</li>
</ul>
</li>
</ol>
<h4 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h4><p><code>git mv README.txt README.md</code> 将 README.txt 文件重命名为 README.md（markdown格式）</p>
<h4 id="暂存工作区"><a href="#暂存工作区" class="headerlink" title="暂存工作区"></a>暂存工作区</h4><p><code>git stash</code> 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中（比如有紧急Bug需要修复）</p>
<p><code>git stash pop</code> 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复</p>
<p><code>git stash list</code> 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复</p>
<p><code>git stash clear</code> 清空Git栈</p>
<h4 id="commit对象"><a href="#commit对象" class="headerlink" title="commit对象"></a>commit对象</h4><p>commit 对象中 parent 属性指向前一个 commit，tree 属性指向一个 tree 对象（此 tree 对象可以指向文件或者文件夹）</p>
<p>HEAD 指向 master（只有一个分支的情况下），master 指向最新的 commit；HEAD~（或master~）表示前一个 commit；HEAD~2（或master~2）表示上上一个 commit，以此类推；HEAD~2^ 表示 HEAD~2 的父提交（此时和HEAD~3是同一个对象）</p>
<p>HEAD 的哈希码存放在 <code>.git/refs/heads/xxx</code> 文件中(当前处于xxx分支)</p>
<hr>
<p>参考文章</p>
]]></content>
      
        <categories>
            
            <category> arch </category>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery Validation - Form表单验证插件]]></title>
      <url>/2016/04/10/web/jquery/jquery-validation/</url>
      <content type="html"><![CDATA[<h2 id="jQuery-Validation-Plugin介绍"><a href="#jQuery-Validation-Plugin介绍" class="headerlink" title="jQuery Validation Plugin介绍"></a>jQuery Validation Plugin介绍</h2><blockquote>
<ul>
<li>jQuery Validate 插件为表单提供了强大的验证功能，让客户端表单验证变得更简单，同时提供了大量的定制选项，满足应用程序各种需求。该插件捆绑了一套有用的验证方法，包括 URL 和电子邮件验证，同时提供了一个用来编写用户自定义方法的 API。所有的捆绑方法默认使用英语作为错误信息，且已翻译成其他 37 种语言。</li>
<li><a href="http://jqueryvalidation.org/" target="_blank" rel="external"> jQuery Validate 官网</a></li>
<li><a href="https://github.com/jzaefferer/jquery-validation" target="_blank" rel="external">GitHub 源码</a></li>
<li><a href="https://github.com/oldinaction/git/tree/master/jQuery-Plugin/jquery-validation" target="_blank" rel="external">本教程源码下载 ( Demo1-Demo5 )</a></li>
</ul>
</blockquote>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul>
<li><p>引入JS文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- jquery库文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"dist/jquery.validate-1.15.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- jquery validate核心库文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"dist/additional-methods.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- jquery validate扩展验证方法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"dist/localization/messages_zh.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!-- jquery validate错误信息中文提示 --&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>写验证规则</p>
</li>
<li>调用验证方法: <code>$(&quot;#formId&quot;).validate();</code></li>
</ul>
<h2 id="牛刀小试"><a href="#牛刀小试" class="headerlink" title="牛刀小试"></a>牛刀小试</h2><h3 id="验证规则通过html标签属性或者class形式定义"><a href="#验证规则通过html标签属性或者class形式定义" class="headerlink" title="验证规则通过html标签属性或者class形式定义"></a>验证规则通过html标签属性或者class形式定义</h3><p>如：<code>&lt;input name=&quot;username&quot; class=&quot;required&quot; minlength=&quot;2&quot; maxlength=&quot;4&quot; /&gt;</code>表示“该字段为必须输入, 最小长度为2个字符, 最大长度为4个字符”。其中<code>class=&quot;required&quot;</code>还可写成<code>required=&quot;true&quot;</code>(同时支持Html5的required属性, 即省略值true)。</p>
<p><strong><a href="https://github.com/oldinaction/git/blob/master/jQuery-Plugin/jquery-validation/demo1.html" target="_blank" rel="external">Demo1</a></strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery Validate - 验证规则写在html标签上 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"formId"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">legend</span>&gt;</span>表单验证<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span> <span class="attr">minlength</span>=<span class="string">"2"</span> <span class="attr">maxlength</span>=<span class="string">"4"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>E-Mail<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"email"</span> <span class="attr">required</span>/&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"submit"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- jquery库文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- jquery validate核心库文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"lib/jquery.validate-1.15.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- jquery validate错误信息中文提示 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"lib/messages_zh.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="string">"#formId"</span>).validate();</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="验证规则写到-js-代码中"><a href="#验证规则写到-js-代码中" class="headerlink" title="验证规则写到 js 代码中"></a>验证规则写到 js 代码中</h3><p><strong><a href="https://github.com/oldinaction/git/blob/master/jQuery-Plugin/jquery-validation/demo2.html" target="_blank" rel="external">Demo2</a></strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery Validate - 验证规则写js代码中 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"formId"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">legend</span>&gt;</span>表单验证<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>text<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">cols</span>=<span class="string">"22"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"submit"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"lib/jquery-1.11.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"lib/jquery.validate-1.15.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"lib/messages_zh.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="string">"#formId"</span>).validate(&#123;</div><div class="line">            <span class="attr">rules</span>: &#123;</div><div class="line">                <span class="attr">name</span>: &#123;</div><div class="line">                    <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">                    <span class="attr">minlength</span>: <span class="number">2</span>,</div><div class="line">                    <span class="attr">remote</span>: &#123; <span class="comment">// ajax验证(后台只能返回 true/false )</span></div><div class="line">                        url: <span class="string">'demo2.php?action=add'</span>,</div><div class="line">                        <span class="attr">type</span>: <span class="string">'get'</span>,</div><div class="line">                        <span class="attr">data</span>: &#123; <span class="comment">// 传入参数</span></div><div class="line">                            name: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                                <span class="keyword">return</span> $(<span class="string">'#name'</span>).val();</div><div class="line">                            &#125;</div><div class="line">                        &#125;,</div><div class="line">                        <span class="attr">beforeSend</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                            <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">                        &#125;,</div><div class="line">                        <span class="attr">complete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                            <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                <span class="attr">text</span>: <span class="string">"required"</span> <span class="comment">//required的另一种写法</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// 可修改默认的提示信息</span></div><div class="line">            messages: &#123;</div><div class="line">                <span class="attr">name</span>: &#123;</div><div class="line">                    <span class="attr">required</span>: <span class="string">"需要输入名称"</span>,</div><div class="line">                    <span class="attr">remote</span>: <span class="string">"用户名已存在"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="attr">text</span>: <span class="string">"需要输入文本内容"</span></div><div class="line">            &#125;,</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="jQuery-Validation插件级别函数"><a href="#jQuery-Validation插件级别函数" class="headerlink" title="jQuery Validation插件级别函数"></a>jQuery Validation插件级别函数</h2><p>jQuery Validation插件级别函数包括 <code>validate()</code> 、 <code>valid()</code> 、 <code>rules()</code> , 这些函数可直接使用jQuery对象(form表单相关对象)调用。<a href="http://jqueryvalidation.org/documentation/" target="_blank" rel="external">官方API 文档</a></p>
<h3 id="validate-的可选参数介绍"><a href="#validate-的可选参数介绍" class="headerlink" title="validate() 的可选参数介绍"></a>validate() 的可选参数介绍</h3><ul>
<li><p>设置可选参数:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式一</span></div><div class="line">$(<span class="string">"#formId"</span>).validate(&#123;</div><div class="line">    <span class="attr">debug</span>: <span class="literal">false</span>, <span class="comment">// *** 是否开启debug模式: 只验证不提价表单 (默认false)</span></div><div class="line">    rules: &#123;&#125;, <span class="comment">// *** 相应字段的验证规则</span></div><div class="line">    messages: &#123;&#125;, <span class="comment">// *** 验证不通过的提示信息</span></div><div class="line">    groups: &#123;<span class="attr">username</span>:<span class="string">"fname lname"</span>&#125; <span class="comment">// 对一组元素的验证，用一个错误提示</span></div><div class="line">    submitHandler: <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span>&#123;&#125;, <span class="comment">// 验证通过表单提交句柄</span></div><div class="line">    invalidHandler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="comment">// 验证错误句柄</span></div><div class="line">    errorPlacement: <span class="function"><span class="keyword">function</span>(<span class="params">error, element</span>) </span>&#123;error.appendTo(element.parent());&#125; <span class="comment">// 更改错误信息显示的位置，把错误信息放在验证的元素后面</span></div><div class="line">    ignore: <span class="string">":hidden"</span>, <span class="comment">// *** 忽略某些表单元素不验证(插件默认已经忽略了隐藏元素不验证, 包括display:none的)</span></div><div class="line">    focusCleanup: <span class="literal">true</span>, <span class="comment">// *** 类型 Boolean，默认 false。当未通过验证的元素获得焦点时，移除错误提示（避免和 focusInvalid 一起使用）</span></div><div class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;&#125;, <span class="comment">// 字段通过验证后的回调</span></div><div class="line">    errorClass: <span class="string">'error'</span>, <span class="comment">// 类型 String，默认 "error"。指定错误提示的 css 类名，可以自定义错误提示的样式。</span></div><div class="line">    errorElement: <span class="string">'label'</span>, <span class="comment">// 类型 String，默认 "label"。指定使用什么标签标记错误</span></div><div class="line">    OnSubmit: <span class="literal">true</span>, <span class="comment">// 类型 Boolean，默认 true，指定是否提交时验证</span></div><div class="line">    onfocusout: <span class="literal">true</span>, <span class="comment">// 类型 Boolean，默认 true，指定是否在获取焦点时验证</span></div><div class="line">    onkeyup: <span class="literal">true</span>, <span class="comment">// 类型 Boolean，默认 true，指定是否在敲击键盘时验证</span></div><div class="line">    onclick: <span class="literal">true</span>, <span class="comment">// 类型 Boolean，默认 true，指定是否在鼠标点击时验证（一般验证 checkbox、radiobox）</span></div><div class="line">    focusInvalid: <span class="literal">true</span>, <span class="comment">// 类型 Boolean，默认 true。提交表单后，未通过验证的表单（第一个或提交之前获得焦点的未通过验证的表单）会获得焦点</span></div><div class="line">    wrapper: <span class="string">''</span>, <span class="comment">// 类型 String，指定使用什么标签再把上边的 errorELement 包起来</span></div><div class="line">    errorLabelContainer: <span class="string">''</span>, <span class="comment">// 类型 Selector，把错误信息统一放在一个容器里面</span></div><div class="line">    showErrors: , <span class="comment">// 类型 Funciotn，可以显示总共有多少个未通过验证的元素</span></div><div class="line">    highlight: , <span class="comment">// 类型 Funciotn，可以给未通过验证的元素加效果、闪烁等</span></div><div class="line">    unhighlight: , <span class="comment">// 类型 Funciotn，元素通过验证后去掉效果</span></div><div class="line">    ...更多参数...   </div><div class="line">&#125;);</div><div class="line"><span class="comment">// 方式二</span></div><div class="line">$.validator.setDefaults(&#123;</div><div class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">rules</span>: &#123;&#125;,</div><div class="line">    ...更多参数...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>submitHandler: 获取提交句柄</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">submitHandler:<span class="function"><span class="keyword">function</span>(<span class="params">form</span>)</span>&#123;</div><div class="line">    alert(<span class="string">"提交句柄: 此处可在验证完成后提交表单前进行相关操作!"</span>);   </div><div class="line">    form.submit();</div><div class="line">    <span class="comment">// $(form).ajaxSubmit(); // 使用ajax进行提交</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>invalidHandler: 验证出错时表单控制句柄</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">invalidHandler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $( <span class="string">"#info"</span> ).text( validator.numberOfInvalids() + <span class="string">"个字段验证出错"</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>errorPlacement: 更改错误信息显示的位置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">errorPlacement: <span class="function"><span class="keyword">function</span>(<span class="params">error, element</span>) </span>&#123;  </div><div class="line">    error.appendTo(element.parent()); <span class="comment">// 把错误信息放在验证的元素后面</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>success: 每个字段验证通过后处理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用法一: 加class</span></div><div class="line">success: <span class="string">"valid"</span>, <span class="comment">// 通过验证后给该字段加class属性值valid</span></div><div class="line"><span class="comment">// 用法二: 执行回调函数</span></div><div class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">errorElement</span>) </span>&#123;</div><div class="line">    errorElement.addClass(<span class="string">"valid"</span>).text(<span class="string">"Ok!"</span>);<span class="comment">// 通过验证后在该字段的错误提示信息元素上加valid类并设置text值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>groups: 对一组元素的验证，用一个错误提示</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">groups:&#123;</div><div class="line">		<span class="attr">username</span>:<span class="string">"fname lname"</span><span class="comment">// 还可用 errorPlacement 控制把出错信息放在哪里</span></div><div class="line">	&#125;,</div></pre></td></tr></table></figure>
</li>
</ul>
<p>关于更多参数介绍请前往<a href="http://jqueryvalidation.org/validate" target="_blank" rel="external">官方参数介绍</a></p>
<h3 id="valid-函数获取验证状态"><a href="#valid-函数获取验证状态" class="headerlink" title="valid() 函数获取验证状态"></a>valid() 函数获取验证状态</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $form = $(<span class="string">"#formId"</span>);</div><div class="line">$form.validate(); <span class="comment">// 对表单进行验证</span></div><div class="line">$( <span class="string">"button"</span> ).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert( <span class="string">"Valid: "</span> + $form.valid() ); <span class="comment">// 如果验证通过 $form.valid() 返回 true</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="rules-函数给字段增加-删除验证规则"><a href="#rules-函数给字段增加-删除验证规则" class="headerlink" title="rules() 函数给字段增加/删除验证规则"></a>rules() 函数给字段增加/删除验证规则</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">"#myinput"</span> ).rules(); <span class="comment">// 返回元素的验证规则</span></div><div class="line"><span class="comment">// 给"#myinput"增加一个最少输入2个字符的验证</span></div><div class="line">$( <span class="string">"#myinput"</span> ).rules( <span class="string">"add"</span>, &#123;</div><div class="line">  <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">minlength</span>: <span class="number">2</span></div><div class="line">&#125;);</div><div class="line">$( <span class="string">"#myinput"</span> ).rules( <span class="string">"remove"</span> ); <span class="comment">// 移除所有验证</span></div><div class="line">$( <span class="string">"#myinput"</span> ).rules( <span class="string">"remove"</span>, <span class="string">"min max"</span> ); <span class="comment">// 移除最小 最大值验证</span></div></pre></td></tr></table></figure>
<h2 id="Validator对象"><a href="#Validator对象" class="headerlink" title="Validator对象"></a>Validator对象</h2><p>Validator对象可通过 <code>var validator = $( &quot;#formId&quot; ).validate();</code> 获取(此时并没有进行验证, 验证的触发在提交表单、表单字段值发生变化等情况下发生), 他包含一些公共方法和静态方法。</p>
<ul>
<li><p>公用方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">validator.form(); <span class="comment">// 验证表单, 返回 true/false</span></div><div class="line">validator.element( <span class="string">"#myinput"</span> ); <span class="comment">// 验证某个表单元素, 返回 true/false</span></div><div class="line">validator.resetForm(); <span class="comment">// 重置验证表单状态</span></div><div class="line">validator.showErrors(&#123; <span class="comment">// 不管该字段是否通过验证, 都展示提示信息</span></div><div class="line">  <span class="string">"username"</span>: <span class="string">"用户名是必填箱哦"</span></div><div class="line">&#125;);</div><div class="line">validator.numberOfInvalids(); <span class="comment">// 经过验证后, 获取验证不通过的字段个数</span></div></pre></td></tr></table></figure>
</li>
<li><p>静态方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$.validator.addMethod( name, method [, message ] ); <span class="comment">// 自定义验证方法</span></div><div class="line">$.validator.format( template, argument, argumentN… ); <span class="comment">// 提示信息解析函数</span></div><div class="line">$.validator.setDefaults( options ); <span class="comment">// 设置默认参数</span></div><div class="line">$.validator.addClassRules( name, rules ); <span class="comment">// 增加css类规则, 只要是这个类的字段都进行相关验证。只有当常规验证通过后才会验证加了class的字段</span></div></pre></td></tr></table></figure>
<p>实例 ( 更多: <strong><a href="https://github.com/oldinaction/git/blob/master/jQuery-Plugin/jquery-validation/demo3.html" target="_blank" rel="external">Demo3</a></strong> )</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> template = jQuery.validator.format(<span class="string">"&#123;0&#125; 不是一个有效值"</span>);</div><div class="line">alert(template(<span class="string">"abc"</span>));<span class="comment">// abc不是一个有效值</span></div><div class="line"></div><div class="line">$.validator.addClassRules(&#123;</div><div class="line">  <span class="attr">mydate</span>: &#123;</div><div class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>$.validator.methods.XXX.call();</p>
</li>
</ul>
<p>如：<code>$.validator.methods.digits.call(this, value, element)</code> 在自定义函数中常需要调用另外一个验证函数。this指$.validator, value 和 element 是 digits 函数需要接受的参数</p>
<h2 id="验证函数"><a href="#验证函数" class="headerlink" title="验证函数"></a>验证函数</h2><h3 id="插件内置验证函数"><a href="#插件内置验证函数" class="headerlink" title="插件内置验证函数"></a>插件内置验证函数</h3><table>
<thead>
<tr>
<th>名称</th>
<th>描述 ( 返回值类型均为Boolean )</th>
</tr>
</thead>
<tbody>
<tr>
<td>required()</td>
<td>必填验证元素</td>
</tr>
<tr>
<td>required(dependency-expression)</td>
<td>必填元素依赖于表达式的结果(required: “#mycheck:checked” 表达式的值为真，则需要验证。)</td>
</tr>
<tr>
<td>required(dependency-callback)</td>
<td>必填元素依赖于回调函数的结果(返回为真，表示需要验证)</td>
</tr>
<tr>
<td>remote(url)</td>
<td>请求远程校验</td>
</tr>
<tr>
<td>minlength(length)</td>
<td>设置最小长度</td>
</tr>
<tr>
<td>maxlength(length)</td>
<td>设置最大长度</td>
</tr>
<tr>
<td>rangelength(range)</td>
<td>设置一个长度范围 [min,max]</td>
</tr>
<tr>
<td>min(value)</td>
<td>设置最小值</td>
</tr>
<tr>
<td>max(value)</td>
<td>设置最大值</td>
</tr>
<tr>
<td>range(range)</td>
<td>设置值的范围</td>
</tr>
<tr>
<td>email()</td>
<td>验证电子邮箱格式</td>
</tr>
<tr>
<td>url()</td>
<td>验证 URL 格式</td>
</tr>
<tr>
<td>date()</td>
<td>验证日期格式（类似 30/30/2008 的格式，不验证日期准确性只验证格式）</td>
</tr>
<tr>
<td>dateISO()</td>
<td>验证 ISO 类型的日期格式</td>
</tr>
<tr>
<td>digits()</td>
<td>验证自然数(0、1、2)</td>
</tr>
<tr>
<td>number()</td>
<td>验证十进制数字(-1.2、0、1、1.5)</td>
</tr>
<tr>
<td>equalTo(other)</td>
<td>验证两个输入框的内容是否相同</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>radio、checkbox、select</strong> 的验证：</p>
<ul>
<li>radio的required表示必须选中一个</li>
<li>checkbox的required表示必须选中</li>
<li>select的required表示选中的value不能为空</li>
<li>checkbox的minlength表示必须选中的最小个数,maxlength表示最大的选中个数,rangelength:[2,3]表示选中个数区间</li>
<li>select(multiple=”multiple”)的minlength表示选中的最小个数（可多选的select）,maxlength表示最大的选中个 数,rangelength:[2,3]表示选中个数区间</li>
</ul>
</blockquote>
<h3 id="插件扩展验证函数-更多请看additional-methods-js"><a href="#插件扩展验证函数-更多请看additional-methods-js" class="headerlink" title="插件扩展验证函数(更多请看additional-methods.js)"></a>插件扩展验证函数(更多请看<code>additional-methods.js</code>)</h3><table>
<thead>
<tr>
<th>名称</th>
<th>描述 ( 返回值类型均为Boolean )</th>
</tr>
</thead>
<tbody>
<tr>
<td>accept(extension)</td>
<td>验证相同后缀名的字符串</td>
</tr>
<tr>
<td>creditcard()</td>
<td>验证信用卡号</td>
</tr>
<tr>
<td>phoneUS()</td>
<td>验证美式的电话号码</td>
</tr>
<tr>
<td>ipv4()</td>
<td>验证ipv4地址</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<h3 id="validator-addMethod-自定义验证方法"><a href="#validator-addMethod-自定义验证方法" class="headerlink" title="$.validator.addMethod() 自定义验证方法"></a>$.validator.addMethod() 自定义验证方法</h3><p>验证函数可以写在html页面, 也可以写在 <code>additional-methods.js</code> 文件中, 对于大型项目第二种常用。(实例: <strong><a href="https://github.com/oldinaction/git/blob/master/jQuery-Plugin/jquery-validation/demo4.html" target="_blank" rel="external">Demo4</a></strong>)</p>
<ul>
<li><p>方法的定义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// value: 当前元素的值 element: 当前元素 (this.optional(element) 表示只有此元素输入值才校验)</span></div><div class="line">$.validator.addMethod(<span class="string">"domain"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, element</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || <span class="regexp">/^http:\/\/www.aezo.cn\//</span>.test(value);</div><div class="line">&#125;, <span class="string">"链接请以本网站地址http://www.aezo.cn/开头"</span>);</div><div class="line"></div><div class="line"><span class="comment">// params传递的额外参数</span></div><div class="line">$.validator.addMethod(<span class="string">"value"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, element, params</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> flag = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">if</span>($.validator.methods.digits.call(<span class="keyword">this</span>, value, element)) &#123;</div><div class="line">      <span class="keyword">var</span> a = <span class="built_in">parseInt</span>($(params[<span class="number">0</span>]).val());</div><div class="line">      <span class="keyword">var</span> b = <span class="built_in">parseInt</span>($(params[<span class="number">1</span>]).val());</div><div class="line">      <span class="keyword">if</span>(value == a + b) &#123;</div><div class="line">        flag = <span class="literal">true</span>;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> flag;</div><div class="line">&#125;, $.validator.format(<span class="string">"请正确输入 &#123;0&#125; + &#123;1&#125; 的值"</span>));</div><div class="line"></div><div class="line"><span class="comment">// params传递的额外参数</span></div><div class="line">$.validator.addMethod(<span class="string">"notice"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, element, params</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> flag = <span class="literal">false</span>;</div><div class="line">  params[<span class="number">0</span>] = <span class="string">"错误提示"</span>;</div><div class="line">  <span class="keyword">return</span> flag;</div><div class="line">&#125;, <span class="string">"&#123;0&#125;"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>方法的调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#formId"</span>).validate(&#123;</div><div class="line">    <span class="attr">rules</span>: &#123;</div><div class="line">        <span class="attr">site</span>: &#123;</div><div class="line">          <span class="attr">domain</span>: <span class="literal">true</span>,</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">value</span>: &#123;</div><div class="line">          <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">          <span class="attr">value</span>: [<span class="string">"input[name='a']"</span>, <span class="string">"input[name='b']"</span>],</div><div class="line">          <span class="comment">// 也可以用map传递参数 value: &#123;name: "smalle", age: 18&#125;</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="jQuery-Validation-使用心得"><a href="#jQuery-Validation-使用心得" class="headerlink" title="jQuery Validation 使用心得"></a>jQuery Validation 使用心得</h2><h3 id="关于触发元素验证"><a href="#关于触发元素验证" class="headerlink" title="关于触发元素验证"></a>关于触发元素验证</h3><p>我们一般是使用 <code>onchange</code> 事件做表单验证, 就是输入框的值发生改变才验证。而 jQuery Validation 暂时不支持此种方式来验证，他是使用点击、元素获取失去焦点、键盘按下等来进行触发验证的。一般我们的新增和修改写在同一个页面，这就产生了一个问题，有这样一种情况：我们要判断某个用户进行用户名修改时数据库中是否有重复的。当我们进到修改页面，不修改用户名，只是让他获取焦点后再失去焦点，这样插件就会提示验证不通过。解决办法是自己写一个扩展方法，将该字段原来的值以参数的形式传入，然后和现在的值进行比较。部分代码如下，具体见 <strong><a href="https://github.com/oldinaction/Git/blob/master/jQuery-Plugin/jquery-validation/demo5.html" target="_blank" rel="external">Demo5</a></strong> (可与<a href="https://github.com/oldinaction/git/blob/master/jQuery-Plugin/jquery-validation/demo2.html" target="_blank" rel="external">Demo2</a>对比)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    $.validator.addMethod(<span class="string">"checkName"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, element, params</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> flag = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(params == value) &#123;</div><div class="line">            flag = <span class="literal">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                <span class="attr">url</span>: <span class="string">'demo5.php?action=add'</span>,</div><div class="line">                <span class="attr">type</span>: <span class="string">'get'</span>,</div><div class="line">                <span class="attr">data</span>: &#123;<span class="string">"name"</span>: value&#125;,</div><div class="line">                <span class="attr">async</span>: <span class="literal">false</span>, <span class="comment">// 关闭异步比较重要, 否则 flag 返回一直是 false</span></div><div class="line">                success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span>(data == <span class="string">'true'</span>) &#123; <span class="comment">// 存在此用户名</span></div><div class="line">                        flag = <span class="literal">false</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(data == <span class="string">'false'</span>) &#123; <span class="comment">// 不存在此用户名</span></div><div class="line">                        flag = <span class="literal">true</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">"后台出错"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">"ajax出错"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag;</div><div class="line">    &#125;, <span class="string">"此用户名已经存在"</span>);</div><div class="line"></div><div class="line">    $(<span class="string">"#formId"</span>).validate(&#123;</div><div class="line">        <span class="attr">rules</span>: &#123;</div><div class="line">            <span class="attr">name</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">minlength</span>: <span class="number">2</span>,</div><div class="line">                <span class="attr">checkName</span>: $(<span class="string">"input[name='name']"</span>).val(),</div><div class="line">            &#125;,</div><div class="line">        &#125;,</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>参考网址</p>
<ul>
<li><a href="http://jqueryvalidation.org/documentation/" target="_blank" rel="external">http://jqueryvalidation.org/documentation/</a></li>
<li><a href="http://www.runoob.com/jquery/jquery-plugin-validate.html" target="_blank" rel="external">http://www.runoob.com/jquery/jquery-plugin-validate.html</a></li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
            <tag> validation </tag>
            
            <tag> metronic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你好，世界]]></title>
      <url>/2016/04/10/others/hello-world/</url>
      <content type="html"><![CDATA[<p>我的第一篇文章</p>

<h2 id="github-jeykll-markdown个人书写习惯"><a href="#github-jeykll-markdown个人书写习惯" class="headerlink" title="github-jeykll-markdown个人书写习惯"></a>github-jeykll-markdown个人书写习惯</h2><blockquote>
<p>2017-07-01 之后使用hexo书写博客, 格式依然可用</p>
</blockquote>
<h3 id="元信息"><a href="#元信息" class="headerlink" title="元信息"></a>元信息</h3><p>categories和tage都可以有多个</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">categories: [cat1, cat2]</div><div class="line">tags: [tag1, tag2, tag3]</div></pre></td></tr></table></figure>
<h3 id="md语法"><a href="#md语法" class="headerlink" title="md语法"></a>md语法</h3><ul>
<li>md文件中可以使用html标签</li>
<li><code>---</code>代表分割线</li>
</ul>
<h3 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h3><p>正文的第一级标题用h2(<code>##</code>)，标题和字段间要有换行</p>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li><p>列表（有序/无序）下面显示 <strong>代码、引用、图片</strong> 时：相对列表的该子项代码需要多缩进一个Tab（4个空格），且中间要空行，如：</p>
<pre>
- 标题

  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">...</div></pre></td></tr></table></figure>

</pre></li>
<li><p>引用需要上下都空一行，列表只需要在上面空一行</p>
</li>
<li><p>子列表基于父列表要有一个Tab缩进（4个空格），中间无需空行</p>
</li>
</ul>
<h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>脚注支持链接跳转，注意脚注与被批注文本之间有一个空格</p>
<pre>
标题或者文字 [^1]

---

参考文章

[^1]: [http://blog.aezo.cn](http://blog.aezo.cn)
</pre>


<h2 id="github-hexo-markdown个人书写习惯"><a href="#github-hexo-markdown个人书写习惯" class="headerlink" title="github-hexo-markdown个人书写习惯"></a>github-hexo-markdown个人书写习惯</h2><h3 id="博客源码管理和博客更新"><a href="#博客源码管理和博客更新" class="headerlink" title="博客源码管理和博客更新"></a>博客源码管理和博客更新</h3><ul>
<li>本地处于master分支，远程有master(为博客渲染后的代码)和source(博客源码, 可设为远程默认分支)两个分支</li>
<li><p><strong>修改文章后保存源码</strong></p>
  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git add .</div><div class="line"><span class="meta">$</span> git commit -am "update blog"</div><div class="line"><span class="meta">$</span> git push origin master:source</div></pre></td></tr></table></figure>
</li>
<li><p><strong>更新博客</strong> <code>hexo d -g</code></p>
<ul>
<li><p><code>_config.yml</code>文件中需要指向master分支</p>
  <figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/aezocn/aezocn.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><ul>
<li><code>hexo clean</code> 清除缓存(如果未修改配置文件可不运行)</li>
<li><code>hexo g</code>/<code>hexo generate</code> 静态文件生成</li>
<li><code>hexo s -p 5000</code>/<code>hexo server</code> 启动本地服务器(本地测试)</li>
<li><code>hexo d</code>/<code>hexo deploy</code> 部署到github</li>
</ul>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>图片格式如：<code>![hello](/data/images/2017/07/hello.png)</code></li>
</ul>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><ul>
<li>NexT主题本地搜索<ul>
<li>安装：<code>npm install --save hexo-generator-search</code></li>
<li>开启local_search</li>
<li>还可手动写本地搜索功能 [^1]</li>
</ul>
</li>
<li>基于Swiftype的搜索</li>
</ul>
<hr>
<p>[^1]: <a href="http://www.hahack.com/codes/local-search-engine-for-hexo/" target="_blank" rel="external">jQuery-based Local Search Engine for Hexo</a></p>
]]></content>
      
        <categories>
            
            <category> others </category>
            
        </categories>
        
        
        <tags>
            
            <tag> others </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
